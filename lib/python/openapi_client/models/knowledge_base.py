# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.12.19
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class KnowledgeBase(BaseModel):
    """
    KnowledgeBase
    """
    kb_id: StrictStr = Field(..., alias="kbId")
    organisation_id: StrictStr = Field(..., alias="organisationId")
    name: StrictStr = Field(...)
    email: StrictStr = Field(...)
    security_id: StrictStr = Field(..., alias="securityId")
    created: StrictInt = Field(...)
    max_queries_per_day: StrictInt = Field(..., alias="maxQueriesPerDay")
    analytics_window_in_months: StrictInt = Field(..., alias="analyticsWindowInMonths")
    enabled: StrictBool = Field(...)
    operator_enabled: StrictBool = Field(..., alias="operatorEnabled")
    capacity_warnings: StrictBool = Field(..., alias="capacityWarnings")
    index_schedule: StrictStr = Field(..., alias="indexSchedule")
    last_index_optimization_time: StrictInt = Field(..., alias="lastIndexOptimizationTime")
    project_kb: StrictBool = Field(..., alias="projectKb")
    __properties = ["kbId", "organisationId", "name", "email", "securityId", "created", "maxQueriesPerDay", "analyticsWindowInMonths", "enabled", "operatorEnabled", "capacityWarnings", "indexSchedule", "lastIndexOptimizationTime", "projectKb"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> KnowledgeBase:
        """Create an instance of KnowledgeBase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> KnowledgeBase:
        """Create an instance of KnowledgeBase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return KnowledgeBase.parse_obj(obj)

        _obj = KnowledgeBase.parse_obj({
            "kb_id": obj.get("kbId"),
            "organisation_id": obj.get("organisationId"),
            "name": obj.get("name"),
            "email": obj.get("email"),
            "security_id": obj.get("securityId"),
            "created": obj.get("created"),
            "max_queries_per_day": obj.get("maxQueriesPerDay"),
            "analytics_window_in_months": obj.get("analyticsWindowInMonths"),
            "enabled": obj.get("enabled"),
            "operator_enabled": obj.get("operatorEnabled"),
            "capacity_warnings": obj.get("capacityWarnings"),
            "index_schedule": obj.get("indexSchedule"),
            "last_index_optimization_time": obj.get("lastIndexOptimizationTime"),
            "project_kb": obj.get("projectKb")
        })
        return _obj


