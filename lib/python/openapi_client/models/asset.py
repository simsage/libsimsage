# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.14.12
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional, Union
from pydantic import BaseModel, Field, StrictBytes, StrictInt, StrictStr, conlist
from openapi_client.models.asset_acl import AssetACL

class Asset(BaseModel):
    """
    the asset that was seen  # noqa: E501
    """
    url: StrictStr = Field(...)
    parent_url: StrictStr = Field(..., alias="parentUrl")
    mime_type: StrictStr = Field(..., alias="mimeType")
    acls: conlist(AssetACL) = Field(...)
    delta_root_id: StrictStr = Field(..., alias="deltaRootId")
    title: StrictStr = Field(...)
    author: StrictStr = Field(...)
    binary_size: StrictInt = Field(..., alias="binarySize")
    template: StrictStr = Field(...)
    created: StrictInt = Field(...)
    last_modified: StrictInt = Field(..., alias="lastModified")
    metadata: Dict[str, StrictStr] = Field(...)
    data: Optional[Union[StrictBytes, StrictStr]] = None
    preview_image: Optional[Union[StrictBytes, StrictStr]] = Field(None, alias="previewImage")
    __properties = ["url", "parentUrl", "mimeType", "acls", "deltaRootId", "title", "author", "binarySize", "template", "created", "lastModified", "metadata", "data", "previewImage"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Asset:
        """Create an instance of Asset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in acls (list)
        _items = []
        if self.acls:
            for _item in self.acls:
                if _item:
                    _items.append(_item.to_dict())
            _dict['acls'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Asset:
        """Create an instance of Asset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Asset.parse_obj(obj)

        _obj = Asset.parse_obj({
            "url": obj.get("url"),
            "parent_url": obj.get("parentUrl"),
            "mime_type": obj.get("mimeType"),
            "acls": [AssetACL.from_dict(_item) for _item in obj.get("acls")] if obj.get("acls") is not None else None,
            "delta_root_id": obj.get("deltaRootId"),
            "title": obj.get("title"),
            "author": obj.get("author"),
            "binary_size": obj.get("binarySize"),
            "template": obj.get("template"),
            "created": obj.get("created"),
            "last_modified": obj.get("lastModified"),
            "metadata": obj.get("metadata"),
            "data": obj.get("data"),
            "preview_image": obj.get("previewImage")
        })
        return _obj


