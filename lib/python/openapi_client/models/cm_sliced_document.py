# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.14.12
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class CMSlicedDocument(BaseModel):
    """
    CMSlicedDocument
    """
    project_id: StrictStr = Field(..., alias="projectId")
    slice_id: StrictStr = Field(..., alias="sliceId")
    source: StrictStr = Field(...)
    extension: StrictStr = Field(...)
    document_key: StrictStr = Field(..., alias="documentKey")
    title: StrictStr = Field(...)
    size: StrictInt = Field(...)
    folder_id: StrictStr = Field(..., alias="folderId")
    count: StrictInt = Field(...)
    confidence: StrictInt = Field(...)
    status: StrictStr = Field(...)
    assigned_user: StrictStr = Field(..., alias="assignedUser")
    owns_item: StrictBool = Field(..., alias="ownsItem")
    can_claim: StrictBool = Field(..., alias="canClaim")
    __properties = ["projectId", "sliceId", "source", "extension", "documentKey", "title", "size", "folderId", "count", "confidence", "status", "assignedUser", "ownsItem", "canClaim"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMSlicedDocument:
        """Create an instance of CMSlicedDocument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMSlicedDocument:
        """Create an instance of CMSlicedDocument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMSlicedDocument.parse_obj(obj)

        _obj = CMSlicedDocument.parse_obj({
            "project_id": obj.get("projectId"),
            "slice_id": obj.get("sliceId"),
            "source": obj.get("source"),
            "extension": obj.get("extension"),
            "document_key": obj.get("documentKey"),
            "title": obj.get("title"),
            "size": obj.get("size"),
            "folder_id": obj.get("folderId"),
            "count": obj.get("count"),
            "confidence": obj.get("confidence"),
            "status": obj.get("status"),
            "assigned_user": obj.get("assignedUser"),
            "owns_item": obj.get("ownsItem"),
            "can_claim": obj.get("canClaim")
        })
        return _obj


