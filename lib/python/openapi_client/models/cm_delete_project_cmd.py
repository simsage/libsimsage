# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.11.4
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class CMDeleteProjectCmd(BaseModel):
    """
    CMDeleteProjectCmd
    """
    organisation_id: StrictStr = Field(..., alias="organisationId")
    kb_id: StrictStr = Field(..., alias="kbId")
    project_id: StrictStr = Field(..., alias="projectId")
    job_id: StrictStr = Field(..., alias="jobId")
    return_address: StrictStr = Field(..., alias="returnAddress")
    error_str: StrictStr = Field(..., alias="errorStr")
    time_out: StrictInt = Field(..., alias="timeOut")
    var_async: StrictBool = Field(..., alias="async")
    is_return_result: StrictBool = Field(..., alias="isReturnResult")
    return_result: Optional[StrictBool] = Field(None, alias="returnResult")
    __properties = ["organisationId", "kbId", "projectId", "jobId", "returnAddress", "errorStr", "timeOut", "async", "isReturnResult", "returnResult"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMDeleteProjectCmd:
        """Create an instance of CMDeleteProjectCmd from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMDeleteProjectCmd:
        """Create an instance of CMDeleteProjectCmd from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMDeleteProjectCmd.parse_obj(obj)

        _obj = CMDeleteProjectCmd.parse_obj({
            "organisation_id": obj.get("organisationId"),
            "kb_id": obj.get("kbId"),
            "project_id": obj.get("projectId"),
            "job_id": obj.get("jobId"),
            "return_address": obj.get("returnAddress"),
            "error_str": obj.get("errorStr"),
            "time_out": obj.get("timeOut"),
            "var_async": obj.get("async"),
            "is_return_result": obj.get("isReturnResult"),
            "return_result": obj.get("returnResult")
        })
        return _obj


