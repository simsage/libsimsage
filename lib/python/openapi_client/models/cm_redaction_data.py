# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.14.12
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, validator
from openapi_client.models.cm_redaction import CMRedaction

class CMRedactionData(BaseModel):
    """
    CMRedactionData
    """
    organisation_id: StrictStr = Field(..., alias="organisationId")
    kb_id: StrictStr = Field(..., alias="kbId")
    project_id: StrictStr = Field(..., alias="projectId")
    url: StrictStr = Field(...)
    redactions: conlist(CMRedaction) = Field(...)
    document_status: StrictStr = Field(..., alias="documentStatus")
    document_action: StrictStr = Field(..., alias="documentAction")
    annotated: StrictBool = Field(...)
    create_for_export: StrictBool = Field(..., alias="createForExport")
    export_native_format: StrictBool = Field(..., alias="exportNativeFormat")
    __properties = ["organisationId", "kbId", "projectId", "url", "redactions", "documentStatus", "documentAction", "annotated", "createForExport", "exportNativeFormat"]

    @validator('document_status')
    def document_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('NEW', 'IN_PROGRESS', 'COMPLETED'):
            raise ValueError("must be one of enum values ('NEW', 'IN_PROGRESS', 'COMPLETED')")
        return value

    @validator('document_action')
    def document_action_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('NONE', 'REDACT', 'IGNORE', 'DELETE'):
            raise ValueError("must be one of enum values ('NONE', 'REDACT', 'IGNORE', 'DELETE')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMRedactionData:
        """Create an instance of CMRedactionData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in redactions (list)
        _items = []
        if self.redactions:
            for _item in self.redactions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['redactions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMRedactionData:
        """Create an instance of CMRedactionData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMRedactionData.parse_obj(obj)

        _obj = CMRedactionData.parse_obj({
            "organisation_id": obj.get("organisationId"),
            "kb_id": obj.get("kbId"),
            "project_id": obj.get("projectId"),
            "url": obj.get("url"),
            "redactions": [CMRedaction.from_dict(_item) for _item in obj.get("redactions")] if obj.get("redactions") is not None else None,
            "document_status": obj.get("documentStatus"),
            "document_action": obj.get("documentAction"),
            "annotated": obj.get("annotated"),
            "create_for_export": obj.get("createForExport"),
            "export_native_format": obj.get("exportNativeFormat")
        })
        return _obj


