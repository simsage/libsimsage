# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.11.4
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist

class ContextItem(BaseModel):
    """
    ContextItem
    """
    kb_id: StrictStr = Field(..., alias="kbId")
    created: StrictInt = Field(...)
    name_value: Dict[str, StrictStr] = Field(..., alias="nameValue")
    syn_set_lemma: StrictStr = Field(..., alias="synSetLemma")
    syn_set_cloud: conlist(StrictStr) = Field(..., alias="synSetCloud")
    __properties = ["kbId", "created", "nameValue", "synSetLemma", "synSetCloud"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ContextItem:
        """Create an instance of ContextItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ContextItem:
        """Create an instance of ContextItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ContextItem.parse_obj(obj)

        _obj = ContextItem.parse_obj({
            "kb_id": obj.get("kbId"),
            "created": obj.get("created"),
            "name_value": obj.get("nameValue"),
            "syn_set_lemma": obj.get("synSetLemma"),
            "syn_set_cloud": obj.get("synSetCloud")
        })
        return _obj


