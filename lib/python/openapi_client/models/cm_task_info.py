# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.12.19
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class CMTaskInfo(BaseModel):
    """
    CMTaskInfo
    """
    task_id: StrictStr = Field(..., alias="taskId")
    project_id: StrictStr = Field(..., alias="projectId")
    organisation_id: StrictStr = Field(..., alias="organisationId")
    source_kb_id: StrictStr = Field(..., alias="sourceKbId")
    crawler_kb_id: Optional[StrictStr] = Field(None, alias="crawlerKbId")
    project_type: StrictStr = Field(..., alias="projectType")
    project_title: StrictStr = Field(..., alias="projectTitle")
    project_narrative: StrictStr = Field(..., alias="projectNarrative")
    slice_id: Optional[StrictStr] = Field(None, alias="sliceId")
    process_id: StrictStr = Field(..., alias="processId")
    process_name: StrictStr = Field(..., alias="processName")
    task_type: StrictStr = Field(..., alias="taskType")
    task_name: StrictStr = Field(..., alias="taskName")
    date_created: datetime = Field(..., alias="dateCreated")
    date_completed: Optional[datetime] = Field(None, alias="dateCompleted")
    potential_users: StrictStr = Field(..., alias="potentialUsers")
    excluded_users: StrictStr = Field(..., alias="excludedUsers")
    potential_groups: StrictStr = Field(..., alias="potentialGroups")
    assigned_user: Optional[StrictStr] = Field(None, alias="assignedUser")
    __properties = ["taskId", "projectId", "organisationId", "sourceKbId", "crawlerKbId", "projectType", "projectTitle", "projectNarrative", "sliceId", "processId", "processName", "taskType", "taskName", "dateCreated", "dateCompleted", "potentialUsers", "excludedUsers", "potentialGroups", "assignedUser"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMTaskInfo:
        """Create an instance of CMTaskInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMTaskInfo:
        """Create an instance of CMTaskInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMTaskInfo.parse_obj(obj)

        _obj = CMTaskInfo.parse_obj({
            "task_id": obj.get("taskId"),
            "project_id": obj.get("projectId"),
            "organisation_id": obj.get("organisationId"),
            "source_kb_id": obj.get("sourceKbId"),
            "crawler_kb_id": obj.get("crawlerKbId"),
            "project_type": obj.get("projectType"),
            "project_title": obj.get("projectTitle"),
            "project_narrative": obj.get("projectNarrative"),
            "slice_id": obj.get("sliceId"),
            "process_id": obj.get("processId"),
            "process_name": obj.get("processName"),
            "task_type": obj.get("taskType"),
            "task_name": obj.get("taskName"),
            "date_created": obj.get("dateCreated"),
            "date_completed": obj.get("dateCompleted"),
            "potential_users": obj.get("potentialUsers"),
            "excluded_users": obj.get("excludedUsers"),
            "potential_groups": obj.get("potentialGroups"),
            "assigned_user": obj.get("assignedUser")
        })
        return _obj


