# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.11.4
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from openapi_client.models.cm_document_acl import CMDocumentAcl
from openapi_client.models.cm_document_audit import CMDocumentAudit
from openapi_client.models.cm_document_note import CMDocumentNote
from openapi_client.models.cm_document_version import CMDocumentVersion

class CMDocument(BaseModel):
    """
    A document is the main data carrying entity in SimSage.  A document can literally be a document like a pdf file found on a file-server, or a database-record, or something captured from a remote system like a web-page, or an image on a web-page.  # noqa: E501
    """
    organisation_id: StrictStr = Field(..., alias="organisationId", description="the organisation (its guid id)")
    kb_id: StrictStr = Field(..., alias="kbId", description="the knowledge-base id (its guid id)")
    url: StrictStr = Field(..., description="A unique URL for this document.")
    url_id: StrictInt = Field(..., alias="urlId", description="A unique URL-id for this document.")
    origin: StrictStr = Field(..., description="Where the document was sourced from (for external documents).")
    title: StrictStr = Field(..., description="The title of this document, can be empty.")
    author: StrictStr = Field(..., description="The author of this document, can be empty.")
    document_type: StrictStr = Field(..., alias="documentType", description="The file extension of this document, its type.")
    created: StrictInt = Field(..., description="a unix-timestamp for the creation date-time of this document")
    uploaded: StrictInt = Field(..., description="a unix-timestamp for the upload date-time of this document to SimSage")
    last_modified: StrictInt = Field(..., alias="lastModified", description="a unix-timestamp for the last-modified date-time of this document")
    crawled: StrictInt = Field(..., description="a unix-timestamp for when a SimSage crawler last looked at this document")
    converted: StrictInt = Field(..., description="a unix-timestamp for when a SimSage converter last looked at this document")
    parsed: StrictInt = Field(..., description="a unix-timestamp for when a SimSage parser last looked at this document")
    indexed: StrictInt = Field(..., description="a unix-timestamp for when a SimSage indexer last looked at this document")
    previewed: StrictInt = Field(..., description="a unix-timestamp for when a SimSage image-converter last looked at this document")
    change_hash: StrictStr = Field(..., alias="changeHash", description="A unique hash-string identifying SimSage changes to this document.  SimSage uses the value to see if the content has changed since last.")
    content_hash: StrictStr = Field(..., alias="contentHash", description="A unique hash-string identifying the content of this document.  SimSage uses this value to find exact duplicates.")
    source_id: StrictInt = Field(..., alias="sourceId", description="the source-id of this crawler (ie. the crawler's id)")
    parent_url: StrictStr = Field(..., alias="parentUrl", description="a related url if there is parentage to be considered for an item")
    acls: conlist(CMDocumentAcl) = Field(..., description="a list of the exact ACLs applying to this document (can be empty)")
    metadata: Dict[str, StrictStr] = Field(..., description="a series of name values for other metadata values found in the container of this document")
    num_sentences: StrictInt = Field(..., alias="numSentences", description="the number of sentences in this document.")
    num_words: StrictInt = Field(..., alias="numWords", description="the total number of words in this document.")
    num_relationships: StrictInt = Field(..., alias="numRelationships", description="the total number of relationships in this document.")
    binary_size: StrictInt = Field(..., alias="binarySize", description="the size of the original document's binary in bytes.")
    text_size: StrictInt = Field(..., alias="textSize", description="the size of the converted document's text in bytes.")
    version_list: conlist(CMDocumentVersion) = Field(..., alias="versionList", description="list of binary versions of this document")
    note_list: conlist(CMDocumentNote) = Field(..., alias="noteList", description="list of checkout notes about this document")
    activity_list: conlist(CMDocumentAudit) = Field(..., alias="activityList", description="list of activities for the last two months of this document")
    type_description: StrictStr = Field(..., alias="typeDescription", description="a description of the type of this document")
    filename: StrictStr = Field(..., description="the filename of this document in the DMS system")
    folder_id: StrictStr = Field(..., alias="folderId", description="the folderId of this item in the DMS system")
    __properties = ["organisationId", "kbId", "url", "urlId", "origin", "title", "author", "documentType", "created", "uploaded", "lastModified", "crawled", "converted", "parsed", "indexed", "previewed", "changeHash", "contentHash", "sourceId", "parentUrl", "acls", "metadata", "numSentences", "numWords", "numRelationships", "binarySize", "textSize", "versionList", "noteList", "activityList", "typeDescription", "filename", "folderId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMDocument:
        """Create an instance of CMDocument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in acls (list)
        _items = []
        if self.acls:
            for _item in self.acls:
                if _item:
                    _items.append(_item.to_dict())
            _dict['acls'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in version_list (list)
        _items = []
        if self.version_list:
            for _item in self.version_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['versionList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in note_list (list)
        _items = []
        if self.note_list:
            for _item in self.note_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['noteList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in activity_list (list)
        _items = []
        if self.activity_list:
            for _item in self.activity_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['activityList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMDocument:
        """Create an instance of CMDocument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMDocument.parse_obj(obj)

        _obj = CMDocument.parse_obj({
            "organisation_id": obj.get("organisationId"),
            "kb_id": obj.get("kbId"),
            "url": obj.get("url"),
            "url_id": obj.get("urlId"),
            "origin": obj.get("origin"),
            "title": obj.get("title"),
            "author": obj.get("author"),
            "document_type": obj.get("documentType"),
            "created": obj.get("created"),
            "uploaded": obj.get("uploaded"),
            "last_modified": obj.get("lastModified"),
            "crawled": obj.get("crawled"),
            "converted": obj.get("converted"),
            "parsed": obj.get("parsed"),
            "indexed": obj.get("indexed"),
            "previewed": obj.get("previewed"),
            "change_hash": obj.get("changeHash"),
            "content_hash": obj.get("contentHash"),
            "source_id": obj.get("sourceId"),
            "parent_url": obj.get("parentUrl"),
            "acls": [CMDocumentAcl.from_dict(_item) for _item in obj.get("acls")] if obj.get("acls") is not None else None,
            "metadata": obj.get("metadata"),
            "num_sentences": obj.get("numSentences"),
            "num_words": obj.get("numWords"),
            "num_relationships": obj.get("numRelationships"),
            "binary_size": obj.get("binarySize"),
            "text_size": obj.get("textSize"),
            "version_list": [CMDocumentVersion.from_dict(_item) for _item in obj.get("versionList")] if obj.get("versionList") is not None else None,
            "note_list": [CMDocumentNote.from_dict(_item) for _item in obj.get("noteList")] if obj.get("noteList") is not None else None,
            "activity_list": [CMDocumentAudit.from_dict(_item) for _item in obj.get("activityList")] if obj.get("activityList") is not None else None,
            "type_description": obj.get("typeDescription"),
            "filename": obj.get("filename"),
            "folder_id": obj.get("folderId")
        })
        return _obj


