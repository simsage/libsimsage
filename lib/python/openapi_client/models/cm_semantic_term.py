# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.11.4
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictStr

class CMSemanticTerm(BaseModel):
    """
    CMSemanticTerm
    """
    key: StrictStr = Field(...)
    redact: StrictBool = Field(...)
    redaction_disabled: StrictBool = Field(..., alias="redactionDisabled")
    search: StrictBool = Field(...)
    search_disabled: StrictBool = Field(..., alias="searchDisabled")
    caption: StrictStr = Field(...)
    __properties = ["key", "redact", "redactionDisabled", "search", "searchDisabled", "caption"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMSemanticTerm:
        """Create an instance of CMSemanticTerm from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMSemanticTerm:
        """Create an instance of CMSemanticTerm from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMSemanticTerm.parse_obj(obj)

        _obj = CMSemanticTerm.parse_obj({
            "key": obj.get("key"),
            "redact": obj.get("redact"),
            "redaction_disabled": obj.get("redactionDisabled"),
            "search": obj.get("search"),
            "search_disabled": obj.get("searchDisabled"),
            "caption": obj.get("caption")
        })
        return _obj


