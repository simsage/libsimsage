# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.14.12
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist
from openapi_client.models.cm_group import CMGroup

class CMUserWithExtras(BaseModel):
    """
    An object used for updating a SimSage user.  This object can be used to update the user's password too.  # noqa: E501
    """
    id: StrictStr = Field(..., description="the user's id (its guid id).")
    email: StrictStr = Field(..., description="the email of this user")
    password: StrictStr = Field(..., description="a password for this user (or blank if not to be changed)")
    first_name: StrictStr = Field(..., alias="firstName", description="the first-name of this user")
    surname: StrictStr = Field(..., description="the last-name (surname) of this user")
    roles: StrictStr = Field(..., description="the roles to be associated with this user")
    operator_kb_list: StrictStr = Field(..., alias="operatorKBList", description="the operator-id and knowledge-base id to be associated with this user.  This user is to be an operator if set.")
    group_list: conlist(CMGroup) = Field(..., alias="groupList", description="a list of groups this user is part of (can be empty)")
    jwt_match_name_value_csv: StrictStr = Field(..., alias="jwtMatchNameValueCSV", description="an optional set of csv separated name1=value1,name2=value2 for JWT matching")
    __properties = ["id", "email", "password", "firstName", "surname", "roles", "operatorKBList", "groupList", "jwtMatchNameValueCSV"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMUserWithExtras:
        """Create an instance of CMUserWithExtras from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in group_list (list)
        _items = []
        if self.group_list:
            for _item in self.group_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['groupList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMUserWithExtras:
        """Create an instance of CMUserWithExtras from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMUserWithExtras.parse_obj(obj)

        _obj = CMUserWithExtras.parse_obj({
            "id": obj.get("id"),
            "email": obj.get("email"),
            "password": obj.get("password"),
            "first_name": obj.get("firstName"),
            "surname": obj.get("surname"),
            "roles": obj.get("roles"),
            "operator_kb_list": obj.get("operatorKBList"),
            "group_list": [CMGroup.from_dict(_item) for _item in obj.get("groupList")] if obj.get("groupList") is not None else None,
            "jwt_match_name_value_csv": obj.get("jwtMatchNameValueCSV")
        })
        return _obj


