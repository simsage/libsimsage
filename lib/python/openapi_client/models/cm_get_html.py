# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.13.31
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt, StrictStr

class CMGetHtml(BaseModel):
    """
    get an HTML preview of a document by page  # noqa: E501
    """
    organisation_id: StrictStr = Field(..., alias="organisationId", description="the organisation (its guid id)")
    kb_id: StrictStr = Field(..., alias="kbId", description="the knowledge-base id (its guid id)")
    url_id: StrictInt = Field(..., alias="urlId", description="the url Id of the document")
    url: StrictStr = Field(..., description="The unique URL of this document.")
    page: StrictInt = Field(..., description="the page of this document get, starting at 1")
    html: StrictStr = Field(..., description="the HTML of the document returned")
    width: StrictInt = Field(..., description="the display width of the HMTL document")
    height: StrictInt = Field(..., description="the display height of the HMTL document")
    num_pages: StrictInt = Field(..., alias="numPages", description="the total number of pages in this document")
    __properties = ["organisationId", "kbId", "urlId", "url", "page", "html", "width", "height", "numPages"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMGetHtml:
        """Create an instance of CMGetHtml from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMGetHtml:
        """Create an instance of CMGetHtml from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMGetHtml.parse_obj(obj)

        _obj = CMGetHtml.parse_obj({
            "organisation_id": obj.get("organisationId"),
            "kb_id": obj.get("kbId"),
            "url_id": obj.get("urlId"),
            "url": obj.get("url"),
            "page": obj.get("page"),
            "html": obj.get("html"),
            "width": obj.get("width"),
            "height": obj.get("height"),
            "num_pages": obj.get("numPages")
        })
        return _obj


