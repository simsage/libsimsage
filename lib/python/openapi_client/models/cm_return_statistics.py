# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.11.4
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict
from pydantic import BaseModel, Field, StrictInt, StrictStr

class CMReturnStatistics(BaseModel):
    """
    This object is used to requests a set of specific and general statistics.  The general statistics have no time associated with them (eg. file-type frequencies).  The other statistics are month based and include system-query-access by day of the month, and query-word frequencies.  # noqa: E501
    """
    organisation_id: StrictStr = Field(..., alias="organisationId", description="the organisation (its guid id)")
    kb_id: StrictStr = Field(..., alias="kbId", description="the knowledge-base id (its guid id)")
    year: StrictInt = Field(..., description="the year of the request")
    month: StrictInt = Field(..., description="the month of the request")
    access_frequency: StrictInt = Field(..., alias="accessFrequency", description="A list of 31 values, one for each day of the month indicating the number of unique access for each day of the month.")
    query_word_frequency: Dict[str, StrictInt] = Field(..., alias="queryWordFrequency", description="The top list of queries (the strings) and their frequencies")
    general_statistics: Dict[str, StrictInt] = Field(..., alias="generalStatistics", description="Some more general statistics (eg. number of documents) and their frequencies")
    file_type_statistics: Dict[str, StrictInt] = Field(..., alias="fileTypeStatistics", description="The breakdown of file-types (by file extension) and their frequencies")
    __properties = ["organisationId", "kbId", "year", "month", "accessFrequency", "queryWordFrequency", "generalStatistics", "fileTypeStatistics"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMReturnStatistics:
        """Create an instance of CMReturnStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMReturnStatistics:
        """Create an instance of CMReturnStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMReturnStatistics.parse_obj(obj)

        _obj = CMReturnStatistics.parse_obj({
            "organisation_id": obj.get("organisationId"),
            "kb_id": obj.get("kbId"),
            "year": obj.get("year"),
            "month": obj.get("month"),
            "access_frequency": obj.get("accessFrequency"),
            "query_word_frequency": obj.get("queryWordFrequency"),
            "general_statistics": obj.get("generalStatistics"),
            "file_type_statistics": obj.get("fileTypeStatistics")
        })
        return _obj


