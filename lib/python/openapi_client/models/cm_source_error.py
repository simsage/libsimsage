# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.14.12
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt, StrictStr

class CMSourceError(BaseModel):
    """
    A source error object (if set) indicating something is wrong with the source.  # noqa: E501
    """
    message: StrictStr = Field(..., description="The error message")
    created: StrictInt = Field(..., description="When this error was set, a unix date-time stamp")
    __properties = ["message", "created"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMSourceError:
        """Create an instance of CMSourceError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMSourceError:
        """Create an instance of CMSourceError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMSourceError.parse_obj(obj)

        _obj = CMSourceError.parse_obj({
            "message": obj.get("message"),
            "created": obj.get("created")
        })
        return _obj


