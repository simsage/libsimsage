# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.12.19
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist
from openapi_client.models.cm_organisation import CMOrganisation
from openapi_client.models.cm_session import CMSession
from openapi_client.models.cm_user import CMUser

class CMSessionVersion(BaseModel):
    """
    A SimSage combined session / user and version object.  This is the object returned when you've signed-in successfully.  # noqa: E501
    """
    session: CMSession = Field(...)
    user: CMUser = Field(...)
    organisation_list: conlist(CMOrganisation) = Field(..., alias="organisationList", description="list of organisations for admin users")
    version: StrictStr = Field(..., description="version of this service")
    __properties = ["session", "user", "organisationList", "version"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMSessionVersion:
        """Create an instance of CMSessionVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of session
        if self.session:
            _dict['session'] = self.session.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in organisation_list (list)
        _items = []
        if self.organisation_list:
            for _item in self.organisation_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['organisationList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMSessionVersion:
        """Create an instance of CMSessionVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMSessionVersion.parse_obj(obj)

        _obj = CMSessionVersion.parse_obj({
            "session": CMSession.from_dict(obj.get("session")) if obj.get("session") is not None else None,
            "user": CMUser.from_dict(obj.get("user")) if obj.get("user") is not None else None,
            "organisation_list": [CMOrganisation.from_dict(_item) for _item in obj.get("organisationList")] if obj.get("organisationList") is not None else None,
            "version": obj.get("version")
        })
        return _obj


