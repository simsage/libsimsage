# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.11.4
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, conlist
from openapi_client.models.cm_group import CMGroup
from openapi_client.models.cm_user import CMUser

class CMGroupList(BaseModel):
    """
    A security-group list.  A list of groups for security purposes.  # noqa: E501
    """
    group_list: conlist(CMGroup) = Field(..., alias="groupList", description="the list of filtered/paginated groups")
    user_list: conlist(CMUser) = Field(..., alias="userList", description="the list of users for all groups")
    __properties = ["groupList", "userList"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMGroupList:
        """Create an instance of CMGroupList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in group_list (list)
        _items = []
        if self.group_list:
            for _item in self.group_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['groupList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in user_list (list)
        _items = []
        if self.user_list:
            for _item in self.user_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['userList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMGroupList:
        """Create an instance of CMGroupList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMGroupList.parse_obj(obj)

        _obj = CMGroupList.parse_obj({
            "group_list": [CMGroup.from_dict(_item) for _item in obj.get("groupList")] if obj.get("groupList") is not None else None,
            "user_list": [CMUser.from_dict(_item) for _item in obj.get("userList")] if obj.get("userList") is not None else None
        })
        return _obj


