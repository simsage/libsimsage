# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.11.4
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from openapi_client.models.context_item import ContextItem

class Session(BaseModel):
    """
    Session
    """
    id: StrictStr = Field(...)
    user_id: StrictStr = Field(..., alias="userId")
    organisation_id: StrictStr = Field(..., alias="organisationId")
    email: StrictStr = Field(...)
    ip_address: StrictStr = Field(..., alias="ipAddress")
    last_access: StrictInt = Field(..., alias="lastAccess")
    role: StrictStr = Field(...)
    session_type: StrictStr = Field(..., alias="sessionType")
    context_stack: conlist(ContextItem) = Field(..., alias="contextStack")
    __properties = ["id", "userId", "organisationId", "email", "ipAddress", "lastAccess", "role", "sessionType", "contextStack"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Session:
        """Create an instance of Session from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in context_stack (list)
        _items = []
        if self.context_stack:
            for _item in self.context_stack:
                if _item:
                    _items.append(_item.to_dict())
            _dict['contextStack'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Session:
        """Create an instance of Session from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Session.parse_obj(obj)

        _obj = Session.parse_obj({
            "id": obj.get("id"),
            "user_id": obj.get("userId"),
            "organisation_id": obj.get("organisationId"),
            "email": obj.get("email"),
            "ip_address": obj.get("ipAddress"),
            "last_access": obj.get("lastAccess"),
            "role": obj.get("role"),
            "session_type": obj.get("sessionType"),
            "context_stack": [ContextItem.from_dict(_item) for _item in obj.get("contextStack")] if obj.get("contextStack") is not None else None
        })
        return _obj


