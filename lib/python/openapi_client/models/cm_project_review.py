# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.14.12
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from openapi_client.models.cm_project_definition import CMProjectDefinition
from openapi_client.models.cm_task_info import CMTaskInfo

class CMProjectReview(BaseModel):
    """
    CMProjectReview
    """
    project_definition: CMProjectDefinition = Field(..., alias="projectDefinition")
    task_info: CMTaskInfo = Field(..., alias="taskInfo")
    __properties = ["projectDefinition", "taskInfo"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMProjectReview:
        """Create an instance of CMProjectReview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of project_definition
        if self.project_definition:
            _dict['projectDefinition'] = self.project_definition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of task_info
        if self.task_info:
            _dict['taskInfo'] = self.task_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMProjectReview:
        """Create an instance of CMProjectReview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMProjectReview.parse_obj(obj)

        _obj = CMProjectReview.parse_obj({
            "project_definition": CMProjectDefinition.from_dict(obj.get("projectDefinition")) if obj.get("projectDefinition") is not None else None,
            "task_info": CMTaskInfo.from_dict(obj.get("taskInfo")) if obj.get("taskInfo") is not None else None
        })
        return _obj


