# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.12.19
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class CMDocumentRelationship(BaseModel):
    """
    A document that related to this document in some fashion (parent or child)  # noqa: E501
    """
    url_id: StrictInt = Field(..., alias="urlId", description="the url-id of this document")
    is_child: StrictBool = Field(..., alias="isChild", description="if true, this is a child relationship, otherwise a parent relationship")
    related_url_id: StrictInt = Field(..., alias="relatedUrlId", description="the related document's id")
    related_url: StrictStr = Field(..., alias="relatedUrl", description="the url of the related document")
    web_url: StrictStr = Field(..., alias="webUrl", description="the web-url (if set) if there is a web-link for this document")
    title: StrictStr = Field(..., description="the title of the related document for display")
    binary_size: StrictInt = Field(..., alias="binarySize", description="size in bytes of the related document")
    document_type: StrictStr = Field(..., alias="documentType", description="the type of the related document")
    created: StrictInt = Field(..., description="The unix creation date-time of the related item")
    last_modified: StrictInt = Field(..., alias="lastModified", description="The unix last-modified date-time of the related item")
    child: Optional[StrictBool] = None
    __properties = ["urlId", "isChild", "relatedUrlId", "relatedUrl", "webUrl", "title", "binarySize", "documentType", "created", "lastModified", "child"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMDocumentRelationship:
        """Create an instance of CMDocumentRelationship from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMDocumentRelationship:
        """Create an instance of CMDocumentRelationship from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMDocumentRelationship.parse_obj(obj)

        _obj = CMDocumentRelationship.parse_obj({
            "url_id": obj.get("urlId"),
            "is_child": obj.get("isChild"),
            "related_url_id": obj.get("relatedUrlId"),
            "related_url": obj.get("relatedUrl"),
            "web_url": obj.get("webUrl"),
            "title": obj.get("title"),
            "binary_size": obj.get("binarySize"),
            "document_type": obj.get("documentType"),
            "created": obj.get("created"),
            "last_modified": obj.get("lastModified"),
            "child": obj.get("child")
        })
        return _obj


