# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.12.19
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt, StrictStr

class DocumentDeleted(BaseModel):
    """
    DocumentDeleted
    """
    source_id: StrictInt = Field(..., alias="sourceId")
    url: StrictStr = Field(...)
    user_id: StrictStr = Field(..., alias="userId")
    deleted: StrictInt = Field(...)
    __properties = ["sourceId", "url", "userId", "deleted"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DocumentDeleted:
        """Create an instance of DocumentDeleted from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DocumentDeleted:
        """Create an instance of DocumentDeleted from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DocumentDeleted.parse_obj(obj)

        _obj = DocumentDeleted.parse_obj({
            "source_id": obj.get("sourceId"),
            "url": obj.get("url"),
            "user_id": obj.get("userId"),
            "deleted": obj.get("deleted")
        })
        return _obj


