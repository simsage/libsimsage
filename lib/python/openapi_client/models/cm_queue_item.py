# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.12.19
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist

class CMQueueItem(BaseModel):
    """
    CMQueueItem
    """
    organisation_id: StrictStr = Field(..., alias="organisationId")
    process_id: StrictStr = Field(..., alias="processId")
    project_id: StrictStr = Field(..., alias="projectId")
    task_id: StrictStr = Field(..., alias="taskId")
    project_type: StrictStr = Field(..., alias="projectType")
    task_type: StrictStr = Field(..., alias="taskType")
    task_screen: StrictStr = Field(..., alias="taskScreen")
    project_created: datetime = Field(..., alias="projectCreated")
    date_task_created: datetime = Field(..., alias="dateTaskCreated")
    project_title: StrictStr = Field(..., alias="projectTitle")
    task_name: StrictStr = Field(..., alias="taskName")
    assigned_user: StrictStr = Field(..., alias="assignedUser")
    potential_users: conlist(StrictStr) = Field(..., alias="potentialUsers")
    excluded_users: conlist(StrictStr) = Field(..., alias="excludedUsers")
    potential_groups: conlist(StrictStr) = Field(..., alias="potentialGroups")
    owns_item: StrictBool = Field(..., alias="ownsItem")
    can_claim: StrictBool = Field(..., alias="canClaim")
    can_release: StrictBool = Field(..., alias="canRelease")
    lock_type: StrictStr = Field(..., alias="lockType")
    __properties = ["organisationId", "processId", "projectId", "taskId", "projectType", "taskType", "taskScreen", "projectCreated", "dateTaskCreated", "projectTitle", "taskName", "assignedUser", "potentialUsers", "excludedUsers", "potentialGroups", "ownsItem", "canClaim", "canRelease", "lockType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMQueueItem:
        """Create an instance of CMQueueItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMQueueItem:
        """Create an instance of CMQueueItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMQueueItem.parse_obj(obj)

        _obj = CMQueueItem.parse_obj({
            "organisation_id": obj.get("organisationId"),
            "process_id": obj.get("processId"),
            "project_id": obj.get("projectId"),
            "task_id": obj.get("taskId"),
            "project_type": obj.get("projectType"),
            "task_type": obj.get("taskType"),
            "task_screen": obj.get("taskScreen"),
            "project_created": obj.get("projectCreated"),
            "date_task_created": obj.get("dateTaskCreated"),
            "project_title": obj.get("projectTitle"),
            "task_name": obj.get("taskName"),
            "assigned_user": obj.get("assignedUser"),
            "potential_users": obj.get("potentialUsers"),
            "excluded_users": obj.get("excludedUsers"),
            "potential_groups": obj.get("potentialGroups"),
            "owns_item": obj.get("ownsItem"),
            "can_claim": obj.get("canClaim"),
            "can_release": obj.get("canRelease"),
            "lock_type": obj.get("lockType")
        })
        return _obj


