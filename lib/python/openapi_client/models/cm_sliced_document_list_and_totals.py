# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.14.12
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict
from pydantic import BaseModel, Field, StrictInt, StrictStr
from openapi_client.models.cm_paged_results_cm_sliced_document import CMPagedResultsCMSlicedDocument

class CMSlicedDocumentListAndTotals(BaseModel):
    """
    CMSlicedDocumentListAndTotals
    """
    paged_results: CMPagedResultsCMSlicedDocument = Field(..., alias="pagedResults")
    all_docs: StrictInt = Field(..., alias="allDocs")
    completed: StrictInt = Field(...)
    quarantined: StrictInt = Field(...)
    source_map: Dict[str, StrictStr] = Field(..., alias="sourceMap")
    user_map: Dict[str, StrictStr] = Field(..., alias="userMap")
    __properties = ["pagedResults", "allDocs", "completed", "quarantined", "sourceMap", "userMap"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMSlicedDocumentListAndTotals:
        """Create an instance of CMSlicedDocumentListAndTotals from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of paged_results
        if self.paged_results:
            _dict['pagedResults'] = self.paged_results.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMSlicedDocumentListAndTotals:
        """Create an instance of CMSlicedDocumentListAndTotals from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMSlicedDocumentListAndTotals.parse_obj(obj)

        _obj = CMSlicedDocumentListAndTotals.parse_obj({
            "paged_results": CMPagedResultsCMSlicedDocument.from_dict(obj.get("pagedResults")) if obj.get("pagedResults") is not None else None,
            "all_docs": obj.get("allDocs"),
            "completed": obj.get("completed"),
            "quarantined": obj.get("quarantined"),
            "source_map": obj.get("sourceMap"),
            "user_map": obj.get("userMap")
        })
        return _obj


