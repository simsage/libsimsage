# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.14.12
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from openapi_client.models.cm_crawler_status import CMCrawlerStatus
from openapi_client.models.cm_task_info import CMTaskInfo

class CMCrawlerStatusTask(BaseModel):
    """
    CMCrawlerStatusTask
    """
    task_info: CMTaskInfo = Field(..., alias="taskInfo")
    detail: CMCrawlerStatus = Field(...)
    __properties = ["taskInfo", "detail"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMCrawlerStatusTask:
        """Create an instance of CMCrawlerStatusTask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of task_info
        if self.task_info:
            _dict['taskInfo'] = self.task_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of detail
        if self.detail:
            _dict['detail'] = self.detail.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMCrawlerStatusTask:
        """Create an instance of CMCrawlerStatusTask from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMCrawlerStatusTask.parse_obj(obj)

        _obj = CMCrawlerStatusTask.parse_obj({
            "task_info": CMTaskInfo.from_dict(obj.get("taskInfo")) if obj.get("taskInfo") is not None else None,
            "detail": CMCrawlerStatus.from_dict(obj.get("detail")) if obj.get("detail") is not None else None
        })
        return _obj


