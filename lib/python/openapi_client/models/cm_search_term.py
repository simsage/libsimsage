# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.14.12
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from openapi_client.models.cm_sub_term import CMSubTerm

class CMSearchTerm(BaseModel):
    """
    CMSearchTerm
    """
    key: StrictStr = Field(...)
    caption: StrictStr = Field(...)
    search_usage: StrictStr = Field(..., alias="searchUsage")
    redaction_usage: StrictStr = Field(..., alias="redactionUsage")
    default_value: StrictStr = Field(..., alias="defaultValue")
    sub_terms: conlist(CMSubTerm) = Field(..., alias="subTerms")
    __properties = ["key", "caption", "searchUsage", "redactionUsage", "defaultValue", "subTerms"]

    @validator('search_usage')
    def search_usage_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('REQUIRED', 'NOT_AVAILABLE', 'DEFAULT_ON', 'DEFAULT_OFF'):
            raise ValueError("must be one of enum values ('REQUIRED', 'NOT_AVAILABLE', 'DEFAULT_ON', 'DEFAULT_OFF')")
        return value

    @validator('redaction_usage')
    def redaction_usage_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('REQUIRED', 'NOT_AVAILABLE', 'DEFAULT_ON', 'DEFAULT_OFF'):
            raise ValueError("must be one of enum values ('REQUIRED', 'NOT_AVAILABLE', 'DEFAULT_ON', 'DEFAULT_OFF')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMSearchTerm:
        """Create an instance of CMSearchTerm from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in sub_terms (list)
        _items = []
        if self.sub_terms:
            for _item in self.sub_terms:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subTerms'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMSearchTerm:
        """Create an instance of CMSearchTerm from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMSearchTerm.parse_obj(obj)

        _obj = CMSearchTerm.parse_obj({
            "key": obj.get("key"),
            "caption": obj.get("caption"),
            "search_usage": obj.get("searchUsage"),
            "redaction_usage": obj.get("redactionUsage"),
            "default_value": obj.get("defaultValue"),
            "sub_terms": [CMSubTerm.from_dict(_item) for _item in obj.get("subTerms")] if obj.get("subTerms") is not None else None
        })
        return _obj


