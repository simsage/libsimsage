# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.13.31
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator
from openapi_client.models.name_counter_level import NameCounterLevel

class SearchCategory(BaseModel):
    """
    Search categories / metadata searching  # noqa: E501
    """
    sc_type: StrictStr = Field(..., alias="scType")
    metadata: StrictStr = Field(...)
    display_name: StrictStr = Field(..., alias="displayName")
    data_type: StrictStr = Field(..., alias="dataType")
    min_value: StrictInt = Field(..., alias="minValue")
    max_value: StrictInt = Field(..., alias="maxValue")
    items: conlist(NameCounterLevel) = Field(...)
    __properties = ["scType", "metadata", "displayName", "dataType", "minValue", "maxValue", "items"]

    @validator('sc_type')
    def sc_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('SCT_PLAIN', 'SCT_TWO_LEVEL', 'SCT_NUMBER'):
            raise ValueError("must be one of enum values ('SCT_PLAIN', 'SCT_TWO_LEVEL', 'SCT_NUMBER')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SearchCategory:
        """Create an instance of SearchCategory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SearchCategory:
        """Create an instance of SearchCategory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SearchCategory.parse_obj(obj)

        _obj = SearchCategory.parse_obj({
            "sc_type": obj.get("scType"),
            "metadata": obj.get("metadata"),
            "display_name": obj.get("displayName"),
            "data_type": obj.get("dataType"),
            "min_value": obj.get("minValue"),
            "max_value": obj.get("maxValue"),
            "items": [NameCounterLevel.from_dict(_item) for _item in obj.get("items")] if obj.get("items") is not None else None
        })
        return _obj


