# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.11.4
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from openapi_client.models.group import Group
from openapi_client.models.operator_knowledge_base import OperatorKnowledgeBase
from openapi_client.models.user_role import UserRole

class User(BaseModel):
    """
    User
    """
    id: StrictStr = Field(...)
    email: StrictStr = Field(...)
    first_name: StrictStr = Field(..., alias="firstName")
    surname: StrictStr = Field(...)
    password_hash: StrictStr = Field(..., alias="passwordHash")
    confirmed: StrictBool = Field(...)
    roles: conlist(UserRole) = Field(...)
    operator_kb_list: conlist(OperatorKnowledgeBase) = Field(..., alias="operatorKBList")
    group_list: conlist(Group) = Field(..., alias="groupList")
    __properties = ["id", "email", "firstName", "surname", "passwordHash", "confirmed", "roles", "operatorKBList", "groupList"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> User:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in roles (list)
        _items = []
        if self.roles:
            for _item in self.roles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['roles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in operator_kb_list (list)
        _items = []
        if self.operator_kb_list:
            for _item in self.operator_kb_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['operatorKBList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in group_list (list)
        _items = []
        if self.group_list:
            for _item in self.group_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['groupList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> User:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return User.parse_obj(obj)

        _obj = User.parse_obj({
            "id": obj.get("id"),
            "email": obj.get("email"),
            "first_name": obj.get("firstName"),
            "surname": obj.get("surname"),
            "password_hash": obj.get("passwordHash"),
            "confirmed": obj.get("confirmed"),
            "roles": [UserRole.from_dict(_item) for _item in obj.get("roles")] if obj.get("roles") is not None else None,
            "operator_kb_list": [OperatorKnowledgeBase.from_dict(_item) for _item in obj.get("operatorKBList")] if obj.get("operatorKBList") is not None else None,
            "group_list": [Group.from_dict(_item) for _item in obj.get("groupList")] if obj.get("groupList") is not None else None
        })
        return _obj


