# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.11.4
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class CMCrawlerStatus(BaseModel):
    """
    CMCrawlerStatus
    """
    organisation_id: StrictStr = Field(..., alias="organisationId")
    kb_id: StrictStr = Field(..., alias="kbId")
    project_title: StrictStr = Field(..., alias="projectTitle")
    project_type: StrictStr = Field(..., alias="projectType")
    crawler_id: StrictStr = Field(..., alias="crawlerId")
    crawler_name: StrictStr = Field(..., alias="crawlerName")
    start_time: StrictInt = Field(..., alias="startTime")
    end_time: StrictInt = Field(..., alias="endTime")
    is_running: StrictBool = Field(..., alias="isRunning")
    specific_json: StrictStr = Field(..., alias="specificJson")
    __properties = ["organisationId", "kbId", "projectTitle", "projectType", "crawlerId", "crawlerName", "startTime", "endTime", "isRunning", "specificJson"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMCrawlerStatus:
        """Create an instance of CMCrawlerStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMCrawlerStatus:
        """Create an instance of CMCrawlerStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMCrawlerStatus.parse_obj(obj)

        _obj = CMCrawlerStatus.parse_obj({
            "organisation_id": obj.get("organisationId"),
            "kb_id": obj.get("kbId"),
            "project_title": obj.get("projectTitle"),
            "project_type": obj.get("projectType"),
            "crawler_id": obj.get("crawlerId"),
            "crawler_name": obj.get("crawlerName"),
            "start_time": obj.get("startTime"),
            "end_time": obj.get("endTime"),
            "is_running": obj.get("isRunning"),
            "specific_json": obj.get("specificJson")
        })
        return _obj


