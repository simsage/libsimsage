# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.11.4
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from openapi_client.models.cm_results_section import CMResultsSection

class CMSearchResultSummary(BaseModel):
    """
    CMSearchResultSummary
    """
    project_id: StrictStr = Field(..., alias="projectId")
    kb_id: StrictStr = Field(..., alias="kbId")
    project_type: StrictStr = Field(..., alias="projectType")
    project_title: StrictStr = Field(..., alias="projectTitle")
    document_count: StrictInt = Field(..., alias="documentCount")
    results: conlist(CMResultsSection) = Field(...)
    __properties = ["projectId", "kbId", "projectType", "projectTitle", "documentCount", "results"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMSearchResultSummary:
        """Create an instance of CMSearchResultSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in results (list)
        _items = []
        if self.results:
            for _item in self.results:
                if _item:
                    _items.append(_item.to_dict())
            _dict['results'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMSearchResultSummary:
        """Create an instance of CMSearchResultSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMSearchResultSummary.parse_obj(obj)

        _obj = CMSearchResultSummary.parse_obj({
            "project_id": obj.get("projectId"),
            "kb_id": obj.get("kbId"),
            "project_type": obj.get("projectType"),
            "project_title": obj.get("projectTitle"),
            "document_count": obj.get("documentCount"),
            "results": [CMResultsSection.from_dict(_item) for _item in obj.get("results")] if obj.get("results") is not None else None
        })
        return _obj


