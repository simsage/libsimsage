# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.14.12
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist

class AssetACL(BaseModel):
    """
    AssetACL
    """
    name: StrictStr = Field(...)
    display_name: StrictStr = Field(..., alias="displayName")
    access: StrictStr = Field(...)
    is_user: StrictBool = Field(..., alias="isUser")
    membership_list: conlist(StrictStr) = Field(..., alias="membershipList")
    user: Optional[StrictBool] = None
    __properties = ["name", "displayName", "access", "isUser", "membershipList", "user"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AssetACL:
        """Create an instance of AssetACL from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AssetACL:
        """Create an instance of AssetACL from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AssetACL.parse_obj(obj)

        _obj = AssetACL.parse_obj({
            "name": obj.get("name"),
            "display_name": obj.get("displayName"),
            "access": obj.get("access"),
            "is_user": obj.get("isUser"),
            "membership_list": obj.get("membershipList"),
            "user": obj.get("user")
        })
        return _obj


