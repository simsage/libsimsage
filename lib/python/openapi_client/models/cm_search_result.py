# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.13.31
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from openapi_client.models.cm_document_relationship import CMDocumentRelationship
from openapi_client.models.cm_similar_document import CMSimilarDocument

class CMSearchResult(BaseModel):
    """
    A single search result from the Semantic Search engine.  This presents a hit inside a SimSage document.  # noqa: E501
    """
    kb_id: StrictStr = Field(..., alias="kbId", description="the knowledge-base id (its guid id)")
    url: StrictStr = Field(..., description="the url of the document that matched")
    url_id: StrictInt = Field(..., alias="urlId", description="the internal SimSage id for this url (unique only within a knowledge-base)")
    source_id: StrictInt = Field(..., alias="sourceId", description="the source-id of this result (ie. the source's id)")
    title: StrictStr = Field(..., description="the title of this document/record (can be empty)")
    author: StrictStr = Field(..., description="the author of this document/record (can be empty)")
    text_list: conlist(StrictStr) = Field(..., alias="textList", description="A list of matching fragments in this document, with highlight markers.")
    text_index: StrictInt = Field(..., alias="textIndex", description="in case of multiple matches in textList, the best match index of these items starting at zero (0)")
    score: Union[StrictFloat, StrictInt] = Field(..., description="the relative score of this match, the bigger, the better")
    sort_desc: StrictBool = Field(..., alias="sortDesc", description="was this document along with any others sorted ascending or descending?")
    qna_result: StrictBool = Field(..., alias="qnaResult", description="is this item a Q&A result or a search result?")
    first_sentence: StrictInt = Field(..., alias="firstSentence", description="the id of the first sentence in this result")
    created: StrictInt = Field(..., description="document creation date-time as a unix date-time")
    uploaded: StrictInt = Field(..., description="document uploaded to SimSage date-time as a unix date-time")
    last_modified: StrictInt = Field(..., alias="lastModified", description="document last-modified date-time as a unix date-time")
    document_type: StrictStr = Field(..., alias="documentType", description="the type of this document/record as a three or four letter file extension")
    num_sentences: StrictInt = Field(..., alias="numSentences", description="the total number of sentences in the body of this document")
    num_words: StrictInt = Field(..., alias="numWords", description="the total number of words and tokens (eg. '.') in the body of this document")
    num_relationships: StrictInt = Field(..., alias="numRelationships", description="the total number of relationships expanded from the words in this document")
    binary_size: StrictInt = Field(..., alias="binarySize", description="the binary-size of the original document in bytes")
    text_size: StrictInt = Field(..., alias="textSize", description="the text-size of the original document in number of characters")
    file_type: StrictStr = Field(..., alias="fileType", description="the DROID file-type of this document/record (can be empty)")
    crawled: StrictInt = Field(..., description="document crawled (ie. picked up by SimSage) date-time as a unix date-time")
    converted: StrictInt = Field(..., description="document conversion (ie. turned into text by SimSage) date-time as a unix date-time")
    parsed: StrictInt = Field(..., description="document parsed (ie. language analyzed by SimSage) date-time as a unix date-time")
    indexed: StrictInt = Field(..., description="document indexed (ie. creation of inverted indices by SimSage) date-time as a unix date-time")
    previewed: StrictInt = Field(..., description="document preview generated (ie. creation of thumb-nail images for this document by SimSage) date-time as a unix date-time")
    similar_document_list: conlist(CMSimilarDocument) = Field(..., alias="similarDocumentList", description="A list of similar documents matched by this query.")
    related_list: conlist(CMDocumentRelationship) = Field(..., alias="relatedList", description="A list of similar documents matched by this query.")
    metadata: Dict[str, StrictStr] = Field(..., description="A set of name-values of metadata associated with this document")
    filename: StrictStr = Field(..., description="the filename of this document in the DMS system")
    folder_id: StrictStr = Field(..., alias="folderId", description="the folderId of this item in the DMS system")
    render_type: StrictStr = Field(..., alias="renderType", description="how should this item be rendered? (default \"rt search\")")
    __properties = ["kbId", "url", "urlId", "sourceId", "title", "author", "textList", "textIndex", "score", "sortDesc", "qnaResult", "firstSentence", "created", "uploaded", "lastModified", "documentType", "numSentences", "numWords", "numRelationships", "binarySize", "textSize", "fileType", "crawled", "converted", "parsed", "indexed", "previewed", "similarDocumentList", "relatedList", "metadata", "filename", "folderId", "renderType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMSearchResult:
        """Create an instance of CMSearchResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in similar_document_list (list)
        _items = []
        if self.similar_document_list:
            for _item in self.similar_document_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['similarDocumentList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in related_list (list)
        _items = []
        if self.related_list:
            for _item in self.related_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['relatedList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMSearchResult:
        """Create an instance of CMSearchResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMSearchResult.parse_obj(obj)

        _obj = CMSearchResult.parse_obj({
            "kb_id": obj.get("kbId"),
            "url": obj.get("url"),
            "url_id": obj.get("urlId"),
            "source_id": obj.get("sourceId"),
            "title": obj.get("title"),
            "author": obj.get("author"),
            "text_list": obj.get("textList"),
            "text_index": obj.get("textIndex"),
            "score": obj.get("score"),
            "sort_desc": obj.get("sortDesc"),
            "qna_result": obj.get("qnaResult"),
            "first_sentence": obj.get("firstSentence"),
            "created": obj.get("created"),
            "uploaded": obj.get("uploaded"),
            "last_modified": obj.get("lastModified"),
            "document_type": obj.get("documentType"),
            "num_sentences": obj.get("numSentences"),
            "num_words": obj.get("numWords"),
            "num_relationships": obj.get("numRelationships"),
            "binary_size": obj.get("binarySize"),
            "text_size": obj.get("textSize"),
            "file_type": obj.get("fileType"),
            "crawled": obj.get("crawled"),
            "converted": obj.get("converted"),
            "parsed": obj.get("parsed"),
            "indexed": obj.get("indexed"),
            "previewed": obj.get("previewed"),
            "similar_document_list": [CMSimilarDocument.from_dict(_item) for _item in obj.get("similarDocumentList")] if obj.get("similarDocumentList") is not None else None,
            "related_list": [CMDocumentRelationship.from_dict(_item) for _item in obj.get("relatedList")] if obj.get("relatedList") is not None else None,
            "metadata": obj.get("metadata"),
            "filename": obj.get("filename"),
            "folder_id": obj.get("folderId"),
            "render_type": obj.get("renderType")
        })
        return _obj


