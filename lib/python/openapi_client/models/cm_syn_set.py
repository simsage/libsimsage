# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.11.4
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr

class CMSynSet(BaseModel):
    """
    A SynSet is an ambiguous noun.  A SynSet tells SimSage how to distinguish between different homoglyphs (same word) with different meanings.  # noqa: E501
    """
    word: StrictStr = Field(..., description="the word that makes a synset group (an ambiguous noun language concept) (eg. 'bank')")
    lemma: StrictStr = Field(..., description="the lemma of this word (ie. the simplified base, usually the same as the word, but the lemma of 'banks' is 'bank')")
    word_cloud_csv_list: StrictStr = Field(..., alias="wordCloudCsvList", description="A list of word-clouds that form each distinct synset.  Each string in this variable is itself a csv string.  The first word of this cloud forms the distinct marker of the synset.")
    __properties = ["word", "lemma", "wordCloudCsvList"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMSynSet:
        """Create an instance of CMSynSet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMSynSet:
        """Create an instance of CMSynSet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMSynSet.parse_obj(obj)

        _obj = CMSynSet.parse_obj({
            "word": obj.get("word"),
            "lemma": obj.get("lemma"),
            "word_cloud_csv_list": obj.get("wordCloudCsvList")
        })
        return _obj


