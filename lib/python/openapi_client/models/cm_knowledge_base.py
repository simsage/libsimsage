# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.12.19
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class CMKnowledgeBase(BaseModel):
    """
    A knowledge-base is SimSage's representation of a list of information silos belonging to an organisation.  A knowledge-base represents a second level of isolation between data in SimSage.  The first level is an Organisation.  Each organisation in SimSage has a list of knowledge-bases, strictly isolated from each other.  Each knowledge-base in turn can have many sources (information collectors that add items to a knowledge-base like a file-crawler, or a web-crawler)  # noqa: E501
    """
    organisation_id: StrictStr = Field(..., alias="organisationId", description="the main organisation (its guid id)")
    kb_id: StrictStr = Field(..., alias="kbId", description="the knowledge-base id (its guid id)")
    name: StrictStr = Field(..., description="the name of this knowledge-base (must be unique within an organisation)")
    email: StrictStr = Field(..., description="the support email of the person to email with any UI generated questions")
    security_id: StrictStr = Field(..., alias="securityId", description="the security id (a guid) of this knowledge-base.  This is a shared secret between SimSage and external systems.")
    created: StrictInt = Field(..., description="when this knowledge-base was created, a unix date-time long")
    max_queries_per_day: StrictInt = Field(..., alias="maxQueriesPerDay", description="limit the number of queries per day (if greater than 0).  A value of zero (0) indicates no limits.")
    analytics_window_in_months: StrictInt = Field(..., alias="analyticsWindowInMonths", description="How long to keep analytics for in months.  A value of zero (0) indicates forever")
    enabled: StrictBool = Field(..., description="a flag signalling this knowledge-base is active (can be used).  An inactive knowledge-base cannot be queried.")
    operator_enabled: StrictBool = Field(..., alias="operatorEnabled", description="a flag signalling this knowledge-base has operator support.  A value of false prevents this knowledge-base's operator from interacting with end-users.")
    capacity_warnings: StrictBool = Field(..., alias="capacityWarnings", description="All queries are given a 10% grace when daily-limits (maxQueriesPerDay) are enforced.  If this flag is true, the owner of this knowledge-base (email) is sent a warning at 100% daily utiliziation.")
    index_schedule: StrictStr = Field(..., alias="indexSchedule", description="the time-schedule for index-optimization, when active.")
    last_index_optimization_time: StrictInt = Field(..., alias="lastIndexOptimizationTime", description="the last time this triggered and ran as a unix date-time (read only)")
    __properties = ["organisationId", "kbId", "name", "email", "securityId", "created", "maxQueriesPerDay", "analyticsWindowInMonths", "enabled", "operatorEnabled", "capacityWarnings", "indexSchedule", "lastIndexOptimizationTime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMKnowledgeBase:
        """Create an instance of CMKnowledgeBase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMKnowledgeBase:
        """Create an instance of CMKnowledgeBase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMKnowledgeBase.parse_obj(obj)

        _obj = CMKnowledgeBase.parse_obj({
            "organisation_id": obj.get("organisationId"),
            "kb_id": obj.get("kbId"),
            "name": obj.get("name"),
            "email": obj.get("email"),
            "security_id": obj.get("securityId"),
            "created": obj.get("created"),
            "max_queries_per_day": obj.get("maxQueriesPerDay"),
            "analytics_window_in_months": obj.get("analyticsWindowInMonths"),
            "enabled": obj.get("enabled"),
            "operator_enabled": obj.get("operatorEnabled"),
            "capacity_warnings": obj.get("capacityWarnings"),
            "index_schedule": obj.get("indexSchedule"),
            "last_index_optimization_time": obj.get("lastIndexOptimizationTime")
        })
        return _obj


