# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.12.19
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class CMFailedSourceDocument(BaseModel):
    """
    Description of an external document upload failure.  # noqa: E501
    """
    organisation_id: StrictStr = Field(..., alias="organisationId", description="the main organisation (its guid id) for this source/crawler")
    kb_id: StrictStr = Field(..., alias="kbId", description="the knowledge-base id (its guid id) for this source/crawler")
    source_id: StrictInt = Field(..., alias="sourceId", description="the source-id, primary key of the source")
    source_system_id: StrictStr = Field(..., alias="sourceSystemId", description="the unique id of the document in the source system, mostly same as web url")
    web_url: StrictStr = Field(..., alias="webUrl", description="the web url to access the document, can be different from url")
    run_id: StrictStr = Field(..., alias="runId", description="the id of the crawler run adding the exception")
    error_message: StrictStr = Field(..., alias="errorMessage", description="the error message added by the system")
    encrypted: StrictBool = Field(..., description="Do we need to add transport encryption")
    seed: StrictInt = Field(..., description="The seed used if encrypted")
    sid: StrictStr = Field(..., description="the security-id (a guid) of the knowledge-base.  This is effectively the shared secret between SimSage and the external-crawler system.")
    __properties = ["organisationId", "kbId", "sourceId", "sourceSystemId", "webUrl", "runId", "errorMessage", "encrypted", "seed", "sid"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMFailedSourceDocument:
        """Create an instance of CMFailedSourceDocument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMFailedSourceDocument:
        """Create an instance of CMFailedSourceDocument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMFailedSourceDocument.parse_obj(obj)

        _obj = CMFailedSourceDocument.parse_obj({
            "organisation_id": obj.get("organisationId"),
            "kb_id": obj.get("kbId"),
            "source_id": obj.get("sourceId"),
            "source_system_id": obj.get("sourceSystemId"),
            "web_url": obj.get("webUrl"),
            "run_id": obj.get("runId"),
            "error_message": obj.get("errorMessage"),
            "encrypted": obj.get("encrypted"),
            "seed": obj.get("seed"),
            "sid": obj.get("sid")
        })
        return _obj


