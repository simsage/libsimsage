# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.11.4
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr

class LocatedRedaction(BaseModel):
    """
    LocatedRedaction
    """
    project_id: StrictStr = Field(..., alias="projectId")
    slice_id: StrictStr = Field(..., alias="sliceId")
    document_key: StrictStr = Field(..., alias="documentKey")
    redaction_type: StrictStr = Field(..., alias="redactionType")
    query_id: Optional[StrictInt] = Field(None, alias="queryId")
    redaction_key: Optional[StrictStr] = Field(None, alias="redactionKey")
    word: Optional[StrictStr] = None
    is_redacted: StrictBool = Field(..., alias="isRedacted")
    page: StrictInt = Field(...)
    left: Union[StrictFloat, StrictInt] = Field(...)
    bottom: Union[StrictFloat, StrictInt] = Field(...)
    width: Union[StrictFloat, StrictInt] = Field(...)
    height: Union[StrictFloat, StrictInt] = Field(...)
    __properties = ["projectId", "sliceId", "documentKey", "redactionType", "queryId", "redactionKey", "word", "isRedacted", "page", "left", "bottom", "width", "height"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LocatedRedaction:
        """Create an instance of LocatedRedaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LocatedRedaction:
        """Create an instance of LocatedRedaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LocatedRedaction.parse_obj(obj)

        _obj = LocatedRedaction.parse_obj({
            "project_id": obj.get("projectId"),
            "slice_id": obj.get("sliceId"),
            "document_key": obj.get("documentKey"),
            "redaction_type": obj.get("redactionType"),
            "query_id": obj.get("queryId"),
            "redaction_key": obj.get("redactionKey"),
            "word": obj.get("word"),
            "is_redacted": obj.get("isRedacted"),
            "page": obj.get("page"),
            "left": obj.get("left"),
            "bottom": obj.get("bottom"),
            "width": obj.get("width"),
            "height": obj.get("height")
        })
        return _obj


