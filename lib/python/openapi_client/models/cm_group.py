# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.12.19
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist

class CMGroup(BaseModel):
    """
    A security-group object.  Groups can contain security users and are used to group/clump users.  # noqa: E501
    """
    organisation_id: StrictStr = Field(..., alias="organisationId", description="the organisation (its guid id) this group is associated with")
    name: StrictStr = Field(..., description="the name of this group")
    user_id_list: conlist(StrictStr) = Field(..., alias="userIdList", description="a list of user-ids (can be empty) part of this group")
    __properties = ["organisationId", "name", "userIdList"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMGroup:
        """Create an instance of CMGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMGroup:
        """Create an instance of CMGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMGroup.parse_obj(obj)

        _obj = CMGroup.parse_obj({
            "organisation_id": obj.get("organisationId"),
            "name": obj.get("name"),
            "user_id_list": obj.get("userIdList")
        })
        return _obj


