# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.14.12
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator
from openapi_client.models.cm_gdpr_search_details import CMGdprSearchDetails

class GdprProject(BaseModel):
    """
    GdprProject
    """
    id: Optional[StrictStr] = None
    created_by: StrictStr = Field(..., alias="createdBy")
    last_modified_by: StrictStr = Field(..., alias="lastModifiedBy")
    created: datetime = Field(...)
    last_modified: datetime = Field(..., alias="lastModified")
    last_result_update: Optional[datetime] = Field(None, alias="lastResultUpdate")
    project_type: StrictStr = Field(..., alias="projectType")
    status: StrictStr = Field(...)
    search_details: CMGdprSearchDetails = Field(..., alias="searchDetails")
    __properties = ["id", "createdBy", "lastModifiedBy", "created", "lastModified", "lastResultUpdate", "projectType", "status", "searchDetails"]

    @validator('project_type')
    def project_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('FREESTYLE', 'RIGHT_TO_BE_FORGOTTEN_REQUEST', 'DATA_ACCESS_REQUEST'):
            raise ValueError("must be one of enum values ('FREESTYLE', 'RIGHT_TO_BE_FORGOTTEN_REQUEST', 'DATA_ACCESS_REQUEST')")
        return value

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('NEW', 'IN_PROGRESS', 'COMPLETED'):
            raise ValueError("must be one of enum values ('NEW', 'IN_PROGRESS', 'COMPLETED')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GdprProject:
        """Create an instance of GdprProject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of search_details
        if self.search_details:
            _dict['searchDetails'] = self.search_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GdprProject:
        """Create an instance of GdprProject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GdprProject.parse_obj(obj)

        _obj = GdprProject.parse_obj({
            "id": obj.get("id"),
            "created_by": obj.get("createdBy"),
            "last_modified_by": obj.get("lastModifiedBy"),
            "created": obj.get("created"),
            "last_modified": obj.get("lastModified"),
            "last_result_update": obj.get("lastResultUpdate"),
            "project_type": obj.get("projectType"),
            "status": obj.get("status"),
            "search_details": CMGdprSearchDetails.from_dict(obj.get("searchDetails")) if obj.get("searchDetails") is not None else None
        })
        return _obj


