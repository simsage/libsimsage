# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.14.12
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictInt, StrictStr

from typing import List, Optional, Union

from openapi_client.models.cm_document import CMDocument
from openapi_client.models.cm_document_type_frequency import CMDocumentTypeFrequency
from openapi_client.models.cm_get_html import CMGetHtml
from openapi_client.models.cm_inventorize_parameters import CMInventorizeParameters
from openapi_client.models.cm_parquet_time_list import CMParquetTimeList
from openapi_client.models.cm_query_focussed_summarization import CMQueryFocussedSummarization
from openapi_client.models.cm_query_focussed_summarization_request import CMQueryFocussedSummarizationRequest
from openapi_client.models.cm_single_document_summary import CMSingleDocumentSummary
from openapi_client.models.cm_single_document_summary_request import CMSingleDocumentSummaryRequest
from openapi_client.models.cm_version import CMVersion
from openapi_client.models.json_message import JsonMessage

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DocumentApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def document(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], url : Annotated[StrictStr, Field(..., description="the document's url, base64 encoded, a unique id identifying a document.")], **kwargs) -> CMDocument:  # noqa: E501
        """get Document  # noqa: E501

        return a document's details given a base64 encoded url  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.document(session_id, organisation_id, kb_id, url, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param url: the document's url, base64 encoded, a unique id identifying a document. (required)
        :type url: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMDocument
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the document_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.document_with_http_info(session_id, organisation_id, kb_id, url, **kwargs)  # noqa: E501

    @validate_arguments
    def document_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], url : Annotated[StrictStr, Field(..., description="the document's url, base64 encoded, a unique id identifying a document.")], **kwargs) -> ApiResponse:  # noqa: E501
        """get Document  # noqa: E501

        return a document's details given a base64 encoded url  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.document_with_http_info(session_id, organisation_id, kb_id, url, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param url: the document's url, base64 encoded, a unique id identifying a document. (required)
        :type url: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMDocument, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'organisation_id',
            'kb_id',
            'url'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method document" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['url']:
            _path_params['url'] = _params['url']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "CMDocument",
        }

        return self.api_client.call_api(
            '/api/document/document/{organisationId}/{kbId}/{url}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_parquet_file(self, ott : Annotated[StrictStr, Field(..., description="a one-time token for downloading data.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], date_time : Annotated[StrictInt, Field(..., description="a unix date-time specifying the exact snapshot to download")], **kwargs) -> bytearray:  # noqa: E501
        """Download Parquet File  # noqa: E501

        Download an inventory parquet file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_parquet_file(ott, organisation_id, kb_id, date_time, async_req=True)
        >>> result = thread.get()

        :param ott: a one-time token for downloading data. (required)
        :type ott: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param date_time: a unix date-time specifying the exact snapshot to download (required)
        :type date_time: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_parquet_file_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_parquet_file_with_http_info(ott, organisation_id, kb_id, date_time, **kwargs)  # noqa: E501

    @validate_arguments
    def get_parquet_file_with_http_info(self, ott : Annotated[StrictStr, Field(..., description="a one-time token for downloading data.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], date_time : Annotated[StrictInt, Field(..., description="a unix date-time specifying the exact snapshot to download")], **kwargs) -> ApiResponse:  # noqa: E501
        """Download Parquet File  # noqa: E501

        Download an inventory parquet file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_parquet_file_with_http_info(ott, organisation_id, kb_id, date_time, async_req=True)
        >>> result = thread.get()

        :param ott: a one-time token for downloading data. (required)
        :type ott: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param date_time: a unix date-time specifying the exact snapshot to download (required)
        :type date_time: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'ott',
            'organisation_id',
            'kb_id',
            'date_time'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parquet_file" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['date_time']:
            _path_params['dateTime'] = _params['date_time']


        # process the query parameters
        _query_params = []
        if _params.get('ott') is not None:  # noqa: E501
            _query_params.append(('ott', _params['ott']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/octet-stream'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "bytearray",
        }

        return self.api_client.call_api(
            '/api/document/parquet/{organisationId}/{kbId}/{dateTime}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_parquet_list(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], page : Annotated[StrictInt, Field(..., description="pagination control, the page index")], page_size : Annotated[StrictInt, Field(..., description="pagination control, the size of a page")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> CMParquetTimeList:  # noqa: E501
        """Parquet available time list  # noqa: E501

        Return a list of inventory times available for download.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_parquet_list(organisation_id, kb_id, page, page_size, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param page: pagination control, the page index (required)
        :type page: int
        :param page_size: pagination control, the size of a page (required)
        :type page_size: int
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMParquetTimeList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_parquet_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_parquet_list_with_http_info(organisation_id, kb_id, page, page_size, session_id, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def get_parquet_list_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], page : Annotated[StrictInt, Field(..., description="pagination control, the page index")], page_size : Annotated[StrictInt, Field(..., description="pagination control, the size of a page")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Parquet available time list  # noqa: E501

        Return a list of inventory times available for download.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_parquet_list_with_http_info(organisation_id, kb_id, page, page_size, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param page: pagination control, the page index (required)
        :type page: int
        :param page_size: pagination control, the size of a page (required)
        :type page_size: int
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMParquetTimeList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'kb_id',
            'page',
            'page_size',
            'session_id',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parquet_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['page']:
            _path_params['page'] = _params['page']

        if _params['page_size']:
            _path_params['pageSize'] = _params['page_size']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "CMParquetTimeList",
        }

        return self.api_client.call_api(
            '/api/document/parquets/{organisationId}/{kbId}/{page}/{pageSize}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_spreadsheet(self, ott : Annotated[StrictStr, Field(..., description="a one-time token for downloading data.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], date_time : Annotated[StrictInt, Field(..., description="a unix date-time specifying the exact snapshot to download")], **kwargs) -> bytearray:  # noqa: E501
        """Inventory breakdown Spreadsheet  # noqa: E501

        Download an inventory breakdown spreadsheet for a given date-time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_spreadsheet(ott, organisation_id, kb_id, date_time, async_req=True)
        >>> result = thread.get()

        :param ott: a one-time token for downloading data. (required)
        :type ott: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param date_time: a unix date-time specifying the exact snapshot to download (required)
        :type date_time: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_spreadsheet_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_spreadsheet_with_http_info(ott, organisation_id, kb_id, date_time, **kwargs)  # noqa: E501

    @validate_arguments
    def get_spreadsheet_with_http_info(self, ott : Annotated[StrictStr, Field(..., description="a one-time token for downloading data.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], date_time : Annotated[StrictInt, Field(..., description="a unix date-time specifying the exact snapshot to download")], **kwargs) -> ApiResponse:  # noqa: E501
        """Inventory breakdown Spreadsheet  # noqa: E501

        Download an inventory breakdown spreadsheet for a given date-time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_spreadsheet_with_http_info(ott, organisation_id, kb_id, date_time, async_req=True)
        >>> result = thread.get()

        :param ott: a one-time token for downloading data. (required)
        :type ott: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param date_time: a unix date-time specifying the exact snapshot to download (required)
        :type date_time: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'ott',
            'organisation_id',
            'kb_id',
            'date_time'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_spreadsheet" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['date_time']:
            _path_params['dateTime'] = _params['date_time']


        # process the query parameters
        _query_params = []
        if _params.get('ott') is not None:  # noqa: E501
            _query_params.append(('ott', _params['ott']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "bytearray",
        }

        return self.api_client.call_api(
            '/api/document/spreadsheet/{organisationId}/{kbId}/{dateTime}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_stats1(self, ott : Annotated[StrictStr, Field(..., description="a one-time token for downloading data.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], date_time : Annotated[StrictInt, Field(..., description="a unix date-time specifying the exact snapshot to download")], **kwargs) -> List[CMDocumentTypeFrequency]:  # noqa: E501
        """Document Frequency Statistics  # noqa: E501

        Return a document frequency statistics report - frequencies of different document types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_stats1(ott, organisation_id, kb_id, date_time, async_req=True)
        >>> result = thread.get()

        :param ott: a one-time token for downloading data. (required)
        :type ott: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param date_time: a unix date-time specifying the exact snapshot to download (required)
        :type date_time: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[CMDocumentTypeFrequency]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_stats1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_stats1_with_http_info(ott, organisation_id, kb_id, date_time, **kwargs)  # noqa: E501

    @validate_arguments
    def get_stats1_with_http_info(self, ott : Annotated[StrictStr, Field(..., description="a one-time token for downloading data.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], date_time : Annotated[StrictInt, Field(..., description="a unix date-time specifying the exact snapshot to download")], **kwargs) -> ApiResponse:  # noqa: E501
        """Document Frequency Statistics  # noqa: E501

        Return a document frequency statistics report - frequencies of different document types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_stats1_with_http_info(ott, organisation_id, kb_id, date_time, async_req=True)
        >>> result = thread.get()

        :param ott: a one-time token for downloading data. (required)
        :type ott: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param date_time: a unix date-time specifying the exact snapshot to download (required)
        :type date_time: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[CMDocumentTypeFrequency], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'ott',
            'organisation_id',
            'kb_id',
            'date_time'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_stats1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['date_time']:
            _path_params['dateTime'] = _params['date_time']


        # process the query parameters
        _query_params = []
        if _params.get('ott') is not None:  # noqa: E501
            _query_params.append(('ott', _params['ott']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "List[CMDocumentTypeFrequency]",
        }

        return self.api_client.call_api(
            '/api/document/stats/frequencies/{organisationId}/{kbId}/{dateTime}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def inventorize_documents(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_inventorize_parameters : CMInventorizeParameters, api_version : Optional[StrictStr] = None, **kwargs) -> JsonMessage:  # noqa: E501
        """Document Inventory  # noqa: E501

        Start the async inventorize process for documents of a given organisation/kb.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.inventorize_documents(session_id, cm_inventorize_parameters, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_inventorize_parameters: (required)
        :type cm_inventorize_parameters: CMInventorizeParameters
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JsonMessage
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the inventorize_documents_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.inventorize_documents_with_http_info(session_id, cm_inventorize_parameters, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def inventorize_documents_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_inventorize_parameters : CMInventorizeParameters, api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Document Inventory  # noqa: E501

        Start the async inventorize process for documents of a given organisation/kb.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.inventorize_documents_with_http_info(session_id, cm_inventorize_parameters, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_inventorize_parameters: (required)
        :type cm_inventorize_parameters: CMInventorizeParameters
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JsonMessage, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_inventorize_parameters',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inventorize_documents" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_inventorize_parameters'] is not None:
            _body_params = _params['cm_inventorize_parameters']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "JsonMessage",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/document/inventorize', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def inventorize_indexes(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_inventorize_parameters : CMInventorizeParameters, api_version : Optional[StrictStr] = None, **kwargs) -> JsonMessage:  # noqa: E501
        """Index Inventory  # noqa: E501

        Start the async inventorize process for the optimized-indexes of a given organisation/kb.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.inventorize_indexes(session_id, cm_inventorize_parameters, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_inventorize_parameters: (required)
        :type cm_inventorize_parameters: CMInventorizeParameters
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JsonMessage
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the inventorize_indexes_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.inventorize_indexes_with_http_info(session_id, cm_inventorize_parameters, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def inventorize_indexes_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_inventorize_parameters : CMInventorizeParameters, api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Index Inventory  # noqa: E501

        Start the async inventorize process for the optimized-indexes of a given organisation/kb.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.inventorize_indexes_with_http_info(session_id, cm_inventorize_parameters, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_inventorize_parameters: (required)
        :type cm_inventorize_parameters: CMInventorizeParameters
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JsonMessage, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_inventorize_parameters',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inventorize_indexes" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_inventorize_parameters'] is not None:
            _body_params = _params['cm_inventorize_parameters']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "JsonMessage",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/document/inventorize-indexes', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def preview(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], client_id : Annotated[StrictStr, Field(..., description="the client-id, a persistent id identifying the remote client making this request.")], session_id : Annotated[StrictStr, Field(..., description="the session-id, the security required for making this request.")], url_id : Annotated[StrictInt, Field(..., description="the SimSage id for this url")], page : Annotated[StrictInt, Field(..., description="what page to render")], **kwargs) -> bytearray:  # noqa: E501
        """get Preview  # noqa: E501

        get a preview for a document if available by url  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.preview(organisation_id, kb_id, client_id, session_id, url_id, page, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param client_id: the client-id, a persistent id identifying the remote client making this request. (required)
        :type client_id: str
        :param session_id: the session-id, the security required for making this request. (required)
        :type session_id: str
        :param url_id: the SimSage id for this url (required)
        :type url_id: int
        :param page: what page to render (required)
        :type page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the preview_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.preview_with_http_info(organisation_id, kb_id, client_id, session_id, url_id, page, **kwargs)  # noqa: E501

    @validate_arguments
    def preview_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], client_id : Annotated[StrictStr, Field(..., description="the client-id, a persistent id identifying the remote client making this request.")], session_id : Annotated[StrictStr, Field(..., description="the session-id, the security required for making this request.")], url_id : Annotated[StrictInt, Field(..., description="the SimSage id for this url")], page : Annotated[StrictInt, Field(..., description="what page to render")], **kwargs) -> ApiResponse:  # noqa: E501
        """get Preview  # noqa: E501

        get a preview for a document if available by url  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.preview_with_http_info(organisation_id, kb_id, client_id, session_id, url_id, page, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param client_id: the client-id, a persistent id identifying the remote client making this request. (required)
        :type client_id: str
        :param session_id: the session-id, the security required for making this request. (required)
        :type session_id: str
        :param url_id: the SimSage id for this url (required)
        :type url_id: int
        :param page: what page to render (required)
        :type page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'kb_id',
            'client_id',
            'session_id',
            'url_id',
            'page'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method preview" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['client_id']:
            _path_params['clientId'] = _params['client_id']

        if _params['session_id']:
            _path_params['sessionId'] = _params['session_id']

        if _params['url_id']:
            _path_params['urlId'] = _params['url_id']

        if _params['page']:
            _path_params['page'] = _params['page']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'image/jpeg', 'image/svg+xml'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "bytearray",
        }

        return self.api_client.call_api(
            '/api/document/preview/{organisationId}/{kbId}/{clientId}/{sessionId}/{urlId}/{page}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def preview_html(self, session_id : Annotated[StrictStr, Field(..., description="a valid session-guid id or a anonymous user-id.")], cm_get_html : CMGetHtml, **kwargs) -> CMGetHtml:  # noqa: E501
        """Preview HTML  # noqa: E501

        get a preview HTML page for a document if available by url  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.preview_html(session_id, cm_get_html, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid session-guid id or a anonymous user-id. (required)
        :type session_id: str
        :param cm_get_html: (required)
        :type cm_get_html: CMGetHtml
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMGetHtml
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the preview_html_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.preview_html_with_http_info(session_id, cm_get_html, **kwargs)  # noqa: E501

    @validate_arguments
    def preview_html_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid session-guid id or a anonymous user-id.")], cm_get_html : CMGetHtml, **kwargs) -> ApiResponse:  # noqa: E501
        """Preview HTML  # noqa: E501

        get a preview HTML page for a document if available by url  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.preview_html_with_http_info(session_id, cm_get_html, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid session-guid id or a anonymous user-id. (required)
        :type session_id: str
        :param cm_get_html: (required)
        :type cm_get_html: CMGetHtml
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMGetHtml, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_get_html'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method preview_html" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_get_html'] is not None:
            _body_params = _params['cm_get_html']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "CMGetHtml",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/document/preview/html', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def query_focussed_summarization(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_query_focussed_summarization_request : CMQueryFocussedSummarizationRequest, api_version : Optional[StrictStr] = None, **kwargs) -> CMQueryFocussedSummarization:  # noqa: E501
        """Summarize Documents for Query  # noqa: E501

        Summarize a set of documents given a list of urls and a query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.query_focussed_summarization(session_id, cm_query_focussed_summarization_request, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_query_focussed_summarization_request: (required)
        :type cm_query_focussed_summarization_request: CMQueryFocussedSummarizationRequest
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMQueryFocussedSummarization
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the query_focussed_summarization_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.query_focussed_summarization_with_http_info(session_id, cm_query_focussed_summarization_request, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def query_focussed_summarization_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_query_focussed_summarization_request : CMQueryFocussedSummarizationRequest, api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Summarize Documents for Query  # noqa: E501

        Summarize a set of documents given a list of urls and a query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.query_focussed_summarization_with_http_info(session_id, cm_query_focussed_summarization_request, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_query_focussed_summarization_request: (required)
        :type cm_query_focussed_summarization_request: CMQueryFocussedSummarizationRequest
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMQueryFocussedSummarization, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_query_focussed_summarization_request',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_focussed_summarization" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_query_focussed_summarization_request'] is not None:
            _body_params = _params['cm_query_focussed_summarization_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "CMQueryFocussedSummarization",
        }

        return self.api_client.call_api(
            '/api/document/qfs', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def remove_document(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], url : Annotated[StrictStr, Field(..., description="the base-64 encoded (no-prefix) url of the document")], source_id : Annotated[StrictInt, Field(..., description="the source-id of the crawler this document belongs to")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> JsonMessage:  # noqa: E501
        """Remove Document  # noqa: E501

        Remove/delete a document by its url.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_document(organisation_id, kb_id, url, source_id, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param url: the base-64 encoded (no-prefix) url of the document (required)
        :type url: str
        :param source_id: the source-id of the crawler this document belongs to (required)
        :type source_id: int
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JsonMessage
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the remove_document_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.remove_document_with_http_info(organisation_id, kb_id, url, source_id, session_id, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def remove_document_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], url : Annotated[StrictStr, Field(..., description="the base-64 encoded (no-prefix) url of the document")], source_id : Annotated[StrictInt, Field(..., description="the source-id of the crawler this document belongs to")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Remove Document  # noqa: E501

        Remove/delete a document by its url.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_document_with_http_info(organisation_id, kb_id, url, source_id, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param url: the base-64 encoded (no-prefix) url of the document (required)
        :type url: str
        :param source_id: the source-id of the crawler this document belongs to (required)
        :type source_id: int
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JsonMessage, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'kb_id',
            'url',
            'source_id',
            'session_id',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_document" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['url']:
            _path_params['url'] = _params['url']

        if _params['source_id']:
            _path_params['sourceId'] = _params['source_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "JsonMessage",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/document/document/{organisationId}/{kbId}/{url}/{sourceId}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def remove_parquet_file(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], date_time : Annotated[StrictInt, Field(..., description="a unix date-time specifying the exact snapshot to remove")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> List[JsonMessage]:  # noqa: E501
        """Delete Parquet File  # noqa: E501

        Remove an inventory breakdown spreadsheet/parquet file from the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_parquet_file(organisation_id, kb_id, date_time, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param date_time: a unix date-time specifying the exact snapshot to remove (required)
        :type date_time: int
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[JsonMessage]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the remove_parquet_file_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.remove_parquet_file_with_http_info(organisation_id, kb_id, date_time, session_id, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def remove_parquet_file_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], date_time : Annotated[StrictInt, Field(..., description="a unix date-time specifying the exact snapshot to remove")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Parquet File  # noqa: E501

        Remove an inventory breakdown spreadsheet/parquet file from the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_parquet_file_with_http_info(organisation_id, kb_id, date_time, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param date_time: a unix date-time specifying the exact snapshot to remove (required)
        :type date_time: int
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[JsonMessage], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'kb_id',
            'date_time',
            'session_id',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_parquet_file" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['date_time']:
            _path_params['dateTime'] = _params['date_time']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "List[JsonMessage]",
        }

        return self.api_client.call_api(
            '/api/document/parquet/{organisationId}/{kbId}/{dateTime}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def summarize_document(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_single_document_summary_request : CMSingleDocumentSummaryRequest, api_version : Optional[StrictStr] = None, **kwargs) -> CMSingleDocumentSummary:  # noqa: E501
        """Summarize a document  # noqa: E501

        Summarize a single document using an extractive summarization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.summarize_document(session_id, cm_single_document_summary_request, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_single_document_summary_request: (required)
        :type cm_single_document_summary_request: CMSingleDocumentSummaryRequest
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMSingleDocumentSummary
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the summarize_document_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.summarize_document_with_http_info(session_id, cm_single_document_summary_request, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def summarize_document_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_single_document_summary_request : CMSingleDocumentSummaryRequest, api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Summarize a document  # noqa: E501

        Summarize a single document using an extractive summarization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.summarize_document_with_http_info(session_id, cm_single_document_summary_request, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_single_document_summary_request: (required)
        :type cm_single_document_summary_request: CMSingleDocumentSummaryRequest
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMSingleDocumentSummary, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_single_document_summary_request',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method summarize_document" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_single_document_summary_request'] is not None:
            _body_params = _params['cm_single_document_summary_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "CMSingleDocumentSummary",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/document/summarize/document', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def version4(self, **kwargs) -> CMVersion:  # noqa: E501
        """Version  # noqa: E501

        Get the version of SimSage Document Services.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.version4(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMVersion
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the version4_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.version4_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def version4_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """Version  # noqa: E501

        Get the version of SimSage Document Services.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.version4_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMVersion, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method version4" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "CMVersion",
        }

        return self.api_client.call_api(
            '/api/document/version', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
