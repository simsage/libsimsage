# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.13.31
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictInt, StrictStr

from typing import Optional, Union

from openapi_client.models.cm_categorization import CMCategorization
from openapi_client.models.cm_categorization_paginated_list import CMCategorizationPaginatedList
from openapi_client.models.cm_optimize_index import CMOptimizeIndex
from openapi_client.models.cm_semantic_model_edit import CMSemanticModelEdit
from openapi_client.models.cm_semantics_paginated import CMSemanticsPaginated
from openapi_client.models.cm_semantics_paginated_result import CMSemanticsPaginatedResult
from openapi_client.models.cm_syn_set import CMSynSet
from openapi_client.models.cm_syn_set_find import CMSynSetFind
from openapi_client.models.cm_syn_set_list import CMSynSetList
from openapi_client.models.cm_synonym import CMSynonym
from openapi_client.models.cm_synonyms_paginated import CMSynonymsPaginated
from openapi_client.models.cm_synonyms_paginated_result import CMSynonymsPaginatedResult
from openapi_client.models.cm_version import CMVersion
from openapi_client.models.json_message import JsonMessage

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class LanguageApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def add_default_syn_sets(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> JsonMessage:  # noqa: E501
        """Add all default SynSets  # noqa: E501

        Add default syn-sets to the given org/kb  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_default_syn_sets(organisation_id, kb_id, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JsonMessage
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the add_default_syn_sets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.add_default_syn_sets_with_http_info(organisation_id, kb_id, session_id, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def add_default_syn_sets_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Add all default SynSets  # noqa: E501

        Add default syn-sets to the given org/kb  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_default_syn_sets_with_http_info(organisation_id, kb_id, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JsonMessage, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'kb_id',
            'session_id',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_default_syn_sets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/language/default-syn-sets/{organisationId}/{kbId}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_all_synonyms(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base to delete/remove (its guid id)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> JsonMessage:  # noqa: E501
        """Delete All Synonyms  # noqa: E501

        Delete all synonyms for a given org/kb  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_all_synonyms(organisation_id, kb_id, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base to delete/remove (its guid id) (required)
        :type kb_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JsonMessage
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_all_synonyms_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_all_synonyms_with_http_info(organisation_id, kb_id, session_id, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_all_synonyms_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base to delete/remove (its guid id)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete All Synonyms  # noqa: E501

        Delete all synonyms for a given org/kb  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_all_synonyms_with_http_info(organisation_id, kb_id, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base to delete/remove (its guid id) (required)
        :type kb_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JsonMessage, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'kb_id',
            'session_id',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_all_synonyms" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/language/delete-all-synonyms/{organisationId}/{kbId}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_categorization(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], categorization_label : Annotated[StrictStr, Field(..., description="the metadata (name) to remove")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> JsonMessage:  # noqa: E501
        """remove categorization  # noqa: E501

        remove a specific categorization for a given org/kb  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_categorization(organisation_id, kb_id, categorization_label, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param categorization_label: the metadata (name) to remove (required)
        :type categorization_label: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JsonMessage
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_categorization_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_categorization_with_http_info(organisation_id, kb_id, categorization_label, session_id, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_categorization_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], categorization_label : Annotated[StrictStr, Field(..., description="the metadata (name) to remove")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """remove categorization  # noqa: E501

        remove a specific categorization for a given org/kb  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_categorization_with_http_info(organisation_id, kb_id, categorization_label, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param categorization_label: the metadata (name) to remove (required)
        :type categorization_label: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JsonMessage, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'kb_id',
            'categorization_label',
            'session_id',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_categorization" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['categorization_label']:
            _path_params['categorizationLabel'] = _params['categorization_label']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/language/categorization/{organisationId}/{kbId}/{categorizationLabel}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_semantic(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], word : Annotated[StrictStr, Field(..., description="the word (more specific item) of the semantic to delete (eg. \"John\")")], semantic : Annotated[StrictStr, Field(..., description="the semantic of the word to delete (eg. \"person\")")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> JsonMessage:  # noqa: E501
        """Delete Semantic  # noqa: E501

        Remove an existing semantic from SimSage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_semantic(organisation_id, kb_id, word, semantic, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param word: the word (more specific item) of the semantic to delete (eg. \"John\") (required)
        :type word: str
        :param semantic: the semantic of the word to delete (eg. \"person\") (required)
        :type semantic: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JsonMessage
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_semantic_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_semantic_with_http_info(organisation_id, kb_id, word, semantic, session_id, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_semantic_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], word : Annotated[StrictStr, Field(..., description="the word (more specific item) of the semantic to delete (eg. \"John\")")], semantic : Annotated[StrictStr, Field(..., description="the semantic of the word to delete (eg. \"person\")")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Semantic  # noqa: E501

        Remove an existing semantic from SimSage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_semantic_with_http_info(organisation_id, kb_id, word, semantic, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param word: the word (more specific item) of the semantic to delete (eg. \"John\") (required)
        :type word: str
        :param semantic: the semantic of the word to delete (eg. \"person\") (required)
        :type semantic: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JsonMessage, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'kb_id',
            'word',
            'semantic',
            'session_id',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_semantic" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['word']:
            _path_params['word'] = _params['word']

        if _params['semantic']:
            _path_params['semantic'] = _params['semantic']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/language/delete-semantic/{organisationId}/{kbId}/{word}/{semantic}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_syn_set(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], lemma : Annotated[StrictStr, Field(..., description="the lemma (base word) of the syn-set to remove.")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> JsonMessage:  # noqa: E501
        """Delete SynSet  # noqa: E501

        Remove a syn-set from SimSage by lemma.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_syn_set(organisation_id, kb_id, lemma, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param lemma: the lemma (base word) of the syn-set to remove. (required)
        :type lemma: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JsonMessage
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_syn_set_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_syn_set_with_http_info(organisation_id, kb_id, lemma, session_id, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_syn_set_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], lemma : Annotated[StrictStr, Field(..., description="the lemma (base word) of the syn-set to remove.")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete SynSet  # noqa: E501

        Remove a syn-set from SimSage by lemma.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_syn_set_with_http_info(organisation_id, kb_id, lemma, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param lemma: the lemma (base word) of the syn-set to remove. (required)
        :type lemma: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JsonMessage, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'kb_id',
            'lemma',
            'session_id',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_syn_set" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['lemma']:
            _path_params['lemma'] = _params['lemma']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/language/delete-syn-set/{organisationId}/{kbId}/{lemma}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_synonym(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], id : Annotated[StrictInt, Field(..., description="the id of the synonym to remove.")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> JsonMessage:  # noqa: E501
        """Delete Synonym  # noqa: E501

        Delete a synonym using its id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_synonym(organisation_id, kb_id, id, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param id: the id of the synonym to remove. (required)
        :type id: int
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JsonMessage
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_synonym_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_synonym_with_http_info(organisation_id, kb_id, id, session_id, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_synonym_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], id : Annotated[StrictInt, Field(..., description="the id of the synonym to remove.")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Synonym  # noqa: E501

        Delete a synonym using its id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_synonym_with_http_info(organisation_id, kb_id, id, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param id: the id of the synonym to remove. (required)
        :type id: int
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JsonMessage, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'kb_id',
            'id',
            'session_id',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_synonym" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/language/delete-synonym/{organisationId}/{kbId}/{id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def find_syn_sets(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_syn_set_find : CMSynSetFind, api_version : Optional[StrictStr] = None, **kwargs) -> CMSynSetList:  # noqa: E501
        """Find SynSets  # noqa: E501

        Find syn-sets using filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_syn_sets(session_id, cm_syn_set_find, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_syn_set_find: (required)
        :type cm_syn_set_find: CMSynSetFind
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMSynSetList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the find_syn_sets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.find_syn_sets_with_http_info(session_id, cm_syn_set_find, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def find_syn_sets_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_syn_set_find : CMSynSetFind, api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Find SynSets  # noqa: E501

        Find syn-sets using filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_syn_sets_with_http_info(session_id, cm_syn_set_find, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_syn_set_find: (required)
        :type cm_syn_set_find: CMSynSetFind
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMSynSetList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_syn_set_find',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_syn_sets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_syn_set_find'] is not None:
            _body_params = _params['cm_syn_set_find']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "CMSynSetList",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/language/find-syn-sets', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_categorization_list(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], prev_categorization_label : Annotated[StrictStr, Field(..., description="the previous categorization label for pagination, or null if first page")], page_size : Annotated[StrictInt, Field(..., description="the size of the page returned")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> CMCategorizationPaginatedList:  # noqa: E501
        """categorization list  # noqa: E501

        get all categorizations for a given org/kb paginated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_categorization_list(organisation_id, kb_id, prev_categorization_label, page_size, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param prev_categorization_label: the previous categorization label for pagination, or null if first page (required)
        :type prev_categorization_label: str
        :param page_size: the size of the page returned (required)
        :type page_size: int
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMCategorizationPaginatedList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_categorization_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_categorization_list_with_http_info(organisation_id, kb_id, prev_categorization_label, page_size, session_id, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def get_categorization_list_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], prev_categorization_label : Annotated[StrictStr, Field(..., description="the previous categorization label for pagination, or null if first page")], page_size : Annotated[StrictInt, Field(..., description="the size of the page returned")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """categorization list  # noqa: E501

        get all categorizations for a given org/kb paginated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_categorization_list_with_http_info(organisation_id, kb_id, prev_categorization_label, page_size, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param prev_categorization_label: the previous categorization label for pagination, or null if first page (required)
        :type prev_categorization_label: str
        :param page_size: the size of the page returned (required)
        :type page_size: int
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMCategorizationPaginatedList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'kb_id',
            'prev_categorization_label',
            'page_size',
            'session_id',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_categorization_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['prev_categorization_label']:
            _path_params['prevCategorizationLabel'] = _params['prev_categorization_label']

        if _params['page_size']:
            _path_params['pageSize'] = _params['page_size']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "CMCategorizationPaginatedList",
        }

        return self.api_client.call_api(
            '/api/language/categorization/{organisationId}/{kbId}/{prevCategorizationLabel}/{pageSize}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_paginated(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_synonyms_paginated : CMSynonymsPaginated, api_version : Optional[StrictStr] = None, **kwargs) -> CMSynonymsPaginatedResult:  # noqa: E501
        """get Synonyms Paginated  # noqa: E501

        return a paginated list of synonyms with optional filtering.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_paginated(session_id, cm_synonyms_paginated, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_synonyms_paginated: (required)
        :type cm_synonyms_paginated: CMSynonymsPaginated
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMSynonymsPaginatedResult
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_paginated_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_paginated_with_http_info(session_id, cm_synonyms_paginated, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def get_paginated_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_synonyms_paginated : CMSynonymsPaginated, api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """get Synonyms Paginated  # noqa: E501

        return a paginated list of synonyms with optional filtering.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_paginated_with_http_info(session_id, cm_synonyms_paginated, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_synonyms_paginated: (required)
        :type cm_synonyms_paginated: CMSynonymsPaginated
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMSynonymsPaginatedResult, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_synonyms_paginated',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_paginated" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_synonyms_paginated'] is not None:
            _body_params = _params['cm_synonyms_paginated']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "CMSynonymsPaginatedResult",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/language/synonyms', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_semantics_paginated(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_semantics_paginated : CMSemanticsPaginated, api_version : Optional[StrictStr] = None, **kwargs) -> CMSemanticsPaginatedResult:  # noqa: E501
        """Semantics Paginated  # noqa: E501

        Return a paginated list of semantics with an optional filter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_semantics_paginated(session_id, cm_semantics_paginated, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_semantics_paginated: (required)
        :type cm_semantics_paginated: CMSemanticsPaginated
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMSemanticsPaginatedResult
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_semantics_paginated_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_semantics_paginated_with_http_info(session_id, cm_semantics_paginated, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def get_semantics_paginated_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_semantics_paginated : CMSemanticsPaginated, api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Semantics Paginated  # noqa: E501

        Return a paginated list of semantics with an optional filter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_semantics_paginated_with_http_info(session_id, cm_semantics_paginated, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_semantics_paginated: (required)
        :type cm_semantics_paginated: CMSemanticsPaginated
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMSemanticsPaginatedResult, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_semantics_paginated',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_semantics_paginated" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_semantics_paginated'] is not None:
            _body_params = _params['cm_semantics_paginated']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "CMSemanticsPaginatedResult",
        }

        return self.api_client.call_api(
            '/api/language/semantics', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def optimize_indexes(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_optimize_index : CMOptimizeIndex, api_version : Optional[StrictStr] = None, **kwargs) -> JsonMessage:  # noqa: E501
        """Optimize Indexes  # noqa: E501

        Force index optimization for a the given knowledge-base, now.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.optimize_indexes(session_id, cm_optimize_index, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_optimize_index: (required)
        :type cm_optimize_index: CMOptimizeIndex
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JsonMessage
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the optimize_indexes_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.optimize_indexes_with_http_info(session_id, cm_optimize_index, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def optimize_indexes_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_optimize_index : CMOptimizeIndex, api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Optimize Indexes  # noqa: E501

        Force index optimization for a the given knowledge-base, now.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.optimize_indexes_with_http_info(session_id, cm_optimize_index, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_optimize_index: (required)
        :type cm_optimize_index: CMOptimizeIndex
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JsonMessage, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_optimize_index',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method optimize_indexes" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_optimize_index'] is not None:
            _body_params = _params['cm_optimize_index']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/language/optimize-indexes', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def redact_document(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], url : Annotated[StrictStr, Field(..., description="the base-64 encoded (no-prefix) url of the document")], entity_csv : Annotated[StrictStr, Field(..., description="a csv list of entities to redact (e.g. person,location)")], word_csv : Annotated[StrictStr, Field(..., description="a csv list of additional words to redact (e.g. John,Markov.  Use null for ignore.)")], allow_words_csv : Annotated[StrictStr, Field(..., description="a csv list of words to not-redact (e.g. John,Markov.  Use null for ignore.)")], session_id : Annotated[Optional[StrictStr], Field(description="an optional SimSage Session id.")] = None, **kwargs) -> bytearray:  # noqa: E501
        """Redact Document  # noqa: E501

        Create a redacted version of a document as a PDF given its url.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.redact_document(organisation_id, kb_id, url, entity_csv, word_csv, allow_words_csv, session_id, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param url: the base-64 encoded (no-prefix) url of the document (required)
        :type url: str
        :param entity_csv: a csv list of entities to redact (e.g. person,location) (required)
        :type entity_csv: str
        :param word_csv: a csv list of additional words to redact (e.g. John,Markov.  Use null for ignore.) (required)
        :type word_csv: str
        :param allow_words_csv: a csv list of words to not-redact (e.g. John,Markov.  Use null for ignore.) (required)
        :type allow_words_csv: str
        :param session_id: an optional SimSage Session id.
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the redact_document_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.redact_document_with_http_info(organisation_id, kb_id, url, entity_csv, word_csv, allow_words_csv, session_id, **kwargs)  # noqa: E501

    @validate_arguments
    def redact_document_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], url : Annotated[StrictStr, Field(..., description="the base-64 encoded (no-prefix) url of the document")], entity_csv : Annotated[StrictStr, Field(..., description="a csv list of entities to redact (e.g. person,location)")], word_csv : Annotated[StrictStr, Field(..., description="a csv list of additional words to redact (e.g. John,Markov.  Use null for ignore.)")], allow_words_csv : Annotated[StrictStr, Field(..., description="a csv list of words to not-redact (e.g. John,Markov.  Use null for ignore.)")], session_id : Annotated[Optional[StrictStr], Field(description="an optional SimSage Session id.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Redact Document  # noqa: E501

        Create a redacted version of a document as a PDF given its url.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.redact_document_with_http_info(organisation_id, kb_id, url, entity_csv, word_csv, allow_words_csv, session_id, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param url: the base-64 encoded (no-prefix) url of the document (required)
        :type url: str
        :param entity_csv: a csv list of entities to redact (e.g. person,location) (required)
        :type entity_csv: str
        :param word_csv: a csv list of additional words to redact (e.g. John,Markov.  Use null for ignore.) (required)
        :type word_csv: str
        :param allow_words_csv: a csv list of words to not-redact (e.g. John,Markov.  Use null for ignore.) (required)
        :type allow_words_csv: str
        :param session_id: an optional SimSage Session id.
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'kb_id',
            'url',
            'entity_csv',
            'word_csv',
            'allow_words_csv',
            'session_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method redact_document" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['url']:
            _path_params['url'] = _params['url']

        if _params['entity_csv']:
            _path_params['entityCsv'] = _params['entity_csv']

        if _params['word_csv']:
            _path_params['wordCsv'] = _params['word_csv']

        if _params['allow_words_csv']:
            _path_params['allowWordsCsv'] = _params['allow_words_csv']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/pdf'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "bytearray",
        }

        return self.api_client.call_api(
            '/api/language/redact/{organisationId}/{kbId}/{url}/{entityCsv}/{wordCsv}/{allowWordsCsv}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def save_categorization(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_categorization : CMCategorization, api_version : Optional[StrictStr] = None, **kwargs) -> JsonMessage:  # noqa: E501
        """save categorization  # noqa: E501

        create or update a specific categorization for a given org/kb  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.save_categorization(session_id, cm_categorization, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_categorization: (required)
        :type cm_categorization: CMCategorization
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JsonMessage
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the save_categorization_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.save_categorization_with_http_info(session_id, cm_categorization, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def save_categorization_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_categorization : CMCategorization, api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """save categorization  # noqa: E501

        create or update a specific categorization for a given org/kb  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.save_categorization_with_http_info(session_id, cm_categorization, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_categorization: (required)
        :type cm_categorization: CMCategorization
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JsonMessage, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_categorization',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_categorization" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_categorization'] is not None:
            _body_params = _params['cm_categorization']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/language/categorization', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def save_semantic(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_semantic_model_edit : CMSemanticModelEdit, api_version : Optional[StrictStr] = None, **kwargs) -> JsonMessage:  # noqa: E501
        """Save Semantic  # noqa: E501

        Create or update (save) a semantic in SimSage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.save_semantic(organisation_id, kb_id, session_id, cm_semantic_model_edit, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_semantic_model_edit: (required)
        :type cm_semantic_model_edit: CMSemanticModelEdit
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JsonMessage
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the save_semantic_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.save_semantic_with_http_info(organisation_id, kb_id, session_id, cm_semantic_model_edit, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def save_semantic_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_semantic_model_edit : CMSemanticModelEdit, api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Save Semantic  # noqa: E501

        Create or update (save) a semantic in SimSage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.save_semantic_with_http_info(organisation_id, kb_id, session_id, cm_semantic_model_edit, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_semantic_model_edit: (required)
        :type cm_semantic_model_edit: CMSemanticModelEdit
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JsonMessage, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'kb_id',
            'session_id',
            'cm_semantic_model_edit',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_semantic" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_semantic_model_edit'] is not None:
            _body_params = _params['cm_semantic_model_edit']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/language/save-semantic/{organisationId}/{kbId}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def save_syn_set(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_syn_set : CMSynSet, api_version : Optional[StrictStr] = None, **kwargs) -> JsonMessage:  # noqa: E501
        """Save SynSet  # noqa: E501

        Save (update/create) a syn-set in SimSage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.save_syn_set(organisation_id, kb_id, session_id, cm_syn_set, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_syn_set: (required)
        :type cm_syn_set: CMSynSet
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JsonMessage
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the save_syn_set_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.save_syn_set_with_http_info(organisation_id, kb_id, session_id, cm_syn_set, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def save_syn_set_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_syn_set : CMSynSet, api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Save SynSet  # noqa: E501

        Save (update/create) a syn-set in SimSage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.save_syn_set_with_http_info(organisation_id, kb_id, session_id, cm_syn_set, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_syn_set: (required)
        :type cm_syn_set: CMSynSet
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JsonMessage, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'kb_id',
            'session_id',
            'cm_syn_set',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_syn_set" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_syn_set'] is not None:
            _body_params = _params['cm_syn_set']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/language/save-syn-set/{organisationId}/{kbId}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def save_synonym(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_synonym : CMSynonym, api_version : Optional[StrictStr] = None, **kwargs) -> JsonMessage:  # noqa: E501
        """Save Synonym  # noqa: E501

        Save (update/create) a synonym.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.save_synonym(organisation_id, kb_id, session_id, cm_synonym, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_synonym: (required)
        :type cm_synonym: CMSynonym
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JsonMessage
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the save_synonym_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.save_synonym_with_http_info(organisation_id, kb_id, session_id, cm_synonym, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def save_synonym_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_synonym : CMSynonym, api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Save Synonym  # noqa: E501

        Save (update/create) a synonym.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.save_synonym_with_http_info(organisation_id, kb_id, session_id, cm_synonym, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_synonym: (required)
        :type cm_synonym: CMSynonym
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JsonMessage, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'kb_id',
            'session_id',
            'cm_synonym',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_synonym" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_synonym'] is not None:
            _body_params = _params['cm_synonym']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/language/save-synonym/{organisationId}/{kbId}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def tune_language_graph(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> JsonMessage:  # noqa: E501
        """Tune Graph  # noqa: E501

        Create a tuned language graph for a given organisation/knowledge-base.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tune_language_graph(organisation_id, kb_id, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JsonMessage
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the tune_language_graph_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.tune_language_graph_with_http_info(organisation_id, kb_id, session_id, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def tune_language_graph_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Tune Graph  # noqa: E501

        Create a tuned language graph for a given organisation/knowledge-base.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tune_language_graph_with_http_info(organisation_id, kb_id, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JsonMessage, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'kb_id',
            'session_id',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tune_language_graph" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/language/tune-graph/{organisationId}/{kbId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def version2(self, **kwargs) -> CMVersion:  # noqa: E501
        """Version  # noqa: E501

        Return the version of the SimSage Language Services.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.version2(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMVersion
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the version2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.version2_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def version2_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """Version  # noqa: E501

        Return the version of the SimSage Language Services.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.version2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMVersion, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method version2" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "CMVersion",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/language/version', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
