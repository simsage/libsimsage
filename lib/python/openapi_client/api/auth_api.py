# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.11.4
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictInt, StrictStr

from typing import List, Optional

from openapi_client.models.cm_group import CMGroup
from openapi_client.models.cm_group_list import CMGroupList
from openapi_client.models.cm_import_users import CMImportUsers
from openapi_client.models.cm_organisation import CMOrganisation
from openapi_client.models.cm_password_reset_request import CMPasswordResetRequest
from openapi_client.models.cm_session_version import CMSessionVersion
from openapi_client.models.cm_sign_in_parameters import CMSignInParameters
from openapi_client.models.cm_user_list import CMUserList
from openapi_client.models.cm_user_password_reset import CMUserPasswordReset
from openapi_client.models.cm_user_with_extras import CMUserWithExtras
from openapi_client.models.json_message import JsonMessage
from openapi_client.models.sign_in_admin import SignInAdmin
from openapi_client.models.sign_in_cmd import SignInCmd
from openapi_client.models.sign_in_dms_cmd import SignInDmsCmd

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class AuthApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def delete_group(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], name : Annotated[StrictStr, Field(..., description="the name of the group to remove.")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> JsonMessage:  # noqa: E501
        """Delete Group  # noqa: E501

        Delete a group by name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_group(organisation_id, name, session_id, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param name: the name of the group to remove. (required)
        :type name: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JsonMessage
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_group_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_group_with_http_info(organisation_id, name, session_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_group_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], name : Annotated[StrictStr, Field(..., description="the name of the group to remove.")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Group  # noqa: E501

        Delete a group by name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_group_with_http_info(organisation_id, name, session_id, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param name: the name of the group to remove. (required)
        :type name: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JsonMessage, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'name',
            'session_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_group" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['name']:
            _path_params['name'] = _params['name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "JsonMessage",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/auth/group/{organisationId}/{name}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_organisation(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation's id (a guid)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> JsonMessage:  # noqa: E501
        """Delete Organisation  # noqa: E501

        Delete / remove an organisation and its knowledge bases.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_organisation(organisation_id, session_id, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation's id (a guid) (required)
        :type organisation_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JsonMessage
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_organisation_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_organisation_with_http_info(organisation_id, session_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_organisation_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation's id (a guid)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Organisation  # noqa: E501

        Delete / remove an organisation and its knowledge bases.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_organisation_with_http_info(organisation_id, session_id, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation's id (a guid) (required)
        :type organisation_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JsonMessage, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'session_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_organisation" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "JsonMessage",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/auth/organisation/{organisationId}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_groups(self, organisation_id : Annotated[StrictStr, Field(..., description="the main organisation (its guid id) to get users for")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> CMGroupList:  # noqa: E501
        """Get Groups  # noqa: E501

        Return a paginated, filtered list of groups for a given organisation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_groups(organisation_id, session_id, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the main organisation (its guid id) to get users for (required)
        :type organisation_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMGroupList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_groups_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_groups_with_http_info(organisation_id, session_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_groups_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the main organisation (its guid id) to get users for")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get Groups  # noqa: E501

        Return a paginated, filtered list of groups for a given organisation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_groups_with_http_info(organisation_id, session_id, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the main organisation (its guid id) to get users for (required)
        :type organisation_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMGroupList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'session_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_groups" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "CMGroupList",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/auth/groups/{organisationId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_ott(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> str:  # noqa: E501
        """Get a one-time token.  # noqa: E501

        Get a one-time token associated with your session.  Can be used for download items.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ott(organisation_id, session_id, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_ott_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_ott_with_http_info(organisation_id, session_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_ott_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get a one-time token.  # noqa: E501

        Get a one-time token associated with your session.  Can be used for download items.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ott_with_http_info(organisation_id, session_id, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'session_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ott" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "str",
        }

        return self.api_client.call_api(
            '/api/auth/ott/{organisationId}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_user_organisation_list(self, filter : Annotated[StrictStr, Field(..., description="a text filter for partial string matching organisations")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> List[CMOrganisation]:  # noqa: E501
        """Get a list of Organisations  # noqa: E501

        Return all organisations that a user has access to (read-only or write).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_user_organisation_list(filter, session_id, async_req=True)
        >>> result = thread.get()

        :param filter: a text filter for partial string matching organisations (required)
        :type filter: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[CMOrganisation]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_user_organisation_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_user_organisation_list_with_http_info(filter, session_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_user_organisation_list_with_http_info(self, filter : Annotated[StrictStr, Field(..., description="a text filter for partial string matching organisations")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get a list of Organisations  # noqa: E501

        Return all organisations that a user has access to (read-only or write).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_user_organisation_list_with_http_info(filter, session_id, async_req=True)
        >>> result = thread.get()

        :param filter: a text filter for partial string matching organisations (required)
        :type filter: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[CMOrganisation], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'filter',
            'session_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_organisation_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['filter']:
            _path_params['filter'] = _params['filter']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "List[CMOrganisation]",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/auth/user/organisations/{filter}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_users_paginated(self, organisation_id : Annotated[StrictStr, Field(..., description="the main organisation (its guid id) to get users for")], page : Annotated[StrictInt, Field(..., description="the starting page, starting at zero")], page_size : Annotated[StrictInt, Field(..., description="the number of users per page")], filter : Annotated[StrictStr, Field(..., description="a text filter for partial string matching users")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> CMUserList:  # noqa: E501
        """Get Users paginated  # noqa: E501

        Return a paginated, filtered list of users for a given organisation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_users_paginated(organisation_id, page, page_size, filter, session_id, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the main organisation (its guid id) to get users for (required)
        :type organisation_id: str
        :param page: the starting page, starting at zero (required)
        :type page: int
        :param page_size: the number of users per page (required)
        :type page_size: int
        :param filter: a text filter for partial string matching users (required)
        :type filter: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMUserList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_users_paginated_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_users_paginated_with_http_info(organisation_id, page, page_size, filter, session_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_users_paginated_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the main organisation (its guid id) to get users for")], page : Annotated[StrictInt, Field(..., description="the starting page, starting at zero")], page_size : Annotated[StrictInt, Field(..., description="the number of users per page")], filter : Annotated[StrictStr, Field(..., description="a text filter for partial string matching users")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get Users paginated  # noqa: E501

        Return a paginated, filtered list of users for a given organisation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_users_paginated_with_http_info(organisation_id, page, page_size, filter, session_id, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the main organisation (its guid id) to get users for (required)
        :type organisation_id: str
        :param page: the starting page, starting at zero (required)
        :type page: int
        :param page_size: the number of users per page (required)
        :type page_size: int
        :param filter: a text filter for partial string matching users (required)
        :type filter: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMUserList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'page',
            'page_size',
            'filter',
            'session_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users_paginated" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['page']:
            _path_params['page'] = _params['page']

        if _params['page_size']:
            _path_params['pageSize'] = _params['page_size']

        if _params['filter']:
            _path_params['filter'] = _params['filter']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "CMUserList",
        }

        return self.api_client.call_api(
            '/api/auth/users-paginated/{organisationId}/{page}/{pageSize}/{filter}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def import_users_and_groups(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_import_users : CMImportUsers, api_version : Optional[StrictStr] = None, **kwargs) -> JsonMessage:  # noqa: E501
        """import_users_and_groups  # noqa: E501

        Import users and groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.import_users_and_groups(session_id, cm_import_users, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_import_users: (required)
        :type cm_import_users: CMImportUsers
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JsonMessage
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the import_users_and_groups_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.import_users_and_groups_with_http_info(session_id, cm_import_users, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def import_users_and_groups_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_import_users : CMImportUsers, api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """import_users_and_groups  # noqa: E501

        Import users and groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.import_users_and_groups_with_http_info(session_id, cm_import_users, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_import_users: (required)
        :type cm_import_users: CMImportUsers
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JsonMessage, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_import_users',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_users_and_groups" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_import_users'] is not None:
            _body_params = _params['cm_import_users']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "JsonMessage",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/auth/user/import', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def my_roles(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> List[str]:  # noqa: E501
        """Get users application roles  # noqa: E501

        Get Roles of logged in user for the logged in Organisation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.my_roles(organisation_id, session_id, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[str]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the my_roles_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.my_roles_with_http_info(organisation_id, session_id, **kwargs)  # noqa: E501

    @validate_arguments
    def my_roles_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get users application roles  # noqa: E501

        Get Roles of logged in user for the logged in Organisation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.my_roles_with_http_info(organisation_id, session_id, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[str], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'session_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method my_roles" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "List[str]",
        }

        return self.api_client.call_api(
            '/api/auth/myroles/{organisationId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def remove_user_from_organisation(self, user_id : Annotated[StrictStr, Field(..., description="the user's id (a guid)")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation's id (a guid)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> JsonMessage:  # noqa: E501
        """Remove User from Organisation  # noqa: E501

        Remove an existing user from an existing Organisation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_user_from_organisation(user_id, organisation_id, session_id, async_req=True)
        >>> result = thread.get()

        :param user_id: the user's id (a guid) (required)
        :type user_id: str
        :param organisation_id: the organisation's id (a guid) (required)
        :type organisation_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JsonMessage
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the remove_user_from_organisation_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.remove_user_from_organisation_with_http_info(user_id, organisation_id, session_id, **kwargs)  # noqa: E501

    @validate_arguments
    def remove_user_from_organisation_with_http_info(self, user_id : Annotated[StrictStr, Field(..., description="the user's id (a guid)")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation's id (a guid)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Remove User from Organisation  # noqa: E501

        Remove an existing user from an existing Organisation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_user_from_organisation_with_http_info(user_id, organisation_id, session_id, async_req=True)
        >>> result = thread.get()

        :param user_id: the user's id (a guid) (required)
        :type user_id: str
        :param organisation_id: the organisation's id (a guid) (required)
        :type organisation_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JsonMessage, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_id',
            'organisation_id',
            'session_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_user_from_organisation" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_id']:
            _path_params['userId'] = _params['user_id']

        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "JsonMessage",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/auth/organisation/user/{userId}/{organisationId}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def reset_password(self, cm_user_password_reset : CMUserPasswordReset, **kwargs) -> JsonMessage:  # noqa: E501
        """Perform a password-reset request.  # noqa: E501

        Reset Password  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.reset_password(cm_user_password_reset, async_req=True)
        >>> result = thread.get()

        :param cm_user_password_reset: (required)
        :type cm_user_password_reset: CMUserPasswordReset
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JsonMessage
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the reset_password_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.reset_password_with_http_info(cm_user_password_reset, **kwargs)  # noqa: E501

    @validate_arguments
    def reset_password_with_http_info(self, cm_user_password_reset : CMUserPasswordReset, **kwargs) -> ApiResponse:  # noqa: E501
        """Perform a password-reset request.  # noqa: E501

        Reset Password  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.reset_password_with_http_info(cm_user_password_reset, async_req=True)
        >>> result = thread.get()

        :param cm_user_password_reset: (required)
        :type cm_user_password_reset: CMUserPasswordReset
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JsonMessage, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'cm_user_password_reset'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_password" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_user_password_reset'] is not None:
            _body_params = _params['cm_user_password_reset']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/auth/reset-password', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def reset_password_request(self, cm_password_reset_request : CMPasswordResetRequest, **kwargs) -> JsonMessage:  # noqa: E501
        """Password Reset Request  # noqa: E501

        Start a password-reset request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.reset_password_request(cm_password_reset_request, async_req=True)
        >>> result = thread.get()

        :param cm_password_reset_request: (required)
        :type cm_password_reset_request: CMPasswordResetRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JsonMessage
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the reset_password_request_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.reset_password_request_with_http_info(cm_password_reset_request, **kwargs)  # noqa: E501

    @validate_arguments
    def reset_password_request_with_http_info(self, cm_password_reset_request : CMPasswordResetRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Password Reset Request  # noqa: E501

        Start a password-reset request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.reset_password_request_with_http_info(cm_password_reset_request, async_req=True)
        >>> result = thread.get()

        :param cm_password_reset_request: (required)
        :type cm_password_reset_request: CMPasswordResetRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JsonMessage, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'cm_password_reset_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_password_request" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_password_reset_request'] is not None:
            _body_params = _params['cm_password_reset_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "JsonMessage",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/auth/reset-password-request', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def save_group(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_group : CMGroup, **kwargs) -> JsonMessage:  # noqa: E501
        """Save Group  # noqa: E501

        Save (update/create) a group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.save_group(session_id, cm_group, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_group: (required)
        :type cm_group: CMGroup
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JsonMessage
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the save_group_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.save_group_with_http_info(session_id, cm_group, **kwargs)  # noqa: E501

    @validate_arguments
    def save_group_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_group : CMGroup, **kwargs) -> ApiResponse:  # noqa: E501
        """Save Group  # noqa: E501

        Save (update/create) a group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.save_group_with_http_info(session_id, cm_group, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_group: (required)
        :type cm_group: CMGroup
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JsonMessage, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_group'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_group" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_group'] is not None:
            _body_params = _params['cm_group']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "JsonMessage",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/auth/group', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def sign_in(self, cm_sign_in_parameters : CMSignInParameters, **kwargs) -> CMSessionVersion:  # noqa: E501
        """Sign In  # noqa: E501

        Administrator Sign-in of an existing user using username/password.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sign_in(cm_sign_in_parameters, async_req=True)
        >>> result = thread.get()

        :param cm_sign_in_parameters: (required)
        :type cm_sign_in_parameters: CMSignInParameters
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMSessionVersion
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the sign_in_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.sign_in_with_http_info(cm_sign_in_parameters, **kwargs)  # noqa: E501

    @validate_arguments
    def sign_in_with_http_info(self, cm_sign_in_parameters : CMSignInParameters, **kwargs) -> ApiResponse:  # noqa: E501
        """Sign In  # noqa: E501

        Administrator Sign-in of an existing user using username/password.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sign_in_with_http_info(cm_sign_in_parameters, async_req=True)
        >>> result = thread.get()

        :param cm_sign_in_parameters: (required)
        :type cm_sign_in_parameters: CMSignInParameters
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMSessionVersion, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'cm_sign_in_parameters'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sign_in" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_sign_in_parameters'] is not None:
            _body_params = _params['cm_sign_in_parameters']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "CMSessionVersion",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/auth/sign-in', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def sign_in_admin_using_jwt_msal(self, jwt : Annotated[StrictStr, Field(..., description="a valid JWT token.")], **kwargs) -> SignInAdmin:  # noqa: E501
        """JWT MSal Sign In  # noqa: E501

        Sign-in a user using an Msal JWT.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sign_in_admin_using_jwt_msal(jwt, async_req=True)
        >>> result = thread.get()

        :param jwt: a valid JWT token. (required)
        :type jwt: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SignInAdmin
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the sign_in_admin_using_jwt_msal_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.sign_in_admin_using_jwt_msal_with_http_info(jwt, **kwargs)  # noqa: E501

    @validate_arguments
    def sign_in_admin_using_jwt_msal_with_http_info(self, jwt : Annotated[StrictStr, Field(..., description="a valid JWT token.")], **kwargs) -> ApiResponse:  # noqa: E501
        """JWT MSal Sign In  # noqa: E501

        Sign-in a user using an Msal JWT.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sign_in_admin_using_jwt_msal_with_http_info(jwt, async_req=True)
        >>> result = thread.get()

        :param jwt: a valid JWT token. (required)
        :type jwt: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SignInAdmin, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'jwt'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sign_in_admin_using_jwt_msal" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['jwt']:
            _header_params['jwt'] = _params['jwt']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SignInAdmin",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/auth/admin/authenticate/msal', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def sign_in_dms_using_jwt_msal(self, jwt : Annotated[StrictStr, Field(..., description="a valid JWT token.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], **kwargs) -> SignInDmsCmd:  # noqa: E501
        """JWT MSal Sign In  # noqa: E501

        Sign-in a user using an Msal JWT.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sign_in_dms_using_jwt_msal(jwt, organisation_id, async_req=True)
        >>> result = thread.get()

        :param jwt: a valid JWT token. (required)
        :type jwt: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SignInDmsCmd
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the sign_in_dms_using_jwt_msal_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.sign_in_dms_using_jwt_msal_with_http_info(jwt, organisation_id, **kwargs)  # noqa: E501

    @validate_arguments
    def sign_in_dms_using_jwt_msal_with_http_info(self, jwt : Annotated[StrictStr, Field(..., description="a valid JWT token.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], **kwargs) -> ApiResponse:  # noqa: E501
        """JWT MSal Sign In  # noqa: E501

        Sign-in a user using an Msal JWT.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sign_in_dms_using_jwt_msal_with_http_info(jwt, organisation_id, async_req=True)
        >>> result = thread.get()

        :param jwt: a valid JWT token. (required)
        :type jwt: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SignInDmsCmd, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'jwt',
            'organisation_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sign_in_dms_using_jwt_msal" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['jwt']:
            _header_params['jwt'] = _params['jwt']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SignInDmsCmd",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/auth/dms/authenticate/msal/{organisationId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def sign_in_evolve_using_jwt_msal(self, jwt : Annotated[StrictStr, Field(..., description="a valid JWT token.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], **kwargs) -> SignInDmsCmd:  # noqa: E501
        """JWT MSal Sign In  # noqa: E501

        Sign-in an Evolve user using an Msal JWT.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sign_in_evolve_using_jwt_msal(jwt, organisation_id, async_req=True)
        >>> result = thread.get()

        :param jwt: a valid JWT token. (required)
        :type jwt: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SignInDmsCmd
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the sign_in_evolve_using_jwt_msal_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.sign_in_evolve_using_jwt_msal_with_http_info(jwt, organisation_id, **kwargs)  # noqa: E501

    @validate_arguments
    def sign_in_evolve_using_jwt_msal_with_http_info(self, jwt : Annotated[StrictStr, Field(..., description="a valid JWT token.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], **kwargs) -> ApiResponse:  # noqa: E501
        """JWT MSal Sign In  # noqa: E501

        Sign-in an Evolve user using an Msal JWT.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sign_in_evolve_using_jwt_msal_with_http_info(jwt, organisation_id, async_req=True)
        >>> result = thread.get()

        :param jwt: a valid JWT token. (required)
        :type jwt: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SignInDmsCmd, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'jwt',
            'organisation_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sign_in_evolve_using_jwt_msal" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['jwt']:
            _header_params['jwt'] = _params['jwt']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SignInDmsCmd",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/auth/evolve/authenticate/msal/{organisationId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def sign_in_search_using_jwt_msal(self, jwt : Annotated[StrictStr, Field(..., description="Schema valid JWT token.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], **kwargs) -> SignInCmd:  # noqa: E501
        """JWT MSal Sign In  # noqa: E501

        Sign-in a user using an Msal JWT.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sign_in_search_using_jwt_msal(jwt, organisation_id, async_req=True)
        >>> result = thread.get()

        :param jwt: Schema valid JWT token. (required)
        :type jwt: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SignInCmd
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the sign_in_search_using_jwt_msal_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.sign_in_search_using_jwt_msal_with_http_info(jwt, organisation_id, **kwargs)  # noqa: E501

    @validate_arguments
    def sign_in_search_using_jwt_msal_with_http_info(self, jwt : Annotated[StrictStr, Field(..., description="Schema valid JWT token.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], **kwargs) -> ApiResponse:  # noqa: E501
        """JWT MSal Sign In  # noqa: E501

        Sign-in a user using an Msal JWT.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sign_in_search_using_jwt_msal_with_http_info(jwt, organisation_id, async_req=True)
        >>> result = thread.get()

        :param jwt: Schema valid JWT token. (required)
        :type jwt: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SignInCmd, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'jwt',
            'organisation_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sign_in_search_using_jwt_msal" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['jwt']:
            _header_params['jwt'] = _params['jwt']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "SignInCmd",
        }

        return self.api_client.call_api(
            '/api/auth/search/authenticate/msal/{organisationId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def sign_out(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> JsonMessage:  # noqa: E501
        """Sign Out  # noqa: E501

        Sign-out any signed-in user (owner of the session object only).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sign_out(session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JsonMessage
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the sign_out_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.sign_out_with_http_info(session_id, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def sign_out_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Sign Out  # noqa: E501

        Sign-out any signed-in user (owner of the session object only).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sign_out_with_http_info(session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JsonMessage, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sign_out" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "JsonMessage",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/auth/sign-out', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_organisation(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_organisation : CMOrganisation, **kwargs) -> CMOrganisation:  # noqa: E501
        """Save Organisation  # noqa: E501

        Update or Create an organisation (save an organisation).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_organisation(session_id, cm_organisation, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_organisation: (required)
        :type cm_organisation: CMOrganisation
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMOrganisation
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_organisation_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_organisation_with_http_info(session_id, cm_organisation, **kwargs)  # noqa: E501

    @validate_arguments
    def update_organisation_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_organisation : CMOrganisation, **kwargs) -> ApiResponse:  # noqa: E501
        """Save Organisation  # noqa: E501

        Update or Create an organisation (save an organisation).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_organisation_with_http_info(session_id, cm_organisation, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_organisation: (required)
        :type cm_organisation: CMOrganisation
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMOrganisation, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_organisation'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_organisation" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_organisation'] is not None:
            _body_params = _params['cm_organisation']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "CMOrganisation",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/auth/organisation', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_user(self, organisation_id : Annotated[StrictStr, Field(..., description="the main organisation (its guid id) to update a user in.")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_user_with_extras : CMUserWithExtras, **kwargs) -> CMUserWithExtras:  # noqa: E501
        """update_user  # noqa: E501

        Update or Create a user (save a user).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_user(organisation_id, session_id, cm_user_with_extras, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the main organisation (its guid id) to update a user in. (required)
        :type organisation_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_user_with_extras: (required)
        :type cm_user_with_extras: CMUserWithExtras
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMUserWithExtras
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_user_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_user_with_http_info(organisation_id, session_id, cm_user_with_extras, **kwargs)  # noqa: E501

    @validate_arguments
    def update_user_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the main organisation (its guid id) to update a user in.")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_user_with_extras : CMUserWithExtras, **kwargs) -> ApiResponse:  # noqa: E501
        """update_user  # noqa: E501

        Update or Create a user (save a user).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_user_with_http_info(organisation_id, session_id, cm_user_with_extras, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the main organisation (its guid id) to update a user in. (required)
        :type organisation_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_user_with_extras: (required)
        :type cm_user_with_extras: CMUserWithExtras
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMUserWithExtras, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'session_id',
            'cm_user_with_extras'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_user" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_user_with_extras'] is not None:
            _body_params = _params['cm_user_with_extras']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "CMUserWithExtras",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/auth/user/{organisationId}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def version8(self, **kwargs) -> SignInCmd:  # noqa: E501
        """Get Version  # noqa: E501

        Get the version of SimSage Auth Services.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.version8(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SignInCmd
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the version8_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.version8_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def version8_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Version  # noqa: E501

        Get the version of SimSage Auth Services.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.version8_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SignInCmd, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method version8" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "SignInCmd",
        }

        return self.api_client.call_api(
            '/api/auth/version', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
