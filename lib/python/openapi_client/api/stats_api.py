# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.12.19
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictInt, StrictStr

from typing import List, Optional

from openapi_client.models.cm_command_queue_item import CMCommandQueueItem
from openapi_client.models.cm_logger_entry import CMLoggerEntry
from openapi_client.models.cm_return_statistics import CMReturnStatistics
from openapi_client.models.cm_version import CMVersion
from openapi_client.models.optimize_indexes_get_report_cmd import OptimizeIndexesGetReportCmd
from openapi_client.models.optimize_indexes_get_reports_cmd import OptimizeIndexesGetReportsCmd

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class StatsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_index_optimization_report(self, session_id : Annotated[StrictStr, Field(..., description="a valid session-guid id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], id : Annotated[StrictInt, Field(..., description="the id of the report")], **kwargs) -> List[OptimizeIndexesGetReportCmd]:  # noqa: E501
        """get an optimization report  # noqa: E501

        return an optimization report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_index_optimization_report(session_id, organisation_id, kb_id, id, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid session-guid id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param id: the id of the report (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[OptimizeIndexesGetReportCmd]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_index_optimization_report_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_index_optimization_report_with_http_info(session_id, organisation_id, kb_id, id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_index_optimization_report_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid session-guid id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], id : Annotated[StrictInt, Field(..., description="the id of the report")], **kwargs) -> ApiResponse:  # noqa: E501
        """get an optimization report  # noqa: E501

        return an optimization report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_index_optimization_report_with_http_info(session_id, organisation_id, kb_id, id, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid session-guid id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param id: the id of the report (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[OptimizeIndexesGetReportCmd], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'organisation_id',
            'kb_id',
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_index_optimization_report" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "List[OptimizeIndexesGetReportCmd]",
        }

        return self.api_client.call_api(
            '/api/stats/report/{organisationId}/{kbId}/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_index_optimization_reports(self, session_id : Annotated[StrictStr, Field(..., description="a valid session-guid id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], **kwargs) -> List[OptimizeIndexesGetReportsCmd]:  # noqa: E501
        """get optimization report list  # noqa: E501

        return a list of optimization reports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_index_optimization_reports(session_id, organisation_id, kb_id, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid session-guid id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[OptimizeIndexesGetReportsCmd]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_index_optimization_reports_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_index_optimization_reports_with_http_info(session_id, organisation_id, kb_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_index_optimization_reports_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid session-guid id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], **kwargs) -> ApiResponse:  # noqa: E501
        """get optimization report list  # noqa: E501

        return a list of optimization reports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_index_optimization_reports_with_http_info(session_id, organisation_id, kb_id, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid session-guid id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[OptimizeIndexesGetReportsCmd], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'organisation_id',
            'kb_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_index_optimization_reports" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "List[OptimizeIndexesGetReportsCmd]",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/stats/reports/{organisationId}/{kbId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_stats(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], year : Annotated[StrictInt, Field(..., description="the year to get stats for")], month : Annotated[StrictInt, Field(..., description="the month to get stats for")], top : Annotated[StrictInt, Field(..., description="how many stats to return")], api_version : Optional[StrictStr] = None, **kwargs) -> CMReturnStatistics:  # noqa: E501
        """Get usage Statistics  # noqa: E501

        Get all statistics for a given month, including some global ones.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_stats(session_id, organisation_id, kb_id, year, month, top, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param year: the year to get stats for (required)
        :type year: int
        :param month: the month to get stats for (required)
        :type month: int
        :param top: how many stats to return (required)
        :type top: int
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMReturnStatistics
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_stats_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_stats_with_http_info(session_id, organisation_id, kb_id, year, month, top, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def get_stats_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], year : Annotated[StrictInt, Field(..., description="the year to get stats for")], month : Annotated[StrictInt, Field(..., description="the month to get stats for")], top : Annotated[StrictInt, Field(..., description="how many stats to return")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get usage Statistics  # noqa: E501

        Get all statistics for a given month, including some global ones.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_stats_with_http_info(session_id, organisation_id, kb_id, year, month, top, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param year: the year to get stats for (required)
        :type year: int
        :param month: the month to get stats for (required)
        :type month: int
        :param top: how many stats to return (required)
        :type top: int
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMReturnStatistics, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'organisation_id',
            'kb_id',
            'year',
            'month',
            'top',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_stats" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['year']:
            _path_params['year'] = _params['year']

        if _params['month']:
            _path_params['month'] = _params['month']

        if _params['top']:
            _path_params['top'] = _params['top']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "CMReturnStatistics",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/stats/stats/{organisationId}/{kbId}/{year}/{month}/{top}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def sim_sage_status(self, session_id : Annotated[StrictStr, Field(..., description="a valid session-guid id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], **kwargs) -> List[CMCommandQueueItem]:  # noqa: E501
        """SimSage status  # noqa: E501

        return SimSage indexer and parser status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sim_sage_status(session_id, organisation_id, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid session-guid id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[CMCommandQueueItem]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the sim_sage_status_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.sim_sage_status_with_http_info(session_id, organisation_id, **kwargs)  # noqa: E501

    @validate_arguments
    def sim_sage_status_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid session-guid id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], **kwargs) -> ApiResponse:  # noqa: E501
        """SimSage status  # noqa: E501

        return SimSage indexer and parser status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sim_sage_status_with_http_info(session_id, organisation_id, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid session-guid id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[CMCommandQueueItem], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'organisation_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sim_sage_status" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "List[CMCommandQueueItem]",
        }

        return self.api_client.call_api(
            '/api/stats/status/{organisationId}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def system_logs(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], year : Annotated[StrictInt, Field(..., description="the year to get the log for")], month : Annotated[StrictInt, Field(..., description="the month to get the log for")], day : Annotated[StrictInt, Field(..., description="the day to get the log for")], hour : Annotated[StrictInt, Field(..., description="the hour to get the log for")], hours : Annotated[StrictInt, Field(..., description="the number of hours to get the logs for starting at hour")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> List[CMLoggerEntry]:  # noqa: E501
        """System Logs  # noqa: E501

        return SimSage System-logs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.system_logs(organisation_id, year, month, day, hour, hours, session_id, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param year: the year to get the log for (required)
        :type year: int
        :param month: the month to get the log for (required)
        :type month: int
        :param day: the day to get the log for (required)
        :type day: int
        :param hour: the hour to get the log for (required)
        :type hour: int
        :param hours: the number of hours to get the logs for starting at hour (required)
        :type hours: int
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[CMLoggerEntry]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the system_logs_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.system_logs_with_http_info(organisation_id, year, month, day, hour, hours, session_id, **kwargs)  # noqa: E501

    @validate_arguments
    def system_logs_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], year : Annotated[StrictInt, Field(..., description="the year to get the log for")], month : Annotated[StrictInt, Field(..., description="the month to get the log for")], day : Annotated[StrictInt, Field(..., description="the day to get the log for")], hour : Annotated[StrictInt, Field(..., description="the hour to get the log for")], hours : Annotated[StrictInt, Field(..., description="the number of hours to get the logs for starting at hour")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> ApiResponse:  # noqa: E501
        """System Logs  # noqa: E501

        return SimSage System-logs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.system_logs_with_http_info(organisation_id, year, month, day, hour, hours, session_id, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param year: the year to get the log for (required)
        :type year: int
        :param month: the month to get the log for (required)
        :type month: int
        :param day: the day to get the log for (required)
        :type day: int
        :param hour: the hour to get the log for (required)
        :type hour: int
        :param hours: the number of hours to get the logs for starting at hour (required)
        :type hours: int
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[CMLoggerEntry], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'year',
            'month',
            'day',
            'hour',
            'hours',
            'session_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_logs" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['year']:
            _path_params['year'] = _params['year']

        if _params['month']:
            _path_params['month'] = _params['month']

        if _params['day']:
            _path_params['day'] = _params['day']

        if _params['hour']:
            _path_params['hour'] = _params['hour']

        if _params['hours']:
            _path_params['hours'] = _params['hours']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "List[CMLoggerEntry]",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/stats/system-logs/{organisationId}/{year}/{month}/{day}/{hour}/{hours}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def version(self, **kwargs) -> CMVersion:  # noqa: E501
        """Version  # noqa: E501

        Get the version of SimSage Stats Services.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.version(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMVersion
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the version_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.version_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def version_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """Version  # noqa: E501

        Get the version of SimSage Stats Services.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.version_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMVersion, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method version" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "CMVersion",
        }

        return self.api_client.call_api(
            '/api/stats/version', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
