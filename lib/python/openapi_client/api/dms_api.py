# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.14.12
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictBool, StrictBytes, StrictInt, StrictStr

from typing import List, Optional, Union

from openapi_client.models.cm_add_folder import CMAddFolder
from openapi_client.models.cm_add_source_folder import CMAddSourceFolder
from openapi_client.models.cm_client_query import CMClientQuery
from openapi_client.models.cm_client_query_result import CMClientQueryResult
from openapi_client.models.cmd_user_dashboard import CMDUserDashboard
from openapi_client.models.cm_document import CMDocument
from openapi_client.models.cm_document_audit import CMDocumentAudit
from openapi_client.models.cm_document_bookmark import CMDocumentBookmark
from openapi_client.models.cm_document_folder import CMDocumentFolder
from openapi_client.models.cm_document_hash_tag import CMDocumentHashTag
from openapi_client.models.cm_document_lock import CMDocumentLock
from openapi_client.models.cm_document_note import CMDocumentNote
from openapi_client.models.cm_document_subscription import CMDocumentSubscription
from openapi_client.models.cm_saved_search import CMSavedSearch
from openapi_client.models.cm_subscriptions import CMSubscriptions
from openapi_client.models.cm_update_acls import CMUpdateACLs
from openapi_client.models.cm_user_notification import CMUserNotification
from openapi_client.models.document_bookmark import DocumentBookmark
from openapi_client.models.document_deleted import DocumentDeleted
from openapi_client.models.json_message import JsonMessage

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DmsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def add_folder(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_add_folder : CMAddFolder, api_version : Optional[StrictStr] = None, **kwargs) -> CMDocumentFolder:  # noqa: E501
        """Add a new folder  # noqa: E501

        Add a new folder to the SimSage DMS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_folder(session_id, cm_add_folder, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_add_folder: (required)
        :type cm_add_folder: CMAddFolder
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMDocumentFolder
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the add_folder_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.add_folder_with_http_info(session_id, cm_add_folder, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def add_folder_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_add_folder : CMAddFolder, api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Add a new folder  # noqa: E501

        Add a new folder to the SimSage DMS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_folder_with_http_info(session_id, cm_add_folder, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_add_folder: (required)
        :type cm_add_folder: CMAddFolder
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMDocumentFolder, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_add_folder',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_folder" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_add_folder'] is not None:
            _body_params = _params['cm_add_folder']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "CMDocumentFolder",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/dms/folder', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def add_source_folder(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_add_source_folder : CMAddSourceFolder, api_version : Optional[StrictStr] = None, **kwargs) -> CMDocumentFolder:  # noqa: E501
        """Add a new source-folder  # noqa: E501

        Add a new top-level folder (source folder) to the SimSage DMS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_source_folder(session_id, cm_add_source_folder, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_add_source_folder: (required)
        :type cm_add_source_folder: CMAddSourceFolder
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMDocumentFolder
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the add_source_folder_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.add_source_folder_with_http_info(session_id, cm_add_source_folder, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def add_source_folder_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_add_source_folder : CMAddSourceFolder, api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Add a new source-folder  # noqa: E501

        Add a new top-level folder (source folder) to the SimSage DMS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_source_folder_with_http_info(session_id, cm_add_source_folder, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_add_source_folder: (required)
        :type cm_add_source_folder: CMAddSourceFolder
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMDocumentFolder, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_add_source_folder',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_source_folder" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_add_source_folder'] is not None:
            _body_params = _params['cm_add_source_folder']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "CMDocumentFolder",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/dms/source', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_all_notes(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], url : Annotated[StrictStr, Field(..., description="the base64 encoded url value")], api_version : Optional[StrictStr] = None, **kwargs) -> JsonMessage:  # noqa: E501
        """delete all Notes  # noqa: E501

        delete all notes associated with a document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_all_notes(session_id, organisation_id, kb_id, url, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param url: the base64 encoded url value (required)
        :type url: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JsonMessage
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_all_notes_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_all_notes_with_http_info(session_id, organisation_id, kb_id, url, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_all_notes_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], url : Annotated[StrictStr, Field(..., description="the base64 encoded url value")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """delete all Notes  # noqa: E501

        delete all notes associated with a document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_all_notes_with_http_info(session_id, organisation_id, kb_id, url, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param url: the base64 encoded url value (required)
        :type url: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JsonMessage, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'organisation_id',
            'kb_id',
            'url',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_all_notes" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['url']:
            _path_params['url'] = _params['url']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "JsonMessage",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/dms/note/{organisationId}/{kbId}/{url}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_bookmark(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], user_id : Annotated[StrictStr, Field(..., description="the user's id")], url : Annotated[StrictStr, Field(..., description="the base64 encoded url value")], api_version : Optional[StrictStr] = None, **kwargs) -> List[CMDocumentBookmark]:  # noqa: E501
        """Delete a Bookmark  # noqa: E501

        Delete a user's bookmark associated with a document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_bookmark(session_id, organisation_id, kb_id, user_id, url, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param user_id: the user's id (required)
        :type user_id: str
        :param url: the base64 encoded url value (required)
        :type url: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[CMDocumentBookmark]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_bookmark_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_bookmark_with_http_info(session_id, organisation_id, kb_id, user_id, url, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_bookmark_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], user_id : Annotated[StrictStr, Field(..., description="the user's id")], url : Annotated[StrictStr, Field(..., description="the base64 encoded url value")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete a Bookmark  # noqa: E501

        Delete a user's bookmark associated with a document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_bookmark_with_http_info(session_id, organisation_id, kb_id, user_id, url, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param user_id: the user's id (required)
        :type user_id: str
        :param url: the base64 encoded url value (required)
        :type url: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[CMDocumentBookmark], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'organisation_id',
            'kb_id',
            'user_id',
            'url',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_bookmark" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['user_id']:
            _path_params['userId'] = _params['user_id']

        if _params['url']:
            _path_params['url'] = _params['url']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "List[CMDocumentBookmark]",
        }

        return self.api_client.call_api(
            '/api/dms/bookmark/{organisationId}/{kbId}/{userId}/{url}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_document_or_folder(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], is_folder : Annotated[StrictBool, Field(..., description="is this a folder or a document?")], source_id : Annotated[StrictInt, Field(..., description="the source-id of the item being deleted")], url : Annotated[StrictStr, Field(..., description="the base64 encoded url value")], folder_id : Annotated[StrictStr, Field(..., description="the folder's id")], api_version : Optional[StrictStr] = None, **kwargs) -> CMDocumentFolder:  # noqa: E501
        """Delete a document or a folder  # noqa: E501

        Mark a document/folder as deleted in the SimSage DMS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_document_or_folder(session_id, organisation_id, kb_id, is_folder, source_id, url, folder_id, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param is_folder: is this a folder or a document? (required)
        :type is_folder: bool
        :param source_id: the source-id of the item being deleted (required)
        :type source_id: int
        :param url: the base64 encoded url value (required)
        :type url: str
        :param folder_id: the folder's id (required)
        :type folder_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMDocumentFolder
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_document_or_folder_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_document_or_folder_with_http_info(session_id, organisation_id, kb_id, is_folder, source_id, url, folder_id, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_document_or_folder_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], is_folder : Annotated[StrictBool, Field(..., description="is this a folder or a document?")], source_id : Annotated[StrictInt, Field(..., description="the source-id of the item being deleted")], url : Annotated[StrictStr, Field(..., description="the base64 encoded url value")], folder_id : Annotated[StrictStr, Field(..., description="the folder's id")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete a document or a folder  # noqa: E501

        Mark a document/folder as deleted in the SimSage DMS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_document_or_folder_with_http_info(session_id, organisation_id, kb_id, is_folder, source_id, url, folder_id, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param is_folder: is this a folder or a document? (required)
        :type is_folder: bool
        :param source_id: the source-id of the item being deleted (required)
        :type source_id: int
        :param url: the base64 encoded url value (required)
        :type url: str
        :param folder_id: the folder's id (required)
        :type folder_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMDocumentFolder, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'organisation_id',
            'kb_id',
            'is_folder',
            'source_id',
            'url',
            'folder_id',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_document_or_folder" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['is_folder']:
            _path_params['isFolder'] = _params['is_folder']

        if _params['source_id']:
            _path_params['sourceId'] = _params['source_id']

        if _params['url']:
            _path_params['url'] = _params['url']

        if _params['folder_id']:
            _path_params['folderId'] = _params['folder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "CMDocumentFolder",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/dms/document/delete/{organisationId}/{kbId}/{isFolder}/{sourceId}/{url}/{folderId}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_note(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], url : Annotated[StrictStr, Field(..., description="the base64 encoded url value")], note_id : Annotated[StrictInt, Field(..., description="the id of the note to delete")], api_version : Optional[StrictStr] = None, **kwargs) -> List[CMDocumentNote]:  # noqa: E501
        """Delete a Note  # noqa: E501

        Delete a note associated with a document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_note(session_id, organisation_id, kb_id, url, note_id, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param url: the base64 encoded url value (required)
        :type url: str
        :param note_id: the id of the note to delete (required)
        :type note_id: int
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[CMDocumentNote]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_note_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_note_with_http_info(session_id, organisation_id, kb_id, url, note_id, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_note_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], url : Annotated[StrictStr, Field(..., description="the base64 encoded url value")], note_id : Annotated[StrictInt, Field(..., description="the id of the note to delete")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete a Note  # noqa: E501

        Delete a note associated with a document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_note_with_http_info(session_id, organisation_id, kb_id, url, note_id, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param url: the base64 encoded url value (required)
        :type url: str
        :param note_id: the id of the note to delete (required)
        :type note_id: int
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[CMDocumentNote], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'organisation_id',
            'kb_id',
            'url',
            'note_id',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_note" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['url']:
            _path_params['url'] = _params['url']

        if _params['note_id']:
            _path_params['noteId'] = _params['note_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "List[CMDocumentNote]",
        }

        return self.api_client.call_api(
            '/api/dms/note/{organisationId}/{kbId}/{url}/{noteId}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_source_folder(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], source_id : Annotated[StrictInt, Field(..., description="the sourceId of the source-folder to remove")], api_version : Optional[StrictStr] = None, **kwargs) -> CMDocumentFolder:  # noqa: E501
        """Remove source-folder  # noqa: E501

        Remove an existing top-level folder (source folder) from the SimSage DMS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_source_folder(session_id, organisation_id, kb_id, source_id, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param source_id: the sourceId of the source-folder to remove (required)
        :type source_id: int
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMDocumentFolder
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_source_folder_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_source_folder_with_http_info(session_id, organisation_id, kb_id, source_id, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_source_folder_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], source_id : Annotated[StrictInt, Field(..., description="the sourceId of the source-folder to remove")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Remove source-folder  # noqa: E501

        Remove an existing top-level folder (source folder) from the SimSage DMS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_source_folder_with_http_info(session_id, organisation_id, kb_id, source_id, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param source_id: the sourceId of the source-folder to remove (required)
        :type source_id: int
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMDocumentFolder, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'organisation_id',
            'kb_id',
            'source_id',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_source_folder" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['source_id']:
            _path_params['sourceId'] = _params['source_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "CMDocumentFolder",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/dms/source/{organisationId}/{kbId}/{sourceId}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_subscription(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], user_id : Annotated[StrictStr, Field(..., description="the user's id")], url : Annotated[StrictStr, Field(..., description="the base64 encoded url value")], api_version : Optional[StrictStr] = None, **kwargs) -> CMSubscriptions:  # noqa: E501
        """Delete a Subscription  # noqa: E501

        Delete a user's subscription associated with a document, returns an updated subscription set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_subscription(session_id, organisation_id, kb_id, user_id, url, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param user_id: the user's id (required)
        :type user_id: str
        :param url: the base64 encoded url value (required)
        :type url: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMSubscriptions
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_subscription_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_subscription_with_http_info(session_id, organisation_id, kb_id, user_id, url, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_subscription_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], user_id : Annotated[StrictStr, Field(..., description="the user's id")], url : Annotated[StrictStr, Field(..., description="the base64 encoded url value")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete a Subscription  # noqa: E501

        Delete a user's subscription associated with a document, returns an updated subscription set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_subscription_with_http_info(session_id, organisation_id, kb_id, user_id, url, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param user_id: the user's id (required)
        :type user_id: str
        :param url: the base64 encoded url value (required)
        :type url: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMSubscriptions, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'organisation_id',
            'kb_id',
            'user_id',
            'url',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_subscription" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['user_id']:
            _path_params['userId'] = _params['user_id']

        if _params['url']:
            _path_params['url'] = _params['url']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "CMSubscriptions",
        }

        return self.api_client.call_api(
            '/api/dms/subscription/{organisationId}/{kbId}/{userId}/{url}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_user_search(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], user_id : Annotated[StrictStr, Field(..., description="the user's id")], text : Annotated[StrictStr, Field(..., description="the base64 encoded search-text value")], top : Annotated[StrictInt, Field(..., description="how many records to return")], api_version : Optional[StrictStr] = None, **kwargs) -> List[CMSavedSearch]:  # noqa: E501
        """Delete a Saved Search  # noqa: E501

        Delete a user's saved search  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_user_search(session_id, organisation_id, kb_id, user_id, text, top, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param user_id: the user's id (required)
        :type user_id: str
        :param text: the base64 encoded search-text value (required)
        :type text: str
        :param top: how many records to return (required)
        :type top: int
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[CMSavedSearch]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_user_search_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_user_search_with_http_info(session_id, organisation_id, kb_id, user_id, text, top, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_user_search_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], user_id : Annotated[StrictStr, Field(..., description="the user's id")], text : Annotated[StrictStr, Field(..., description="the base64 encoded search-text value")], top : Annotated[StrictInt, Field(..., description="how many records to return")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete a Saved Search  # noqa: E501

        Delete a user's saved search  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_user_search_with_http_info(session_id, organisation_id, kb_id, user_id, text, top, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param user_id: the user's id (required)
        :type user_id: str
        :param text: the base64 encoded search-text value (required)
        :type text: str
        :param top: how many records to return (required)
        :type top: int
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[CMSavedSearch], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'organisation_id',
            'kb_id',
            'user_id',
            'text',
            'top',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user_search" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['user_id']:
            _path_params['userId'] = _params['user_id']

        if _params['text']:
            _path_params['text'] = _params['text']

        if _params['top']:
            _path_params['top'] = _params['top']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "List[CMSavedSearch]",
        }

        return self.api_client.call_api(
            '/api/dms/saved-search/{organisationId}/{kbId}/{userId}/{text}/{top}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def document1(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], url_id : Annotated[StrictInt, Field(..., description="the document's url-id, a unique id identifying a document.")], **kwargs) -> CMDocument:  # noqa: E501
        """Get Document  # noqa: E501

        Return a document's details by url-id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.document1(session_id, organisation_id, kb_id, url_id, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param url_id: the document's url-id, a unique id identifying a document. (required)
        :type url_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMDocument
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the document1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.document1_with_http_info(session_id, organisation_id, kb_id, url_id, **kwargs)  # noqa: E501

    @validate_arguments
    def document1_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], url_id : Annotated[StrictInt, Field(..., description="the document's url-id, a unique id identifying a document.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get Document  # noqa: E501

        Return a document's details by url-id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.document1_with_http_info(session_id, organisation_id, kb_id, url_id, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param url_id: the document's url-id, a unique id identifying a document. (required)
        :type url_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMDocument, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'organisation_id',
            'kb_id',
            'url_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method document1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['url_id']:
            _path_params['urlId'] = _params['url_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "CMDocument",
        }

        return self.api_client.call_api(
            '/api/dms/document/{organisationId}/{kbId}/{urlId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def document_binary(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], url : Annotated[StrictStr, Field(..., description="a base64 encoded url")], **kwargs) -> bytearray:  # noqa: E501
        """Binary  # noqa: E501

        Get the original for a document if available by url (latest version)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.document_binary(session_id, organisation_id, kb_id, url, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param url: a base64 encoded url (required)
        :type url: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the document_binary_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.document_binary_with_http_info(session_id, organisation_id, kb_id, url, **kwargs)  # noqa: E501

    @validate_arguments
    def document_binary_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], url : Annotated[StrictStr, Field(..., description="a base64 encoded url")], **kwargs) -> ApiResponse:  # noqa: E501
        """Binary  # noqa: E501

        Get the original for a document if available by url (latest version)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.document_binary_with_http_info(session_id, organisation_id, kb_id, url, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param url: a base64 encoded url (required)
        :type url: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'organisation_id',
            'kb_id',
            'url'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method document_binary" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['url']:
            _path_params['url'] = _params['url']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/octet-stream'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "bytearray",
        }

        return self.api_client.call_api(
            '/api/dms/binary/latest/{organisationId}/{kbId}/{url}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def document_version(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], url : Annotated[StrictStr, Field(..., description="the document's url, base64 encoded.  A unique id identifying a document.")], version : Annotated[StrictInt, Field(..., description="the document's binary version.")], **kwargs) -> bytearray:  # noqa: E501
        """Get Binary Document  # noqa: E501

        Return a document's binary by url and version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.document_version(session_id, organisation_id, kb_id, url, version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param url: the document's url, base64 encoded.  A unique id identifying a document. (required)
        :type url: str
        :param version: the document's binary version. (required)
        :type version: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the document_version_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.document_version_with_http_info(session_id, organisation_id, kb_id, url, version, **kwargs)  # noqa: E501

    @validate_arguments
    def document_version_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], url : Annotated[StrictStr, Field(..., description="the document's url, base64 encoded.  A unique id identifying a document.")], version : Annotated[StrictInt, Field(..., description="the document's binary version.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get Binary Document  # noqa: E501

        Return a document's binary by url and version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.document_version_with_http_info(session_id, organisation_id, kb_id, url, version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param url: the document's url, base64 encoded.  A unique id identifying a document. (required)
        :type url: str
        :param version: the document's binary version. (required)
        :type version: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'organisation_id',
            'kb_id',
            'url',
            'version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method document_version" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['url']:
            _path_params['url'] = _params['url']

        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/octet-stream'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "bytearray",
        }

        return self.api_client.call_api(
            '/api/dms/binary/{organisationId}/{kbId}/{url}/{version}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def filter_folders(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], text : Annotated[StrictStr, Field(..., description="the text to use to filter (base64 encoded)")], api_version : Optional[StrictStr] = None, **kwargs) -> CMDocumentFolder:  # noqa: E501
        """Filter Folders  # noqa: E501

        Filter a set of folders using Search  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.filter_folders(session_id, organisation_id, kb_id, text, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param text: the text to use to filter (base64 encoded) (required)
        :type text: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMDocumentFolder
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the filter_folders_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.filter_folders_with_http_info(session_id, organisation_id, kb_id, text, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def filter_folders_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], text : Annotated[StrictStr, Field(..., description="the text to use to filter (base64 encoded)")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Filter Folders  # noqa: E501

        Filter a set of folders using Search  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.filter_folders_with_http_info(session_id, organisation_id, kb_id, text, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param text: the text to use to filter (base64 encoded) (required)
        :type text: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMDocumentFolder, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'organisation_id',
            'kb_id',
            'text',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method filter_folders" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['text']:
            _path_params['text'] = _params['text']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "CMDocumentFolder",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/dms/folder/filter/{organisationId}/{kbId}/{text}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def force_release_lock(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], user_id : Annotated[StrictStr, Field(..., description="the user's id")], url : Annotated[StrictStr, Field(..., description="the base64 encoded url value")], api_version : Optional[StrictStr] = None, **kwargs) -> JsonMessage:  # noqa: E501
        """Force-release a lock  # noqa: E501

        A system administrator or manager can force-unlock a document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.force_release_lock(session_id, organisation_id, kb_id, user_id, url, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param user_id: the user's id (required)
        :type user_id: str
        :param url: the base64 encoded url value (required)
        :type url: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JsonMessage
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the force_release_lock_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.force_release_lock_with_http_info(session_id, organisation_id, kb_id, user_id, url, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def force_release_lock_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], user_id : Annotated[StrictStr, Field(..., description="the user's id")], url : Annotated[StrictStr, Field(..., description="the base64 encoded url value")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Force-release a lock  # noqa: E501

        A system administrator or manager can force-unlock a document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.force_release_lock_with_http_info(session_id, organisation_id, kb_id, user_id, url, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param user_id: the user's id (required)
        :type user_id: str
        :param url: the base64 encoded url value (required)
        :type url: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JsonMessage, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'organisation_id',
            'kb_id',
            'user_id',
            'url',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method force_release_lock" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['user_id']:
            _path_params['userId'] = _params['user_id']

        if _params['url']:
            _path_params['url'] = _params['url']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "JsonMessage",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/dms/lock/release/{organisationId}/{kbId}/{userId}/{url}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_bookmark_list(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], user_id : Annotated[StrictStr, Field(..., description="the user's id")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> List[CMDocumentBookmark]:  # noqa: E501
        """Get Bookmarks  # noqa: E501

        Return a list of bookmarks for a given user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_bookmark_list(organisation_id, kb_id, user_id, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param user_id: the user's id (required)
        :type user_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[CMDocumentBookmark]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_bookmark_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_bookmark_list_with_http_info(organisation_id, kb_id, user_id, session_id, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def get_bookmark_list_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], user_id : Annotated[StrictStr, Field(..., description="the user's id")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Bookmarks  # noqa: E501

        Return a list of bookmarks for a given user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_bookmark_list_with_http_info(organisation_id, kb_id, user_id, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param user_id: the user's id (required)
        :type user_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[CMDocumentBookmark], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'kb_id',
            'user_id',
            'session_id',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bookmark_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['user_id']:
            _path_params['userId'] = _params['user_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "List[CMDocumentBookmark]",
        }

        return self.api_client.call_api(
            '/api/dms/bookmark/{organisationId}/{kbId}/{userId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_deleted_documents(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], filter : Annotated[StrictStr, Field(..., description="an optional text filter for URLs")], api_version : Optional[StrictStr] = None, **kwargs) -> List[DocumentDeleted]:  # noqa: E501
        """Deleted records with optional filter  # noqa: E501

        Return a list of deleted document records for an administrator (all records) with an optional filter set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deleted_documents(session_id, organisation_id, kb_id, filter, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param filter: an optional text filter for URLs (required)
        :type filter: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[DocumentDeleted]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_deleted_documents_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_deleted_documents_with_http_info(session_id, organisation_id, kb_id, filter, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def get_deleted_documents_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], filter : Annotated[StrictStr, Field(..., description="an optional text filter for URLs")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Deleted records with optional filter  # noqa: E501

        Return a list of deleted document records for an administrator (all records) with an optional filter set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deleted_documents_with_http_info(session_id, organisation_id, kb_id, filter, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param filter: an optional text filter for URLs (required)
        :type filter: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[DocumentDeleted], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'organisation_id',
            'kb_id',
            'filter',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deleted_documents" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['filter']:
            _path_params['filter'] = _params['filter']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "List[DocumentDeleted]",
        }

        return self.api_client.call_api(
            '/api/dms/deleted/{organisationId}/{kbId}/{filter}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_document_audit(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], year : Annotated[StrictInt, Field(..., description="the year for the notifications")], month : Annotated[StrictInt, Field(..., description="the month for the notifications")], url : Annotated[StrictStr, Field(..., description="the document url (base64 encoded) to get audit records for")], api_version : Optional[StrictStr] = None, **kwargs) -> List[CMDocumentAudit]:  # noqa: E501
        """Audit records for a document for a month  # noqa: E501

        Return document audit records for a user (filtered) or administrator (all records) for a given document / month  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_document_audit(session_id, organisation_id, kb_id, year, month, url, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param year: the year for the notifications (required)
        :type year: int
        :param month: the month for the notifications (required)
        :type month: int
        :param url: the document url (base64 encoded) to get audit records for (required)
        :type url: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[CMDocumentAudit]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_document_audit_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_document_audit_with_http_info(session_id, organisation_id, kb_id, year, month, url, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def get_document_audit_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], year : Annotated[StrictInt, Field(..., description="the year for the notifications")], month : Annotated[StrictInt, Field(..., description="the month for the notifications")], url : Annotated[StrictStr, Field(..., description="the document url (base64 encoded) to get audit records for")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Audit records for a document for a month  # noqa: E501

        Return document audit records for a user (filtered) or administrator (all records) for a given document / month  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_document_audit_with_http_info(session_id, organisation_id, kb_id, year, month, url, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param year: the year for the notifications (required)
        :type year: int
        :param month: the month for the notifications (required)
        :type month: int
        :param url: the document url (base64 encoded) to get audit records for (required)
        :type url: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[CMDocumentAudit], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'organisation_id',
            'kb_id',
            'year',
            'month',
            'url',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_document_audit" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['year']:
            _path_params['year'] = _params['year']

        if _params['month']:
            _path_params['month'] = _params['month']

        if _params['url']:
            _path_params['url'] = _params['url']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "List[CMDocumentAudit]",
        }

        return self.api_client.call_api(
            '/api/dms/audit/{organisationId}/{kbId}/{year}/{month}/{url}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_folder(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], source_id : Annotated[StrictInt, Field(..., description="the owner source's id")], folder_id : Annotated[StrictStr, Field(..., description="the folder's id")], prev_url : Annotated[StrictStr, Field(..., description="pagination, the previous last URL for the page-set ('null' is first page)")], page_size : Annotated[StrictInt, Field(..., description="page-size for a paginated set")], api_version : Optional[StrictStr] = None, **kwargs) -> CMDocumentFolder:  # noqa: E501
        """Get Folder Content  # noqa: E501

        Return a folder's content  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_folder(session_id, organisation_id, kb_id, source_id, folder_id, prev_url, page_size, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param source_id: the owner source's id (required)
        :type source_id: int
        :param folder_id: the folder's id (required)
        :type folder_id: str
        :param prev_url: pagination, the previous last URL for the page-set ('null' is first page) (required)
        :type prev_url: str
        :param page_size: page-size for a paginated set (required)
        :type page_size: int
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMDocumentFolder
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_folder_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_folder_with_http_info(session_id, organisation_id, kb_id, source_id, folder_id, prev_url, page_size, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def get_folder_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], source_id : Annotated[StrictInt, Field(..., description="the owner source's id")], folder_id : Annotated[StrictStr, Field(..., description="the folder's id")], prev_url : Annotated[StrictStr, Field(..., description="pagination, the previous last URL for the page-set ('null' is first page)")], page_size : Annotated[StrictInt, Field(..., description="page-size for a paginated set")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Folder Content  # noqa: E501

        Return a folder's content  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_folder_with_http_info(session_id, organisation_id, kb_id, source_id, folder_id, prev_url, page_size, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param source_id: the owner source's id (required)
        :type source_id: int
        :param folder_id: the folder's id (required)
        :type folder_id: str
        :param prev_url: pagination, the previous last URL for the page-set ('null' is first page) (required)
        :type prev_url: str
        :param page_size: page-size for a paginated set (required)
        :type page_size: int
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMDocumentFolder, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'organisation_id',
            'kb_id',
            'source_id',
            'folder_id',
            'prev_url',
            'page_size',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_folder" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['source_id']:
            _path_params['sourceId'] = _params['source_id']

        if _params['folder_id']:
            _path_params['folderId'] = _params['folder_id']

        if _params['prev_url']:
            _path_params['prevUrl'] = _params['prev_url']

        if _params['page_size']:
            _path_params['pageSize'] = _params['page_size']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "CMDocumentFolder",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/dms/folder/{organisationId}/{kbId}/{sourceId}/{folderId}/{prevUrl}/{pageSize}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_full_audit(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], year : Annotated[StrictInt, Field(..., description="the year for the notifications")], month : Annotated[StrictInt, Field(..., description="the month for the notifications")], api_version : Optional[StrictStr] = None, **kwargs) -> List[CMDocumentAudit]:  # noqa: E501
        """Audit records for a month  # noqa: E501

        Return document audit records for a user (filtered) or administrator (all records) for a given month  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_full_audit(session_id, organisation_id, kb_id, year, month, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param year: the year for the notifications (required)
        :type year: int
        :param month: the month for the notifications (required)
        :type month: int
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[CMDocumentAudit]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_full_audit_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_full_audit_with_http_info(session_id, organisation_id, kb_id, year, month, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def get_full_audit_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], year : Annotated[StrictInt, Field(..., description="the year for the notifications")], month : Annotated[StrictInt, Field(..., description="the month for the notifications")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Audit records for a month  # noqa: E501

        Return document audit records for a user (filtered) or administrator (all records) for a given month  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_full_audit_with_http_info(session_id, organisation_id, kb_id, year, month, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param year: the year for the notifications (required)
        :type year: int
        :param month: the month for the notifications (required)
        :type month: int
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[CMDocumentAudit], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'organisation_id',
            'kb_id',
            'year',
            'month',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_full_audit" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['year']:
            _path_params['year'] = _params['year']

        if _params['month']:
            _path_params['month'] = _params['month']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "List[CMDocumentAudit]",
        }

        return self.api_client.call_api(
            '/api/dms/audit/{organisationId}/{kbId}/{year}/{month}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_locked_list(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], user_id : Annotated[StrictStr, Field(..., description="the user's id")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> List[CMDocument]:  # noqa: E501
        """Get locked documents for user  # noqa: E501

        Return a list of locked documents for a given user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_locked_list(organisation_id, kb_id, user_id, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param user_id: the user's id (required)
        :type user_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[CMDocument]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_locked_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_locked_list_with_http_info(organisation_id, kb_id, user_id, session_id, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def get_locked_list_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], user_id : Annotated[StrictStr, Field(..., description="the user's id")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get locked documents for user  # noqa: E501

        Return a list of locked documents for a given user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_locked_list_with_http_info(organisation_id, kb_id, user_id, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param user_id: the user's id (required)
        :type user_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[CMDocument], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'kb_id',
            'user_id',
            'session_id',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_locked_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['user_id']:
            _path_params['userId'] = _params['user_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "List[CMDocument]",
        }

        return self.api_client.call_api(
            '/api/dms/lock/{organisationId}/{kbId}/{userId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_note_list(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], url : Annotated[StrictStr, Field(..., description="the base64 encoded url value")], api_version : Optional[StrictStr] = None, **kwargs) -> List[CMDocumentNote]:  # noqa: E501
        """Get Notes  # noqa: E501

        Return a list of notes for a given url  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_note_list(session_id, organisation_id, kb_id, url, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param url: the base64 encoded url value (required)
        :type url: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[CMDocumentNote]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_note_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_note_list_with_http_info(session_id, organisation_id, kb_id, url, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def get_note_list_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], url : Annotated[StrictStr, Field(..., description="the base64 encoded url value")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Notes  # noqa: E501

        Return a list of notes for a given url  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_note_list_with_http_info(session_id, organisation_id, kb_id, url, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param url: the base64 encoded url value (required)
        :type url: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[CMDocumentNote], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'organisation_id',
            'kb_id',
            'url',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_note_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['url']:
            _path_params['url'] = _params['url']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "List[CMDocumentNote]",
        }

        return self.api_client.call_api(
            '/api/dms/note/{organisationId}/{kbId}/{url}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_saved_searches(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], user_id : Annotated[StrictStr, Field(..., description="the user's id")], top : Annotated[StrictInt, Field(..., description="how many records to return")], api_version : Optional[StrictStr] = None, **kwargs) -> List[CMSavedSearch]:  # noqa: E501
        """User's saved searches  # noqa: E501

        Return a user's saved searches  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_saved_searches(session_id, organisation_id, kb_id, user_id, top, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param user_id: the user's id (required)
        :type user_id: str
        :param top: how many records to return (required)
        :type top: int
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[CMSavedSearch]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_saved_searches_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_saved_searches_with_http_info(session_id, organisation_id, kb_id, user_id, top, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def get_saved_searches_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], user_id : Annotated[StrictStr, Field(..., description="the user's id")], top : Annotated[StrictInt, Field(..., description="how many records to return")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """User's saved searches  # noqa: E501

        Return a user's saved searches  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_saved_searches_with_http_info(session_id, organisation_id, kb_id, user_id, top, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param user_id: the user's id (required)
        :type user_id: str
        :param top: how many records to return (required)
        :type top: int
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[CMSavedSearch], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'organisation_id',
            'kb_id',
            'user_id',
            'top',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_saved_searches" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['user_id']:
            _path_params['userId'] = _params['user_id']

        if _params['top']:
            _path_params['top'] = _params['top']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "List[CMSavedSearch]",
        }

        return self.api_client.call_api(
            '/api/dms/saved-searches/{organisationId}/{kbId}/{userId}/{top}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_source_folder(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], source_id : Annotated[StrictInt, Field(..., description="the source-id of the item being deleted")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> CMDocumentFolder:  # noqa: E501
        """Get source-folder  # noqa: E501

        Return the content of a top-level folder (source folder).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_source_folder(organisation_id, kb_id, source_id, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param source_id: the source-id of the item being deleted (required)
        :type source_id: int
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMDocumentFolder
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_source_folder_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_source_folder_with_http_info(organisation_id, kb_id, source_id, session_id, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def get_source_folder_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], source_id : Annotated[StrictInt, Field(..., description="the source-id of the item being deleted")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get source-folder  # noqa: E501

        Return the content of a top-level folder (source folder).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_source_folder_with_http_info(organisation_id, kb_id, source_id, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param source_id: the source-id of the item being deleted (required)
        :type source_id: int
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMDocumentFolder, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'kb_id',
            'source_id',
            'session_id',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_source_folder" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['source_id']:
            _path_params['sourceId'] = _params['source_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "CMDocumentFolder",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/dms/source/{organisationId}/{kbId}/{sourceId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_subscription_list(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], user_id : Annotated[StrictStr, Field(..., description="the user's id")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> CMSubscriptions:  # noqa: E501
        """Get Subscriptions  # noqa: E501

        Return a subscriptions object for a given user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_subscription_list(organisation_id, kb_id, user_id, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param user_id: the user's id (required)
        :type user_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMSubscriptions
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_subscription_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_subscription_list_with_http_info(organisation_id, kb_id, user_id, session_id, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def get_subscription_list_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], user_id : Annotated[StrictStr, Field(..., description="the user's id")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Subscriptions  # noqa: E501

        Return a subscriptions object for a given user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_subscription_list_with_http_info(organisation_id, kb_id, user_id, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param user_id: the user's id (required)
        :type user_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMSubscriptions, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'kb_id',
            'user_id',
            'session_id',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subscription_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['user_id']:
            _path_params['userId'] = _params['user_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "CMSubscriptions",
        }

        return self.api_client.call_api(
            '/api/dms/subscriptions/{organisationId}/{kbId}/{userId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_user_dashboard(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> CMDUserDashboard:  # noqa: E501
        """User Dashboard  # noqa: E501

        Return a the user's DMS dashboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_user_dashboard(organisation_id, kb_id, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMDUserDashboard
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_user_dashboard_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_user_dashboard_with_http_info(organisation_id, kb_id, session_id, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def get_user_dashboard_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """User Dashboard  # noqa: E501

        Return a the user's DMS dashboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_user_dashboard_with_http_info(organisation_id, kb_id, session_id, api_version, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMDUserDashboard, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'kb_id',
            'session_id',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_dashboard" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "CMDUserDashboard",
        }

        return self.api_client.call_api(
            '/api/dms/dashboard/{organisationId}/{kbId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_user_notifications(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], year : Annotated[StrictInt, Field(..., description="the year for the notifications")], month : Annotated[StrictInt, Field(..., description="the month for the notifications")], api_version : Optional[StrictStr] = None, **kwargs) -> List[CMUserNotification]:  # noqa: E501
        """Get User Notifications  # noqa: E501

        Return all user notifications from the DMS for a given user by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_user_notifications(session_id, organisation_id, kb_id, year, month, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param year: the year for the notifications (required)
        :type year: int
        :param month: the month for the notifications (required)
        :type month: int
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[CMUserNotification]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_user_notifications_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_user_notifications_with_http_info(session_id, organisation_id, kb_id, year, month, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def get_user_notifications_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], year : Annotated[StrictInt, Field(..., description="the year for the notifications")], month : Annotated[StrictInt, Field(..., description="the month for the notifications")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get User Notifications  # noqa: E501

        Return all user notifications from the DMS for a given user by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_user_notifications_with_http_info(session_id, organisation_id, kb_id, year, month, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param year: the year for the notifications (required)
        :type year: int
        :param month: the month for the notifications (required)
        :type month: int
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[CMUserNotification], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'organisation_id',
            'kb_id',
            'year',
            'month',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_notifications" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['year']:
            _path_params['year'] = _params['year']

        if _params['month']:
            _path_params['month'] = _params['month']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "List[CMUserNotification]",
        }

        return self.api_client.call_api(
            '/api/dms/notifications/{organisationId}/{kbId}/{year}/{month}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def lock_document(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_document_lock : CMDocumentLock, api_version : Optional[StrictStr] = None, **kwargs) -> List[CMDocument]:  # noqa: E501
        """Document Lock  # noqa: E501

        Lock a document for a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.lock_document(session_id, cm_document_lock, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_document_lock: (required)
        :type cm_document_lock: CMDocumentLock
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[CMDocument]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the lock_document_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.lock_document_with_http_info(session_id, cm_document_lock, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def lock_document_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_document_lock : CMDocumentLock, api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Document Lock  # noqa: E501

        Lock a document for a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.lock_document_with_http_info(session_id, cm_document_lock, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_document_lock: (required)
        :type cm_document_lock: CMDocumentLock
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[CMDocument], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_document_lock',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lock_document" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_document_lock'] is not None:
            _body_params = _params['cm_document_lock']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "List[CMDocument]",
        }

        return self.api_client.call_api(
            '/api/dms/lock', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def release_lock(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], user_id : Annotated[StrictStr, Field(..., description="the user's id")], url : Annotated[StrictStr, Field(..., description="the base64 encoded url value")], api_version : Optional[StrictStr] = None, **kwargs) -> List[CMDocument]:  # noqa: E501
        """Release a lock  # noqa: E501

        The originator of a lock releases a locked document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.release_lock(session_id, organisation_id, kb_id, user_id, url, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param user_id: the user's id (required)
        :type user_id: str
        :param url: the base64 encoded url value (required)
        :type url: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[CMDocument]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the release_lock_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.release_lock_with_http_info(session_id, organisation_id, kb_id, user_id, url, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def release_lock_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], user_id : Annotated[StrictStr, Field(..., description="the user's id")], url : Annotated[StrictStr, Field(..., description="the base64 encoded url value")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Release a lock  # noqa: E501

        The originator of a lock releases a locked document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.release_lock_with_http_info(session_id, organisation_id, kb_id, user_id, url, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param user_id: the user's id (required)
        :type user_id: str
        :param url: the base64 encoded url value (required)
        :type url: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[CMDocument], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'organisation_id',
            'kb_id',
            'user_id',
            'url',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method release_lock" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['user_id']:
            _path_params['userId'] = _params['user_id']

        if _params['url']:
            _path_params['url'] = _params['url']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "List[CMDocument]",
        }

        return self.api_client.call_api(
            '/api/dms/lock/{organisationId}/{kbId}/{userId}/{url}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def restful_dms_client_query(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_client_query : CMClientQuery, **kwargs) -> CMClientQueryResult:  # noqa: E501
        """DMS Client Query  # noqa: E501

        a SimSage DMS client asks a question or performs a keyword-search.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.restful_dms_client_query(session_id, cm_client_query, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_client_query: (required)
        :type cm_client_query: CMClientQuery
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMClientQueryResult
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the restful_dms_client_query_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.restful_dms_client_query_with_http_info(session_id, cm_client_query, **kwargs)  # noqa: E501

    @validate_arguments
    def restful_dms_client_query_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_client_query : CMClientQuery, **kwargs) -> ApiResponse:  # noqa: E501
        """DMS Client Query  # noqa: E501

        a SimSage DMS client asks a question or performs a keyword-search.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.restful_dms_client_query_with_http_info(session_id, cm_client_query, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_client_query: (required)
        :type cm_client_query: CMClientQuery
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMClientQueryResult, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_client_query'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restful_dms_client_query" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_client_query'] is not None:
            _body_params = _params['cm_client_query']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "CMClientQueryResult",
        }

        return self.api_client.call_api(
            '/api/dms/query', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def save_bookmark(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_document_bookmark : CMDocumentBookmark, api_version : Optional[StrictStr] = None, **kwargs) -> List[DocumentBookmark]:  # noqa: E501
        """Save Bookmark  # noqa: E501

        Save (create or update) a SimSage Document Bookmark.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.save_bookmark(session_id, cm_document_bookmark, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_document_bookmark: (required)
        :type cm_document_bookmark: CMDocumentBookmark
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[DocumentBookmark]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the save_bookmark_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.save_bookmark_with_http_info(session_id, cm_document_bookmark, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def save_bookmark_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_document_bookmark : CMDocumentBookmark, api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Save Bookmark  # noqa: E501

        Save (create or update) a SimSage Document Bookmark.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.save_bookmark_with_http_info(session_id, cm_document_bookmark, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_document_bookmark: (required)
        :type cm_document_bookmark: CMDocumentBookmark
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[DocumentBookmark], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_document_bookmark',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_bookmark" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_document_bookmark'] is not None:
            _body_params = _params['cm_document_bookmark']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "List[DocumentBookmark]",
        }

        return self.api_client.call_api(
            '/api/dms/bookmark', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def save_hash_tags(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_document_hash_tag : CMDocumentHashTag, api_version : Optional[StrictStr] = None, **kwargs) -> JsonMessage:  # noqa: E501
        """Save HashTag set for a document  # noqa: E501

        Save (create / update / delete) a hashTag set for a document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.save_hash_tags(session_id, cm_document_hash_tag, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_document_hash_tag: (required)
        :type cm_document_hash_tag: CMDocumentHashTag
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JsonMessage
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the save_hash_tags_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.save_hash_tags_with_http_info(session_id, cm_document_hash_tag, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def save_hash_tags_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_document_hash_tag : CMDocumentHashTag, api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Save HashTag set for a document  # noqa: E501

        Save (create / update / delete) a hashTag set for a document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.save_hash_tags_with_http_info(session_id, cm_document_hash_tag, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_document_hash_tag: (required)
        :type cm_document_hash_tag: CMDocumentHashTag
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JsonMessage, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_document_hash_tag',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_hash_tags" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_document_hash_tag'] is not None:
            _body_params = _params['cm_document_hash_tag']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "JsonMessage",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/dms/hash-tag', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def save_note(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_document_note : CMDocumentNote, api_version : Optional[StrictStr] = None, **kwargs) -> List[CMDocumentNote]:  # noqa: E501
        """Save Note  # noqa: E501

        Save (create or update) a SimSage Document Note.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.save_note(session_id, cm_document_note, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_document_note: (required)
        :type cm_document_note: CMDocumentNote
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[CMDocumentNote]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the save_note_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.save_note_with_http_info(session_id, cm_document_note, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def save_note_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_document_note : CMDocumentNote, api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Save Note  # noqa: E501

        Save (create or update) a SimSage Document Note.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.save_note_with_http_info(session_id, cm_document_note, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_document_note: (required)
        :type cm_document_note: CMDocumentNote
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[CMDocumentNote], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_document_note',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_note" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_document_note'] is not None:
            _body_params = _params['cm_document_note']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "List[CMDocumentNote]",
        }

        return self.api_client.call_api(
            '/api/dms/note', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def save_search(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_saved_search : CMSavedSearch, api_version : Optional[StrictStr] = None, **kwargs) -> List[CMSavedSearch]:  # noqa: E501
        """Save Search  # noqa: E501

        Save a user's search query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.save_search(session_id, cm_saved_search, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_saved_search: (required)
        :type cm_saved_search: CMSavedSearch
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[CMSavedSearch]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the save_search_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.save_search_with_http_info(session_id, cm_saved_search, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def save_search_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_saved_search : CMSavedSearch, api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Save Search  # noqa: E501

        Save a user's search query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.save_search_with_http_info(session_id, cm_saved_search, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_saved_search: (required)
        :type cm_saved_search: CMSavedSearch
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[CMSavedSearch], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_saved_search',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_search" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_saved_search'] is not None:
            _body_params = _params['cm_saved_search']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "List[CMSavedSearch]",
        }

        return self.api_client.call_api(
            '/api/dms/save-search', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def save_subscription(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_document_subscription : CMDocumentSubscription, api_version : Optional[StrictStr] = None, **kwargs) -> CMSubscriptions:  # noqa: E501
        """Save Subscription  # noqa: E501

        Save (create or update) a SimSage Document subscription.  Returns a subscription object for this user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.save_subscription(session_id, cm_document_subscription, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_document_subscription: (required)
        :type cm_document_subscription: CMDocumentSubscription
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMSubscriptions
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the save_subscription_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.save_subscription_with_http_info(session_id, cm_document_subscription, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def save_subscription_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_document_subscription : CMDocumentSubscription, api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Save Subscription  # noqa: E501

        Save (create or update) a SimSage Document subscription.  Returns a subscription object for this user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.save_subscription_with_http_info(session_id, cm_document_subscription, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_document_subscription: (required)
        :type cm_document_subscription: CMDocumentSubscription
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMSubscriptions, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_document_subscription',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_subscription" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_document_subscription'] is not None:
            _body_params = _params['cm_document_subscription']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "CMSubscriptions",
        }

        return self.api_client.call_api(
            '/api/dms/subscription', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def undelete_document(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], source_id : Annotated[StrictInt, Field(..., description="the item's source id")], url : Annotated[StrictStr, Field(..., description="the document's url, base64 encoded.  A unique id identifying a document.")], filter : Annotated[StrictStr, Field(..., description="an optional text filter for URLs")], api_version : Optional[StrictStr] = None, **kwargs) -> List[DocumentDeleted]:  # noqa: E501
        """un-delete a record  # noqa: E501

        Un-delete a previously deleted document and return a list of deleted document records for an administrator (all records).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.undelete_document(session_id, organisation_id, kb_id, source_id, url, filter, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param source_id: the item's source id (required)
        :type source_id: int
        :param url: the document's url, base64 encoded.  A unique id identifying a document. (required)
        :type url: str
        :param filter: an optional text filter for URLs (required)
        :type filter: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[DocumentDeleted]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the undelete_document_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.undelete_document_with_http_info(session_id, organisation_id, kb_id, source_id, url, filter, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def undelete_document_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], source_id : Annotated[StrictInt, Field(..., description="the item's source id")], url : Annotated[StrictStr, Field(..., description="the document's url, base64 encoded.  A unique id identifying a document.")], filter : Annotated[StrictStr, Field(..., description="an optional text filter for URLs")], api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """un-delete a record  # noqa: E501

        Un-delete a previously deleted document and return a list of deleted document records for an administrator (all records).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.undelete_document_with_http_info(session_id, organisation_id, kb_id, source_id, url, filter, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param source_id: the item's source id (required)
        :type source_id: int
        :param url: the document's url, base64 encoded.  A unique id identifying a document. (required)
        :type url: str
        :param filter: an optional text filter for URLs (required)
        :type filter: str
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[DocumentDeleted], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'organisation_id',
            'kb_id',
            'source_id',
            'url',
            'filter',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method undelete_document" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['source_id']:
            _path_params['sourceId'] = _params['source_id']

        if _params['url']:
            _path_params['url'] = _params['url']

        if _params['filter']:
            _path_params['filter'] = _params['filter']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "List[DocumentDeleted]",
        }

        return self.api_client.call_api(
            '/api/dms/un-delete/{organisationId}/{kbId}/{sourceId}/{url}/{filter}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_acls(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_update_acls : CMUpdateACLs, api_version : Optional[StrictStr] = None, **kwargs) -> JsonMessage:  # noqa: E501
        """Update an item's ACLs  # noqa: E501

        Update the Access Control List of a SimSage DMS item (source, file, or folder).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_acls(session_id, cm_update_acls, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_update_acls: (required)
        :type cm_update_acls: CMUpdateACLs
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JsonMessage
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_acls_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_acls_with_http_info(session_id, cm_update_acls, api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def update_acls_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_update_acls : CMUpdateACLs, api_version : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update an item's ACLs  # noqa: E501

        Update the Access Control List of a SimSage DMS item (source, file, or folder).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_acls_with_http_info(session_id, cm_update_acls, api_version, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_update_acls: (required)
        :type cm_update_acls: CMUpdateACLs
        :param api_version:
        :type api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JsonMessage, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_update_acls',
            'api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_acls" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        if _params['api_version']:
            _header_params['API-Version'] = _params['api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_update_acls'] is not None:
            _body_params = _params['cm_update_acls']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "JsonMessage",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/dms/acls', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def upload_document(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], source_id : Annotated[StrictInt, Field(..., description="the owner source's id")], folder_id : Annotated[StrictStr, Field(..., description="the id of the folder we're uploading into")], last_modified : Annotated[StrictStr, Field(..., description="lastModified unix-date-time")], file : Annotated[Union[StrictBytes, StrictStr], Field(..., description="the file to upload")], **kwargs) -> CMDocumentFolder:  # noqa: E501
        """Upload a Document  # noqa: E501

        Upload a document into a DMS folder  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_document(session_id, organisation_id, kb_id, source_id, folder_id, last_modified, file, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param source_id: the owner source's id (required)
        :type source_id: int
        :param folder_id: the id of the folder we're uploading into (required)
        :type folder_id: str
        :param last_modified: lastModified unix-date-time (required)
        :type last_modified: str
        :param file: the file to upload (required)
        :type file: bytearray
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMDocumentFolder
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the upload_document_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.upload_document_with_http_info(session_id, organisation_id, kb_id, source_id, folder_id, last_modified, file, **kwargs)  # noqa: E501

    @validate_arguments
    def upload_document_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], source_id : Annotated[StrictInt, Field(..., description="the owner source's id")], folder_id : Annotated[StrictStr, Field(..., description="the id of the folder we're uploading into")], last_modified : Annotated[StrictStr, Field(..., description="lastModified unix-date-time")], file : Annotated[Union[StrictBytes, StrictStr], Field(..., description="the file to upload")], **kwargs) -> ApiResponse:  # noqa: E501
        """Upload a Document  # noqa: E501

        Upload a document into a DMS folder  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_document_with_http_info(session_id, organisation_id, kb_id, source_id, folder_id, last_modified, file, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param source_id: the owner source's id (required)
        :type source_id: int
        :param folder_id: the id of the folder we're uploading into (required)
        :type folder_id: str
        :param last_modified: lastModified unix-date-time (required)
        :type last_modified: str
        :param file: the file to upload (required)
        :type file: bytearray
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMDocumentFolder, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'organisation_id',
            'kb_id',
            'source_id',
            'folder_id',
            'last_modified',
            'file'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_document" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['source_id']:
            _path_params['sourceId'] = _params['source_id']

        if _params['folder_id']:
            _path_params['folderId'] = _params['folder_id']

        if _params['last_modified']:
            _path_params['lastModified'] = _params['last_modified']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        if _params['file']:
            _files['file'] = _params['file']

        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "CMDocumentFolder",
            '500': "JsonMessage",
        }

        return self.api_client.call_api(
            '/api/dms/upload/document/{organisationId}/{kbId}/{sourceId}/{folderId}/{lastModified}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
