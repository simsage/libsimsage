# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.12.19
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictInt, StrictStr

from typing import Any, Dict

from openapi_client.models.cm_create_gdpr_project import CMCreateGdprProject
from openapi_client.models.cm_delete_project_cmd import CMDeleteProjectCmd
from openapi_client.models.cm_export_redacted_document import CMExportRedactedDocument
from openapi_client.models.cm_redaction_data import CMRedactionData
from openapi_client.models.cm_update_document_set import CMUpdateDocumentSet
from openapi_client.models.cm_version import CMVersion

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DiscoveryApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def all_gdpr_projects(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], page : Annotated[StrictInt, Field(..., description="the page to render")], page_size : Annotated[StrictInt, Field(..., description="the page size to use")], text_filter : Annotated[StrictStr, Field(..., description="the text filter passed in or blank if empty")], status_filter : Annotated[StrictStr, Field(..., description="the status filter passed in")], sort_column : Annotated[StrictStr, Field(..., description="the sort column used for the results")], sort_direction : Annotated[StrictInt, Field(..., description="sort direction to use (0/1)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> object:  # noqa: E501
        """all_gdpr_projects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.all_gdpr_projects(organisation_id, kb_id, page, page_size, text_filter, status_filter, sort_column, sort_direction, session_id, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param page: the page to render (required)
        :type page: int
        :param page_size: the page size to use (required)
        :type page_size: int
        :param text_filter: the text filter passed in or blank if empty (required)
        :type text_filter: str
        :param status_filter: the status filter passed in (required)
        :type status_filter: str
        :param sort_column: the sort column used for the results (required)
        :type sort_column: str
        :param sort_direction: sort direction to use (0/1) (required)
        :type sort_direction: int
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the all_gdpr_projects_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.all_gdpr_projects_with_http_info(organisation_id, kb_id, page, page_size, text_filter, status_filter, sort_column, sort_direction, session_id, **kwargs)  # noqa: E501

    @validate_arguments
    def all_gdpr_projects_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], page : Annotated[StrictInt, Field(..., description="the page to render")], page_size : Annotated[StrictInt, Field(..., description="the page size to use")], text_filter : Annotated[StrictStr, Field(..., description="the text filter passed in or blank if empty")], status_filter : Annotated[StrictStr, Field(..., description="the status filter passed in")], sort_column : Annotated[StrictStr, Field(..., description="the sort column used for the results")], sort_direction : Annotated[StrictInt, Field(..., description="sort direction to use (0/1)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> ApiResponse:  # noqa: E501
        """all_gdpr_projects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.all_gdpr_projects_with_http_info(organisation_id, kb_id, page, page_size, text_filter, status_filter, sort_column, sort_direction, session_id, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param page: the page to render (required)
        :type page: int
        :param page_size: the page size to use (required)
        :type page_size: int
        :param text_filter: the text filter passed in or blank if empty (required)
        :type text_filter: str
        :param status_filter: the status filter passed in (required)
        :type status_filter: str
        :param sort_column: the sort column used for the results (required)
        :type sort_column: str
        :param sort_direction: sort direction to use (0/1) (required)
        :type sort_direction: int
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'kb_id',
            'page',
            'page_size',
            'text_filter',
            'status_filter',
            'sort_column',
            'sort_direction',
            'session_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_gdpr_projects" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['page']:
            _path_params['page'] = _params['page']

        if _params['page_size']:
            _path_params['pageSize'] = _params['page_size']

        if _params['text_filter']:
            _path_params['textFilter'] = _params['text_filter']

        if _params['status_filter']:
            _path_params['statusFilter'] = _params['status_filter']

        if _params['sort_column']:
            _path_params['sortColumn'] = _params['sort_column']

        if _params['sort_direction']:
            _path_params['sortDirection'] = _params['sort_direction']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
        }

        return self.api_client.call_api(
            '/api/discovery/gdprproject/{organisationId}/{kbId}/{page}/{pageSize}/{textFilter}/{statusFilter}/{sortColumn}/{sortDirection}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def apply_redactions(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_redaction_data : CMRedactionData, **kwargs) -> object:  # noqa: E501
        """apply_redactions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.apply_redactions(session_id, cm_redaction_data, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_redaction_data: (required)
        :type cm_redaction_data: CMRedactionData
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the apply_redactions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.apply_redactions_with_http_info(session_id, cm_redaction_data, **kwargs)  # noqa: E501

    @validate_arguments
    def apply_redactions_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_redaction_data : CMRedactionData, **kwargs) -> ApiResponse:  # noqa: E501
        """apply_redactions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.apply_redactions_with_http_info(session_id, cm_redaction_data, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_redaction_data: (required)
        :type cm_redaction_data: CMRedactionData
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_redaction_data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apply_redactions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_redaction_data'] is not None:
            _body_params = _params['cm_redaction_data']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
        }

        return self.api_client.call_api(
            '/api/discovery/applyredactions', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_gdpr_project(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_create_gdpr_project : CMCreateGdprProject, **kwargs) -> object:  # noqa: E501
        """create_gdpr_project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_gdpr_project(session_id, cm_create_gdpr_project, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_create_gdpr_project: (required)
        :type cm_create_gdpr_project: CMCreateGdprProject
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_gdpr_project_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_gdpr_project_with_http_info(session_id, cm_create_gdpr_project, **kwargs)  # noqa: E501

    @validate_arguments
    def create_gdpr_project_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_create_gdpr_project : CMCreateGdprProject, **kwargs) -> ApiResponse:  # noqa: E501
        """create_gdpr_project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_gdpr_project_with_http_info(session_id, cm_create_gdpr_project, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_create_gdpr_project: (required)
        :type cm_create_gdpr_project: CMCreateGdprProject
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_create_gdpr_project'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_gdpr_project" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_create_gdpr_project'] is not None:
            _body_params = _params['cm_create_gdpr_project']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
        }

        return self.api_client.call_api(
            '/api/discovery/createproject', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_project(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_delete_project_cmd : CMDeleteProjectCmd, **kwargs) -> object:  # noqa: E501
        """delete_project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_project(session_id, cm_delete_project_cmd, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_delete_project_cmd: (required)
        :type cm_delete_project_cmd: CMDeleteProjectCmd
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_project_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_project_with_http_info(session_id, cm_delete_project_cmd, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_project_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_delete_project_cmd : CMDeleteProjectCmd, **kwargs) -> ApiResponse:  # noqa: E501
        """delete_project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_project_with_http_info(session_id, cm_delete_project_cmd, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_delete_project_cmd: (required)
        :type cm_delete_project_cmd: CMDeleteProjectCmd
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_delete_project_cmd'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_project" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_delete_project_cmd'] is not None:
            _body_params = _params['cm_delete_project_cmd']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
        }

        return self.api_client.call_api(
            '/api/discovery/deleteproject', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def export_redacted_doc(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_export_redacted_document : CMExportRedactedDocument, **kwargs) -> object:  # noqa: E501
        """export_redacted_doc  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.export_redacted_doc(session_id, cm_export_redacted_document, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_export_redacted_document: (required)
        :type cm_export_redacted_document: CMExportRedactedDocument
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the export_redacted_doc_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.export_redacted_doc_with_http_info(session_id, cm_export_redacted_document, **kwargs)  # noqa: E501

    @validate_arguments
    def export_redacted_doc_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_export_redacted_document : CMExportRedactedDocument, **kwargs) -> ApiResponse:  # noqa: E501
        """export_redacted_doc  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.export_redacted_doc_with_http_info(session_id, cm_export_redacted_document, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_export_redacted_document: (required)
        :type cm_export_redacted_document: CMExportRedactedDocument
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_export_redacted_document'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_redacted_doc" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_export_redacted_document'] is not None:
            _body_params = _params['cm_export_redacted_document']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
        }

        return self.api_client.call_api(
            '/api/discovery/exportredacteddoc', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_gdpr_document(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], project_id : Annotated[StrictStr, Field(..., description="Project Id for the items")], url : Annotated[StrictStr, Field(..., description="The url of the document to retrieve")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> object:  # noqa: E501
        """get_gdpr_document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_gdpr_document(organisation_id, kb_id, project_id, url, session_id, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param project_id: Project Id for the items (required)
        :type project_id: str
        :param url: The url of the document to retrieve (required)
        :type url: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_gdpr_document_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_gdpr_document_with_http_info(organisation_id, kb_id, project_id, url, session_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_gdpr_document_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], project_id : Annotated[StrictStr, Field(..., description="Project Id for the items")], url : Annotated[StrictStr, Field(..., description="The url of the document to retrieve")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> ApiResponse:  # noqa: E501
        """get_gdpr_document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_gdpr_document_with_http_info(organisation_id, kb_id, project_id, url, session_id, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param project_id: Project Id for the items (required)
        :type project_id: str
        :param url: The url of the document to retrieve (required)
        :type url: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'kb_id',
            'project_id',
            'url',
            'session_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gdpr_document" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']

        if _params['url']:
            _path_params['url'] = _params['url']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
        }

        return self.api_client.call_api(
            '/api/discovery/gdprdocument/{organisationId}/{kbId}/{projectId}/{url}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_paged_project_documents(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], project_id : Annotated[StrictStr, Field(..., description="Project Id for the items")], page : Annotated[StrictInt, Field(..., description="the page to render")], page_size : Annotated[StrictInt, Field(..., description="the page size to use")], text_filter : Annotated[StrictStr, Field(..., description="the text filter passed in or blank if empty")], type_filter : Annotated[StrictStr, Field(..., description="the type filter passed in")], status_filter : Annotated[StrictStr, Field(..., description="the status filter passed in")], sort_column : Annotated[StrictStr, Field(..., description="the sort column used for the results")], sort_direction : Annotated[StrictInt, Field(..., description="sort direction to use (0/1)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> object:  # noqa: E501
        """get_paged_project_documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_paged_project_documents(organisation_id, kb_id, project_id, page, page_size, text_filter, type_filter, status_filter, sort_column, sort_direction, session_id, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param project_id: Project Id for the items (required)
        :type project_id: str
        :param page: the page to render (required)
        :type page: int
        :param page_size: the page size to use (required)
        :type page_size: int
        :param text_filter: the text filter passed in or blank if empty (required)
        :type text_filter: str
        :param type_filter: the type filter passed in (required)
        :type type_filter: str
        :param status_filter: the status filter passed in (required)
        :type status_filter: str
        :param sort_column: the sort column used for the results (required)
        :type sort_column: str
        :param sort_direction: sort direction to use (0/1) (required)
        :type sort_direction: int
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_paged_project_documents_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_paged_project_documents_with_http_info(organisation_id, kb_id, project_id, page, page_size, text_filter, type_filter, status_filter, sort_column, sort_direction, session_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_paged_project_documents_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], project_id : Annotated[StrictStr, Field(..., description="Project Id for the items")], page : Annotated[StrictInt, Field(..., description="the page to render")], page_size : Annotated[StrictInt, Field(..., description="the page size to use")], text_filter : Annotated[StrictStr, Field(..., description="the text filter passed in or blank if empty")], type_filter : Annotated[StrictStr, Field(..., description="the type filter passed in")], status_filter : Annotated[StrictStr, Field(..., description="the status filter passed in")], sort_column : Annotated[StrictStr, Field(..., description="the sort column used for the results")], sort_direction : Annotated[StrictInt, Field(..., description="sort direction to use (0/1)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> ApiResponse:  # noqa: E501
        """get_paged_project_documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_paged_project_documents_with_http_info(organisation_id, kb_id, project_id, page, page_size, text_filter, type_filter, status_filter, sort_column, sort_direction, session_id, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param project_id: Project Id for the items (required)
        :type project_id: str
        :param page: the page to render (required)
        :type page: int
        :param page_size: the page size to use (required)
        :type page_size: int
        :param text_filter: the text filter passed in or blank if empty (required)
        :type text_filter: str
        :param type_filter: the type filter passed in (required)
        :type type_filter: str
        :param status_filter: the status filter passed in (required)
        :type status_filter: str
        :param sort_column: the sort column used for the results (required)
        :type sort_column: str
        :param sort_direction: sort direction to use (0/1) (required)
        :type sort_direction: int
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'kb_id',
            'project_id',
            'page',
            'page_size',
            'text_filter',
            'type_filter',
            'status_filter',
            'sort_column',
            'sort_direction',
            'session_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_paged_project_documents" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']

        if _params['page']:
            _path_params['page'] = _params['page']

        if _params['page_size']:
            _path_params['pageSize'] = _params['page_size']

        if _params['text_filter']:
            _path_params['textFilter'] = _params['text_filter']

        if _params['type_filter']:
            _path_params['typeFilter'] = _params['type_filter']

        if _params['status_filter']:
            _path_params['statusFilter'] = _params['status_filter']

        if _params['sort_column']:
            _path_params['sortColumn'] = _params['sort_column']

        if _params['sort_direction']:
            _path_params['sortDirection'] = _params['sort_direction']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
        }

        return self.api_client.call_api(
            '/api/discovery/projectdocument/{organisationId}/{kbId}/{projectId}/{page}/{pageSize}/{textFilter}/{typeFilter}/{statusFilter}/{sortColumn}/{sortDirection}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def growth_per_month(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> object:  # noqa: E501
        """growth  # noqa: E501

        Get the storage growth delta per month  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.growth_per_month(organisation_id, kb_id, session_id, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the growth_per_month_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.growth_per_month_with_http_info(organisation_id, kb_id, session_id, **kwargs)  # noqa: E501

    @validate_arguments
    def growth_per_month_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> ApiResponse:  # noqa: E501
        """growth  # noqa: E501

        Get the storage growth delta per month  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.growth_per_month_with_http_info(organisation_id, kb_id, session_id, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'kb_id',
            'session_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method growth_per_month" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
        }

        return self.api_client.call_api(
            '/api/discovery/growth/{organisationId}/{kbId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def setdocumentredactions(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_redaction_data : CMRedactionData, **kwargs) -> object:  # noqa: E501
        """setdocumentredactions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.setdocumentredactions(session_id, cm_redaction_data, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_redaction_data: (required)
        :type cm_redaction_data: CMRedactionData
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the setdocumentredactions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.setdocumentredactions_with_http_info(session_id, cm_redaction_data, **kwargs)  # noqa: E501

    @validate_arguments
    def setdocumentredactions_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_redaction_data : CMRedactionData, **kwargs) -> ApiResponse:  # noqa: E501
        """setdocumentredactions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.setdocumentredactions_with_http_info(session_id, cm_redaction_data, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_redaction_data: (required)
        :type cm_redaction_data: CMRedactionData
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_redaction_data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method setdocumentredactions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_redaction_data'] is not None:
            _body_params = _params['cm_redaction_data']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
        }

        return self.api_client.call_api(
            '/api/discovery/updategdprdocument', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def storage_by_source(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> object:  # noqa: E501
        """storage  # noqa: E501

        Get the current amount of storage used by source  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.storage_by_source(organisation_id, kb_id, session_id, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the storage_by_source_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.storage_by_source_with_http_info(organisation_id, kb_id, session_id, **kwargs)  # noqa: E501

    @validate_arguments
    def storage_by_source_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> ApiResponse:  # noqa: E501
        """storage  # noqa: E501

        Get the current amount of storage used by source  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.storage_by_source_with_http_info(organisation_id, kb_id, session_id, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'kb_id',
            'session_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_by_source" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
        }

        return self.api_client.call_api(
            '/api/discovery/storage/{organisationId}/{kbId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def summary_by_document_type(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> object:  # noqa: E501
        """storage  # noqa: E501

        Get the current amount of storage used by source and document type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.summary_by_document_type(organisation_id, kb_id, session_id, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the summary_by_document_type_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.summary_by_document_type_with_http_info(organisation_id, kb_id, session_id, **kwargs)  # noqa: E501

    @validate_arguments
    def summary_by_document_type_with_http_info(self, organisation_id : Annotated[StrictStr, Field(..., description="the organisation (its guid id)")], kb_id : Annotated[StrictStr, Field(..., description="the knowledge-base (its guid id)")], session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], **kwargs) -> ApiResponse:  # noqa: E501
        """storage  # noqa: E501

        Get the current amount of storage used by source and document type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.summary_by_document_type_with_http_info(organisation_id, kb_id, session_id, async_req=True)
        >>> result = thread.get()

        :param organisation_id: the organisation (its guid id) (required)
        :type organisation_id: str
        :param kb_id: the knowledge-base (its guid id) (required)
        :type kb_id: str
        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'kb_id',
            'session_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method summary_by_document_type" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_id']:
            _path_params['organisationId'] = _params['organisation_id']

        if _params['kb_id']:
            _path_params['kbId'] = _params['kb_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
        }

        return self.api_client.call_api(
            '/api/discovery/doctypesummary/{organisationId}/{kbId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_document_set(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_update_document_set : CMUpdateDocumentSet, **kwargs) -> object:  # noqa: E501
        """update_document_set  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_document_set(session_id, cm_update_document_set, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_update_document_set: (required)
        :type cm_update_document_set: CMUpdateDocumentSet
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_document_set_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_document_set_with_http_info(session_id, cm_update_document_set, **kwargs)  # noqa: E501

    @validate_arguments
    def update_document_set_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="a valid SimSage Session id.")], cm_update_document_set : CMUpdateDocumentSet, **kwargs) -> ApiResponse:  # noqa: E501
        """update_document_set  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_document_set_with_http_info(session_id, cm_update_document_set, async_req=True)
        >>> result = thread.get()

        :param session_id: a valid SimSage Session id. (required)
        :type session_id: str
        :param cm_update_document_set: (required)
        :type cm_update_document_set: CMUpdateDocumentSet
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'cm_update_document_set'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_document_set" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['session_id']:
            _header_params['session-id'] = _params['session_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cm_update_document_set'] is not None:
            _body_params = _params['cm_update_document_set']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
        }

        return self.api_client.call_api(
            '/api/discovery/updatedocumentset', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def version5(self, **kwargs) -> CMVersion:  # noqa: E501
        """Version  # noqa: E501

        Get the version of SimSage Discovery Services.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.version5(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CMVersion
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the version5_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.version5_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def version5_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """Version  # noqa: E501

        Get the version of SimSage Discovery Services.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.version5_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CMVersion, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method version5" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '500': "JsonMessage",
            '200': "CMVersion",
        }

        return self.api_client.call_api(
            '/api/discovery/version', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
