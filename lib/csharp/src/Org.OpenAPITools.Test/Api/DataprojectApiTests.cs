/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing DataprojectApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DataprojectApiTests : IDisposable
    {
        private DataprojectApi instance;

        public DataprojectApiTests()
        {
            instance = new DataprojectApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DataprojectApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DataprojectApi
            //Assert.IsType<DataprojectApi>(instance);
        }

        /// <summary>
        /// Test AddComment
        /// </summary>
        [Fact]
        public void AddCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMNewComment cMNewComment = null;
            //var response = instance.AddComment(sessionId, cMNewComment);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test AllTasks
        /// </summary>
        [Fact]
        public void AllTasksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMQueueFilter cMQueueFilter = null;
            //var response = instance.AllTasks(sessionId, cMQueueFilter);
            //Assert.IsType<CMPagedQueueItems>(response);
        }

        /// <summary>
        /// Test ChangeTaskPhase
        /// </summary>
        [Fact]
        public void ChangeTaskPhaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMChangeTaskPhase cMChangeTaskPhase = null;
            //var response = instance.ChangeTaskPhase(sessionId, cMChangeTaskPhase);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test ClaimDocument
        /// </summary>
        [Fact]
        public void ClaimDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMClaimDocument cMClaimDocument = null;
            //var response = instance.ClaimDocument(sessionId, cMClaimDocument);
            //Assert.IsType<ReturnedDocument>(response);
        }

        /// <summary>
        /// Test CrawlerStatus
        /// </summary>
        [Fact]
        public void CrawlerStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string taskId = null;
            //string sessionId = null;
            //var response = instance.CrawlerStatus(organisationId, taskId, sessionId);
            //Assert.IsType<CMCrawlerStatusTask>(response);
        }

        /// <summary>
        /// Test DocumentsByTokens
        /// </summary>
        [Fact]
        public void DocumentsByTokensTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMDocumentsByToken cMDocumentsByToken = null;
            //var response = instance.DocumentsByTokens(sessionId, cMDocumentsByToken);
            //Assert.IsType<CMPagedProjectDocuments>(response);
        }

        /// <summary>
        /// Test FilteredComments
        /// </summary>
        [Fact]
        public void FilteredCommentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMCommentFilter cMCommentFilter = null;
            //var response = instance.FilteredComments(sessionId, cMCommentFilter);
            //Assert.IsType<List<CMRecordedComment>>(response);
        }

        /// <summary>
        /// Test GetDocumentRedactionInfo
        /// </summary>
        [Fact]
        public void GetDocumentRedactionInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string sliceId = null;
            //string documentKey = null;
            //string sessionId = null;
            //var response = instance.GetDocumentRedactionInfo(organisationId, sliceId, documentKey, sessionId);
            //Assert.IsType<List<LocatedRedaction>>(response);
        }

        /// <summary>
        /// Test GetProjectDefinition
        /// </summary>
        [Fact]
        public void GetProjectDefinitionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string taskId = null;
            //string sessionId = null;
            //var response = instance.GetProjectDefinition(organisationId, taskId, sessionId);
            //Assert.IsType<CMProjectDefinitionTask>(response);
        }

        /// <summary>
        /// Test GetProjectReview
        /// </summary>
        [Fact]
        public void GetProjectReviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string projectId = null;
            //string sessionId = null;
            //var response = instance.GetProjectReview(organisationId, projectId, sessionId);
            //Assert.IsType<CMProjectReview>(response);
        }

        /// <summary>
        /// Test GetProjectSlice
        /// </summary>
        [Fact]
        public void GetProjectSliceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string taskId = null;
            //string sessionId = null;
            //var response = instance.GetProjectSlice(organisationId, taskId, sessionId);
            //Assert.IsType<List<CMProjectSliceTask>>(response);
        }

        /// <summary>
        /// Test GetSearchResultSummary
        /// </summary>
        [Fact]
        public void GetSearchResultSummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string taskId = null;
            //string sessionId = null;
            //var response = instance.GetSearchResultSummary(organisationId, taskId, sessionId);
            //Assert.IsType<CMSearchResultSummaryTask>(response);
        }

        /// <summary>
        /// Test GetSearchResultSummaryForReview
        /// </summary>
        [Fact]
        public void GetSearchResultSummaryForReviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string projectId = null;
            //string sessionId = null;
            //var response = instance.GetSearchResultSummaryForReview(organisationId, projectId, sessionId);
            //Assert.IsType<CMSearchResultSummary>(response);
        }

        /// <summary>
        /// Test NextDocument
        /// </summary>
        [Fact]
        public void NextDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMNextDocument cMNextDocument = null;
            //var response = instance.NextDocument(sessionId, cMNextDocument);
            //Assert.IsType<CMSlicedDocumentListAndTotals>(response);
        }

        /// <summary>
        /// Test PdfBinary
        /// </summary>
        [Fact]
        public void PdfBinaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string kbId = null;
            //string url = null;
            //string? sessionId = null;
            //var response = instance.PdfBinary(organisationId, kbId, url, sessionId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ProjectTypes
        /// </summary>
        [Fact]
        public void ProjectTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string sessionId = null;
            //var response = instance.ProjectTypes(organisationId, sessionId);
            //Assert.IsType<List<CMProjectInfo>>(response);
        }

        /// <summary>
        /// Test ReassignSliceDocument
        /// </summary>
        [Fact]
        public void ReassignSliceDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMReassignSliceDocument cMReassignSliceDocument = null;
            //var response = instance.ReassignSliceDocument(sessionId, cMReassignSliceDocument);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RedactedDocument
        /// </summary>
        [Fact]
        public void RedactedDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMRedactionDetails cMRedactionDetails = null;
            //var response = instance.RedactedDocument(sessionId, cMRedactionDetails);
            //Assert.IsType<ReturnedDocument>(response);
        }

        /// <summary>
        /// Test RemoveSliceDocument
        /// </summary>
        [Fact]
        public void RemoveSliceDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMRemoveSliceDocument cMRemoveSliceDocument = null;
            //var response = instance.RemoveSliceDocument(sessionId, cMRemoveSliceDocument);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ResetEvolve
        /// </summary>
        [Fact]
        public void ResetEvolveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string sessionId = null;
            //var response = instance.ResetEvolve(organisationId, sessionId);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test SaveProjectDefinition
        /// </summary>
        [Fact]
        public void SaveProjectDefinitionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMProjectDefinition cMProjectDefinition = null;
            //var response = instance.SaveProjectDefinition(sessionId, cMProjectDefinition);
            //Assert.IsType<CMCreatedProject>(response);
        }

        /// <summary>
        /// Test SetSliceConfig
        /// </summary>
        [Fact]
        public void SetSliceConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMSetSliceDefinitions cMSetSliceDefinitions = null;
            //var response = instance.SetSliceConfig(sessionId, cMSetSliceDefinitions);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test SlicedDocuments
        /// </summary>
        [Fact]
        public void SlicedDocumentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMSlicedDocumentRequest cMSlicedDocumentRequest = null;
            //var response = instance.SlicedDocuments(sessionId, cMSlicedDocumentRequest);
            //Assert.IsType<CMSlicedDocumentListAndTotals>(response);
        }

        /// <summary>
        /// Test StartProject
        /// </summary>
        [Fact]
        public void StartProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMStartProject cMStartProject = null;
            //var response = instance.StartProject(sessionId, cMStartProject);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test UpdateDocumentStatus
        /// </summary>
        [Fact]
        public void UpdateDocumentStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMUpdateDocumentStatus cMUpdateDocumentStatus = null;
            //var response = instance.UpdateDocumentStatus(sessionId, cMUpdateDocumentStatus);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test UpdateRedactions
        /// </summary>
        [Fact]
        public void UpdateRedactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMUpdateRedactions cMUpdateRedactions = null;
            //var response = instance.UpdateRedactions(sessionId, cMUpdateRedactions);
            //Assert.IsType<string>(response);
        }
    }
}
