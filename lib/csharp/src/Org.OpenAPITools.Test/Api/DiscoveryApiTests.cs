/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.14.12
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing DiscoveryApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DiscoveryApiTests : IDisposable
    {
        private DiscoveryApi instance;

        public DiscoveryApiTests()
        {
            instance = new DiscoveryApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DiscoveryApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DiscoveryApi
            //Assert.IsType<DiscoveryApi>(instance);
        }

        /// <summary>
        /// Test AllGdprProjects
        /// </summary>
        [Fact]
        public void AllGdprProjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string kbId = null;
            //int page = null;
            //int pageSize = null;
            //string textFilter = null;
            //string statusFilter = null;
            //string sortColumn = null;
            //int sortDirection = null;
            //string sessionId = null;
            //var response = instance.AllGdprProjects(organisationId, kbId, page, pageSize, textFilter, statusFilter, sortColumn, sortDirection, sessionId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApplyRedactions
        /// </summary>
        [Fact]
        public void ApplyRedactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMRedactionData cMRedactionData = null;
            //var response = instance.ApplyRedactions(sessionId, cMRedactionData);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CreateGdprProject
        /// </summary>
        [Fact]
        public void CreateGdprProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMCreateGdprProject cMCreateGdprProject = null;
            //var response = instance.CreateGdprProject(sessionId, cMCreateGdprProject);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test DeleteProject
        /// </summary>
        [Fact]
        public void DeleteProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMDeleteProjectCmd cMDeleteProjectCmd = null;
            //var response = instance.DeleteProject(sessionId, cMDeleteProjectCmd);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ExportRedactedDoc
        /// </summary>
        [Fact]
        public void ExportRedactedDocTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMExportRedactedDocument cMExportRedactedDocument = null;
            //var response = instance.ExportRedactedDoc(sessionId, cMExportRedactedDocument);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test GetGdprDocument
        /// </summary>
        [Fact]
        public void GetGdprDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string kbId = null;
            //string projectId = null;
            //string url = null;
            //string sessionId = null;
            //var response = instance.GetGdprDocument(organisationId, kbId, projectId, url, sessionId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test GetPagedProjectDocuments
        /// </summary>
        [Fact]
        public void GetPagedProjectDocumentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string kbId = null;
            //string projectId = null;
            //int page = null;
            //int pageSize = null;
            //string textFilter = null;
            //string typeFilter = null;
            //string statusFilter = null;
            //string sortColumn = null;
            //int sortDirection = null;
            //string sessionId = null;
            //var response = instance.GetPagedProjectDocuments(organisationId, kbId, projectId, page, pageSize, textFilter, typeFilter, statusFilter, sortColumn, sortDirection, sessionId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test GrowthPerMonth
        /// </summary>
        [Fact]
        public void GrowthPerMonthTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string kbId = null;
            //string sessionId = null;
            //var response = instance.GrowthPerMonth(organisationId, kbId, sessionId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test Setdocumentredactions
        /// </summary>
        [Fact]
        public void SetdocumentredactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMRedactionData cMRedactionData = null;
            //var response = instance.Setdocumentredactions(sessionId, cMRedactionData);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test StorageBySource
        /// </summary>
        [Fact]
        public void StorageBySourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string kbId = null;
            //string sessionId = null;
            //var response = instance.StorageBySource(organisationId, kbId, sessionId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test SummaryByDocumentType
        /// </summary>
        [Fact]
        public void SummaryByDocumentTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string kbId = null;
            //string sessionId = null;
            //var response = instance.SummaryByDocumentType(organisationId, kbId, sessionId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test UpdateDocumentSet
        /// </summary>
        [Fact]
        public void UpdateDocumentSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMUpdateDocumentSet cMUpdateDocumentSet = null;
            //var response = instance.UpdateDocumentSet(sessionId, cMUpdateDocumentSet);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test Version5
        /// </summary>
        [Fact]
        public void Version5Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Version5();
            //Assert.IsType<CMVersion>(response);
        }
    }
}
