/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.13.31
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing LanguageApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class LanguageApiTests : IDisposable
    {
        private LanguageApi instance;

        public LanguageApiTests()
        {
            instance = new LanguageApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of LanguageApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' LanguageApi
            //Assert.IsType<LanguageApi>(instance);
        }

        /// <summary>
        /// Test AddDefaultSynSets
        /// </summary>
        [Fact]
        public void AddDefaultSynSetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string kbId = null;
            //string sessionId = null;
            //string? aPIVersion = null;
            //var response = instance.AddDefaultSynSets(organisationId, kbId, sessionId, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test DeleteAllSynonyms
        /// </summary>
        [Fact]
        public void DeleteAllSynonymsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string kbId = null;
            //string sessionId = null;
            //string? aPIVersion = null;
            //var response = instance.DeleteAllSynonyms(organisationId, kbId, sessionId, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test DeleteCategorization
        /// </summary>
        [Fact]
        public void DeleteCategorizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string kbId = null;
            //string categorizationLabel = null;
            //string sessionId = null;
            //string? aPIVersion = null;
            //var response = instance.DeleteCategorization(organisationId, kbId, categorizationLabel, sessionId, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test DeleteSemantic
        /// </summary>
        [Fact]
        public void DeleteSemanticTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string kbId = null;
            //string word = null;
            //string semantic = null;
            //string sessionId = null;
            //string? aPIVersion = null;
            //var response = instance.DeleteSemantic(organisationId, kbId, word, semantic, sessionId, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test DeleteSynSet
        /// </summary>
        [Fact]
        public void DeleteSynSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string kbId = null;
            //string lemma = null;
            //string sessionId = null;
            //string? aPIVersion = null;
            //var response = instance.DeleteSynSet(organisationId, kbId, lemma, sessionId, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test DeleteSynonym
        /// </summary>
        [Fact]
        public void DeleteSynonymTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string kbId = null;
            //int id = null;
            //string sessionId = null;
            //string? aPIVersion = null;
            //var response = instance.DeleteSynonym(organisationId, kbId, id, sessionId, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test FindSynSets
        /// </summary>
        [Fact]
        public void FindSynSetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMSynSetFind cMSynSetFind = null;
            //string? aPIVersion = null;
            //var response = instance.FindSynSets(sessionId, cMSynSetFind, aPIVersion);
            //Assert.IsType<CMSynSetList>(response);
        }

        /// <summary>
        /// Test GetCategorizationList
        /// </summary>
        [Fact]
        public void GetCategorizationListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string kbId = null;
            //string prevCategorizationLabel = null;
            //int pageSize = null;
            //string sessionId = null;
            //string? aPIVersion = null;
            //var response = instance.GetCategorizationList(organisationId, kbId, prevCategorizationLabel, pageSize, sessionId, aPIVersion);
            //Assert.IsType<CMCategorizationPaginatedList>(response);
        }

        /// <summary>
        /// Test GetPaginated
        /// </summary>
        [Fact]
        public void GetPaginatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMSynonymsPaginated cMSynonymsPaginated = null;
            //string? aPIVersion = null;
            //var response = instance.GetPaginated(sessionId, cMSynonymsPaginated, aPIVersion);
            //Assert.IsType<CMSynonymsPaginatedResult>(response);
        }

        /// <summary>
        /// Test GetSemanticsPaginated
        /// </summary>
        [Fact]
        public void GetSemanticsPaginatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMSemanticsPaginated cMSemanticsPaginated = null;
            //string? aPIVersion = null;
            //var response = instance.GetSemanticsPaginated(sessionId, cMSemanticsPaginated, aPIVersion);
            //Assert.IsType<CMSemanticsPaginatedResult>(response);
        }

        /// <summary>
        /// Test OptimizeIndexes
        /// </summary>
        [Fact]
        public void OptimizeIndexesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMOptimizeIndex cMOptimizeIndex = null;
            //string? aPIVersion = null;
            //var response = instance.OptimizeIndexes(sessionId, cMOptimizeIndex, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test RedactDocument
        /// </summary>
        [Fact]
        public void RedactDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string kbId = null;
            //string url = null;
            //string entityCsv = null;
            //string wordCsv = null;
            //string allowWordsCsv = null;
            //string? sessionId = null;
            //var response = instance.RedactDocument(organisationId, kbId, url, entityCsv, wordCsv, allowWordsCsv, sessionId);
            //Assert.IsType<byte[]>(response);
        }

        /// <summary>
        /// Test SaveCategorization
        /// </summary>
        [Fact]
        public void SaveCategorizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMCategorization cMCategorization = null;
            //string? aPIVersion = null;
            //var response = instance.SaveCategorization(sessionId, cMCategorization, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test SaveSemantic
        /// </summary>
        [Fact]
        public void SaveSemanticTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string kbId = null;
            //string sessionId = null;
            //CMSemanticModelEdit cMSemanticModelEdit = null;
            //string? aPIVersion = null;
            //var response = instance.SaveSemantic(organisationId, kbId, sessionId, cMSemanticModelEdit, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test SaveSynSet
        /// </summary>
        [Fact]
        public void SaveSynSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string kbId = null;
            //string sessionId = null;
            //CMSynSet cMSynSet = null;
            //string? aPIVersion = null;
            //var response = instance.SaveSynSet(organisationId, kbId, sessionId, cMSynSet, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test SaveSynonym
        /// </summary>
        [Fact]
        public void SaveSynonymTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string kbId = null;
            //string sessionId = null;
            //CMSynonym cMSynonym = null;
            //string? aPIVersion = null;
            //var response = instance.SaveSynonym(organisationId, kbId, sessionId, cMSynonym, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test TuneLanguageGraph
        /// </summary>
        [Fact]
        public void TuneLanguageGraphTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string kbId = null;
            //string sessionId = null;
            //string? aPIVersion = null;
            //var response = instance.TuneLanguageGraph(organisationId, kbId, sessionId, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test Version2
        /// </summary>
        [Fact]
        public void Version2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Version2();
            //Assert.IsType<CMVersion>(response);
        }
    }
}
