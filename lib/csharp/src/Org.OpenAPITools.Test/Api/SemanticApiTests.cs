/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.13.31
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing SemanticApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SemanticApiTests : IDisposable
    {
        private SemanticApi instance;

        public SemanticApiTests()
        {
            instance = new SemanticApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SemanticApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SemanticApi
            //Assert.IsType<SemanticApi>(instance);
        }

        /// <summary>
        /// Test DeleteTextToSearch
        /// </summary>
        [Fact]
        public void DeleteTextToSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string kbId = null;
            //string word = null;
            //string sessionId = null;
            //string? aPIVersion = null;
            //var response = instance.DeleteTextToSearch(organisationId, kbId, word, sessionId, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test DocumentQuestionAndAnswer
        /// </summary>
        [Fact]
        public void DocumentQuestionAndAnswerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMDocumentQuestionAndAnswer cMDocumentQuestionAndAnswer = null;
            //var response = instance.DocumentQuestionAndAnswer(sessionId, cMDocumentQuestionAndAnswer);
            //Assert.IsType<CMDocumentQuestionAndAnswer>(response);
        }

        /// <summary>
        /// Test GetTextToSearchPaginated
        /// </summary>
        [Fact]
        public void GetTextToSearchPaginatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMTextToSearchPaginated cMTextToSearchPaginated = null;
            //string? aPIVersion = null;
            //var response = instance.GetTextToSearchPaginated(sessionId, cMTextToSearchPaginated, aPIVersion);
            //Assert.IsType<CMTextToSearchPaginatedReturn>(response);
        }

        /// <summary>
        /// Test RestfulClientQuery
        /// </summary>
        [Fact]
        public void RestfulClientQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CMClientQuery cMClientQuery = null;
            //var response = instance.RestfulClientQuery(cMClientQuery);
            //Assert.IsType<CMClientQueryResult>(response);
        }

        /// <summary>
        /// Test SaveTextToSearch
        /// </summary>
        [Fact]
        public void SaveTextToSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string kbId = null;
            //string sessionId = null;
            //CMTextToSearchEdit cMTextToSearchEdit = null;
            //string? aPIVersion = null;
            //var response = instance.SaveTextToSearch(organisationId, kbId, sessionId, cMTextToSearchEdit, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test ShortSummary
        /// </summary>
        [Fact]
        public void ShortSummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CMShortSummary cMShortSummary = null;
            //var response = instance.ShortSummary(cMShortSummary);
            //Assert.IsType<CMShortSummaryResult>(response);
        }

        /// <summary>
        /// Test TryTextToSearchConversion
        /// </summary>
        [Fact]
        public void TryTextToSearchConversionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMTextToSearchConversion cMTextToSearchConversion = null;
            //string? aPIVersion = null;
            //var response = instance.TryTextToSearchConversion(sessionId, cMTextToSearchConversion, aPIVersion);
            //Assert.IsType<CMTextToSearchConversionReturn>(response);
        }

        /// <summary>
        /// Test Version1
        /// </summary>
        [Fact]
        public void Version1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Version1();
            //Assert.IsType<CMVersion>(response);
        }
    }
}
