/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.14.12
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing CrawlerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CrawlerApiTests : IDisposable
    {
        private CrawlerApi instance;

        public CrawlerApiTests()
        {
            instance = new CrawlerApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CrawlerApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' CrawlerApi
            //Assert.IsType<CrawlerApi>(instance);
        }

        /// <summary>
        /// Test CrawlerDeleteFolder
        /// </summary>
        [Fact]
        public void CrawlerDeleteFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CMExternalCrawlerDeleteFolder cMExternalCrawlerDeleteFolder = null;
            //string? aPIVersion = null;
            //var response = instance.CrawlerDeleteFolder(cMExternalCrawlerDeleteFolder, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test CrawlerDeleteUrl
        /// </summary>
        [Fact]
        public void CrawlerDeleteUrlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CMExternalCrawlerDeleteUrl cMExternalCrawlerDeleteUrl = null;
            //string? aPIVersion = null;
            //var response = instance.CrawlerDeleteUrl(cMExternalCrawlerDeleteUrl, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test CrawlerExternalDocumentDelete
        /// </summary>
        [Fact]
        public void CrawlerExternalDocumentDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CMDeleteDocument cMDeleteDocument = null;
            //string? aPIVersion = null;
            //var response = instance.CrawlerExternalDocumentDelete(cMDeleteDocument, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test CrawlerExternalDocumentFailed
        /// </summary>
        [Fact]
        public void CrawlerExternalDocumentFailedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CMFailedSourceDocument cMFailedSourceDocument = null;
            //string? aPIVersion = null;
            //var response = instance.CrawlerExternalDocumentFailed(cMFailedSourceDocument, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test CrawlerExternalDocumentUpload
        /// </summary>
        [Fact]
        public void CrawlerExternalDocumentUploadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CMUploadDocument cMUploadDocument = null;
            //string? aPIVersion = null;
            //var response = instance.CrawlerExternalDocumentUpload(cMUploadDocument, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test CrawlerExternalImageUpload
        /// </summary>
        [Fact]
        public void CrawlerExternalImageUploadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CMUploadImage cMUploadImage = null;
            //string? aPIVersion = null;
            //var response = instance.CrawlerExternalImageUpload(cMUploadImage, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test CrawlerRenameFolder
        /// </summary>
        [Fact]
        public void CrawlerRenameFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CMExternalCrawlerRenameFolder cMExternalCrawlerRenameFolder = null;
            //string? aPIVersion = null;
            //var response = instance.CrawlerRenameFolder(cMExternalCrawlerRenameFolder, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test CrawlerUpdateDeltaToken
        /// </summary>
        [Fact]
        public void CrawlerUpdateDeltaTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CMExternalCrawlerSetDeltaToken cMExternalCrawlerSetDeltaToken = null;
            //string? aPIVersion = null;
            //var response = instance.CrawlerUpdateDeltaToken(cMExternalCrawlerSetDeltaToken, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test Delete
        /// </summary>
        [Fact]
        public void DeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string kbId = null;
            //string sessionId = null;
            //int sourceId = null;
            //string? aPIVersion = null;
            //var response = instance.Delete(organisationId, kbId, sessionId, sourceId, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test DeleteDocuments
        /// </summary>
        [Fact]
        public void DeleteDocumentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string kbId = null;
            //string sessionId = null;
            //int sourceId = null;
            //string? aPIVersion = null;
            //var response = instance.DeleteDocuments(organisationId, kbId, sessionId, sourceId, aPIVersion);
            //Assert.IsType<CMSource>(response);
        }

        /// <summary>
        /// Test EncryptedCommunications
        /// </summary>
        [Fact]
        public void EncryptedCommunicationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int seed = null;
            //string body = null;
            //string? aPIVersion = null;
            //var response = instance.EncryptedCommunications(seed, body, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test ExternalCrawler
        /// </summary>
        [Fact]
        public void ExternalCrawlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CMExternalCrawler cMExternalCrawler = null;
            //string? aPIVersion = null;
            //var response = instance.ExternalCrawler(cMExternalCrawler, aPIVersion);
            //Assert.IsType<CMSource>(response);
        }

        /// <summary>
        /// Test ExternalCrawlerFinished
        /// </summary>
        [Fact]
        public void ExternalCrawlerFinishedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CMExternalCrawlerStop cMExternalCrawlerStop = null;
            //string? aPIVersion = null;
            //var response = instance.ExternalCrawlerFinished(cMExternalCrawlerStop, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test ExternalCrawlerStart
        /// </summary>
        [Fact]
        public void ExternalCrawlerStartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CMExternalCrawlerStart cMExternalCrawlerStart = null;
            //string? aPIVersion = null;
            //var response = instance.ExternalCrawlerStart(cMExternalCrawlerStart, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test GetCrawler
        /// </summary>
        [Fact]
        public void GetCrawlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisationId = null;
            //string kbId = null;
            //int sourceId = null;
            //string sessionId = null;
            //string? aPIVersion = null;
            //var response = instance.GetCrawler(organisationId, kbId, sourceId, sessionId, aPIVersion);
            //Assert.IsType<CMSource>(response);
        }

        /// <summary>
        /// Test GetFailedDocuments
        /// </summary>
        [Fact]
        public void GetFailedDocumentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //string organisationId = null;
            //string kbId = null;
            //string sourceId = null;
            //int page = null;
            //int pageSize = null;
            //string? aPIVersion = null;
            //var response = instance.GetFailedDocuments(sessionId, organisationId, kbId, sourceId, page, pageSize, aPIVersion);
            //Assert.IsType<List<CMSource>>(response);
        }

        /// <summary>
        /// Test GetSourceList
        /// </summary>
        [Fact]
        public void GetSourceListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //string organisationId = null;
            //string kbId = null;
            //string? aPIVersion = null;
            //var response = instance.GetSourceList(sessionId, organisationId, kbId, aPIVersion);
            //Assert.IsType<List<CMSource>>(response);
        }

        /// <summary>
        /// Test MarkCrawlAsDeltaReset
        /// </summary>
        [Fact]
        public void MarkCrawlAsDeltaResetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CMExternalMarkResetCrawl cMExternalMarkResetCrawl = null;
            //string? aPIVersion = null;
            //var response = instance.MarkCrawlAsDeltaReset(cMExternalMarkResetCrawl, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test MarkFileAsSeen
        /// </summary>
        [Fact]
        public void MarkFileAsSeenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CMExternalCrawlerMarkFileAsSeen cMExternalCrawlerMarkFileAsSeen = null;
            //string? aPIVersion = null;
            //var response = instance.MarkFileAsSeen(cMExternalCrawlerMarkFileAsSeen, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test OidcCode
        /// </summary>
        [Fact]
        public void OidcCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string oidcKey = null;
            //Dictionary<string, string> allRequestParams = null;
            //instance.OidcCode(oidcKey, allRequestParams);
        }

        /// <summary>
        /// Test ProcessAllFiles
        /// </summary>
        [Fact]
        public void ProcessAllFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMStartCrawler cMStartCrawler = null;
            //string? aPIVersion = null;
            //var response = instance.ProcessAllFiles(sessionId, cMStartCrawler, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test ProcessorSchema
        /// </summary>
        [Fact]
        public void ProcessorSchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ProcessorSchema();
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ReceiveExternalLogEntry
        /// </summary>
        [Fact]
        public void ReceiveExternalLogEntryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CMExternalLogEntry cMExternalLogEntry = null;
            //string? aPIVersion = null;
            //var response = instance.ReceiveExternalLogEntry(cMExternalLogEntry, aPIVersion);
            //Assert.IsType<CMSource>(response);
        }

        /// <summary>
        /// Test ResetSourceDelta
        /// </summary>
        [Fact]
        public void ResetSourceDeltaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //string organisationId = null;
            //string kbId = null;
            //int sourceId = null;
            //string? aPIVersion = null;
            //var response = instance.ResetSourceDelta(sessionId, organisationId, kbId, sourceId, aPIVersion);
            //Assert.IsType<CMSource>(response);
        }

        /// <summary>
        /// Test SdcSchema
        /// </summary>
        [Fact]
        public void SdcSchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.SdcSchema();
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test StartCrawler
        /// </summary>
        [Fact]
        public void StartCrawlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMStartCrawler cMStartCrawler = null;
            //string? aPIVersion = null;
            //var response = instance.StartCrawler(sessionId, cMStartCrawler, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test Sync
        /// </summary>
        [Fact]
        public void SyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMSyncGDrive cMSyncGDrive = null;
            //var response = instance.Sync(sessionId, cMSyncGDrive);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test TestCrawler
        /// </summary>
        [Fact]
        public void TestCrawlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //string organisationId = null;
            //string kbId = null;
            //int sourceId = null;
            //string? aPIVersion = null;
            //var response = instance.TestCrawler(sessionId, organisationId, kbId, sourceId, aPIVersion);
            //Assert.IsType<JsonMessage>(response);
        }

        /// <summary>
        /// Test UpdateCrawler
        /// </summary>
        [Fact]
        public void UpdateCrawlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //CMSource cMSource = null;
            //string? aPIVersion = null;
            //var response = instance.UpdateCrawler(sessionId, cMSource, aPIVersion);
            //Assert.IsType<CMSource>(response);
        }

        /// <summary>
        /// Test Version6
        /// </summary>
        [Fact]
        public void Version6Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Version6();
            //Assert.IsType<CMVersion>(response);
        }
    }
}
