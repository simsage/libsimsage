/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILanguageApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add all default SynSets
        /// </summary>
        /// <remarks>
        /// Add default syn-sets to the given org/kb
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage AddDefaultSynSets(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Add all default SynSets
        /// </summary>
        /// <remarks>
        /// Add default syn-sets to the given org/kb
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> AddDefaultSynSetsWithHttpInfo(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Delete All Synonyms
        /// </summary>
        /// <remarks>
        /// Delete all synonyms for a given org/kb
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base to delete/remove (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage DeleteAllSynonyms(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Delete All Synonyms
        /// </summary>
        /// <remarks>
        /// Delete all synonyms for a given org/kb
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base to delete/remove (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> DeleteAllSynonymsWithHttpInfo(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// remove categorization
        /// </summary>
        /// <remarks>
        /// remove a specific categorization for a given org/kb
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="categorizationLabel">the metadata (name) to remove</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage DeleteCategorization(string organisationId, string kbId, string categorizationLabel, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// remove categorization
        /// </summary>
        /// <remarks>
        /// remove a specific categorization for a given org/kb
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="categorizationLabel">the metadata (name) to remove</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> DeleteCategorizationWithHttpInfo(string organisationId, string kbId, string categorizationLabel, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Delete Semantic
        /// </summary>
        /// <remarks>
        /// Remove an existing semantic from SimSage.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="word">the word (more specific item) of the semantic to delete (eg. \&quot;John\&quot;)</param>
        /// <param name="semantic">the semantic of the word to delete (eg. \&quot;person\&quot;)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage DeleteSemantic(string organisationId, string kbId, string word, string semantic, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Delete Semantic
        /// </summary>
        /// <remarks>
        /// Remove an existing semantic from SimSage.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="word">the word (more specific item) of the semantic to delete (eg. \&quot;John\&quot;)</param>
        /// <param name="semantic">the semantic of the word to delete (eg. \&quot;person\&quot;)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> DeleteSemanticWithHttpInfo(string organisationId, string kbId, string word, string semantic, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Delete SynSet
        /// </summary>
        /// <remarks>
        /// Remove a syn-set from SimSage by lemma.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="lemma">the lemma (base word) of the syn-set to remove.</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage DeleteSynSet(string organisationId, string kbId, string lemma, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Delete SynSet
        /// </summary>
        /// <remarks>
        /// Remove a syn-set from SimSage by lemma.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="lemma">the lemma (base word) of the syn-set to remove.</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> DeleteSynSetWithHttpInfo(string organisationId, string kbId, string lemma, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Delete Synonym
        /// </summary>
        /// <remarks>
        /// Delete a synonym using its id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="id">the id of the synonym to remove.</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage DeleteSynonym(string organisationId, string kbId, int id, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Delete Synonym
        /// </summary>
        /// <remarks>
        /// Delete a synonym using its id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="id">the id of the synonym to remove.</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> DeleteSynonymWithHttpInfo(string organisationId, string kbId, int id, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Find SynSets
        /// </summary>
        /// <remarks>
        /// Find syn-sets using filters
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynSetFind"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSynSetList</returns>
        CMSynSetList FindSynSets(string sessionId, CMSynSetFind cMSynSetFind, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Find SynSets
        /// </summary>
        /// <remarks>
        /// Find syn-sets using filters
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynSetFind"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSynSetList</returns>
        ApiResponse<CMSynSetList> FindSynSetsWithHttpInfo(string sessionId, CMSynSetFind cMSynSetFind, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// categorization list
        /// </summary>
        /// <remarks>
        /// get all categorizations for a given org/kb paginated
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="prevCategorizationLabel">the previous categorization label for pagination, or null if first page</param>
        /// <param name="pageSize">the size of the page returned</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMCategorizationPaginatedList</returns>
        CMCategorizationPaginatedList GetCategorizationList(string organisationId, string kbId, string prevCategorizationLabel, int pageSize, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// categorization list
        /// </summary>
        /// <remarks>
        /// get all categorizations for a given org/kb paginated
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="prevCategorizationLabel">the previous categorization label for pagination, or null if first page</param>
        /// <param name="pageSize">the size of the page returned</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMCategorizationPaginatedList</returns>
        ApiResponse<CMCategorizationPaginatedList> GetCategorizationListWithHttpInfo(string organisationId, string kbId, string prevCategorizationLabel, int pageSize, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// get Synonyms Paginated
        /// </summary>
        /// <remarks>
        /// return a paginated list of synonyms with optional filtering.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynonymsPaginated"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSynonymsPaginatedResult</returns>
        CMSynonymsPaginatedResult GetPaginated(string sessionId, CMSynonymsPaginated cMSynonymsPaginated, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// get Synonyms Paginated
        /// </summary>
        /// <remarks>
        /// return a paginated list of synonyms with optional filtering.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynonymsPaginated"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSynonymsPaginatedResult</returns>
        ApiResponse<CMSynonymsPaginatedResult> GetPaginatedWithHttpInfo(string sessionId, CMSynonymsPaginated cMSynonymsPaginated, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Semantics Paginated
        /// </summary>
        /// <remarks>
        /// Return a paginated list of semantics with an optional filter.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSemanticsPaginated"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSemanticsPaginatedResult</returns>
        CMSemanticsPaginatedResult GetSemanticsPaginated(string sessionId, CMSemanticsPaginated cMSemanticsPaginated, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Semantics Paginated
        /// </summary>
        /// <remarks>
        /// Return a paginated list of semantics with an optional filter.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSemanticsPaginated"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSemanticsPaginatedResult</returns>
        ApiResponse<CMSemanticsPaginatedResult> GetSemanticsPaginatedWithHttpInfo(string sessionId, CMSemanticsPaginated cMSemanticsPaginated, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Optimize Indexes
        /// </summary>
        /// <remarks>
        /// Force index optimization for a the given knowledge-base, now.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMOptimizeIndex"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage OptimizeIndexes(string sessionId, CMOptimizeIndex cMOptimizeIndex, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Optimize Indexes
        /// </summary>
        /// <remarks>
        /// Force index optimization for a the given knowledge-base, now.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMOptimizeIndex"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> OptimizeIndexesWithHttpInfo(string sessionId, CMOptimizeIndex cMOptimizeIndex, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Redact Document
        /// </summary>
        /// <remarks>
        /// Create a redacted version of a document as a PDF given its url.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base-64 encoded (no-prefix) url of the document</param>
        /// <param name="entityCsv">a csv list of entities to redact (e.g. person,location)</param>
        /// <param name="wordCsv">a csv list of additional words to redact (e.g. John,Markov.  Use null for ignore.)</param>
        /// <param name="allowWordsCsv">a csv list of words to not-redact (e.g. John,Markov.  Use null for ignore.)</param>
        /// <param name="sessionId">an optional SimSage Session id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>byte[]</returns>
        byte[] RedactDocument(string organisationId, string kbId, string url, string entityCsv, string wordCsv, string allowWordsCsv, string? sessionId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Redact Document
        /// </summary>
        /// <remarks>
        /// Create a redacted version of a document as a PDF given its url.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base-64 encoded (no-prefix) url of the document</param>
        /// <param name="entityCsv">a csv list of entities to redact (e.g. person,location)</param>
        /// <param name="wordCsv">a csv list of additional words to redact (e.g. John,Markov.  Use null for ignore.)</param>
        /// <param name="allowWordsCsv">a csv list of words to not-redact (e.g. John,Markov.  Use null for ignore.)</param>
        /// <param name="sessionId">an optional SimSage Session id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> RedactDocumentWithHttpInfo(string organisationId, string kbId, string url, string entityCsv, string wordCsv, string allowWordsCsv, string? sessionId = default(string?), int operationIndex = 0);
        /// <summary>
        /// save categorization
        /// </summary>
        /// <remarks>
        /// create or update a specific categorization for a given org/kb
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMCategorization"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage SaveCategorization(string sessionId, CMCategorization cMCategorization, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// save categorization
        /// </summary>
        /// <remarks>
        /// create or update a specific categorization for a given org/kb
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMCategorization"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> SaveCategorizationWithHttpInfo(string sessionId, CMCategorization cMCategorization, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Save Semantic
        /// </summary>
        /// <remarks>
        /// Create or update (save) a semantic in SimSage.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSemanticModelEdit"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage SaveSemantic(string organisationId, string kbId, string sessionId, CMSemanticModelEdit cMSemanticModelEdit, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Save Semantic
        /// </summary>
        /// <remarks>
        /// Create or update (save) a semantic in SimSage.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSemanticModelEdit"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> SaveSemanticWithHttpInfo(string organisationId, string kbId, string sessionId, CMSemanticModelEdit cMSemanticModelEdit, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Save SynSet
        /// </summary>
        /// <remarks>
        /// Save (update/create) a syn-set in SimSage.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynSet"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage SaveSynSet(string organisationId, string kbId, string sessionId, CMSynSet cMSynSet, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Save SynSet
        /// </summary>
        /// <remarks>
        /// Save (update/create) a syn-set in SimSage.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynSet"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> SaveSynSetWithHttpInfo(string organisationId, string kbId, string sessionId, CMSynSet cMSynSet, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Save Synonym
        /// </summary>
        /// <remarks>
        /// Save (update/create) a synonym.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynonym"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage SaveSynonym(string organisationId, string kbId, string sessionId, CMSynonym cMSynonym, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Save Synonym
        /// </summary>
        /// <remarks>
        /// Save (update/create) a synonym.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynonym"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> SaveSynonymWithHttpInfo(string organisationId, string kbId, string sessionId, CMSynonym cMSynonym, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Truncate slow Indexes
        /// </summary>
        /// <remarks>
        /// Force slow-index truncation for a the given knowledge-base, now.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-bases&#39; id (a guid)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage TruncateSlowIndexes(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Truncate slow Indexes
        /// </summary>
        /// <remarks>
        /// Force slow-index truncation for a the given knowledge-base, now.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-bases&#39; id (a guid)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> TruncateSlowIndexesWithHttpInfo(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Tune Graph
        /// </summary>
        /// <remarks>
        /// Create a tuned language graph for a given organisation/knowledge-base.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage TuneLanguageGraph(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Tune Graph
        /// </summary>
        /// <remarks>
        /// Create a tuned language graph for a given organisation/knowledge-base.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> TuneLanguageGraphWithHttpInfo(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Version
        /// </summary>
        /// <remarks>
        /// Return the version of the SimSage Language Services.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMVersion</returns>
        CMVersion Version2(int operationIndex = 0);

        /// <summary>
        /// Version
        /// </summary>
        /// <remarks>
        /// Return the version of the SimSage Language Services.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMVersion</returns>
        ApiResponse<CMVersion> Version2WithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILanguageApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add all default SynSets
        /// </summary>
        /// <remarks>
        /// Add default syn-sets to the given org/kb
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> AddDefaultSynSetsAsync(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add all default SynSets
        /// </summary>
        /// <remarks>
        /// Add default syn-sets to the given org/kb
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> AddDefaultSynSetsWithHttpInfoAsync(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete All Synonyms
        /// </summary>
        /// <remarks>
        /// Delete all synonyms for a given org/kb
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base to delete/remove (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> DeleteAllSynonymsAsync(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete All Synonyms
        /// </summary>
        /// <remarks>
        /// Delete all synonyms for a given org/kb
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base to delete/remove (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> DeleteAllSynonymsWithHttpInfoAsync(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// remove categorization
        /// </summary>
        /// <remarks>
        /// remove a specific categorization for a given org/kb
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="categorizationLabel">the metadata (name) to remove</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> DeleteCategorizationAsync(string organisationId, string kbId, string categorizationLabel, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// remove categorization
        /// </summary>
        /// <remarks>
        /// remove a specific categorization for a given org/kb
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="categorizationLabel">the metadata (name) to remove</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> DeleteCategorizationWithHttpInfoAsync(string organisationId, string kbId, string categorizationLabel, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Semantic
        /// </summary>
        /// <remarks>
        /// Remove an existing semantic from SimSage.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="word">the word (more specific item) of the semantic to delete (eg. \&quot;John\&quot;)</param>
        /// <param name="semantic">the semantic of the word to delete (eg. \&quot;person\&quot;)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> DeleteSemanticAsync(string organisationId, string kbId, string word, string semantic, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Semantic
        /// </summary>
        /// <remarks>
        /// Remove an existing semantic from SimSage.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="word">the word (more specific item) of the semantic to delete (eg. \&quot;John\&quot;)</param>
        /// <param name="semantic">the semantic of the word to delete (eg. \&quot;person\&quot;)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> DeleteSemanticWithHttpInfoAsync(string organisationId, string kbId, string word, string semantic, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete SynSet
        /// </summary>
        /// <remarks>
        /// Remove a syn-set from SimSage by lemma.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="lemma">the lemma (base word) of the syn-set to remove.</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> DeleteSynSetAsync(string organisationId, string kbId, string lemma, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete SynSet
        /// </summary>
        /// <remarks>
        /// Remove a syn-set from SimSage by lemma.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="lemma">the lemma (base word) of the syn-set to remove.</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> DeleteSynSetWithHttpInfoAsync(string organisationId, string kbId, string lemma, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Synonym
        /// </summary>
        /// <remarks>
        /// Delete a synonym using its id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="id">the id of the synonym to remove.</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> DeleteSynonymAsync(string organisationId, string kbId, int id, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Synonym
        /// </summary>
        /// <remarks>
        /// Delete a synonym using its id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="id">the id of the synonym to remove.</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> DeleteSynonymWithHttpInfoAsync(string organisationId, string kbId, int id, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Find SynSets
        /// </summary>
        /// <remarks>
        /// Find syn-sets using filters
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynSetFind"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSynSetList</returns>
        System.Threading.Tasks.Task<CMSynSetList> FindSynSetsAsync(string sessionId, CMSynSetFind cMSynSetFind, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find SynSets
        /// </summary>
        /// <remarks>
        /// Find syn-sets using filters
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynSetFind"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSynSetList)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMSynSetList>> FindSynSetsWithHttpInfoAsync(string sessionId, CMSynSetFind cMSynSetFind, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// categorization list
        /// </summary>
        /// <remarks>
        /// get all categorizations for a given org/kb paginated
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="prevCategorizationLabel">the previous categorization label for pagination, or null if first page</param>
        /// <param name="pageSize">the size of the page returned</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMCategorizationPaginatedList</returns>
        System.Threading.Tasks.Task<CMCategorizationPaginatedList> GetCategorizationListAsync(string organisationId, string kbId, string prevCategorizationLabel, int pageSize, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// categorization list
        /// </summary>
        /// <remarks>
        /// get all categorizations for a given org/kb paginated
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="prevCategorizationLabel">the previous categorization label for pagination, or null if first page</param>
        /// <param name="pageSize">the size of the page returned</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMCategorizationPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMCategorizationPaginatedList>> GetCategorizationListWithHttpInfoAsync(string organisationId, string kbId, string prevCategorizationLabel, int pageSize, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get Synonyms Paginated
        /// </summary>
        /// <remarks>
        /// return a paginated list of synonyms with optional filtering.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynonymsPaginated"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSynonymsPaginatedResult</returns>
        System.Threading.Tasks.Task<CMSynonymsPaginatedResult> GetPaginatedAsync(string sessionId, CMSynonymsPaginated cMSynonymsPaginated, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get Synonyms Paginated
        /// </summary>
        /// <remarks>
        /// return a paginated list of synonyms with optional filtering.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynonymsPaginated"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSynonymsPaginatedResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMSynonymsPaginatedResult>> GetPaginatedWithHttpInfoAsync(string sessionId, CMSynonymsPaginated cMSynonymsPaginated, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Semantics Paginated
        /// </summary>
        /// <remarks>
        /// Return a paginated list of semantics with an optional filter.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSemanticsPaginated"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSemanticsPaginatedResult</returns>
        System.Threading.Tasks.Task<CMSemanticsPaginatedResult> GetSemanticsPaginatedAsync(string sessionId, CMSemanticsPaginated cMSemanticsPaginated, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Semantics Paginated
        /// </summary>
        /// <remarks>
        /// Return a paginated list of semantics with an optional filter.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSemanticsPaginated"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSemanticsPaginatedResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMSemanticsPaginatedResult>> GetSemanticsPaginatedWithHttpInfoAsync(string sessionId, CMSemanticsPaginated cMSemanticsPaginated, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Optimize Indexes
        /// </summary>
        /// <remarks>
        /// Force index optimization for a the given knowledge-base, now.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMOptimizeIndex"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> OptimizeIndexesAsync(string sessionId, CMOptimizeIndex cMOptimizeIndex, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Optimize Indexes
        /// </summary>
        /// <remarks>
        /// Force index optimization for a the given knowledge-base, now.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMOptimizeIndex"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> OptimizeIndexesWithHttpInfoAsync(string sessionId, CMOptimizeIndex cMOptimizeIndex, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Redact Document
        /// </summary>
        /// <remarks>
        /// Create a redacted version of a document as a PDF given its url.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base-64 encoded (no-prefix) url of the document</param>
        /// <param name="entityCsv">a csv list of entities to redact (e.g. person,location)</param>
        /// <param name="wordCsv">a csv list of additional words to redact (e.g. John,Markov.  Use null for ignore.)</param>
        /// <param name="allowWordsCsv">a csv list of words to not-redact (e.g. John,Markov.  Use null for ignore.)</param>
        /// <param name="sessionId">an optional SimSage Session id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> RedactDocumentAsync(string organisationId, string kbId, string url, string entityCsv, string wordCsv, string allowWordsCsv, string? sessionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Redact Document
        /// </summary>
        /// <remarks>
        /// Create a redacted version of a document as a PDF given its url.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base-64 encoded (no-prefix) url of the document</param>
        /// <param name="entityCsv">a csv list of entities to redact (e.g. person,location)</param>
        /// <param name="wordCsv">a csv list of additional words to redact (e.g. John,Markov.  Use null for ignore.)</param>
        /// <param name="allowWordsCsv">a csv list of words to not-redact (e.g. John,Markov.  Use null for ignore.)</param>
        /// <param name="sessionId">an optional SimSage Session id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> RedactDocumentWithHttpInfoAsync(string organisationId, string kbId, string url, string entityCsv, string wordCsv, string allowWordsCsv, string? sessionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// save categorization
        /// </summary>
        /// <remarks>
        /// create or update a specific categorization for a given org/kb
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMCategorization"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> SaveCategorizationAsync(string sessionId, CMCategorization cMCategorization, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// save categorization
        /// </summary>
        /// <remarks>
        /// create or update a specific categorization for a given org/kb
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMCategorization"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> SaveCategorizationWithHttpInfoAsync(string sessionId, CMCategorization cMCategorization, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Save Semantic
        /// </summary>
        /// <remarks>
        /// Create or update (save) a semantic in SimSage.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSemanticModelEdit"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> SaveSemanticAsync(string organisationId, string kbId, string sessionId, CMSemanticModelEdit cMSemanticModelEdit, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Save Semantic
        /// </summary>
        /// <remarks>
        /// Create or update (save) a semantic in SimSage.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSemanticModelEdit"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> SaveSemanticWithHttpInfoAsync(string organisationId, string kbId, string sessionId, CMSemanticModelEdit cMSemanticModelEdit, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Save SynSet
        /// </summary>
        /// <remarks>
        /// Save (update/create) a syn-set in SimSage.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynSet"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> SaveSynSetAsync(string organisationId, string kbId, string sessionId, CMSynSet cMSynSet, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Save SynSet
        /// </summary>
        /// <remarks>
        /// Save (update/create) a syn-set in SimSage.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynSet"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> SaveSynSetWithHttpInfoAsync(string organisationId, string kbId, string sessionId, CMSynSet cMSynSet, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Save Synonym
        /// </summary>
        /// <remarks>
        /// Save (update/create) a synonym.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynonym"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> SaveSynonymAsync(string organisationId, string kbId, string sessionId, CMSynonym cMSynonym, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Save Synonym
        /// </summary>
        /// <remarks>
        /// Save (update/create) a synonym.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynonym"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> SaveSynonymWithHttpInfoAsync(string organisationId, string kbId, string sessionId, CMSynonym cMSynonym, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Truncate slow Indexes
        /// </summary>
        /// <remarks>
        /// Force slow-index truncation for a the given knowledge-base, now.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-bases&#39; id (a guid)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> TruncateSlowIndexesAsync(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Truncate slow Indexes
        /// </summary>
        /// <remarks>
        /// Force slow-index truncation for a the given knowledge-base, now.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-bases&#39; id (a guid)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> TruncateSlowIndexesWithHttpInfoAsync(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Tune Graph
        /// </summary>
        /// <remarks>
        /// Create a tuned language graph for a given organisation/knowledge-base.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> TuneLanguageGraphAsync(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Tune Graph
        /// </summary>
        /// <remarks>
        /// Create a tuned language graph for a given organisation/knowledge-base.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> TuneLanguageGraphWithHttpInfoAsync(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Version
        /// </summary>
        /// <remarks>
        /// Return the version of the SimSage Language Services.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMVersion</returns>
        System.Threading.Tasks.Task<CMVersion> Version2Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Version
        /// </summary>
        /// <remarks>
        /// Return the version of the SimSage Language Services.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMVersion>> Version2WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILanguageApi : ILanguageApiSync, ILanguageApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LanguageApi : ILanguageApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LanguageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LanguageApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LanguageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LanguageApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LanguageApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LanguageApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LanguageApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LanguageApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add all default SynSets Add default syn-sets to the given org/kb
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage AddDefaultSynSets(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = AddDefaultSynSetsWithHttpInfo(organisationId, kbId, sessionId, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add all default SynSets Add default syn-sets to the given org/kb
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> AddDefaultSynSetsWithHttpInfo(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling LanguageApi->AddDefaultSynSets");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling LanguageApi->AddDefaultSynSets");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->AddDefaultSynSets");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "LanguageApi.AddDefaultSynSets";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<JsonMessage>("/api/language/default-syn-sets/{organisationId}/{kbId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddDefaultSynSets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add all default SynSets Add default syn-sets to the given org/kb
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> AddDefaultSynSetsAsync(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await AddDefaultSynSetsWithHttpInfoAsync(organisationId, kbId, sessionId, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add all default SynSets Add default syn-sets to the given org/kb
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> AddDefaultSynSetsWithHttpInfoAsync(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling LanguageApi->AddDefaultSynSets");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling LanguageApi->AddDefaultSynSets");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->AddDefaultSynSets");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "LanguageApi.AddDefaultSynSets";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<JsonMessage>("/api/language/default-syn-sets/{organisationId}/{kbId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddDefaultSynSets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete All Synonyms Delete all synonyms for a given org/kb
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base to delete/remove (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage DeleteAllSynonyms(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = DeleteAllSynonymsWithHttpInfo(organisationId, kbId, sessionId, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete All Synonyms Delete all synonyms for a given org/kb
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base to delete/remove (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> DeleteAllSynonymsWithHttpInfo(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling LanguageApi->DeleteAllSynonyms");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling LanguageApi->DeleteAllSynonyms");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->DeleteAllSynonyms");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "LanguageApi.DeleteAllSynonyms";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<JsonMessage>("/api/language/delete-all-synonyms/{organisationId}/{kbId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAllSynonyms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete All Synonyms Delete all synonyms for a given org/kb
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base to delete/remove (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> DeleteAllSynonymsAsync(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await DeleteAllSynonymsWithHttpInfoAsync(organisationId, kbId, sessionId, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete All Synonyms Delete all synonyms for a given org/kb
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base to delete/remove (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> DeleteAllSynonymsWithHttpInfoAsync(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling LanguageApi->DeleteAllSynonyms");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling LanguageApi->DeleteAllSynonyms");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->DeleteAllSynonyms");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "LanguageApi.DeleteAllSynonyms";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<JsonMessage>("/api/language/delete-all-synonyms/{organisationId}/{kbId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAllSynonyms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// remove categorization remove a specific categorization for a given org/kb
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="categorizationLabel">the metadata (name) to remove</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage DeleteCategorization(string organisationId, string kbId, string categorizationLabel, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = DeleteCategorizationWithHttpInfo(organisationId, kbId, categorizationLabel, sessionId, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// remove categorization remove a specific categorization for a given org/kb
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="categorizationLabel">the metadata (name) to remove</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> DeleteCategorizationWithHttpInfo(string organisationId, string kbId, string categorizationLabel, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling LanguageApi->DeleteCategorization");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling LanguageApi->DeleteCategorization");
            }

            // verify the required parameter 'categorizationLabel' is set
            if (categorizationLabel == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'categorizationLabel' when calling LanguageApi->DeleteCategorization");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->DeleteCategorization");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("categorizationLabel", Org.OpenAPITools.Client.ClientUtils.ParameterToString(categorizationLabel)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "LanguageApi.DeleteCategorization";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<JsonMessage>("/api/language/categorization/{organisationId}/{kbId}/{categorizationLabel}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCategorization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// remove categorization remove a specific categorization for a given org/kb
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="categorizationLabel">the metadata (name) to remove</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> DeleteCategorizationAsync(string organisationId, string kbId, string categorizationLabel, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await DeleteCategorizationWithHttpInfoAsync(organisationId, kbId, categorizationLabel, sessionId, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// remove categorization remove a specific categorization for a given org/kb
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="categorizationLabel">the metadata (name) to remove</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> DeleteCategorizationWithHttpInfoAsync(string organisationId, string kbId, string categorizationLabel, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling LanguageApi->DeleteCategorization");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling LanguageApi->DeleteCategorization");
            }

            // verify the required parameter 'categorizationLabel' is set
            if (categorizationLabel == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'categorizationLabel' when calling LanguageApi->DeleteCategorization");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->DeleteCategorization");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("categorizationLabel", Org.OpenAPITools.Client.ClientUtils.ParameterToString(categorizationLabel)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "LanguageApi.DeleteCategorization";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<JsonMessage>("/api/language/categorization/{organisationId}/{kbId}/{categorizationLabel}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCategorization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Semantic Remove an existing semantic from SimSage.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="word">the word (more specific item) of the semantic to delete (eg. \&quot;John\&quot;)</param>
        /// <param name="semantic">the semantic of the word to delete (eg. \&quot;person\&quot;)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage DeleteSemantic(string organisationId, string kbId, string word, string semantic, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = DeleteSemanticWithHttpInfo(organisationId, kbId, word, semantic, sessionId, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Semantic Remove an existing semantic from SimSage.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="word">the word (more specific item) of the semantic to delete (eg. \&quot;John\&quot;)</param>
        /// <param name="semantic">the semantic of the word to delete (eg. \&quot;person\&quot;)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> DeleteSemanticWithHttpInfo(string organisationId, string kbId, string word, string semantic, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling LanguageApi->DeleteSemantic");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling LanguageApi->DeleteSemantic");
            }

            // verify the required parameter 'word' is set
            if (word == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'word' when calling LanguageApi->DeleteSemantic");
            }

            // verify the required parameter 'semantic' is set
            if (semantic == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'semantic' when calling LanguageApi->DeleteSemantic");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->DeleteSemantic");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("word", Org.OpenAPITools.Client.ClientUtils.ParameterToString(word)); // path parameter
            localVarRequestOptions.PathParameters.Add("semantic", Org.OpenAPITools.Client.ClientUtils.ParameterToString(semantic)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "LanguageApi.DeleteSemantic";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<JsonMessage>("/api/language/delete-semantic/{organisationId}/{kbId}/{word}/{semantic}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSemantic", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Semantic Remove an existing semantic from SimSage.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="word">the word (more specific item) of the semantic to delete (eg. \&quot;John\&quot;)</param>
        /// <param name="semantic">the semantic of the word to delete (eg. \&quot;person\&quot;)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> DeleteSemanticAsync(string organisationId, string kbId, string word, string semantic, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await DeleteSemanticWithHttpInfoAsync(organisationId, kbId, word, semantic, sessionId, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Semantic Remove an existing semantic from SimSage.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="word">the word (more specific item) of the semantic to delete (eg. \&quot;John\&quot;)</param>
        /// <param name="semantic">the semantic of the word to delete (eg. \&quot;person\&quot;)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> DeleteSemanticWithHttpInfoAsync(string organisationId, string kbId, string word, string semantic, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling LanguageApi->DeleteSemantic");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling LanguageApi->DeleteSemantic");
            }

            // verify the required parameter 'word' is set
            if (word == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'word' when calling LanguageApi->DeleteSemantic");
            }

            // verify the required parameter 'semantic' is set
            if (semantic == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'semantic' when calling LanguageApi->DeleteSemantic");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->DeleteSemantic");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("word", Org.OpenAPITools.Client.ClientUtils.ParameterToString(word)); // path parameter
            localVarRequestOptions.PathParameters.Add("semantic", Org.OpenAPITools.Client.ClientUtils.ParameterToString(semantic)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "LanguageApi.DeleteSemantic";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<JsonMessage>("/api/language/delete-semantic/{organisationId}/{kbId}/{word}/{semantic}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSemantic", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete SynSet Remove a syn-set from SimSage by lemma.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="lemma">the lemma (base word) of the syn-set to remove.</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage DeleteSynSet(string organisationId, string kbId, string lemma, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = DeleteSynSetWithHttpInfo(organisationId, kbId, lemma, sessionId, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete SynSet Remove a syn-set from SimSage by lemma.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="lemma">the lemma (base word) of the syn-set to remove.</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> DeleteSynSetWithHttpInfo(string organisationId, string kbId, string lemma, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling LanguageApi->DeleteSynSet");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling LanguageApi->DeleteSynSet");
            }

            // verify the required parameter 'lemma' is set
            if (lemma == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'lemma' when calling LanguageApi->DeleteSynSet");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->DeleteSynSet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("lemma", Org.OpenAPITools.Client.ClientUtils.ParameterToString(lemma)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "LanguageApi.DeleteSynSet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<JsonMessage>("/api/language/delete-syn-set/{organisationId}/{kbId}/{lemma}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSynSet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete SynSet Remove a syn-set from SimSage by lemma.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="lemma">the lemma (base word) of the syn-set to remove.</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> DeleteSynSetAsync(string organisationId, string kbId, string lemma, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await DeleteSynSetWithHttpInfoAsync(organisationId, kbId, lemma, sessionId, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete SynSet Remove a syn-set from SimSage by lemma.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="lemma">the lemma (base word) of the syn-set to remove.</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> DeleteSynSetWithHttpInfoAsync(string organisationId, string kbId, string lemma, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling LanguageApi->DeleteSynSet");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling LanguageApi->DeleteSynSet");
            }

            // verify the required parameter 'lemma' is set
            if (lemma == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'lemma' when calling LanguageApi->DeleteSynSet");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->DeleteSynSet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("lemma", Org.OpenAPITools.Client.ClientUtils.ParameterToString(lemma)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "LanguageApi.DeleteSynSet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<JsonMessage>("/api/language/delete-syn-set/{organisationId}/{kbId}/{lemma}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSynSet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Synonym Delete a synonym using its id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="id">the id of the synonym to remove.</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage DeleteSynonym(string organisationId, string kbId, int id, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = DeleteSynonymWithHttpInfo(organisationId, kbId, id, sessionId, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Synonym Delete a synonym using its id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="id">the id of the synonym to remove.</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> DeleteSynonymWithHttpInfo(string organisationId, string kbId, int id, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling LanguageApi->DeleteSynonym");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling LanguageApi->DeleteSynonym");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->DeleteSynonym");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "LanguageApi.DeleteSynonym";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<JsonMessage>("/api/language/delete-synonym/{organisationId}/{kbId}/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSynonym", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Synonym Delete a synonym using its id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="id">the id of the synonym to remove.</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> DeleteSynonymAsync(string organisationId, string kbId, int id, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await DeleteSynonymWithHttpInfoAsync(organisationId, kbId, id, sessionId, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Synonym Delete a synonym using its id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="id">the id of the synonym to remove.</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> DeleteSynonymWithHttpInfoAsync(string organisationId, string kbId, int id, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling LanguageApi->DeleteSynonym");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling LanguageApi->DeleteSynonym");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->DeleteSynonym");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "LanguageApi.DeleteSynonym";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<JsonMessage>("/api/language/delete-synonym/{organisationId}/{kbId}/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSynonym", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find SynSets Find syn-sets using filters
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynSetFind"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSynSetList</returns>
        public CMSynSetList FindSynSets(string sessionId, CMSynSetFind cMSynSetFind, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMSynSetList> localVarResponse = FindSynSetsWithHttpInfo(sessionId, cMSynSetFind, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find SynSets Find syn-sets using filters
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynSetFind"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSynSetList</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMSynSetList> FindSynSetsWithHttpInfo(string sessionId, CMSynSetFind cMSynSetFind, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->FindSynSets");
            }

            // verify the required parameter 'cMSynSetFind' is set
            if (cMSynSetFind == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMSynSetFind' when calling LanguageApi->FindSynSets");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMSynSetFind;

            localVarRequestOptions.Operation = "LanguageApi.FindSynSets";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<CMSynSetList>("/api/language/find-syn-sets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindSynSets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find SynSets Find syn-sets using filters
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynSetFind"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSynSetList</returns>
        public async System.Threading.Tasks.Task<CMSynSetList> FindSynSetsAsync(string sessionId, CMSynSetFind cMSynSetFind, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMSynSetList> localVarResponse = await FindSynSetsWithHttpInfoAsync(sessionId, cMSynSetFind, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find SynSets Find syn-sets using filters
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynSetFind"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSynSetList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMSynSetList>> FindSynSetsWithHttpInfoAsync(string sessionId, CMSynSetFind cMSynSetFind, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->FindSynSets");
            }

            // verify the required parameter 'cMSynSetFind' is set
            if (cMSynSetFind == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMSynSetFind' when calling LanguageApi->FindSynSets");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMSynSetFind;

            localVarRequestOptions.Operation = "LanguageApi.FindSynSets";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<CMSynSetList>("/api/language/find-syn-sets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindSynSets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// categorization list get all categorizations for a given org/kb paginated
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="prevCategorizationLabel">the previous categorization label for pagination, or null if first page</param>
        /// <param name="pageSize">the size of the page returned</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMCategorizationPaginatedList</returns>
        public CMCategorizationPaginatedList GetCategorizationList(string organisationId, string kbId, string prevCategorizationLabel, int pageSize, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMCategorizationPaginatedList> localVarResponse = GetCategorizationListWithHttpInfo(organisationId, kbId, prevCategorizationLabel, pageSize, sessionId, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// categorization list get all categorizations for a given org/kb paginated
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="prevCategorizationLabel">the previous categorization label for pagination, or null if first page</param>
        /// <param name="pageSize">the size of the page returned</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMCategorizationPaginatedList</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMCategorizationPaginatedList> GetCategorizationListWithHttpInfo(string organisationId, string kbId, string prevCategorizationLabel, int pageSize, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling LanguageApi->GetCategorizationList");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling LanguageApi->GetCategorizationList");
            }

            // verify the required parameter 'prevCategorizationLabel' is set
            if (prevCategorizationLabel == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'prevCategorizationLabel' when calling LanguageApi->GetCategorizationList");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->GetCategorizationList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("prevCategorizationLabel", Org.OpenAPITools.Client.ClientUtils.ParameterToString(prevCategorizationLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageSize", Org.OpenAPITools.Client.ClientUtils.ParameterToString(pageSize)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "LanguageApi.GetCategorizationList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CMCategorizationPaginatedList>("/api/language/categorization/{organisationId}/{kbId}/{prevCategorizationLabel}/{pageSize}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategorizationList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// categorization list get all categorizations for a given org/kb paginated
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="prevCategorizationLabel">the previous categorization label for pagination, or null if first page</param>
        /// <param name="pageSize">the size of the page returned</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMCategorizationPaginatedList</returns>
        public async System.Threading.Tasks.Task<CMCategorizationPaginatedList> GetCategorizationListAsync(string organisationId, string kbId, string prevCategorizationLabel, int pageSize, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMCategorizationPaginatedList> localVarResponse = await GetCategorizationListWithHttpInfoAsync(organisationId, kbId, prevCategorizationLabel, pageSize, sessionId, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// categorization list get all categorizations for a given org/kb paginated
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="prevCategorizationLabel">the previous categorization label for pagination, or null if first page</param>
        /// <param name="pageSize">the size of the page returned</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMCategorizationPaginatedList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMCategorizationPaginatedList>> GetCategorizationListWithHttpInfoAsync(string organisationId, string kbId, string prevCategorizationLabel, int pageSize, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling LanguageApi->GetCategorizationList");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling LanguageApi->GetCategorizationList");
            }

            // verify the required parameter 'prevCategorizationLabel' is set
            if (prevCategorizationLabel == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'prevCategorizationLabel' when calling LanguageApi->GetCategorizationList");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->GetCategorizationList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("prevCategorizationLabel", Org.OpenAPITools.Client.ClientUtils.ParameterToString(prevCategorizationLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageSize", Org.OpenAPITools.Client.ClientUtils.ParameterToString(pageSize)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "LanguageApi.GetCategorizationList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CMCategorizationPaginatedList>("/api/language/categorization/{organisationId}/{kbId}/{prevCategorizationLabel}/{pageSize}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategorizationList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get Synonyms Paginated return a paginated list of synonyms with optional filtering.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynonymsPaginated"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSynonymsPaginatedResult</returns>
        public CMSynonymsPaginatedResult GetPaginated(string sessionId, CMSynonymsPaginated cMSynonymsPaginated, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMSynonymsPaginatedResult> localVarResponse = GetPaginatedWithHttpInfo(sessionId, cMSynonymsPaginated, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get Synonyms Paginated return a paginated list of synonyms with optional filtering.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynonymsPaginated"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSynonymsPaginatedResult</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMSynonymsPaginatedResult> GetPaginatedWithHttpInfo(string sessionId, CMSynonymsPaginated cMSynonymsPaginated, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->GetPaginated");
            }

            // verify the required parameter 'cMSynonymsPaginated' is set
            if (cMSynonymsPaginated == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMSynonymsPaginated' when calling LanguageApi->GetPaginated");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMSynonymsPaginated;

            localVarRequestOptions.Operation = "LanguageApi.GetPaginated";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<CMSynonymsPaginatedResult>("/api/language/synonyms", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaginated", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get Synonyms Paginated return a paginated list of synonyms with optional filtering.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynonymsPaginated"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSynonymsPaginatedResult</returns>
        public async System.Threading.Tasks.Task<CMSynonymsPaginatedResult> GetPaginatedAsync(string sessionId, CMSynonymsPaginated cMSynonymsPaginated, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMSynonymsPaginatedResult> localVarResponse = await GetPaginatedWithHttpInfoAsync(sessionId, cMSynonymsPaginated, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get Synonyms Paginated return a paginated list of synonyms with optional filtering.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynonymsPaginated"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSynonymsPaginatedResult)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMSynonymsPaginatedResult>> GetPaginatedWithHttpInfoAsync(string sessionId, CMSynonymsPaginated cMSynonymsPaginated, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->GetPaginated");
            }

            // verify the required parameter 'cMSynonymsPaginated' is set
            if (cMSynonymsPaginated == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMSynonymsPaginated' when calling LanguageApi->GetPaginated");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMSynonymsPaginated;

            localVarRequestOptions.Operation = "LanguageApi.GetPaginated";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<CMSynonymsPaginatedResult>("/api/language/synonyms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaginated", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Semantics Paginated Return a paginated list of semantics with an optional filter.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSemanticsPaginated"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSemanticsPaginatedResult</returns>
        public CMSemanticsPaginatedResult GetSemanticsPaginated(string sessionId, CMSemanticsPaginated cMSemanticsPaginated, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMSemanticsPaginatedResult> localVarResponse = GetSemanticsPaginatedWithHttpInfo(sessionId, cMSemanticsPaginated, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Semantics Paginated Return a paginated list of semantics with an optional filter.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSemanticsPaginated"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSemanticsPaginatedResult</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMSemanticsPaginatedResult> GetSemanticsPaginatedWithHttpInfo(string sessionId, CMSemanticsPaginated cMSemanticsPaginated, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->GetSemanticsPaginated");
            }

            // verify the required parameter 'cMSemanticsPaginated' is set
            if (cMSemanticsPaginated == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMSemanticsPaginated' when calling LanguageApi->GetSemanticsPaginated");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMSemanticsPaginated;

            localVarRequestOptions.Operation = "LanguageApi.GetSemanticsPaginated";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<CMSemanticsPaginatedResult>("/api/language/semantics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSemanticsPaginated", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Semantics Paginated Return a paginated list of semantics with an optional filter.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSemanticsPaginated"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSemanticsPaginatedResult</returns>
        public async System.Threading.Tasks.Task<CMSemanticsPaginatedResult> GetSemanticsPaginatedAsync(string sessionId, CMSemanticsPaginated cMSemanticsPaginated, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMSemanticsPaginatedResult> localVarResponse = await GetSemanticsPaginatedWithHttpInfoAsync(sessionId, cMSemanticsPaginated, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Semantics Paginated Return a paginated list of semantics with an optional filter.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSemanticsPaginated"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSemanticsPaginatedResult)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMSemanticsPaginatedResult>> GetSemanticsPaginatedWithHttpInfoAsync(string sessionId, CMSemanticsPaginated cMSemanticsPaginated, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->GetSemanticsPaginated");
            }

            // verify the required parameter 'cMSemanticsPaginated' is set
            if (cMSemanticsPaginated == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMSemanticsPaginated' when calling LanguageApi->GetSemanticsPaginated");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMSemanticsPaginated;

            localVarRequestOptions.Operation = "LanguageApi.GetSemanticsPaginated";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<CMSemanticsPaginatedResult>("/api/language/semantics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSemanticsPaginated", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Optimize Indexes Force index optimization for a the given knowledge-base, now.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMOptimizeIndex"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage OptimizeIndexes(string sessionId, CMOptimizeIndex cMOptimizeIndex, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = OptimizeIndexesWithHttpInfo(sessionId, cMOptimizeIndex, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Optimize Indexes Force index optimization for a the given knowledge-base, now.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMOptimizeIndex"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> OptimizeIndexesWithHttpInfo(string sessionId, CMOptimizeIndex cMOptimizeIndex, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->OptimizeIndexes");
            }

            // verify the required parameter 'cMOptimizeIndex' is set
            if (cMOptimizeIndex == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMOptimizeIndex' when calling LanguageApi->OptimizeIndexes");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMOptimizeIndex;

            localVarRequestOptions.Operation = "LanguageApi.OptimizeIndexes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<JsonMessage>("/api/language/optimize-indexes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OptimizeIndexes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Optimize Indexes Force index optimization for a the given knowledge-base, now.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMOptimizeIndex"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> OptimizeIndexesAsync(string sessionId, CMOptimizeIndex cMOptimizeIndex, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await OptimizeIndexesWithHttpInfoAsync(sessionId, cMOptimizeIndex, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Optimize Indexes Force index optimization for a the given knowledge-base, now.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMOptimizeIndex"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> OptimizeIndexesWithHttpInfoAsync(string sessionId, CMOptimizeIndex cMOptimizeIndex, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->OptimizeIndexes");
            }

            // verify the required parameter 'cMOptimizeIndex' is set
            if (cMOptimizeIndex == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMOptimizeIndex' when calling LanguageApi->OptimizeIndexes");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMOptimizeIndex;

            localVarRequestOptions.Operation = "LanguageApi.OptimizeIndexes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<JsonMessage>("/api/language/optimize-indexes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OptimizeIndexes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Redact Document Create a redacted version of a document as a PDF given its url.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base-64 encoded (no-prefix) url of the document</param>
        /// <param name="entityCsv">a csv list of entities to redact (e.g. person,location)</param>
        /// <param name="wordCsv">a csv list of additional words to redact (e.g. John,Markov.  Use null for ignore.)</param>
        /// <param name="allowWordsCsv">a csv list of words to not-redact (e.g. John,Markov.  Use null for ignore.)</param>
        /// <param name="sessionId">an optional SimSage Session id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>byte[]</returns>
        public byte[] RedactDocument(string organisationId, string kbId, string url, string entityCsv, string wordCsv, string allowWordsCsv, string? sessionId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<byte[]> localVarResponse = RedactDocumentWithHttpInfo(organisationId, kbId, url, entityCsv, wordCsv, allowWordsCsv, sessionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Redact Document Create a redacted version of a document as a PDF given its url.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base-64 encoded (no-prefix) url of the document</param>
        /// <param name="entityCsv">a csv list of entities to redact (e.g. person,location)</param>
        /// <param name="wordCsv">a csv list of additional words to redact (e.g. John,Markov.  Use null for ignore.)</param>
        /// <param name="allowWordsCsv">a csv list of words to not-redact (e.g. John,Markov.  Use null for ignore.)</param>
        /// <param name="sessionId">an optional SimSage Session id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public Org.OpenAPITools.Client.ApiResponse<byte[]> RedactDocumentWithHttpInfo(string organisationId, string kbId, string url, string entityCsv, string wordCsv, string allowWordsCsv, string? sessionId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling LanguageApi->RedactDocument");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling LanguageApi->RedactDocument");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling LanguageApi->RedactDocument");
            }

            // verify the required parameter 'entityCsv' is set
            if (entityCsv == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'entityCsv' when calling LanguageApi->RedactDocument");
            }

            // verify the required parameter 'wordCsv' is set
            if (wordCsv == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'wordCsv' when calling LanguageApi->RedactDocument");
            }

            // verify the required parameter 'allowWordsCsv' is set
            if (allowWordsCsv == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'allowWordsCsv' when calling LanguageApi->RedactDocument");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/pdf"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.PathParameters.Add("entityCsv", Org.OpenAPITools.Client.ClientUtils.ParameterToString(entityCsv)); // path parameter
            localVarRequestOptions.PathParameters.Add("wordCsv", Org.OpenAPITools.Client.ClientUtils.ParameterToString(wordCsv)); // path parameter
            localVarRequestOptions.PathParameters.Add("allowWordsCsv", Org.OpenAPITools.Client.ClientUtils.ParameterToString(allowWordsCsv)); // path parameter
            if (sessionId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            }

            localVarRequestOptions.Operation = "LanguageApi.RedactDocument";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<byte[]>("/api/language/redact/{organisationId}/{kbId}/{url}/{entityCsv}/{wordCsv}/{allowWordsCsv}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RedactDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Redact Document Create a redacted version of a document as a PDF given its url.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base-64 encoded (no-prefix) url of the document</param>
        /// <param name="entityCsv">a csv list of entities to redact (e.g. person,location)</param>
        /// <param name="wordCsv">a csv list of additional words to redact (e.g. John,Markov.  Use null for ignore.)</param>
        /// <param name="allowWordsCsv">a csv list of words to not-redact (e.g. John,Markov.  Use null for ignore.)</param>
        /// <param name="sessionId">an optional SimSage Session id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> RedactDocumentAsync(string organisationId, string kbId, string url, string entityCsv, string wordCsv, string allowWordsCsv, string? sessionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<byte[]> localVarResponse = await RedactDocumentWithHttpInfoAsync(organisationId, kbId, url, entityCsv, wordCsv, allowWordsCsv, sessionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Redact Document Create a redacted version of a document as a PDF given its url.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base-64 encoded (no-prefix) url of the document</param>
        /// <param name="entityCsv">a csv list of entities to redact (e.g. person,location)</param>
        /// <param name="wordCsv">a csv list of additional words to redact (e.g. John,Markov.  Use null for ignore.)</param>
        /// <param name="allowWordsCsv">a csv list of words to not-redact (e.g. John,Markov.  Use null for ignore.)</param>
        /// <param name="sessionId">an optional SimSage Session id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<byte[]>> RedactDocumentWithHttpInfoAsync(string organisationId, string kbId, string url, string entityCsv, string wordCsv, string allowWordsCsv, string? sessionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling LanguageApi->RedactDocument");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling LanguageApi->RedactDocument");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling LanguageApi->RedactDocument");
            }

            // verify the required parameter 'entityCsv' is set
            if (entityCsv == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'entityCsv' when calling LanguageApi->RedactDocument");
            }

            // verify the required parameter 'wordCsv' is set
            if (wordCsv == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'wordCsv' when calling LanguageApi->RedactDocument");
            }

            // verify the required parameter 'allowWordsCsv' is set
            if (allowWordsCsv == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'allowWordsCsv' when calling LanguageApi->RedactDocument");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/pdf"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.PathParameters.Add("entityCsv", Org.OpenAPITools.Client.ClientUtils.ParameterToString(entityCsv)); // path parameter
            localVarRequestOptions.PathParameters.Add("wordCsv", Org.OpenAPITools.Client.ClientUtils.ParameterToString(wordCsv)); // path parameter
            localVarRequestOptions.PathParameters.Add("allowWordsCsv", Org.OpenAPITools.Client.ClientUtils.ParameterToString(allowWordsCsv)); // path parameter
            if (sessionId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            }

            localVarRequestOptions.Operation = "LanguageApi.RedactDocument";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<byte[]>("/api/language/redact/{organisationId}/{kbId}/{url}/{entityCsv}/{wordCsv}/{allowWordsCsv}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RedactDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// save categorization create or update a specific categorization for a given org/kb
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMCategorization"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage SaveCategorization(string sessionId, CMCategorization cMCategorization, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = SaveCategorizationWithHttpInfo(sessionId, cMCategorization, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// save categorization create or update a specific categorization for a given org/kb
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMCategorization"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> SaveCategorizationWithHttpInfo(string sessionId, CMCategorization cMCategorization, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->SaveCategorization");
            }

            // verify the required parameter 'cMCategorization' is set
            if (cMCategorization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMCategorization' when calling LanguageApi->SaveCategorization");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMCategorization;

            localVarRequestOptions.Operation = "LanguageApi.SaveCategorization";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<JsonMessage>("/api/language/categorization", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveCategorization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// save categorization create or update a specific categorization for a given org/kb
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMCategorization"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> SaveCategorizationAsync(string sessionId, CMCategorization cMCategorization, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await SaveCategorizationWithHttpInfoAsync(sessionId, cMCategorization, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// save categorization create or update a specific categorization for a given org/kb
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMCategorization"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> SaveCategorizationWithHttpInfoAsync(string sessionId, CMCategorization cMCategorization, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->SaveCategorization");
            }

            // verify the required parameter 'cMCategorization' is set
            if (cMCategorization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMCategorization' when calling LanguageApi->SaveCategorization");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMCategorization;

            localVarRequestOptions.Operation = "LanguageApi.SaveCategorization";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<JsonMessage>("/api/language/categorization", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveCategorization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save Semantic Create or update (save) a semantic in SimSage.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSemanticModelEdit"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage SaveSemantic(string organisationId, string kbId, string sessionId, CMSemanticModelEdit cMSemanticModelEdit, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = SaveSemanticWithHttpInfo(organisationId, kbId, sessionId, cMSemanticModelEdit, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save Semantic Create or update (save) a semantic in SimSage.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSemanticModelEdit"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> SaveSemanticWithHttpInfo(string organisationId, string kbId, string sessionId, CMSemanticModelEdit cMSemanticModelEdit, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling LanguageApi->SaveSemantic");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling LanguageApi->SaveSemantic");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->SaveSemantic");
            }

            // verify the required parameter 'cMSemanticModelEdit' is set
            if (cMSemanticModelEdit == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMSemanticModelEdit' when calling LanguageApi->SaveSemantic");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMSemanticModelEdit;

            localVarRequestOptions.Operation = "LanguageApi.SaveSemantic";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<JsonMessage>("/api/language/save-semantic/{organisationId}/{kbId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveSemantic", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save Semantic Create or update (save) a semantic in SimSage.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSemanticModelEdit"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> SaveSemanticAsync(string organisationId, string kbId, string sessionId, CMSemanticModelEdit cMSemanticModelEdit, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await SaveSemanticWithHttpInfoAsync(organisationId, kbId, sessionId, cMSemanticModelEdit, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save Semantic Create or update (save) a semantic in SimSage.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSemanticModelEdit"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> SaveSemanticWithHttpInfoAsync(string organisationId, string kbId, string sessionId, CMSemanticModelEdit cMSemanticModelEdit, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling LanguageApi->SaveSemantic");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling LanguageApi->SaveSemantic");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->SaveSemantic");
            }

            // verify the required parameter 'cMSemanticModelEdit' is set
            if (cMSemanticModelEdit == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMSemanticModelEdit' when calling LanguageApi->SaveSemantic");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMSemanticModelEdit;

            localVarRequestOptions.Operation = "LanguageApi.SaveSemantic";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<JsonMessage>("/api/language/save-semantic/{organisationId}/{kbId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveSemantic", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save SynSet Save (update/create) a syn-set in SimSage.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynSet"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage SaveSynSet(string organisationId, string kbId, string sessionId, CMSynSet cMSynSet, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = SaveSynSetWithHttpInfo(organisationId, kbId, sessionId, cMSynSet, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save SynSet Save (update/create) a syn-set in SimSage.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynSet"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> SaveSynSetWithHttpInfo(string organisationId, string kbId, string sessionId, CMSynSet cMSynSet, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling LanguageApi->SaveSynSet");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling LanguageApi->SaveSynSet");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->SaveSynSet");
            }

            // verify the required parameter 'cMSynSet' is set
            if (cMSynSet == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMSynSet' when calling LanguageApi->SaveSynSet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMSynSet;

            localVarRequestOptions.Operation = "LanguageApi.SaveSynSet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<JsonMessage>("/api/language/save-syn-set/{organisationId}/{kbId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveSynSet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save SynSet Save (update/create) a syn-set in SimSage.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynSet"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> SaveSynSetAsync(string organisationId, string kbId, string sessionId, CMSynSet cMSynSet, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await SaveSynSetWithHttpInfoAsync(organisationId, kbId, sessionId, cMSynSet, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save SynSet Save (update/create) a syn-set in SimSage.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynSet"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> SaveSynSetWithHttpInfoAsync(string organisationId, string kbId, string sessionId, CMSynSet cMSynSet, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling LanguageApi->SaveSynSet");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling LanguageApi->SaveSynSet");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->SaveSynSet");
            }

            // verify the required parameter 'cMSynSet' is set
            if (cMSynSet == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMSynSet' when calling LanguageApi->SaveSynSet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMSynSet;

            localVarRequestOptions.Operation = "LanguageApi.SaveSynSet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<JsonMessage>("/api/language/save-syn-set/{organisationId}/{kbId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveSynSet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save Synonym Save (update/create) a synonym.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynonym"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage SaveSynonym(string organisationId, string kbId, string sessionId, CMSynonym cMSynonym, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = SaveSynonymWithHttpInfo(organisationId, kbId, sessionId, cMSynonym, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save Synonym Save (update/create) a synonym.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynonym"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> SaveSynonymWithHttpInfo(string organisationId, string kbId, string sessionId, CMSynonym cMSynonym, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling LanguageApi->SaveSynonym");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling LanguageApi->SaveSynonym");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->SaveSynonym");
            }

            // verify the required parameter 'cMSynonym' is set
            if (cMSynonym == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMSynonym' when calling LanguageApi->SaveSynonym");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMSynonym;

            localVarRequestOptions.Operation = "LanguageApi.SaveSynonym";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<JsonMessage>("/api/language/save-synonym/{organisationId}/{kbId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveSynonym", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save Synonym Save (update/create) a synonym.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynonym"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> SaveSynonymAsync(string organisationId, string kbId, string sessionId, CMSynonym cMSynonym, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await SaveSynonymWithHttpInfoAsync(organisationId, kbId, sessionId, cMSynonym, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save Synonym Save (update/create) a synonym.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSynonym"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> SaveSynonymWithHttpInfoAsync(string organisationId, string kbId, string sessionId, CMSynonym cMSynonym, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling LanguageApi->SaveSynonym");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling LanguageApi->SaveSynonym");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->SaveSynonym");
            }

            // verify the required parameter 'cMSynonym' is set
            if (cMSynonym == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMSynonym' when calling LanguageApi->SaveSynonym");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMSynonym;

            localVarRequestOptions.Operation = "LanguageApi.SaveSynonym";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<JsonMessage>("/api/language/save-synonym/{organisationId}/{kbId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveSynonym", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Truncate slow Indexes Force slow-index truncation for a the given knowledge-base, now.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-bases&#39; id (a guid)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage TruncateSlowIndexes(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = TruncateSlowIndexesWithHttpInfo(organisationId, kbId, sessionId, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Truncate slow Indexes Force slow-index truncation for a the given knowledge-base, now.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-bases&#39; id (a guid)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> TruncateSlowIndexesWithHttpInfo(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling LanguageApi->TruncateSlowIndexes");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling LanguageApi->TruncateSlowIndexes");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->TruncateSlowIndexes");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "LanguageApi.TruncateSlowIndexes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<JsonMessage>("/api/language/truncate-slow-indexes/{organisationId}/{kbId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TruncateSlowIndexes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Truncate slow Indexes Force slow-index truncation for a the given knowledge-base, now.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-bases&#39; id (a guid)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> TruncateSlowIndexesAsync(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await TruncateSlowIndexesWithHttpInfoAsync(organisationId, kbId, sessionId, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Truncate slow Indexes Force slow-index truncation for a the given knowledge-base, now.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-bases&#39; id (a guid)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> TruncateSlowIndexesWithHttpInfoAsync(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling LanguageApi->TruncateSlowIndexes");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling LanguageApi->TruncateSlowIndexes");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->TruncateSlowIndexes");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "LanguageApi.TruncateSlowIndexes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<JsonMessage>("/api/language/truncate-slow-indexes/{organisationId}/{kbId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TruncateSlowIndexes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Tune Graph Create a tuned language graph for a given organisation/knowledge-base.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage TuneLanguageGraph(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = TuneLanguageGraphWithHttpInfo(organisationId, kbId, sessionId, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Tune Graph Create a tuned language graph for a given organisation/knowledge-base.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> TuneLanguageGraphWithHttpInfo(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling LanguageApi->TuneLanguageGraph");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling LanguageApi->TuneLanguageGraph");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->TuneLanguageGraph");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "LanguageApi.TuneLanguageGraph";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<JsonMessage>("/api/language/tune-graph/{organisationId}/{kbId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TuneLanguageGraph", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Tune Graph Create a tuned language graph for a given organisation/knowledge-base.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> TuneLanguageGraphAsync(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await TuneLanguageGraphWithHttpInfoAsync(organisationId, kbId, sessionId, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Tune Graph Create a tuned language graph for a given organisation/knowledge-base.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> TuneLanguageGraphWithHttpInfoAsync(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling LanguageApi->TuneLanguageGraph");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling LanguageApi->TuneLanguageGraph");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling LanguageApi->TuneLanguageGraph");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "LanguageApi.TuneLanguageGraph";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<JsonMessage>("/api/language/tune-graph/{organisationId}/{kbId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TuneLanguageGraph", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Version Return the version of the SimSage Language Services.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMVersion</returns>
        public CMVersion Version2(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMVersion> localVarResponse = Version2WithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Version Return the version of the SimSage Language Services.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMVersion</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMVersion> Version2WithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "LanguageApi.Version2";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CMVersion>("/api/language/version", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Version2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Version Return the version of the SimSage Language Services.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMVersion</returns>
        public async System.Threading.Tasks.Task<CMVersion> Version2Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMVersion> localVarResponse = await Version2WithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Version Return the version of the SimSage Language Services.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMVersion)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMVersion>> Version2WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "LanguageApi.Version2";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CMVersion>("/api/language/version", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Version2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
