/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.11.4
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// get Document
        /// </summary>
        /// <remarks>
        /// return a document&#39;s details given a base64 encoded url
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the document&#39;s url, base64 encoded, a unique id identifying a document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMDocument</returns>
        CMDocument Document(string sessionId, string organisationId, string kbId, string url, int operationIndex = 0);

        /// <summary>
        /// get Document
        /// </summary>
        /// <remarks>
        /// return a document&#39;s details given a base64 encoded url
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the document&#39;s url, base64 encoded, a unique id identifying a document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMDocument</returns>
        ApiResponse<CMDocument> DocumentWithHttpInfo(string sessionId, string organisationId, string kbId, string url, int operationIndex = 0);
        /// <summary>
        /// Download Parquet File
        /// </summary>
        /// <remarks>
        /// Download an inventory parquet file.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ott">a one-time token for downloading data.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to download</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>byte[]</returns>
        byte[] GetParquetFile(string ott, string organisationId, string kbId, long dateTime, int operationIndex = 0);

        /// <summary>
        /// Download Parquet File
        /// </summary>
        /// <remarks>
        /// Download an inventory parquet file.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ott">a one-time token for downloading data.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to download</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> GetParquetFileWithHttpInfo(string ott, string organisationId, string kbId, long dateTime, int operationIndex = 0);
        /// <summary>
        /// Parquet available time list
        /// </summary>
        /// <remarks>
        /// Return a list of inventory times available for download.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="page">pagination control, the page index</param>
        /// <param name="pageSize">pagination control, the size of a page</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMParquetTimeList</returns>
        CMParquetTimeList GetParquetList(string organisationId, string kbId, int page, int pageSize, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Parquet available time list
        /// </summary>
        /// <remarks>
        /// Return a list of inventory times available for download.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="page">pagination control, the page index</param>
        /// <param name="pageSize">pagination control, the size of a page</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMParquetTimeList</returns>
        ApiResponse<CMParquetTimeList> GetParquetListWithHttpInfo(string organisationId, string kbId, int page, int pageSize, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Inventory breakdown Spreadsheet
        /// </summary>
        /// <remarks>
        /// Download an inventory breakdown spreadsheet for a given date-time.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ott">a one-time token for downloading data.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to download</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>byte[]</returns>
        byte[] GetSpreadsheet(string ott, string organisationId, string kbId, long dateTime, int operationIndex = 0);

        /// <summary>
        /// Inventory breakdown Spreadsheet
        /// </summary>
        /// <remarks>
        /// Download an inventory breakdown spreadsheet for a given date-time.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ott">a one-time token for downloading data.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to download</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> GetSpreadsheetWithHttpInfo(string ott, string organisationId, string kbId, long dateTime, int operationIndex = 0);
        /// <summary>
        /// Document Frequency Statistics
        /// </summary>
        /// <remarks>
        /// Return a document frequency statistics report - frequencies of different document types
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ott">a one-time token for downloading data.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to download</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMDocumentTypeFrequency&gt;</returns>
        List<CMDocumentTypeFrequency> GetStats1(string ott, string organisationId, string kbId, long dateTime, int operationIndex = 0);

        /// <summary>
        /// Document Frequency Statistics
        /// </summary>
        /// <remarks>
        /// Return a document frequency statistics report - frequencies of different document types
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ott">a one-time token for downloading data.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to download</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMDocumentTypeFrequency&gt;</returns>
        ApiResponse<List<CMDocumentTypeFrequency>> GetStats1WithHttpInfo(string ott, string organisationId, string kbId, long dateTime, int operationIndex = 0);
        /// <summary>
        /// Document Inventory
        /// </summary>
        /// <remarks>
        /// Start the async inventorize process for documents of a given organisation/kb.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMInventorizeParameters"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage InventorizeDocuments(string sessionId, CMInventorizeParameters cMInventorizeParameters, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Document Inventory
        /// </summary>
        /// <remarks>
        /// Start the async inventorize process for documents of a given organisation/kb.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMInventorizeParameters"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> InventorizeDocumentsWithHttpInfo(string sessionId, CMInventorizeParameters cMInventorizeParameters, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Index Inventory
        /// </summary>
        /// <remarks>
        /// Start the async inventorize process for the optimized-indexes of a given organisation/kb.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMInventorizeParameters"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage InventorizeIndexes(string sessionId, CMInventorizeParameters cMInventorizeParameters, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Index Inventory
        /// </summary>
        /// <remarks>
        /// Start the async inventorize process for the optimized-indexes of a given organisation/kb.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMInventorizeParameters"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> InventorizeIndexesWithHttpInfo(string sessionId, CMInventorizeParameters cMInventorizeParameters, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// get Preview
        /// </summary>
        /// <remarks>
        /// get a preview for a document if available by url
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="clientId">the client-id, a persistent id identifying the remote client making this request.</param>
        /// <param name="sessionId">the session-id, the security required for making this request.</param>
        /// <param name="urlId">the SimSage id for this url</param>
        /// <param name="page">what page to render</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>byte[]</returns>
        byte[] Preview(string organisationId, string kbId, string clientId, string sessionId, int urlId, int page, int operationIndex = 0);

        /// <summary>
        /// get Preview
        /// </summary>
        /// <remarks>
        /// get a preview for a document if available by url
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="clientId">the client-id, a persistent id identifying the remote client making this request.</param>
        /// <param name="sessionId">the session-id, the security required for making this request.</param>
        /// <param name="urlId">the SimSage id for this url</param>
        /// <param name="page">what page to render</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> PreviewWithHttpInfo(string organisationId, string kbId, string clientId, string sessionId, int urlId, int page, int operationIndex = 0);
        /// <summary>
        /// Preview HTML
        /// </summary>
        /// <remarks>
        /// get a preview HTML page for a document if available by url
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id or a anonymous user-id.</param>
        /// <param name="cMGetHtml"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMGetHtml</returns>
        CMGetHtml PreviewHtml(string sessionId, CMGetHtml cMGetHtml, int operationIndex = 0);

        /// <summary>
        /// Preview HTML
        /// </summary>
        /// <remarks>
        /// get a preview HTML page for a document if available by url
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id or a anonymous user-id.</param>
        /// <param name="cMGetHtml"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMGetHtml</returns>
        ApiResponse<CMGetHtml> PreviewHtmlWithHttpInfo(string sessionId, CMGetHtml cMGetHtml, int operationIndex = 0);
        /// <summary>
        /// Summarize Documents for Query
        /// </summary>
        /// <remarks>
        /// Summarize a set of documents given a list of urls and a query.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMQueryFocussedSummarizationRequest"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMQueryFocussedSummarization</returns>
        CMQueryFocussedSummarization QueryFocussedSummarization(string sessionId, CMQueryFocussedSummarizationRequest cMQueryFocussedSummarizationRequest, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Summarize Documents for Query
        /// </summary>
        /// <remarks>
        /// Summarize a set of documents given a list of urls and a query.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMQueryFocussedSummarizationRequest"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMQueryFocussedSummarization</returns>
        ApiResponse<CMQueryFocussedSummarization> QueryFocussedSummarizationWithHttpInfo(string sessionId, CMQueryFocussedSummarizationRequest cMQueryFocussedSummarizationRequest, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Remove Document
        /// </summary>
        /// <remarks>
        /// Remove/delete a document by its url.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base-64 encoded (no-prefix) url of the document</param>
        /// <param name="sourceId">the source-id of the crawler this document belongs to</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage RemoveDocument(string organisationId, string kbId, string url, int sourceId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Remove Document
        /// </summary>
        /// <remarks>
        /// Remove/delete a document by its url.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base-64 encoded (no-prefix) url of the document</param>
        /// <param name="sourceId">the source-id of the crawler this document belongs to</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> RemoveDocumentWithHttpInfo(string organisationId, string kbId, string url, int sourceId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Delete Parquet File
        /// </summary>
        /// <remarks>
        /// Remove an inventory breakdown spreadsheet/parquet file from the system
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to remove</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;JsonMessage&gt;</returns>
        List<JsonMessage> RemoveParquetFile(string organisationId, string kbId, long dateTime, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Delete Parquet File
        /// </summary>
        /// <remarks>
        /// Remove an inventory breakdown spreadsheet/parquet file from the system
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to remove</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;JsonMessage&gt;</returns>
        ApiResponse<List<JsonMessage>> RemoveParquetFileWithHttpInfo(string organisationId, string kbId, long dateTime, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Summarize a document
        /// </summary>
        /// <remarks>
        /// Summarize a single document using an extractive summarization.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSingleDocumentSummaryRequest"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSingleDocumentSummary</returns>
        CMSingleDocumentSummary SummarizeDocument(string sessionId, CMSingleDocumentSummaryRequest cMSingleDocumentSummaryRequest, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Summarize a document
        /// </summary>
        /// <remarks>
        /// Summarize a single document using an extractive summarization.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSingleDocumentSummaryRequest"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSingleDocumentSummary</returns>
        ApiResponse<CMSingleDocumentSummary> SummarizeDocumentWithHttpInfo(string sessionId, CMSingleDocumentSummaryRequest cMSingleDocumentSummaryRequest, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Version
        /// </summary>
        /// <remarks>
        /// Get the version of SimSage Document Services.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMVersion</returns>
        CMVersion Version4(int operationIndex = 0);

        /// <summary>
        /// Version
        /// </summary>
        /// <remarks>
        /// Get the version of SimSage Document Services.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMVersion</returns>
        ApiResponse<CMVersion> Version4WithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Zip source documents
        /// </summary>
        /// <remarks>
        /// Zip all documents in a source on the local server.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMZipSource"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage ZipSource(string sessionId, CMZipSource cMZipSource, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Zip source documents
        /// </summary>
        /// <remarks>
        /// Zip all documents in a source on the local server.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMZipSource"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> ZipSourceWithHttpInfo(string sessionId, CMZipSource cMZipSource, string? aPIVersion = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// get Document
        /// </summary>
        /// <remarks>
        /// return a document&#39;s details given a base64 encoded url
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the document&#39;s url, base64 encoded, a unique id identifying a document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMDocument</returns>
        System.Threading.Tasks.Task<CMDocument> DocumentAsync(string sessionId, string organisationId, string kbId, string url, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get Document
        /// </summary>
        /// <remarks>
        /// return a document&#39;s details given a base64 encoded url
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the document&#39;s url, base64 encoded, a unique id identifying a document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMDocument>> DocumentWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string url, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Download Parquet File
        /// </summary>
        /// <remarks>
        /// Download an inventory parquet file.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ott">a one-time token for downloading data.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to download</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> GetParquetFileAsync(string ott, string organisationId, string kbId, long dateTime, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download Parquet File
        /// </summary>
        /// <remarks>
        /// Download an inventory parquet file.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ott">a one-time token for downloading data.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to download</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> GetParquetFileWithHttpInfoAsync(string ott, string organisationId, string kbId, long dateTime, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Parquet available time list
        /// </summary>
        /// <remarks>
        /// Return a list of inventory times available for download.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="page">pagination control, the page index</param>
        /// <param name="pageSize">pagination control, the size of a page</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMParquetTimeList</returns>
        System.Threading.Tasks.Task<CMParquetTimeList> GetParquetListAsync(string organisationId, string kbId, int page, int pageSize, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Parquet available time list
        /// </summary>
        /// <remarks>
        /// Return a list of inventory times available for download.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="page">pagination control, the page index</param>
        /// <param name="pageSize">pagination control, the size of a page</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMParquetTimeList)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMParquetTimeList>> GetParquetListWithHttpInfoAsync(string organisationId, string kbId, int page, int pageSize, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Inventory breakdown Spreadsheet
        /// </summary>
        /// <remarks>
        /// Download an inventory breakdown spreadsheet for a given date-time.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ott">a one-time token for downloading data.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to download</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> GetSpreadsheetAsync(string ott, string organisationId, string kbId, long dateTime, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Inventory breakdown Spreadsheet
        /// </summary>
        /// <remarks>
        /// Download an inventory breakdown spreadsheet for a given date-time.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ott">a one-time token for downloading data.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to download</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> GetSpreadsheetWithHttpInfoAsync(string ott, string organisationId, string kbId, long dateTime, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Document Frequency Statistics
        /// </summary>
        /// <remarks>
        /// Return a document frequency statistics report - frequencies of different document types
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ott">a one-time token for downloading data.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to download</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMDocumentTypeFrequency&gt;</returns>
        System.Threading.Tasks.Task<List<CMDocumentTypeFrequency>> GetStats1Async(string ott, string organisationId, string kbId, long dateTime, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Document Frequency Statistics
        /// </summary>
        /// <remarks>
        /// Return a document frequency statistics report - frequencies of different document types
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ott">a one-time token for downloading data.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to download</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMDocumentTypeFrequency&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CMDocumentTypeFrequency>>> GetStats1WithHttpInfoAsync(string ott, string organisationId, string kbId, long dateTime, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Document Inventory
        /// </summary>
        /// <remarks>
        /// Start the async inventorize process for documents of a given organisation/kb.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMInventorizeParameters"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> InventorizeDocumentsAsync(string sessionId, CMInventorizeParameters cMInventorizeParameters, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Document Inventory
        /// </summary>
        /// <remarks>
        /// Start the async inventorize process for documents of a given organisation/kb.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMInventorizeParameters"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> InventorizeDocumentsWithHttpInfoAsync(string sessionId, CMInventorizeParameters cMInventorizeParameters, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Index Inventory
        /// </summary>
        /// <remarks>
        /// Start the async inventorize process for the optimized-indexes of a given organisation/kb.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMInventorizeParameters"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> InventorizeIndexesAsync(string sessionId, CMInventorizeParameters cMInventorizeParameters, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Index Inventory
        /// </summary>
        /// <remarks>
        /// Start the async inventorize process for the optimized-indexes of a given organisation/kb.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMInventorizeParameters"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> InventorizeIndexesWithHttpInfoAsync(string sessionId, CMInventorizeParameters cMInventorizeParameters, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get Preview
        /// </summary>
        /// <remarks>
        /// get a preview for a document if available by url
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="clientId">the client-id, a persistent id identifying the remote client making this request.</param>
        /// <param name="sessionId">the session-id, the security required for making this request.</param>
        /// <param name="urlId">the SimSage id for this url</param>
        /// <param name="page">what page to render</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> PreviewAsync(string organisationId, string kbId, string clientId, string sessionId, int urlId, int page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get Preview
        /// </summary>
        /// <remarks>
        /// get a preview for a document if available by url
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="clientId">the client-id, a persistent id identifying the remote client making this request.</param>
        /// <param name="sessionId">the session-id, the security required for making this request.</param>
        /// <param name="urlId">the SimSage id for this url</param>
        /// <param name="page">what page to render</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> PreviewWithHttpInfoAsync(string organisationId, string kbId, string clientId, string sessionId, int urlId, int page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Preview HTML
        /// </summary>
        /// <remarks>
        /// get a preview HTML page for a document if available by url
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id or a anonymous user-id.</param>
        /// <param name="cMGetHtml"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMGetHtml</returns>
        System.Threading.Tasks.Task<CMGetHtml> PreviewHtmlAsync(string sessionId, CMGetHtml cMGetHtml, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Preview HTML
        /// </summary>
        /// <remarks>
        /// get a preview HTML page for a document if available by url
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id or a anonymous user-id.</param>
        /// <param name="cMGetHtml"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMGetHtml)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMGetHtml>> PreviewHtmlWithHttpInfoAsync(string sessionId, CMGetHtml cMGetHtml, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Summarize Documents for Query
        /// </summary>
        /// <remarks>
        /// Summarize a set of documents given a list of urls and a query.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMQueryFocussedSummarizationRequest"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMQueryFocussedSummarization</returns>
        System.Threading.Tasks.Task<CMQueryFocussedSummarization> QueryFocussedSummarizationAsync(string sessionId, CMQueryFocussedSummarizationRequest cMQueryFocussedSummarizationRequest, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Summarize Documents for Query
        /// </summary>
        /// <remarks>
        /// Summarize a set of documents given a list of urls and a query.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMQueryFocussedSummarizationRequest"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMQueryFocussedSummarization)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMQueryFocussedSummarization>> QueryFocussedSummarizationWithHttpInfoAsync(string sessionId, CMQueryFocussedSummarizationRequest cMQueryFocussedSummarizationRequest, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Document
        /// </summary>
        /// <remarks>
        /// Remove/delete a document by its url.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base-64 encoded (no-prefix) url of the document</param>
        /// <param name="sourceId">the source-id of the crawler this document belongs to</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> RemoveDocumentAsync(string organisationId, string kbId, string url, int sourceId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Document
        /// </summary>
        /// <remarks>
        /// Remove/delete a document by its url.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base-64 encoded (no-prefix) url of the document</param>
        /// <param name="sourceId">the source-id of the crawler this document belongs to</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> RemoveDocumentWithHttpInfoAsync(string organisationId, string kbId, string url, int sourceId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Parquet File
        /// </summary>
        /// <remarks>
        /// Remove an inventory breakdown spreadsheet/parquet file from the system
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to remove</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JsonMessage&gt;</returns>
        System.Threading.Tasks.Task<List<JsonMessage>> RemoveParquetFileAsync(string organisationId, string kbId, long dateTime, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Parquet File
        /// </summary>
        /// <remarks>
        /// Remove an inventory breakdown spreadsheet/parquet file from the system
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to remove</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JsonMessage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JsonMessage>>> RemoveParquetFileWithHttpInfoAsync(string organisationId, string kbId, long dateTime, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Summarize a document
        /// </summary>
        /// <remarks>
        /// Summarize a single document using an extractive summarization.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSingleDocumentSummaryRequest"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSingleDocumentSummary</returns>
        System.Threading.Tasks.Task<CMSingleDocumentSummary> SummarizeDocumentAsync(string sessionId, CMSingleDocumentSummaryRequest cMSingleDocumentSummaryRequest, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Summarize a document
        /// </summary>
        /// <remarks>
        /// Summarize a single document using an extractive summarization.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSingleDocumentSummaryRequest"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSingleDocumentSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMSingleDocumentSummary>> SummarizeDocumentWithHttpInfoAsync(string sessionId, CMSingleDocumentSummaryRequest cMSingleDocumentSummaryRequest, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Version
        /// </summary>
        /// <remarks>
        /// Get the version of SimSage Document Services.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMVersion</returns>
        System.Threading.Tasks.Task<CMVersion> Version4Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Version
        /// </summary>
        /// <remarks>
        /// Get the version of SimSage Document Services.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMVersion>> Version4WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Zip source documents
        /// </summary>
        /// <remarks>
        /// Zip all documents in a source on the local server.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMZipSource"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> ZipSourceAsync(string sessionId, CMZipSource cMZipSource, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Zip source documents
        /// </summary>
        /// <remarks>
        /// Zip all documents in a source on the local server.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMZipSource"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> ZipSourceWithHttpInfoAsync(string sessionId, CMZipSource cMZipSource, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentApi : IDocumentApiSync, IDocumentApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DocumentApi : IDocumentApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DocumentApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DocumentApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// get Document return a document&#39;s details given a base64 encoded url
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the document&#39;s url, base64 encoded, a unique id identifying a document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMDocument</returns>
        public CMDocument Document(string sessionId, string organisationId, string kbId, string url, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMDocument> localVarResponse = DocumentWithHttpInfo(sessionId, organisationId, kbId, url);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get Document return a document&#39;s details given a base64 encoded url
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the document&#39;s url, base64 encoded, a unique id identifying a document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMDocument</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMDocument> DocumentWithHttpInfo(string sessionId, string organisationId, string kbId, string url, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DocumentApi->Document");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DocumentApi->Document");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DocumentApi->Document");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DocumentApi->Document");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "DocumentApi.Document";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CMDocument>("/api/document/document/{organisationId}/{kbId}/{url}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Document", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get Document return a document&#39;s details given a base64 encoded url
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the document&#39;s url, base64 encoded, a unique id identifying a document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMDocument</returns>
        public async System.Threading.Tasks.Task<CMDocument> DocumentAsync(string sessionId, string organisationId, string kbId, string url, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMDocument> localVarResponse = await DocumentWithHttpInfoAsync(sessionId, organisationId, kbId, url, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get Document return a document&#39;s details given a base64 encoded url
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the document&#39;s url, base64 encoded, a unique id identifying a document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMDocument)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMDocument>> DocumentWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string url, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DocumentApi->Document");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DocumentApi->Document");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DocumentApi->Document");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DocumentApi->Document");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "DocumentApi.Document";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CMDocument>("/api/document/document/{organisationId}/{kbId}/{url}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Document", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download Parquet File Download an inventory parquet file.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ott">a one-time token for downloading data.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to download</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>byte[]</returns>
        public byte[] GetParquetFile(string ott, string organisationId, string kbId, long dateTime, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<byte[]> localVarResponse = GetParquetFileWithHttpInfo(ott, organisationId, kbId, dateTime);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download Parquet File Download an inventory parquet file.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ott">a one-time token for downloading data.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to download</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public Org.OpenAPITools.Client.ApiResponse<byte[]> GetParquetFileWithHttpInfo(string ott, string organisationId, string kbId, long dateTime, int operationIndex = 0)
        {
            // verify the required parameter 'ott' is set
            if (ott == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ott' when calling DocumentApi->GetParquetFile");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DocumentApi->GetParquetFile");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DocumentApi->GetParquetFile");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dateTime", Org.OpenAPITools.Client.ClientUtils.ParameterToString(dateTime)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ott", ott));

            localVarRequestOptions.Operation = "DocumentApi.GetParquetFile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<byte[]>("/api/document/parquet/{organisationId}/{kbId}/{dateTime}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetParquetFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download Parquet File Download an inventory parquet file.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ott">a one-time token for downloading data.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to download</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> GetParquetFileAsync(string ott, string organisationId, string kbId, long dateTime, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<byte[]> localVarResponse = await GetParquetFileWithHttpInfoAsync(ott, organisationId, kbId, dateTime, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download Parquet File Download an inventory parquet file.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ott">a one-time token for downloading data.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to download</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<byte[]>> GetParquetFileWithHttpInfoAsync(string ott, string organisationId, string kbId, long dateTime, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ott' is set
            if (ott == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ott' when calling DocumentApi->GetParquetFile");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DocumentApi->GetParquetFile");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DocumentApi->GetParquetFile");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dateTime", Org.OpenAPITools.Client.ClientUtils.ParameterToString(dateTime)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ott", ott));

            localVarRequestOptions.Operation = "DocumentApi.GetParquetFile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<byte[]>("/api/document/parquet/{organisationId}/{kbId}/{dateTime}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetParquetFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Parquet available time list Return a list of inventory times available for download.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="page">pagination control, the page index</param>
        /// <param name="pageSize">pagination control, the size of a page</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMParquetTimeList</returns>
        public CMParquetTimeList GetParquetList(string organisationId, string kbId, int page, int pageSize, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMParquetTimeList> localVarResponse = GetParquetListWithHttpInfo(organisationId, kbId, page, pageSize, sessionId, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Parquet available time list Return a list of inventory times available for download.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="page">pagination control, the page index</param>
        /// <param name="pageSize">pagination control, the size of a page</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMParquetTimeList</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMParquetTimeList> GetParquetListWithHttpInfo(string organisationId, string kbId, int page, int pageSize, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DocumentApi->GetParquetList");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DocumentApi->GetParquetList");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DocumentApi->GetParquetList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", Org.OpenAPITools.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageSize", Org.OpenAPITools.Client.ClientUtils.ParameterToString(pageSize)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DocumentApi.GetParquetList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CMParquetTimeList>("/api/document/parquets/{organisationId}/{kbId}/{page}/{pageSize}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetParquetList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Parquet available time list Return a list of inventory times available for download.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="page">pagination control, the page index</param>
        /// <param name="pageSize">pagination control, the size of a page</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMParquetTimeList</returns>
        public async System.Threading.Tasks.Task<CMParquetTimeList> GetParquetListAsync(string organisationId, string kbId, int page, int pageSize, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMParquetTimeList> localVarResponse = await GetParquetListWithHttpInfoAsync(organisationId, kbId, page, pageSize, sessionId, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Parquet available time list Return a list of inventory times available for download.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="page">pagination control, the page index</param>
        /// <param name="pageSize">pagination control, the size of a page</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMParquetTimeList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMParquetTimeList>> GetParquetListWithHttpInfoAsync(string organisationId, string kbId, int page, int pageSize, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DocumentApi->GetParquetList");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DocumentApi->GetParquetList");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DocumentApi->GetParquetList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", Org.OpenAPITools.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageSize", Org.OpenAPITools.Client.ClientUtils.ParameterToString(pageSize)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DocumentApi.GetParquetList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CMParquetTimeList>("/api/document/parquets/{organisationId}/{kbId}/{page}/{pageSize}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetParquetList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Inventory breakdown Spreadsheet Download an inventory breakdown spreadsheet for a given date-time.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ott">a one-time token for downloading data.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to download</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>byte[]</returns>
        public byte[] GetSpreadsheet(string ott, string organisationId, string kbId, long dateTime, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<byte[]> localVarResponse = GetSpreadsheetWithHttpInfo(ott, organisationId, kbId, dateTime);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Inventory breakdown Spreadsheet Download an inventory breakdown spreadsheet for a given date-time.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ott">a one-time token for downloading data.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to download</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public Org.OpenAPITools.Client.ApiResponse<byte[]> GetSpreadsheetWithHttpInfo(string ott, string organisationId, string kbId, long dateTime, int operationIndex = 0)
        {
            // verify the required parameter 'ott' is set
            if (ott == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ott' when calling DocumentApi->GetSpreadsheet");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DocumentApi->GetSpreadsheet");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DocumentApi->GetSpreadsheet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dateTime", Org.OpenAPITools.Client.ClientUtils.ParameterToString(dateTime)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ott", ott));

            localVarRequestOptions.Operation = "DocumentApi.GetSpreadsheet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<byte[]>("/api/document/spreadsheet/{organisationId}/{kbId}/{dateTime}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSpreadsheet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Inventory breakdown Spreadsheet Download an inventory breakdown spreadsheet for a given date-time.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ott">a one-time token for downloading data.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to download</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> GetSpreadsheetAsync(string ott, string organisationId, string kbId, long dateTime, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<byte[]> localVarResponse = await GetSpreadsheetWithHttpInfoAsync(ott, organisationId, kbId, dateTime, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Inventory breakdown Spreadsheet Download an inventory breakdown spreadsheet for a given date-time.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ott">a one-time token for downloading data.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to download</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<byte[]>> GetSpreadsheetWithHttpInfoAsync(string ott, string organisationId, string kbId, long dateTime, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ott' is set
            if (ott == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ott' when calling DocumentApi->GetSpreadsheet");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DocumentApi->GetSpreadsheet");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DocumentApi->GetSpreadsheet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dateTime", Org.OpenAPITools.Client.ClientUtils.ParameterToString(dateTime)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ott", ott));

            localVarRequestOptions.Operation = "DocumentApi.GetSpreadsheet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<byte[]>("/api/document/spreadsheet/{organisationId}/{kbId}/{dateTime}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSpreadsheet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Document Frequency Statistics Return a document frequency statistics report - frequencies of different document types
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ott">a one-time token for downloading data.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to download</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMDocumentTypeFrequency&gt;</returns>
        public List<CMDocumentTypeFrequency> GetStats1(string ott, string organisationId, string kbId, long dateTime, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMDocumentTypeFrequency>> localVarResponse = GetStats1WithHttpInfo(ott, organisationId, kbId, dateTime);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Document Frequency Statistics Return a document frequency statistics report - frequencies of different document types
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ott">a one-time token for downloading data.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to download</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMDocumentTypeFrequency&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<CMDocumentTypeFrequency>> GetStats1WithHttpInfo(string ott, string organisationId, string kbId, long dateTime, int operationIndex = 0)
        {
            // verify the required parameter 'ott' is set
            if (ott == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ott' when calling DocumentApi->GetStats1");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DocumentApi->GetStats1");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DocumentApi->GetStats1");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dateTime", Org.OpenAPITools.Client.ClientUtils.ParameterToString(dateTime)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ott", ott));

            localVarRequestOptions.Operation = "DocumentApi.GetStats1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CMDocumentTypeFrequency>>("/api/document/stats/frequencies/{organisationId}/{kbId}/{dateTime}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStats1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Document Frequency Statistics Return a document frequency statistics report - frequencies of different document types
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ott">a one-time token for downloading data.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to download</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMDocumentTypeFrequency&gt;</returns>
        public async System.Threading.Tasks.Task<List<CMDocumentTypeFrequency>> GetStats1Async(string ott, string organisationId, string kbId, long dateTime, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMDocumentTypeFrequency>> localVarResponse = await GetStats1WithHttpInfoAsync(ott, organisationId, kbId, dateTime, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Document Frequency Statistics Return a document frequency statistics report - frequencies of different document types
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ott">a one-time token for downloading data.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to download</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMDocumentTypeFrequency&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<CMDocumentTypeFrequency>>> GetStats1WithHttpInfoAsync(string ott, string organisationId, string kbId, long dateTime, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ott' is set
            if (ott == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ott' when calling DocumentApi->GetStats1");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DocumentApi->GetStats1");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DocumentApi->GetStats1");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dateTime", Org.OpenAPITools.Client.ClientUtils.ParameterToString(dateTime)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ott", ott));

            localVarRequestOptions.Operation = "DocumentApi.GetStats1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CMDocumentTypeFrequency>>("/api/document/stats/frequencies/{organisationId}/{kbId}/{dateTime}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStats1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Document Inventory Start the async inventorize process for documents of a given organisation/kb.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMInventorizeParameters"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage InventorizeDocuments(string sessionId, CMInventorizeParameters cMInventorizeParameters, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = InventorizeDocumentsWithHttpInfo(sessionId, cMInventorizeParameters, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Document Inventory Start the async inventorize process for documents of a given organisation/kb.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMInventorizeParameters"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> InventorizeDocumentsWithHttpInfo(string sessionId, CMInventorizeParameters cMInventorizeParameters, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DocumentApi->InventorizeDocuments");
            }

            // verify the required parameter 'cMInventorizeParameters' is set
            if (cMInventorizeParameters == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMInventorizeParameters' when calling DocumentApi->InventorizeDocuments");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMInventorizeParameters;

            localVarRequestOptions.Operation = "DocumentApi.InventorizeDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<JsonMessage>("/api/document/inventorize", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InventorizeDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Document Inventory Start the async inventorize process for documents of a given organisation/kb.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMInventorizeParameters"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> InventorizeDocumentsAsync(string sessionId, CMInventorizeParameters cMInventorizeParameters, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await InventorizeDocumentsWithHttpInfoAsync(sessionId, cMInventorizeParameters, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Document Inventory Start the async inventorize process for documents of a given organisation/kb.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMInventorizeParameters"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> InventorizeDocumentsWithHttpInfoAsync(string sessionId, CMInventorizeParameters cMInventorizeParameters, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DocumentApi->InventorizeDocuments");
            }

            // verify the required parameter 'cMInventorizeParameters' is set
            if (cMInventorizeParameters == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMInventorizeParameters' when calling DocumentApi->InventorizeDocuments");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMInventorizeParameters;

            localVarRequestOptions.Operation = "DocumentApi.InventorizeDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JsonMessage>("/api/document/inventorize", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InventorizeDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Index Inventory Start the async inventorize process for the optimized-indexes of a given organisation/kb.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMInventorizeParameters"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage InventorizeIndexes(string sessionId, CMInventorizeParameters cMInventorizeParameters, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = InventorizeIndexesWithHttpInfo(sessionId, cMInventorizeParameters, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Index Inventory Start the async inventorize process for the optimized-indexes of a given organisation/kb.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMInventorizeParameters"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> InventorizeIndexesWithHttpInfo(string sessionId, CMInventorizeParameters cMInventorizeParameters, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DocumentApi->InventorizeIndexes");
            }

            // verify the required parameter 'cMInventorizeParameters' is set
            if (cMInventorizeParameters == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMInventorizeParameters' when calling DocumentApi->InventorizeIndexes");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMInventorizeParameters;

            localVarRequestOptions.Operation = "DocumentApi.InventorizeIndexes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<JsonMessage>("/api/document/inventorize-indexes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InventorizeIndexes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Index Inventory Start the async inventorize process for the optimized-indexes of a given organisation/kb.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMInventorizeParameters"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> InventorizeIndexesAsync(string sessionId, CMInventorizeParameters cMInventorizeParameters, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await InventorizeIndexesWithHttpInfoAsync(sessionId, cMInventorizeParameters, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Index Inventory Start the async inventorize process for the optimized-indexes of a given organisation/kb.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMInventorizeParameters"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> InventorizeIndexesWithHttpInfoAsync(string sessionId, CMInventorizeParameters cMInventorizeParameters, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DocumentApi->InventorizeIndexes");
            }

            // verify the required parameter 'cMInventorizeParameters' is set
            if (cMInventorizeParameters == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMInventorizeParameters' when calling DocumentApi->InventorizeIndexes");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMInventorizeParameters;

            localVarRequestOptions.Operation = "DocumentApi.InventorizeIndexes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JsonMessage>("/api/document/inventorize-indexes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InventorizeIndexes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get Preview get a preview for a document if available by url
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="clientId">the client-id, a persistent id identifying the remote client making this request.</param>
        /// <param name="sessionId">the session-id, the security required for making this request.</param>
        /// <param name="urlId">the SimSage id for this url</param>
        /// <param name="page">what page to render</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>byte[]</returns>
        public byte[] Preview(string organisationId, string kbId, string clientId, string sessionId, int urlId, int page, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<byte[]> localVarResponse = PreviewWithHttpInfo(organisationId, kbId, clientId, sessionId, urlId, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get Preview get a preview for a document if available by url
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="clientId">the client-id, a persistent id identifying the remote client making this request.</param>
        /// <param name="sessionId">the session-id, the security required for making this request.</param>
        /// <param name="urlId">the SimSage id for this url</param>
        /// <param name="page">what page to render</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public Org.OpenAPITools.Client.ApiResponse<byte[]> PreviewWithHttpInfo(string organisationId, string kbId, string clientId, string sessionId, int urlId, int page, int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DocumentApi->Preview");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DocumentApi->Preview");
            }

            // verify the required parameter 'clientId' is set
            if (clientId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'clientId' when calling DocumentApi->Preview");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DocumentApi->Preview");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/jpeg",
                "image/svg+xml",
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sessionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("urlId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(urlId)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", Org.OpenAPITools.Client.ClientUtils.ParameterToString(page)); // path parameter

            localVarRequestOptions.Operation = "DocumentApi.Preview";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<byte[]>("/api/document/preview/{organisationId}/{kbId}/{clientId}/{sessionId}/{urlId}/{page}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Preview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get Preview get a preview for a document if available by url
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="clientId">the client-id, a persistent id identifying the remote client making this request.</param>
        /// <param name="sessionId">the session-id, the security required for making this request.</param>
        /// <param name="urlId">the SimSage id for this url</param>
        /// <param name="page">what page to render</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> PreviewAsync(string organisationId, string kbId, string clientId, string sessionId, int urlId, int page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<byte[]> localVarResponse = await PreviewWithHttpInfoAsync(organisationId, kbId, clientId, sessionId, urlId, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get Preview get a preview for a document if available by url
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="clientId">the client-id, a persistent id identifying the remote client making this request.</param>
        /// <param name="sessionId">the session-id, the security required for making this request.</param>
        /// <param name="urlId">the SimSage id for this url</param>
        /// <param name="page">what page to render</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<byte[]>> PreviewWithHttpInfoAsync(string organisationId, string kbId, string clientId, string sessionId, int urlId, int page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DocumentApi->Preview");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DocumentApi->Preview");
            }

            // verify the required parameter 'clientId' is set
            if (clientId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'clientId' when calling DocumentApi->Preview");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DocumentApi->Preview");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/jpeg",
                "image/svg+xml",
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sessionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("urlId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(urlId)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", Org.OpenAPITools.Client.ClientUtils.ParameterToString(page)); // path parameter

            localVarRequestOptions.Operation = "DocumentApi.Preview";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<byte[]>("/api/document/preview/{organisationId}/{kbId}/{clientId}/{sessionId}/{urlId}/{page}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Preview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Preview HTML get a preview HTML page for a document if available by url
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id or a anonymous user-id.</param>
        /// <param name="cMGetHtml"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMGetHtml</returns>
        public CMGetHtml PreviewHtml(string sessionId, CMGetHtml cMGetHtml, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMGetHtml> localVarResponse = PreviewHtmlWithHttpInfo(sessionId, cMGetHtml);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Preview HTML get a preview HTML page for a document if available by url
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id or a anonymous user-id.</param>
        /// <param name="cMGetHtml"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMGetHtml</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMGetHtml> PreviewHtmlWithHttpInfo(string sessionId, CMGetHtml cMGetHtml, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DocumentApi->PreviewHtml");
            }

            // verify the required parameter 'cMGetHtml' is set
            if (cMGetHtml == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMGetHtml' when calling DocumentApi->PreviewHtml");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMGetHtml;

            localVarRequestOptions.Operation = "DocumentApi.PreviewHtml";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CMGetHtml>("/api/document/preview/html", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PreviewHtml", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Preview HTML get a preview HTML page for a document if available by url
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id or a anonymous user-id.</param>
        /// <param name="cMGetHtml"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMGetHtml</returns>
        public async System.Threading.Tasks.Task<CMGetHtml> PreviewHtmlAsync(string sessionId, CMGetHtml cMGetHtml, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMGetHtml> localVarResponse = await PreviewHtmlWithHttpInfoAsync(sessionId, cMGetHtml, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Preview HTML get a preview HTML page for a document if available by url
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id or a anonymous user-id.</param>
        /// <param name="cMGetHtml"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMGetHtml)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMGetHtml>> PreviewHtmlWithHttpInfoAsync(string sessionId, CMGetHtml cMGetHtml, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DocumentApi->PreviewHtml");
            }

            // verify the required parameter 'cMGetHtml' is set
            if (cMGetHtml == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMGetHtml' when calling DocumentApi->PreviewHtml");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMGetHtml;

            localVarRequestOptions.Operation = "DocumentApi.PreviewHtml";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CMGetHtml>("/api/document/preview/html", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PreviewHtml", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Summarize Documents for Query Summarize a set of documents given a list of urls and a query.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMQueryFocussedSummarizationRequest"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMQueryFocussedSummarization</returns>
        public CMQueryFocussedSummarization QueryFocussedSummarization(string sessionId, CMQueryFocussedSummarizationRequest cMQueryFocussedSummarizationRequest, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMQueryFocussedSummarization> localVarResponse = QueryFocussedSummarizationWithHttpInfo(sessionId, cMQueryFocussedSummarizationRequest, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Summarize Documents for Query Summarize a set of documents given a list of urls and a query.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMQueryFocussedSummarizationRequest"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMQueryFocussedSummarization</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMQueryFocussedSummarization> QueryFocussedSummarizationWithHttpInfo(string sessionId, CMQueryFocussedSummarizationRequest cMQueryFocussedSummarizationRequest, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DocumentApi->QueryFocussedSummarization");
            }

            // verify the required parameter 'cMQueryFocussedSummarizationRequest' is set
            if (cMQueryFocussedSummarizationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMQueryFocussedSummarizationRequest' when calling DocumentApi->QueryFocussedSummarization");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMQueryFocussedSummarizationRequest;

            localVarRequestOptions.Operation = "DocumentApi.QueryFocussedSummarization";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CMQueryFocussedSummarization>("/api/document/qfs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryFocussedSummarization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Summarize Documents for Query Summarize a set of documents given a list of urls and a query.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMQueryFocussedSummarizationRequest"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMQueryFocussedSummarization</returns>
        public async System.Threading.Tasks.Task<CMQueryFocussedSummarization> QueryFocussedSummarizationAsync(string sessionId, CMQueryFocussedSummarizationRequest cMQueryFocussedSummarizationRequest, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMQueryFocussedSummarization> localVarResponse = await QueryFocussedSummarizationWithHttpInfoAsync(sessionId, cMQueryFocussedSummarizationRequest, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Summarize Documents for Query Summarize a set of documents given a list of urls and a query.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMQueryFocussedSummarizationRequest"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMQueryFocussedSummarization)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMQueryFocussedSummarization>> QueryFocussedSummarizationWithHttpInfoAsync(string sessionId, CMQueryFocussedSummarizationRequest cMQueryFocussedSummarizationRequest, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DocumentApi->QueryFocussedSummarization");
            }

            // verify the required parameter 'cMQueryFocussedSummarizationRequest' is set
            if (cMQueryFocussedSummarizationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMQueryFocussedSummarizationRequest' when calling DocumentApi->QueryFocussedSummarization");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMQueryFocussedSummarizationRequest;

            localVarRequestOptions.Operation = "DocumentApi.QueryFocussedSummarization";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CMQueryFocussedSummarization>("/api/document/qfs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryFocussedSummarization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Document Remove/delete a document by its url.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base-64 encoded (no-prefix) url of the document</param>
        /// <param name="sourceId">the source-id of the crawler this document belongs to</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage RemoveDocument(string organisationId, string kbId, string url, int sourceId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = RemoveDocumentWithHttpInfo(organisationId, kbId, url, sourceId, sessionId, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Document Remove/delete a document by its url.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base-64 encoded (no-prefix) url of the document</param>
        /// <param name="sourceId">the source-id of the crawler this document belongs to</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> RemoveDocumentWithHttpInfo(string organisationId, string kbId, string url, int sourceId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DocumentApi->RemoveDocument");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DocumentApi->RemoveDocument");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DocumentApi->RemoveDocument");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DocumentApi->RemoveDocument");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DocumentApi.RemoveDocument";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<JsonMessage>("/api/document/document/{organisationId}/{kbId}/{url}/{sourceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Document Remove/delete a document by its url.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base-64 encoded (no-prefix) url of the document</param>
        /// <param name="sourceId">the source-id of the crawler this document belongs to</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> RemoveDocumentAsync(string organisationId, string kbId, string url, int sourceId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await RemoveDocumentWithHttpInfoAsync(organisationId, kbId, url, sourceId, sessionId, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Document Remove/delete a document by its url.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base-64 encoded (no-prefix) url of the document</param>
        /// <param name="sourceId">the source-id of the crawler this document belongs to</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> RemoveDocumentWithHttpInfoAsync(string organisationId, string kbId, string url, int sourceId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DocumentApi->RemoveDocument");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DocumentApi->RemoveDocument");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DocumentApi->RemoveDocument");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DocumentApi->RemoveDocument");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DocumentApi.RemoveDocument";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<JsonMessage>("/api/document/document/{organisationId}/{kbId}/{url}/{sourceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Parquet File Remove an inventory breakdown spreadsheet/parquet file from the system
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to remove</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;JsonMessage&gt;</returns>
        public List<JsonMessage> RemoveParquetFile(string organisationId, string kbId, long dateTime, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<JsonMessage>> localVarResponse = RemoveParquetFileWithHttpInfo(organisationId, kbId, dateTime, sessionId, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Parquet File Remove an inventory breakdown spreadsheet/parquet file from the system
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to remove</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;JsonMessage&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<JsonMessage>> RemoveParquetFileWithHttpInfo(string organisationId, string kbId, long dateTime, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DocumentApi->RemoveParquetFile");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DocumentApi->RemoveParquetFile");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DocumentApi->RemoveParquetFile");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dateTime", Org.OpenAPITools.Client.ClientUtils.ParameterToString(dateTime)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DocumentApi.RemoveParquetFile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<JsonMessage>>("/api/document/parquet/{organisationId}/{kbId}/{dateTime}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveParquetFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Parquet File Remove an inventory breakdown spreadsheet/parquet file from the system
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to remove</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JsonMessage&gt;</returns>
        public async System.Threading.Tasks.Task<List<JsonMessage>> RemoveParquetFileAsync(string organisationId, string kbId, long dateTime, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<JsonMessage>> localVarResponse = await RemoveParquetFileWithHttpInfoAsync(organisationId, kbId, dateTime, sessionId, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Parquet File Remove an inventory breakdown spreadsheet/parquet file from the system
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="dateTime">a unix date-time specifying the exact snapshot to remove</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JsonMessage&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<JsonMessage>>> RemoveParquetFileWithHttpInfoAsync(string organisationId, string kbId, long dateTime, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DocumentApi->RemoveParquetFile");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DocumentApi->RemoveParquetFile");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DocumentApi->RemoveParquetFile");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dateTime", Org.OpenAPITools.Client.ClientUtils.ParameterToString(dateTime)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DocumentApi.RemoveParquetFile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<JsonMessage>>("/api/document/parquet/{organisationId}/{kbId}/{dateTime}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveParquetFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Summarize a document Summarize a single document using an extractive summarization.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSingleDocumentSummaryRequest"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSingleDocumentSummary</returns>
        public CMSingleDocumentSummary SummarizeDocument(string sessionId, CMSingleDocumentSummaryRequest cMSingleDocumentSummaryRequest, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMSingleDocumentSummary> localVarResponse = SummarizeDocumentWithHttpInfo(sessionId, cMSingleDocumentSummaryRequest, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Summarize a document Summarize a single document using an extractive summarization.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSingleDocumentSummaryRequest"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSingleDocumentSummary</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMSingleDocumentSummary> SummarizeDocumentWithHttpInfo(string sessionId, CMSingleDocumentSummaryRequest cMSingleDocumentSummaryRequest, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DocumentApi->SummarizeDocument");
            }

            // verify the required parameter 'cMSingleDocumentSummaryRequest' is set
            if (cMSingleDocumentSummaryRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMSingleDocumentSummaryRequest' when calling DocumentApi->SummarizeDocument");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMSingleDocumentSummaryRequest;

            localVarRequestOptions.Operation = "DocumentApi.SummarizeDocument";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CMSingleDocumentSummary>("/api/document/summarize/document", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Summarize a document Summarize a single document using an extractive summarization.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSingleDocumentSummaryRequest"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSingleDocumentSummary</returns>
        public async System.Threading.Tasks.Task<CMSingleDocumentSummary> SummarizeDocumentAsync(string sessionId, CMSingleDocumentSummaryRequest cMSingleDocumentSummaryRequest, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMSingleDocumentSummary> localVarResponse = await SummarizeDocumentWithHttpInfoAsync(sessionId, cMSingleDocumentSummaryRequest, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Summarize a document Summarize a single document using an extractive summarization.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSingleDocumentSummaryRequest"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSingleDocumentSummary)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMSingleDocumentSummary>> SummarizeDocumentWithHttpInfoAsync(string sessionId, CMSingleDocumentSummaryRequest cMSingleDocumentSummaryRequest, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DocumentApi->SummarizeDocument");
            }

            // verify the required parameter 'cMSingleDocumentSummaryRequest' is set
            if (cMSingleDocumentSummaryRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMSingleDocumentSummaryRequest' when calling DocumentApi->SummarizeDocument");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMSingleDocumentSummaryRequest;

            localVarRequestOptions.Operation = "DocumentApi.SummarizeDocument";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CMSingleDocumentSummary>("/api/document/summarize/document", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Version Get the version of SimSage Document Services.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMVersion</returns>
        public CMVersion Version4(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMVersion> localVarResponse = Version4WithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Version Get the version of SimSage Document Services.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMVersion</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMVersion> Version4WithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DocumentApi.Version4";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CMVersion>("/api/document/version", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Version4", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Version Get the version of SimSage Document Services.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMVersion</returns>
        public async System.Threading.Tasks.Task<CMVersion> Version4Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMVersion> localVarResponse = await Version4WithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Version Get the version of SimSage Document Services.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMVersion)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMVersion>> Version4WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DocumentApi.Version4";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CMVersion>("/api/document/version", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Version4", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Zip source documents Zip all documents in a source on the local server.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMZipSource"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage ZipSource(string sessionId, CMZipSource cMZipSource, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = ZipSourceWithHttpInfo(sessionId, cMZipSource, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Zip source documents Zip all documents in a source on the local server.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMZipSource"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> ZipSourceWithHttpInfo(string sessionId, CMZipSource cMZipSource, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DocumentApi->ZipSource");
            }

            // verify the required parameter 'cMZipSource' is set
            if (cMZipSource == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMZipSource' when calling DocumentApi->ZipSource");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMZipSource;

            localVarRequestOptions.Operation = "DocumentApi.ZipSource";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<JsonMessage>("/api/document/zip/source", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ZipSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Zip source documents Zip all documents in a source on the local server.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMZipSource"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> ZipSourceAsync(string sessionId, CMZipSource cMZipSource, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await ZipSourceWithHttpInfoAsync(sessionId, cMZipSource, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Zip source documents Zip all documents in a source on the local server.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMZipSource"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> ZipSourceWithHttpInfoAsync(string sessionId, CMZipSource cMZipSource, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DocumentApi->ZipSource");
            }

            // verify the required parameter 'cMZipSource' is set
            if (cMZipSource == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMZipSource' when calling DocumentApi->ZipSource");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMZipSource;

            localVarRequestOptions.Operation = "DocumentApi.ZipSource";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JsonMessage>("/api/document/zip/source", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ZipSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
