/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// get an optimization report
        /// </summary>
        /// <remarks>
        /// return an optimization report
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="id">the id of the report</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;OptimizeIndexesGetReportCmd&gt;</returns>
        List<OptimizeIndexesGetReportCmd> GetIndexOptimizationReport(string sessionId, string organisationId, string kbId, long id, int operationIndex = 0);

        /// <summary>
        /// get an optimization report
        /// </summary>
        /// <remarks>
        /// return an optimization report
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="id">the id of the report</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;OptimizeIndexesGetReportCmd&gt;</returns>
        ApiResponse<List<OptimizeIndexesGetReportCmd>> GetIndexOptimizationReportWithHttpInfo(string sessionId, string organisationId, string kbId, long id, int operationIndex = 0);
        /// <summary>
        /// get optimization report list
        /// </summary>
        /// <remarks>
        /// return a list of optimization reports
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;OptimizeIndexesGetReportsCmd&gt;</returns>
        List<OptimizeIndexesGetReportsCmd> GetIndexOptimizationReports(string sessionId, string organisationId, string kbId, int operationIndex = 0);

        /// <summary>
        /// get optimization report list
        /// </summary>
        /// <remarks>
        /// return a list of optimization reports
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;OptimizeIndexesGetReportsCmd&gt;</returns>
        ApiResponse<List<OptimizeIndexesGetReportsCmd>> GetIndexOptimizationReportsWithHttpInfo(string sessionId, string organisationId, string kbId, int operationIndex = 0);
        /// <summary>
        /// Get usage Statistics
        /// </summary>
        /// <remarks>
        /// Get all statistics for a given month, including some global ones.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year to get stats for</param>
        /// <param name="month">the month to get stats for</param>
        /// <param name="top">how many stats to return</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMReturnStatistics</returns>
        CMReturnStatistics GetStats(string sessionId, string organisationId, string kbId, int year, int month, int top, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get usage Statistics
        /// </summary>
        /// <remarks>
        /// Get all statistics for a given month, including some global ones.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year to get stats for</param>
        /// <param name="month">the month to get stats for</param>
        /// <param name="top">how many stats to return</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMReturnStatistics</returns>
        ApiResponse<CMReturnStatistics> GetStatsWithHttpInfo(string sessionId, string organisationId, string kbId, int year, int month, int top, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// SimSage status
        /// </summary>
        /// <remarks>
        /// return SimSage indexer and parser status
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMCommandQueueItem&gt;</returns>
        List<CMCommandQueueItem> SimSageStatus(string sessionId, string organisationId, int operationIndex = 0);

        /// <summary>
        /// SimSage status
        /// </summary>
        /// <remarks>
        /// return SimSage indexer and parser status
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMCommandQueueItem&gt;</returns>
        ApiResponse<List<CMCommandQueueItem>> SimSageStatusWithHttpInfo(string sessionId, string organisationId, int operationIndex = 0);
        /// <summary>
        /// System Logs
        /// </summary>
        /// <remarks>
        /// return SimSage System-logs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="year">the year to get the log for</param>
        /// <param name="month">the month to get the log for</param>
        /// <param name="day">the day to get the log for</param>
        /// <param name="hour">the hour to get the log for</param>
        /// <param name="hours">the number of hours to get the logs for starting at hour</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMLoggerEntry&gt;</returns>
        List<CMLoggerEntry> SystemLogs(string organisationId, int year, int month, int day, int hour, int hours, string sessionId, int operationIndex = 0);

        /// <summary>
        /// System Logs
        /// </summary>
        /// <remarks>
        /// return SimSage System-logs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="year">the year to get the log for</param>
        /// <param name="month">the month to get the log for</param>
        /// <param name="day">the day to get the log for</param>
        /// <param name="hour">the hour to get the log for</param>
        /// <param name="hours">the number of hours to get the logs for starting at hour</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMLoggerEntry&gt;</returns>
        ApiResponse<List<CMLoggerEntry>> SystemLogsWithHttpInfo(string organisationId, int year, int month, int day, int hour, int hours, string sessionId, int operationIndex = 0);
        /// <summary>
        /// Version
        /// </summary>
        /// <remarks>
        /// Get the version of SimSage Stats Services.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMVersion</returns>
        CMVersion Version(int operationIndex = 0);

        /// <summary>
        /// Version
        /// </summary>
        /// <remarks>
        /// Get the version of SimSage Stats Services.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMVersion</returns>
        ApiResponse<CMVersion> VersionWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// get an optimization report
        /// </summary>
        /// <remarks>
        /// return an optimization report
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="id">the id of the report</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OptimizeIndexesGetReportCmd&gt;</returns>
        System.Threading.Tasks.Task<List<OptimizeIndexesGetReportCmd>> GetIndexOptimizationReportAsync(string sessionId, string organisationId, string kbId, long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get an optimization report
        /// </summary>
        /// <remarks>
        /// return an optimization report
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="id">the id of the report</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OptimizeIndexesGetReportCmd&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OptimizeIndexesGetReportCmd>>> GetIndexOptimizationReportWithHttpInfoAsync(string sessionId, string organisationId, string kbId, long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get optimization report list
        /// </summary>
        /// <remarks>
        /// return a list of optimization reports
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OptimizeIndexesGetReportsCmd&gt;</returns>
        System.Threading.Tasks.Task<List<OptimizeIndexesGetReportsCmd>> GetIndexOptimizationReportsAsync(string sessionId, string organisationId, string kbId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get optimization report list
        /// </summary>
        /// <remarks>
        /// return a list of optimization reports
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OptimizeIndexesGetReportsCmd&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OptimizeIndexesGetReportsCmd>>> GetIndexOptimizationReportsWithHttpInfoAsync(string sessionId, string organisationId, string kbId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get usage Statistics
        /// </summary>
        /// <remarks>
        /// Get all statistics for a given month, including some global ones.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year to get stats for</param>
        /// <param name="month">the month to get stats for</param>
        /// <param name="top">how many stats to return</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMReturnStatistics</returns>
        System.Threading.Tasks.Task<CMReturnStatistics> GetStatsAsync(string sessionId, string organisationId, string kbId, int year, int month, int top, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get usage Statistics
        /// </summary>
        /// <remarks>
        /// Get all statistics for a given month, including some global ones.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year to get stats for</param>
        /// <param name="month">the month to get stats for</param>
        /// <param name="top">how many stats to return</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMReturnStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMReturnStatistics>> GetStatsWithHttpInfoAsync(string sessionId, string organisationId, string kbId, int year, int month, int top, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// SimSage status
        /// </summary>
        /// <remarks>
        /// return SimSage indexer and parser status
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMCommandQueueItem&gt;</returns>
        System.Threading.Tasks.Task<List<CMCommandQueueItem>> SimSageStatusAsync(string sessionId, string organisationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// SimSage status
        /// </summary>
        /// <remarks>
        /// return SimSage indexer and parser status
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMCommandQueueItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CMCommandQueueItem>>> SimSageStatusWithHttpInfoAsync(string sessionId, string organisationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// System Logs
        /// </summary>
        /// <remarks>
        /// return SimSage System-logs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="year">the year to get the log for</param>
        /// <param name="month">the month to get the log for</param>
        /// <param name="day">the day to get the log for</param>
        /// <param name="hour">the hour to get the log for</param>
        /// <param name="hours">the number of hours to get the logs for starting at hour</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMLoggerEntry&gt;</returns>
        System.Threading.Tasks.Task<List<CMLoggerEntry>> SystemLogsAsync(string organisationId, int year, int month, int day, int hour, int hours, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// System Logs
        /// </summary>
        /// <remarks>
        /// return SimSage System-logs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="year">the year to get the log for</param>
        /// <param name="month">the month to get the log for</param>
        /// <param name="day">the day to get the log for</param>
        /// <param name="hour">the hour to get the log for</param>
        /// <param name="hours">the number of hours to get the logs for starting at hour</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMLoggerEntry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CMLoggerEntry>>> SystemLogsWithHttpInfoAsync(string organisationId, int year, int month, int day, int hour, int hours, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Version
        /// </summary>
        /// <remarks>
        /// Get the version of SimSage Stats Services.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMVersion</returns>
        System.Threading.Tasks.Task<CMVersion> VersionAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Version
        /// </summary>
        /// <remarks>
        /// Get the version of SimSage Stats Services.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMVersion>> VersionWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatsApi : IStatsApiSync, IStatsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StatsApi : IStatsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StatsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatsApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StatsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public StatsApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// get an optimization report return an optimization report
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="id">the id of the report</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;OptimizeIndexesGetReportCmd&gt;</returns>
        public List<OptimizeIndexesGetReportCmd> GetIndexOptimizationReport(string sessionId, string organisationId, string kbId, long id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<OptimizeIndexesGetReportCmd>> localVarResponse = GetIndexOptimizationReportWithHttpInfo(sessionId, organisationId, kbId, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get an optimization report return an optimization report
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="id">the id of the report</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;OptimizeIndexesGetReportCmd&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<OptimizeIndexesGetReportCmd>> GetIndexOptimizationReportWithHttpInfo(string sessionId, string organisationId, string kbId, long id, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling StatsApi->GetIndexOptimizationReport");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling StatsApi->GetIndexOptimizationReport");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling StatsApi->GetIndexOptimizationReport");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "StatsApi.GetIndexOptimizationReport";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OptimizeIndexesGetReportCmd>>("/api/stats/report/{organisationId}/{kbId}/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIndexOptimizationReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get an optimization report return an optimization report
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="id">the id of the report</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OptimizeIndexesGetReportCmd&gt;</returns>
        public async System.Threading.Tasks.Task<List<OptimizeIndexesGetReportCmd>> GetIndexOptimizationReportAsync(string sessionId, string organisationId, string kbId, long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<OptimizeIndexesGetReportCmd>> localVarResponse = await GetIndexOptimizationReportWithHttpInfoAsync(sessionId, organisationId, kbId, id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get an optimization report return an optimization report
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="id">the id of the report</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OptimizeIndexesGetReportCmd&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<OptimizeIndexesGetReportCmd>>> GetIndexOptimizationReportWithHttpInfoAsync(string sessionId, string organisationId, string kbId, long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling StatsApi->GetIndexOptimizationReport");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling StatsApi->GetIndexOptimizationReport");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling StatsApi->GetIndexOptimizationReport");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "StatsApi.GetIndexOptimizationReport";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OptimizeIndexesGetReportCmd>>("/api/stats/report/{organisationId}/{kbId}/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIndexOptimizationReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get optimization report list return a list of optimization reports
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;OptimizeIndexesGetReportsCmd&gt;</returns>
        public List<OptimizeIndexesGetReportsCmd> GetIndexOptimizationReports(string sessionId, string organisationId, string kbId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<OptimizeIndexesGetReportsCmd>> localVarResponse = GetIndexOptimizationReportsWithHttpInfo(sessionId, organisationId, kbId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get optimization report list return a list of optimization reports
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;OptimizeIndexesGetReportsCmd&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<OptimizeIndexesGetReportsCmd>> GetIndexOptimizationReportsWithHttpInfo(string sessionId, string organisationId, string kbId, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling StatsApi->GetIndexOptimizationReports");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling StatsApi->GetIndexOptimizationReports");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling StatsApi->GetIndexOptimizationReports");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "StatsApi.GetIndexOptimizationReports";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OptimizeIndexesGetReportsCmd>>("/api/stats/reports/{organisationId}/{kbId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIndexOptimizationReports", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get optimization report list return a list of optimization reports
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OptimizeIndexesGetReportsCmd&gt;</returns>
        public async System.Threading.Tasks.Task<List<OptimizeIndexesGetReportsCmd>> GetIndexOptimizationReportsAsync(string sessionId, string organisationId, string kbId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<OptimizeIndexesGetReportsCmd>> localVarResponse = await GetIndexOptimizationReportsWithHttpInfoAsync(sessionId, organisationId, kbId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get optimization report list return a list of optimization reports
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OptimizeIndexesGetReportsCmd&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<OptimizeIndexesGetReportsCmd>>> GetIndexOptimizationReportsWithHttpInfoAsync(string sessionId, string organisationId, string kbId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling StatsApi->GetIndexOptimizationReports");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling StatsApi->GetIndexOptimizationReports");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling StatsApi->GetIndexOptimizationReports");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "StatsApi.GetIndexOptimizationReports";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OptimizeIndexesGetReportsCmd>>("/api/stats/reports/{organisationId}/{kbId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIndexOptimizationReports", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get usage Statistics Get all statistics for a given month, including some global ones.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year to get stats for</param>
        /// <param name="month">the month to get stats for</param>
        /// <param name="top">how many stats to return</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMReturnStatistics</returns>
        public CMReturnStatistics GetStats(string sessionId, string organisationId, string kbId, int year, int month, int top, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMReturnStatistics> localVarResponse = GetStatsWithHttpInfo(sessionId, organisationId, kbId, year, month, top, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get usage Statistics Get all statistics for a given month, including some global ones.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year to get stats for</param>
        /// <param name="month">the month to get stats for</param>
        /// <param name="top">how many stats to return</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMReturnStatistics</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMReturnStatistics> GetStatsWithHttpInfo(string sessionId, string organisationId, string kbId, int year, int month, int top, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling StatsApi->GetStats");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling StatsApi->GetStats");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling StatsApi->GetStats");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", Org.OpenAPITools.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("month", Org.OpenAPITools.Client.ClientUtils.ParameterToString(month)); // path parameter
            localVarRequestOptions.PathParameters.Add("top", Org.OpenAPITools.Client.ClientUtils.ParameterToString(top)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "StatsApi.GetStats";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CMReturnStatistics>("/api/stats/stats/{organisationId}/{kbId}/{year}/{month}/{top}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get usage Statistics Get all statistics for a given month, including some global ones.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year to get stats for</param>
        /// <param name="month">the month to get stats for</param>
        /// <param name="top">how many stats to return</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMReturnStatistics</returns>
        public async System.Threading.Tasks.Task<CMReturnStatistics> GetStatsAsync(string sessionId, string organisationId, string kbId, int year, int month, int top, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMReturnStatistics> localVarResponse = await GetStatsWithHttpInfoAsync(sessionId, organisationId, kbId, year, month, top, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get usage Statistics Get all statistics for a given month, including some global ones.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year to get stats for</param>
        /// <param name="month">the month to get stats for</param>
        /// <param name="top">how many stats to return</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMReturnStatistics)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMReturnStatistics>> GetStatsWithHttpInfoAsync(string sessionId, string organisationId, string kbId, int year, int month, int top, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling StatsApi->GetStats");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling StatsApi->GetStats");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling StatsApi->GetStats");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", Org.OpenAPITools.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("month", Org.OpenAPITools.Client.ClientUtils.ParameterToString(month)); // path parameter
            localVarRequestOptions.PathParameters.Add("top", Org.OpenAPITools.Client.ClientUtils.ParameterToString(top)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "StatsApi.GetStats";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CMReturnStatistics>("/api/stats/stats/{organisationId}/{kbId}/{year}/{month}/{top}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// SimSage status return SimSage indexer and parser status
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMCommandQueueItem&gt;</returns>
        public List<CMCommandQueueItem> SimSageStatus(string sessionId, string organisationId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMCommandQueueItem>> localVarResponse = SimSageStatusWithHttpInfo(sessionId, organisationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// SimSage status return SimSage indexer and parser status
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMCommandQueueItem&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<CMCommandQueueItem>> SimSageStatusWithHttpInfo(string sessionId, string organisationId, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling StatsApi->SimSageStatus");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling StatsApi->SimSageStatus");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "StatsApi.SimSageStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<List<CMCommandQueueItem>>("/api/stats/status/{organisationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SimSageStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// SimSage status return SimSage indexer and parser status
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMCommandQueueItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<CMCommandQueueItem>> SimSageStatusAsync(string sessionId, string organisationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMCommandQueueItem>> localVarResponse = await SimSageStatusWithHttpInfoAsync(sessionId, organisationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// SimSage status return SimSage indexer and parser status
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid session-guid id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMCommandQueueItem&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<CMCommandQueueItem>>> SimSageStatusWithHttpInfoAsync(string sessionId, string organisationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling StatsApi->SimSageStatus");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling StatsApi->SimSageStatus");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "StatsApi.SimSageStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<List<CMCommandQueueItem>>("/api/stats/status/{organisationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SimSageStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// System Logs return SimSage System-logs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="year">the year to get the log for</param>
        /// <param name="month">the month to get the log for</param>
        /// <param name="day">the day to get the log for</param>
        /// <param name="hour">the hour to get the log for</param>
        /// <param name="hours">the number of hours to get the logs for starting at hour</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMLoggerEntry&gt;</returns>
        public List<CMLoggerEntry> SystemLogs(string organisationId, int year, int month, int day, int hour, int hours, string sessionId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMLoggerEntry>> localVarResponse = SystemLogsWithHttpInfo(organisationId, year, month, day, hour, hours, sessionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// System Logs return SimSage System-logs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="year">the year to get the log for</param>
        /// <param name="month">the month to get the log for</param>
        /// <param name="day">the day to get the log for</param>
        /// <param name="hour">the hour to get the log for</param>
        /// <param name="hours">the number of hours to get the logs for starting at hour</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMLoggerEntry&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<CMLoggerEntry>> SystemLogsWithHttpInfo(string organisationId, int year, int month, int day, int hour, int hours, string sessionId, int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling StatsApi->SystemLogs");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling StatsApi->SystemLogs");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", Org.OpenAPITools.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("month", Org.OpenAPITools.Client.ClientUtils.ParameterToString(month)); // path parameter
            localVarRequestOptions.PathParameters.Add("day", Org.OpenAPITools.Client.ClientUtils.ParameterToString(day)); // path parameter
            localVarRequestOptions.PathParameters.Add("hour", Org.OpenAPITools.Client.ClientUtils.ParameterToString(hour)); // path parameter
            localVarRequestOptions.PathParameters.Add("hours", Org.OpenAPITools.Client.ClientUtils.ParameterToString(hours)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "StatsApi.SystemLogs";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CMLoggerEntry>>("/api/stats/system-logs/{organisationId}/{year}/{month}/{day}/{hour}/{hours}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SystemLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// System Logs return SimSage System-logs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="year">the year to get the log for</param>
        /// <param name="month">the month to get the log for</param>
        /// <param name="day">the day to get the log for</param>
        /// <param name="hour">the hour to get the log for</param>
        /// <param name="hours">the number of hours to get the logs for starting at hour</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMLoggerEntry&gt;</returns>
        public async System.Threading.Tasks.Task<List<CMLoggerEntry>> SystemLogsAsync(string organisationId, int year, int month, int day, int hour, int hours, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMLoggerEntry>> localVarResponse = await SystemLogsWithHttpInfoAsync(organisationId, year, month, day, hour, hours, sessionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// System Logs return SimSage System-logs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="year">the year to get the log for</param>
        /// <param name="month">the month to get the log for</param>
        /// <param name="day">the day to get the log for</param>
        /// <param name="hour">the hour to get the log for</param>
        /// <param name="hours">the number of hours to get the logs for starting at hour</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMLoggerEntry&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<CMLoggerEntry>>> SystemLogsWithHttpInfoAsync(string organisationId, int year, int month, int day, int hour, int hours, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling StatsApi->SystemLogs");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling StatsApi->SystemLogs");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", Org.OpenAPITools.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("month", Org.OpenAPITools.Client.ClientUtils.ParameterToString(month)); // path parameter
            localVarRequestOptions.PathParameters.Add("day", Org.OpenAPITools.Client.ClientUtils.ParameterToString(day)); // path parameter
            localVarRequestOptions.PathParameters.Add("hour", Org.OpenAPITools.Client.ClientUtils.ParameterToString(hour)); // path parameter
            localVarRequestOptions.PathParameters.Add("hours", Org.OpenAPITools.Client.ClientUtils.ParameterToString(hours)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "StatsApi.SystemLogs";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CMLoggerEntry>>("/api/stats/system-logs/{organisationId}/{year}/{month}/{day}/{hour}/{hours}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SystemLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Version Get the version of SimSage Stats Services.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMVersion</returns>
        public CMVersion Version(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMVersion> localVarResponse = VersionWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Version Get the version of SimSage Stats Services.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMVersion</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMVersion> VersionWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "StatsApi.Version";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CMVersion>("/api/stats/version", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Version", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Version Get the version of SimSage Stats Services.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMVersion</returns>
        public async System.Threading.Tasks.Task<CMVersion> VersionAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMVersion> localVarResponse = await VersionWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Version Get the version of SimSage Stats Services.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMVersion)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMVersion>> VersionWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "StatsApi.Version";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CMVersion>("/api/stats/version", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Version", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
