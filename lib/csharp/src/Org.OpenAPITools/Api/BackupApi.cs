/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.13.31
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBackupApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// create backup
        /// </summary>
        /// <remarks>
        /// Backup all of SimSage (excludes indexes and documents).  Create a SimSage text file with all relevant information for a SimSage Restore on the cloud node.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) to backup</param>
        /// <param name="regime">what to backup, one of &#39;all&#39; (all organisations, requires admin privileges) or &#39;specific&#39; (only the given organisation)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage Backup(string sessionId, string organisationId, string regime, int operationIndex = 0);

        /// <summary>
        /// create backup
        /// </summary>
        /// <remarks>
        /// Backup all of SimSage (excludes indexes and documents).  Create a SimSage text file with all relevant information for a SimSage Restore on the cloud node.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) to backup</param>
        /// <param name="regime">what to backup, one of &#39;all&#39; (all organisations, requires admin privileges) or &#39;specific&#39; (only the given organisation)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> BackupWithHttpInfo(string sessionId, string organisationId, string regime, int operationIndex = 0);
        /// <summary>
        /// remove backup
        /// </summary>
        /// <remarks>
        /// Delete a backup by ID and return list of all Backups present in this SimSage instance
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) to backup</param>
        /// <param name="backupId">the backup&#39;s id (along)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Backup&gt;</returns>
        List<Backup> DeleteBackup(string sessionId, string organisationId, long backupId, int operationIndex = 0);

        /// <summary>
        /// remove backup
        /// </summary>
        /// <remarks>
        /// Delete a backup by ID and return list of all Backups present in this SimSage instance
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) to backup</param>
        /// <param name="backupId">the backup&#39;s id (along)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Backup&gt;</returns>
        ApiResponse<List<Backup>> DeleteBackupWithHttpInfo(string sessionId, string organisationId, long backupId, int operationIndex = 0);
        /// <summary>
        /// get backup
        /// </summary>
        /// <remarks>
        /// return the backup data for a given backup-id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) for access control</param>
        /// <param name="backupId">the backup&#39;s id (along)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Backup</returns>
        Backup GetBackup(string sessionId, string organisationId, long backupId, int operationIndex = 0);

        /// <summary>
        /// get backup
        /// </summary>
        /// <remarks>
        /// return the backup data for a given backup-id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) for access control</param>
        /// <param name="backupId">the backup&#39;s id (along)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Backup</returns>
        ApiResponse<Backup> GetBackupWithHttpInfo(string sessionId, string organisationId, long backupId, int operationIndex = 0);
        /// <summary>
        /// get backup list
        /// </summary>
        /// <remarks>
        /// Get a list of all Backups present in this SimSage instance
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) to backup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Backup&gt;</returns>
        List<Backup> GetBackupList(string sessionId, string organisationId, int operationIndex = 0);

        /// <summary>
        /// get backup list
        /// </summary>
        /// <remarks>
        /// Get a list of all Backups present in this SimSage instance
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) to backup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Backup&gt;</returns>
        ApiResponse<List<Backup>> GetBackupListWithHttpInfo(string sessionId, string organisationId, int operationIndex = 0);
        /// <summary>
        /// restore backup
        /// </summary>
        /// <remarks>
        /// Restore parts of SimSage (documents, users, organisation/kb, roles) from a text-file.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMRestoreFromText"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage RestoreFromText(string sessionId, CMRestoreFromText cMRestoreFromText, int operationIndex = 0);

        /// <summary>
        /// restore backup
        /// </summary>
        /// <remarks>
        /// Restore parts of SimSage (documents, users, organisation/kb, roles) from a text-file.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMRestoreFromText"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> RestoreFromTextWithHttpInfo(string sessionId, CMRestoreFromText cMRestoreFromText, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBackupApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// create backup
        /// </summary>
        /// <remarks>
        /// Backup all of SimSage (excludes indexes and documents).  Create a SimSage text file with all relevant information for a SimSage Restore on the cloud node.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) to backup</param>
        /// <param name="regime">what to backup, one of &#39;all&#39; (all organisations, requires admin privileges) or &#39;specific&#39; (only the given organisation)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> BackupAsync(string sessionId, string organisationId, string regime, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// create backup
        /// </summary>
        /// <remarks>
        /// Backup all of SimSage (excludes indexes and documents).  Create a SimSage text file with all relevant information for a SimSage Restore on the cloud node.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) to backup</param>
        /// <param name="regime">what to backup, one of &#39;all&#39; (all organisations, requires admin privileges) or &#39;specific&#39; (only the given organisation)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> BackupWithHttpInfoAsync(string sessionId, string organisationId, string regime, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// remove backup
        /// </summary>
        /// <remarks>
        /// Delete a backup by ID and return list of all Backups present in this SimSage instance
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) to backup</param>
        /// <param name="backupId">the backup&#39;s id (along)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Backup&gt;</returns>
        System.Threading.Tasks.Task<List<Backup>> DeleteBackupAsync(string sessionId, string organisationId, long backupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// remove backup
        /// </summary>
        /// <remarks>
        /// Delete a backup by ID and return list of all Backups present in this SimSage instance
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) to backup</param>
        /// <param name="backupId">the backup&#39;s id (along)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Backup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Backup>>> DeleteBackupWithHttpInfoAsync(string sessionId, string organisationId, long backupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get backup
        /// </summary>
        /// <remarks>
        /// return the backup data for a given backup-id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) for access control</param>
        /// <param name="backupId">the backup&#39;s id (along)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Backup</returns>
        System.Threading.Tasks.Task<Backup> GetBackupAsync(string sessionId, string organisationId, long backupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get backup
        /// </summary>
        /// <remarks>
        /// return the backup data for a given backup-id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) for access control</param>
        /// <param name="backupId">the backup&#39;s id (along)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Backup)</returns>
        System.Threading.Tasks.Task<ApiResponse<Backup>> GetBackupWithHttpInfoAsync(string sessionId, string organisationId, long backupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get backup list
        /// </summary>
        /// <remarks>
        /// Get a list of all Backups present in this SimSage instance
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) to backup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Backup&gt;</returns>
        System.Threading.Tasks.Task<List<Backup>> GetBackupListAsync(string sessionId, string organisationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get backup list
        /// </summary>
        /// <remarks>
        /// Get a list of all Backups present in this SimSage instance
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) to backup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Backup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Backup>>> GetBackupListWithHttpInfoAsync(string sessionId, string organisationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// restore backup
        /// </summary>
        /// <remarks>
        /// Restore parts of SimSage (documents, users, organisation/kb, roles) from a text-file.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMRestoreFromText"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> RestoreFromTextAsync(string sessionId, CMRestoreFromText cMRestoreFromText, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// restore backup
        /// </summary>
        /// <remarks>
        /// Restore parts of SimSage (documents, users, organisation/kb, roles) from a text-file.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMRestoreFromText"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> RestoreFromTextWithHttpInfoAsync(string sessionId, CMRestoreFromText cMRestoreFromText, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBackupApi : IBackupApiSync, IBackupApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BackupApi : IBackupApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BackupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BackupApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BackupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BackupApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BackupApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BackupApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BackupApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BackupApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// create backup Backup all of SimSage (excludes indexes and documents).  Create a SimSage text file with all relevant information for a SimSage Restore on the cloud node.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) to backup</param>
        /// <param name="regime">what to backup, one of &#39;all&#39; (all organisations, requires admin privileges) or &#39;specific&#39; (only the given organisation)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage Backup(string sessionId, string organisationId, string regime, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = BackupWithHttpInfo(sessionId, organisationId, regime);
            return localVarResponse.Data;
        }

        /// <summary>
        /// create backup Backup all of SimSage (excludes indexes and documents).  Create a SimSage text file with all relevant information for a SimSage Restore on the cloud node.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) to backup</param>
        /// <param name="regime">what to backup, one of &#39;all&#39; (all organisations, requires admin privileges) or &#39;specific&#39; (only the given organisation)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> BackupWithHttpInfo(string sessionId, string organisationId, string regime, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling BackupApi->Backup");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling BackupApi->Backup");
            }

            // verify the required parameter 'regime' is set
            if (regime == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'regime' when calling BackupApi->Backup");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("regime", Org.OpenAPITools.Client.ClientUtils.ParameterToString(regime)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "BackupApi.Backup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<JsonMessage>("/api/backup/backup/{organisationId}/{regime}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Backup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// create backup Backup all of SimSage (excludes indexes and documents).  Create a SimSage text file with all relevant information for a SimSage Restore on the cloud node.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) to backup</param>
        /// <param name="regime">what to backup, one of &#39;all&#39; (all organisations, requires admin privileges) or &#39;specific&#39; (only the given organisation)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> BackupAsync(string sessionId, string organisationId, string regime, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await BackupWithHttpInfoAsync(sessionId, organisationId, regime, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// create backup Backup all of SimSage (excludes indexes and documents).  Create a SimSage text file with all relevant information for a SimSage Restore on the cloud node.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) to backup</param>
        /// <param name="regime">what to backup, one of &#39;all&#39; (all organisations, requires admin privileges) or &#39;specific&#39; (only the given organisation)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> BackupWithHttpInfoAsync(string sessionId, string organisationId, string regime, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling BackupApi->Backup");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling BackupApi->Backup");
            }

            // verify the required parameter 'regime' is set
            if (regime == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'regime' when calling BackupApi->Backup");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("regime", Org.OpenAPITools.Client.ClientUtils.ParameterToString(regime)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "BackupApi.Backup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JsonMessage>("/api/backup/backup/{organisationId}/{regime}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Backup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// remove backup Delete a backup by ID and return list of all Backups present in this SimSage instance
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) to backup</param>
        /// <param name="backupId">the backup&#39;s id (along)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Backup&gt;</returns>
        public List<Backup> DeleteBackup(string sessionId, string organisationId, long backupId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Backup>> localVarResponse = DeleteBackupWithHttpInfo(sessionId, organisationId, backupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// remove backup Delete a backup by ID and return list of all Backups present in this SimSage instance
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) to backup</param>
        /// <param name="backupId">the backup&#39;s id (along)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Backup&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Backup>> DeleteBackupWithHttpInfo(string sessionId, string organisationId, long backupId, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling BackupApi->DeleteBackup");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling BackupApi->DeleteBackup");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("backupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(backupId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "BackupApi.DeleteBackup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<Backup>>("/api/backup/backup/{organisationId}/{backupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBackup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// remove backup Delete a backup by ID and return list of all Backups present in this SimSage instance
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) to backup</param>
        /// <param name="backupId">the backup&#39;s id (along)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Backup&gt;</returns>
        public async System.Threading.Tasks.Task<List<Backup>> DeleteBackupAsync(string sessionId, string organisationId, long backupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Backup>> localVarResponse = await DeleteBackupWithHttpInfoAsync(sessionId, organisationId, backupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// remove backup Delete a backup by ID and return list of all Backups present in this SimSage instance
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) to backup</param>
        /// <param name="backupId">the backup&#39;s id (along)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Backup&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Backup>>> DeleteBackupWithHttpInfoAsync(string sessionId, string organisationId, long backupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling BackupApi->DeleteBackup");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling BackupApi->DeleteBackup");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("backupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(backupId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "BackupApi.DeleteBackup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<Backup>>("/api/backup/backup/{organisationId}/{backupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBackup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get backup return the backup data for a given backup-id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) for access control</param>
        /// <param name="backupId">the backup&#39;s id (along)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Backup</returns>
        public Backup GetBackup(string sessionId, string organisationId, long backupId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Backup> localVarResponse = GetBackupWithHttpInfo(sessionId, organisationId, backupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get backup return the backup data for a given backup-id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) for access control</param>
        /// <param name="backupId">the backup&#39;s id (along)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Backup</returns>
        public Org.OpenAPITools.Client.ApiResponse<Backup> GetBackupWithHttpInfo(string sessionId, string organisationId, long backupId, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling BackupApi->GetBackup");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling BackupApi->GetBackup");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("backupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(backupId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "BackupApi.GetBackup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Backup>("/api/backup/{organisationId}/{backupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBackup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get backup return the backup data for a given backup-id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) for access control</param>
        /// <param name="backupId">the backup&#39;s id (along)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Backup</returns>
        public async System.Threading.Tasks.Task<Backup> GetBackupAsync(string sessionId, string organisationId, long backupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Backup> localVarResponse = await GetBackupWithHttpInfoAsync(sessionId, organisationId, backupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get backup return the backup data for a given backup-id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) for access control</param>
        /// <param name="backupId">the backup&#39;s id (along)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Backup)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Backup>> GetBackupWithHttpInfoAsync(string sessionId, string organisationId, long backupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling BackupApi->GetBackup");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling BackupApi->GetBackup");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("backupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(backupId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "BackupApi.GetBackup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Backup>("/api/backup/{organisationId}/{backupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBackup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get backup list Get a list of all Backups present in this SimSage instance
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) to backup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Backup&gt;</returns>
        public List<Backup> GetBackupList(string sessionId, string organisationId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Backup>> localVarResponse = GetBackupListWithHttpInfo(sessionId, organisationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get backup list Get a list of all Backups present in this SimSage instance
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) to backup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Backup&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Backup>> GetBackupListWithHttpInfo(string sessionId, string organisationId, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling BackupApi->GetBackupList");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling BackupApi->GetBackupList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "BackupApi.GetBackupList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Backup>>("/api/backup/backups/{organisationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBackupList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get backup list Get a list of all Backups present in this SimSage instance
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) to backup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Backup&gt;</returns>
        public async System.Threading.Tasks.Task<List<Backup>> GetBackupListAsync(string sessionId, string organisationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Backup>> localVarResponse = await GetBackupListWithHttpInfoAsync(sessionId, organisationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get backup list Get a list of all Backups present in this SimSage instance
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid) to backup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Backup&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Backup>>> GetBackupListWithHttpInfoAsync(string sessionId, string organisationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling BackupApi->GetBackupList");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling BackupApi->GetBackupList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "BackupApi.GetBackupList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Backup>>("/api/backup/backups/{organisationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBackupList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// restore backup Restore parts of SimSage (documents, users, organisation/kb, roles) from a text-file.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMRestoreFromText"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage RestoreFromText(string sessionId, CMRestoreFromText cMRestoreFromText, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = RestoreFromTextWithHttpInfo(sessionId, cMRestoreFromText);
            return localVarResponse.Data;
        }

        /// <summary>
        /// restore backup Restore parts of SimSage (documents, users, organisation/kb, roles) from a text-file.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMRestoreFromText"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> RestoreFromTextWithHttpInfo(string sessionId, CMRestoreFromText cMRestoreFromText, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling BackupApi->RestoreFromText");
            }

            // verify the required parameter 'cMRestoreFromText' is set
            if (cMRestoreFromText == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMRestoreFromText' when calling BackupApi->RestoreFromText");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMRestoreFromText;

            localVarRequestOptions.Operation = "BackupApi.RestoreFromText";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<JsonMessage>("/api/backup/restore", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreFromText", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// restore backup Restore parts of SimSage (documents, users, organisation/kb, roles) from a text-file.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMRestoreFromText"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> RestoreFromTextAsync(string sessionId, CMRestoreFromText cMRestoreFromText, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await RestoreFromTextWithHttpInfoAsync(sessionId, cMRestoreFromText, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// restore backup Restore parts of SimSage (documents, users, organisation/kb, roles) from a text-file.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMRestoreFromText"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> RestoreFromTextWithHttpInfoAsync(string sessionId, CMRestoreFromText cMRestoreFromText, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling BackupApi->RestoreFromText");
            }

            // verify the required parameter 'cMRestoreFromText' is set
            if (cMRestoreFromText == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMRestoreFromText' when calling BackupApi->RestoreFromText");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMRestoreFromText;

            localVarRequestOptions.Operation = "BackupApi.RestoreFromText";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JsonMessage>("/api/backup/restore", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreFromText", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
