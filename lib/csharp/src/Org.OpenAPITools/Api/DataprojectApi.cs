/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.13.31
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataprojectApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Comment
        /// </summary>
        /// <remarks>
        /// Adds a comment with the given level and ids
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMNewComment"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string AddComment(string sessionId, CMNewComment cMNewComment, int operationIndex = 0);

        /// <summary>
        /// Create Comment
        /// </summary>
        /// <remarks>
        /// Adds a comment with the given level and ids
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMNewComment"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> AddCommentWithHttpInfo(string sessionId, CMNewComment cMNewComment, int operationIndex = 0);
        /// <summary>
        /// get Running Projects
        /// </summary>
        /// <remarks>
        /// Get the list of running projects
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMQueueFilter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMPagedQueueItems</returns>
        CMPagedQueueItems AllTasks(string sessionId, CMQueueFilter cMQueueFilter, int operationIndex = 0);

        /// <summary>
        /// get Running Projects
        /// </summary>
        /// <remarks>
        /// Get the list of running projects
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMQueueFilter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMPagedQueueItems</returns>
        ApiResponse<CMPagedQueueItems> AllTasksWithHttpInfo(string sessionId, CMQueueFilter cMQueueFilter, int operationIndex = 0);
        /// <summary>
        /// Change Task Phase
        /// </summary>
        /// <remarks>
        /// Notifies Workflow engine that a task changed it&#39;s status and passes results in
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMChangeTaskPhase"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string ChangeTaskPhase(string sessionId, CMChangeTaskPhase cMChangeTaskPhase, int operationIndex = 0);

        /// <summary>
        /// Change Task Phase
        /// </summary>
        /// <remarks>
        /// Notifies Workflow engine that a task changed it&#39;s status and passes results in
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMChangeTaskPhase"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ChangeTaskPhaseWithHttpInfo(string sessionId, CMChangeTaskPhase cMChangeTaskPhase, int operationIndex = 0);
        /// <summary>
        /// Claim sliced document
        /// </summary>
        /// <remarks>
        /// Claim sliced document for signed in user
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMClaimDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReturnedDocument</returns>
        ReturnedDocument ClaimDocument(string sessionId, CMClaimDocument cMClaimDocument, int operationIndex = 0);

        /// <summary>
        /// Claim sliced document
        /// </summary>
        /// <remarks>
        /// Claim sliced document for signed in user
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMClaimDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReturnedDocument</returns>
        ApiResponse<ReturnedDocument> ClaimDocumentWithHttpInfo(string sessionId, CMClaimDocument cMClaimDocument, int operationIndex = 0);
        /// <summary>
        /// get Crawler Status
        /// </summary>
        /// <remarks>
        /// Get the crawler status for the given task id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMCrawlerStatusTask</returns>
        CMCrawlerStatusTask CrawlerStatus(string organisationId, string taskId, string sessionId, int operationIndex = 0);

        /// <summary>
        /// get Crawler Status
        /// </summary>
        /// <remarks>
        /// Get the crawler status for the given task id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMCrawlerStatusTask</returns>
        ApiResponse<CMCrawlerStatusTask> CrawlerStatusWithHttpInfo(string organisationId, string taskId, string sessionId, int operationIndex = 0);
        /// <summary>
        /// Returns document list for tokens
        /// </summary>
        /// <remarks>
        /// Returns paged list of documents for the given set of query tokens
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentsByToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMPagedProjectDocuments</returns>
        CMPagedProjectDocuments DocumentsByTokens(string sessionId, CMDocumentsByToken cMDocumentsByToken, int operationIndex = 0);

        /// <summary>
        /// Returns document list for tokens
        /// </summary>
        /// <remarks>
        /// Returns paged list of documents for the given set of query tokens
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentsByToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMPagedProjectDocuments</returns>
        ApiResponse<CMPagedProjectDocuments> DocumentsByTokensWithHttpInfo(string sessionId, CMDocumentsByToken cMDocumentsByToken, int operationIndex = 0);
        /// <summary>
        /// Retrieve Comments
        /// </summary>
        /// <remarks>
        /// Retrieves the list of comments for the passed in Filter
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMCommentFilter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMRecordedComment&gt;</returns>
        List<CMRecordedComment> FilteredComments(string sessionId, CMCommentFilter cMCommentFilter, int operationIndex = 0);

        /// <summary>
        /// Retrieve Comments
        /// </summary>
        /// <remarks>
        /// Retrieves the list of comments for the passed in Filter
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMCommentFilter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMRecordedComment&gt;</returns>
        ApiResponse<List<CMRecordedComment>> FilteredCommentsWithHttpInfo(string sessionId, CMCommentFilter cMCommentFilter, int operationIndex = 0);
        /// <summary>
        /// Get Document Redaction info
        /// </summary>
        /// <remarks>
        /// Get list of all identified potential Redaction locations for the document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="sliceId">the id of the slice</param>
        /// <param name="documentKey">the document key of the document to be redacted</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;LocatedRedaction&gt;</returns>
        List<LocatedRedaction> GetDocumentRedactionInfo(string organisationId, string sliceId, string documentKey, string sessionId, int operationIndex = 0);

        /// <summary>
        /// Get Document Redaction info
        /// </summary>
        /// <remarks>
        /// Get list of all identified potential Redaction locations for the document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="sliceId">the id of the slice</param>
        /// <param name="documentKey">the document key of the document to be redacted</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;LocatedRedaction&gt;</returns>
        ApiResponse<List<LocatedRedaction>> GetDocumentRedactionInfoWithHttpInfo(string organisationId, string sliceId, string documentKey, string sessionId, int operationIndex = 0);
        /// <summary>
        /// get Project Definition
        /// </summary>
        /// <remarks>
        /// Get the project definition of the project for the given task id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMProjectDefinitionTask</returns>
        CMProjectDefinitionTask GetProjectDefinition(string organisationId, string taskId, string sessionId, int operationIndex = 0);

        /// <summary>
        /// get Project Definition
        /// </summary>
        /// <remarks>
        /// Get the project definition of the project for the given task id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMProjectDefinitionTask</returns>
        ApiResponse<CMProjectDefinitionTask> GetProjectDefinitionWithHttpInfo(string organisationId, string taskId, string sessionId, int operationIndex = 0);
        /// <summary>
        /// get Project Definition
        /// </summary>
        /// <remarks>
        /// Get the project review data of the project for the given project id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="projectId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMProjectReview</returns>
        CMProjectReview GetProjectReview(string organisationId, string projectId, string sessionId, int operationIndex = 0);

        /// <summary>
        /// get Project Definition
        /// </summary>
        /// <remarks>
        /// Get the project review data of the project for the given project id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="projectId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMProjectReview</returns>
        ApiResponse<CMProjectReview> GetProjectReviewWithHttpInfo(string organisationId, string projectId, string sessionId, int operationIndex = 0);
        /// <summary>
        /// get project slice
        /// </summary>
        /// <remarks>
        /// Get the project project slice for the given task id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMProjectSliceTask&gt;</returns>
        List<CMProjectSliceTask> GetProjectSlice(string organisationId, string taskId, string sessionId, int operationIndex = 0);

        /// <summary>
        /// get project slice
        /// </summary>
        /// <remarks>
        /// Get the project project slice for the given task id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMProjectSliceTask&gt;</returns>
        ApiResponse<List<CMProjectSliceTask>> GetProjectSliceWithHttpInfo(string organisationId, string taskId, string sessionId, int operationIndex = 0);
        /// <summary>
        /// get Search Result Summary
        /// </summary>
        /// <remarks>
        /// Get the summary information for the search results of a given project by task id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSearchResultSummaryTask</returns>
        CMSearchResultSummaryTask GetSearchResultSummary(string organisationId, string taskId, string sessionId, int operationIndex = 0);

        /// <summary>
        /// get Search Result Summary
        /// </summary>
        /// <remarks>
        /// Get the summary information for the search results of a given project by task id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSearchResultSummaryTask</returns>
        ApiResponse<CMSearchResultSummaryTask> GetSearchResultSummaryWithHttpInfo(string organisationId, string taskId, string sessionId, int operationIndex = 0);
        /// <summary>
        /// get Search Result Summary
        /// </summary>
        /// <remarks>
        /// Get the summary information for the search results of a given project by task id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="projectId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSearchResultSummary</returns>
        CMSearchResultSummary GetSearchResultSummaryForReview(string organisationId, string projectId, string sessionId, int operationIndex = 0);

        /// <summary>
        /// get Search Result Summary
        /// </summary>
        /// <remarks>
        /// Get the summary information for the search results of a given project by task id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="projectId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSearchResultSummary</returns>
        ApiResponse<CMSearchResultSummary> GetSearchResultSummaryForReviewWithHttpInfo(string organisationId, string projectId, string sessionId, int operationIndex = 0);
        /// <summary>
        /// Document list for given slice and filters
        /// </summary>
        /// <remarks>
        /// Returns paged list of documents for the passed in slice and filters as well as totals
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMNextDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSlicedDocumentListAndTotals</returns>
        CMSlicedDocumentListAndTotals NextDocument(string sessionId, CMNextDocument cMNextDocument, int operationIndex = 0);

        /// <summary>
        /// Document list for given slice and filters
        /// </summary>
        /// <remarks>
        /// Returns paged list of documents for the passed in slice and filters as well as totals
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMNextDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSlicedDocumentListAndTotals</returns>
        ApiResponse<CMSlicedDocumentListAndTotals> NextDocumentWithHttpInfo(string sessionId, CMNextDocument cMNextDocument, int operationIndex = 0);
        /// <summary>
        /// Binary
        /// </summary>
        /// <remarks>
        /// Get the original for a document if available by url (latest version)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">a base64 encoded url</param>
        /// <param name="sessionId">a valid SimSage Session id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object PdfBinary(string organisationId, string kbId, string url, string? sessionId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Binary
        /// </summary>
        /// <remarks>
        /// Get the original for a document if available by url (latest version)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">a base64 encoded url</param>
        /// <param name="sessionId">a valid SimSage Session id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PdfBinaryWithHttpInfo(string organisationId, string kbId, string url, string? sessionId = default(string?), int operationIndex = 0);
        /// <summary>
        /// get Project Types
        /// </summary>
        /// <remarks>
        /// Get the list of available project types
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMProjectInfo&gt;</returns>
        List<CMProjectInfo> ProjectTypes(string organisationId, string sessionId, int operationIndex = 0);

        /// <summary>
        /// get Project Types
        /// </summary>
        /// <remarks>
        /// Get the list of available project types
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMProjectInfo&gt;</returns>
        ApiResponse<List<CMProjectInfo>> ProjectTypesWithHttpInfo(string organisationId, string sessionId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMReassignSliceDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ReassignSliceDocument(string sessionId, CMReassignSliceDocument cMReassignSliceDocument, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMReassignSliceDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ReassignSliceDocumentWithHttpInfo(string sessionId, CMReassignSliceDocument cMReassignSliceDocument, int operationIndex = 0);
        /// <summary>
        /// Get Redacted Document
        /// </summary>
        /// <remarks>
        /// Retrieves the redacted document binary
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMRedactionDetails"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReturnedDocument</returns>
        ReturnedDocument RedactedDocument(string sessionId, CMRedactionDetails cMRedactionDetails, int operationIndex = 0);

        /// <summary>
        /// Get Redacted Document
        /// </summary>
        /// <remarks>
        /// Retrieves the redacted document binary
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMRedactionDetails"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReturnedDocument</returns>
        ApiResponse<ReturnedDocument> RedactedDocumentWithHttpInfo(string sessionId, CMRedactionDetails cMRedactionDetails, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMRemoveSliceDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object RemoveSliceDocument(string sessionId, CMRemoveSliceDocument cMRemoveSliceDocument, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMRemoveSliceDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RemoveSliceDocumentWithHttpInfo(string sessionId, CMRemoveSliceDocument cMRemoveSliceDocument, int operationIndex = 0);
        /// <summary>
        /// Reset Evolve Application
        /// </summary>
        /// <remarks>
        /// Fully resets Evolve to an empty system
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">a valid SimSage Organisation id.</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string ResetEvolve(string organisationId, string sessionId, int operationIndex = 0);

        /// <summary>
        /// Reset Evolve Application
        /// </summary>
        /// <remarks>
        /// Fully resets Evolve to an empty system
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">a valid SimSage Organisation id.</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ResetEvolveWithHttpInfo(string organisationId, string sessionId, int operationIndex = 0);
        /// <summary>
        /// Inserts/Updates a project definition
        /// </summary>
        /// <remarks>
        /// Inserts/Updates the details for a project definition
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMProjectDefinition"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMCreatedProject</returns>
        CMCreatedProject SaveProjectDefinition(string sessionId, CMProjectDefinition cMProjectDefinition, int operationIndex = 0);

        /// <summary>
        /// Inserts/Updates a project definition
        /// </summary>
        /// <remarks>
        /// Inserts/Updates the details for a project definition
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMProjectDefinition"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMCreatedProject</returns>
        ApiResponse<CMCreatedProject> SaveProjectDefinitionWithHttpInfo(string sessionId, CMProjectDefinition cMProjectDefinition, int operationIndex = 0);
        /// <summary>
        /// Set Slice configuration
        /// </summary>
        /// <remarks>
        /// Saves/updates the slices configured for a running project
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSetSliceDefinitions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string SetSliceConfig(string sessionId, CMSetSliceDefinitions cMSetSliceDefinitions, int operationIndex = 0);

        /// <summary>
        /// Set Slice configuration
        /// </summary>
        /// <remarks>
        /// Saves/updates the slices configured for a running project
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSetSliceDefinitions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SetSliceConfigWithHttpInfo(string sessionId, CMSetSliceDefinitions cMSetSliceDefinitions, int operationIndex = 0);
        /// <summary>
        /// Document list for given slice and filters
        /// </summary>
        /// <remarks>
        /// Returns paged list of documents for the passed in slice and filters as well as totals
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSlicedDocumentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSlicedDocumentListAndTotals</returns>
        CMSlicedDocumentListAndTotals SlicedDocuments(string sessionId, CMSlicedDocumentRequest cMSlicedDocumentRequest, int operationIndex = 0);

        /// <summary>
        /// Document list for given slice and filters
        /// </summary>
        /// <remarks>
        /// Returns paged list of documents for the passed in slice and filters as well as totals
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSlicedDocumentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSlicedDocumentListAndTotals</returns>
        ApiResponse<CMSlicedDocumentListAndTotals> SlicedDocumentsWithHttpInfo(string sessionId, CMSlicedDocumentRequest cMSlicedDocumentRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMStartProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object StartProject(string sessionId, CMStartProject cMStartProject, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMStartProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> StartProjectWithHttpInfo(string sessionId, CMStartProject cMStartProject, int operationIndex = 0);
        /// <summary>
        /// Update document status
        /// </summary>
        /// <remarks>
        /// Updates the status applied to a slice document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMUpdateDocumentStatus"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string UpdateDocumentStatus(string sessionId, CMUpdateDocumentStatus cMUpdateDocumentStatus, int operationIndex = 0);

        /// <summary>
        /// Update document status
        /// </summary>
        /// <remarks>
        /// Updates the status applied to a slice document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMUpdateDocumentStatus"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> UpdateDocumentStatusWithHttpInfo(string sessionId, CMUpdateDocumentStatus cMUpdateDocumentStatus, int operationIndex = 0);
        /// <summary>
        /// Update document redactions
        /// </summary>
        /// <remarks>
        /// Updates the redactions applied to a document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMUpdateRedactions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string UpdateRedactions(string sessionId, CMUpdateRedactions cMUpdateRedactions, int operationIndex = 0);

        /// <summary>
        /// Update document redactions
        /// </summary>
        /// <remarks>
        /// Updates the redactions applied to a document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMUpdateRedactions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> UpdateRedactionsWithHttpInfo(string sessionId, CMUpdateRedactions cMUpdateRedactions, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataprojectApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Comment
        /// </summary>
        /// <remarks>
        /// Adds a comment with the given level and ids
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMNewComment"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> AddCommentAsync(string sessionId, CMNewComment cMNewComment, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Comment
        /// </summary>
        /// <remarks>
        /// Adds a comment with the given level and ids
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMNewComment"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> AddCommentWithHttpInfoAsync(string sessionId, CMNewComment cMNewComment, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get Running Projects
        /// </summary>
        /// <remarks>
        /// Get the list of running projects
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMQueueFilter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMPagedQueueItems</returns>
        System.Threading.Tasks.Task<CMPagedQueueItems> AllTasksAsync(string sessionId, CMQueueFilter cMQueueFilter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get Running Projects
        /// </summary>
        /// <remarks>
        /// Get the list of running projects
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMQueueFilter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMPagedQueueItems)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMPagedQueueItems>> AllTasksWithHttpInfoAsync(string sessionId, CMQueueFilter cMQueueFilter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Change Task Phase
        /// </summary>
        /// <remarks>
        /// Notifies Workflow engine that a task changed it&#39;s status and passes results in
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMChangeTaskPhase"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ChangeTaskPhaseAsync(string sessionId, CMChangeTaskPhase cMChangeTaskPhase, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Change Task Phase
        /// </summary>
        /// <remarks>
        /// Notifies Workflow engine that a task changed it&#39;s status and passes results in
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMChangeTaskPhase"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ChangeTaskPhaseWithHttpInfoAsync(string sessionId, CMChangeTaskPhase cMChangeTaskPhase, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Claim sliced document
        /// </summary>
        /// <remarks>
        /// Claim sliced document for signed in user
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMClaimDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReturnedDocument</returns>
        System.Threading.Tasks.Task<ReturnedDocument> ClaimDocumentAsync(string sessionId, CMClaimDocument cMClaimDocument, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Claim sliced document
        /// </summary>
        /// <remarks>
        /// Claim sliced document for signed in user
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMClaimDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReturnedDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReturnedDocument>> ClaimDocumentWithHttpInfoAsync(string sessionId, CMClaimDocument cMClaimDocument, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get Crawler Status
        /// </summary>
        /// <remarks>
        /// Get the crawler status for the given task id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMCrawlerStatusTask</returns>
        System.Threading.Tasks.Task<CMCrawlerStatusTask> CrawlerStatusAsync(string organisationId, string taskId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get Crawler Status
        /// </summary>
        /// <remarks>
        /// Get the crawler status for the given task id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMCrawlerStatusTask)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMCrawlerStatusTask>> CrawlerStatusWithHttpInfoAsync(string organisationId, string taskId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns document list for tokens
        /// </summary>
        /// <remarks>
        /// Returns paged list of documents for the given set of query tokens
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentsByToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMPagedProjectDocuments</returns>
        System.Threading.Tasks.Task<CMPagedProjectDocuments> DocumentsByTokensAsync(string sessionId, CMDocumentsByToken cMDocumentsByToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns document list for tokens
        /// </summary>
        /// <remarks>
        /// Returns paged list of documents for the given set of query tokens
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentsByToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMPagedProjectDocuments)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMPagedProjectDocuments>> DocumentsByTokensWithHttpInfoAsync(string sessionId, CMDocumentsByToken cMDocumentsByToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Comments
        /// </summary>
        /// <remarks>
        /// Retrieves the list of comments for the passed in Filter
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMCommentFilter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMRecordedComment&gt;</returns>
        System.Threading.Tasks.Task<List<CMRecordedComment>> FilteredCommentsAsync(string sessionId, CMCommentFilter cMCommentFilter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Comments
        /// </summary>
        /// <remarks>
        /// Retrieves the list of comments for the passed in Filter
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMCommentFilter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMRecordedComment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CMRecordedComment>>> FilteredCommentsWithHttpInfoAsync(string sessionId, CMCommentFilter cMCommentFilter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Document Redaction info
        /// </summary>
        /// <remarks>
        /// Get list of all identified potential Redaction locations for the document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="sliceId">the id of the slice</param>
        /// <param name="documentKey">the document key of the document to be redacted</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LocatedRedaction&gt;</returns>
        System.Threading.Tasks.Task<List<LocatedRedaction>> GetDocumentRedactionInfoAsync(string organisationId, string sliceId, string documentKey, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Document Redaction info
        /// </summary>
        /// <remarks>
        /// Get list of all identified potential Redaction locations for the document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="sliceId">the id of the slice</param>
        /// <param name="documentKey">the document key of the document to be redacted</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LocatedRedaction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LocatedRedaction>>> GetDocumentRedactionInfoWithHttpInfoAsync(string organisationId, string sliceId, string documentKey, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get Project Definition
        /// </summary>
        /// <remarks>
        /// Get the project definition of the project for the given task id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMProjectDefinitionTask</returns>
        System.Threading.Tasks.Task<CMProjectDefinitionTask> GetProjectDefinitionAsync(string organisationId, string taskId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get Project Definition
        /// </summary>
        /// <remarks>
        /// Get the project definition of the project for the given task id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMProjectDefinitionTask)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMProjectDefinitionTask>> GetProjectDefinitionWithHttpInfoAsync(string organisationId, string taskId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get Project Definition
        /// </summary>
        /// <remarks>
        /// Get the project review data of the project for the given project id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="projectId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMProjectReview</returns>
        System.Threading.Tasks.Task<CMProjectReview> GetProjectReviewAsync(string organisationId, string projectId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get Project Definition
        /// </summary>
        /// <remarks>
        /// Get the project review data of the project for the given project id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="projectId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMProjectReview)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMProjectReview>> GetProjectReviewWithHttpInfoAsync(string organisationId, string projectId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get project slice
        /// </summary>
        /// <remarks>
        /// Get the project project slice for the given task id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMProjectSliceTask&gt;</returns>
        System.Threading.Tasks.Task<List<CMProjectSliceTask>> GetProjectSliceAsync(string organisationId, string taskId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get project slice
        /// </summary>
        /// <remarks>
        /// Get the project project slice for the given task id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMProjectSliceTask&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CMProjectSliceTask>>> GetProjectSliceWithHttpInfoAsync(string organisationId, string taskId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get Search Result Summary
        /// </summary>
        /// <remarks>
        /// Get the summary information for the search results of a given project by task id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSearchResultSummaryTask</returns>
        System.Threading.Tasks.Task<CMSearchResultSummaryTask> GetSearchResultSummaryAsync(string organisationId, string taskId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get Search Result Summary
        /// </summary>
        /// <remarks>
        /// Get the summary information for the search results of a given project by task id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSearchResultSummaryTask)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMSearchResultSummaryTask>> GetSearchResultSummaryWithHttpInfoAsync(string organisationId, string taskId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get Search Result Summary
        /// </summary>
        /// <remarks>
        /// Get the summary information for the search results of a given project by task id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="projectId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSearchResultSummary</returns>
        System.Threading.Tasks.Task<CMSearchResultSummary> GetSearchResultSummaryForReviewAsync(string organisationId, string projectId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get Search Result Summary
        /// </summary>
        /// <remarks>
        /// Get the summary information for the search results of a given project by task id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="projectId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSearchResultSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMSearchResultSummary>> GetSearchResultSummaryForReviewWithHttpInfoAsync(string organisationId, string projectId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Document list for given slice and filters
        /// </summary>
        /// <remarks>
        /// Returns paged list of documents for the passed in slice and filters as well as totals
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMNextDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSlicedDocumentListAndTotals</returns>
        System.Threading.Tasks.Task<CMSlicedDocumentListAndTotals> NextDocumentAsync(string sessionId, CMNextDocument cMNextDocument, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Document list for given slice and filters
        /// </summary>
        /// <remarks>
        /// Returns paged list of documents for the passed in slice and filters as well as totals
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMNextDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSlicedDocumentListAndTotals)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMSlicedDocumentListAndTotals>> NextDocumentWithHttpInfoAsync(string sessionId, CMNextDocument cMNextDocument, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Binary
        /// </summary>
        /// <remarks>
        /// Get the original for a document if available by url (latest version)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">a base64 encoded url</param>
        /// <param name="sessionId">a valid SimSage Session id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PdfBinaryAsync(string organisationId, string kbId, string url, string? sessionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Binary
        /// </summary>
        /// <remarks>
        /// Get the original for a document if available by url (latest version)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">a base64 encoded url</param>
        /// <param name="sessionId">a valid SimSage Session id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PdfBinaryWithHttpInfoAsync(string organisationId, string kbId, string url, string? sessionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get Project Types
        /// </summary>
        /// <remarks>
        /// Get the list of available project types
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMProjectInfo&gt;</returns>
        System.Threading.Tasks.Task<List<CMProjectInfo>> ProjectTypesAsync(string organisationId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get Project Types
        /// </summary>
        /// <remarks>
        /// Get the list of available project types
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMProjectInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CMProjectInfo>>> ProjectTypesWithHttpInfoAsync(string organisationId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMReassignSliceDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ReassignSliceDocumentAsync(string sessionId, CMReassignSliceDocument cMReassignSliceDocument, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMReassignSliceDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReassignSliceDocumentWithHttpInfoAsync(string sessionId, CMReassignSliceDocument cMReassignSliceDocument, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Redacted Document
        /// </summary>
        /// <remarks>
        /// Retrieves the redacted document binary
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMRedactionDetails"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReturnedDocument</returns>
        System.Threading.Tasks.Task<ReturnedDocument> RedactedDocumentAsync(string sessionId, CMRedactionDetails cMRedactionDetails, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Redacted Document
        /// </summary>
        /// <remarks>
        /// Retrieves the redacted document binary
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMRedactionDetails"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReturnedDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReturnedDocument>> RedactedDocumentWithHttpInfoAsync(string sessionId, CMRedactionDetails cMRedactionDetails, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMRemoveSliceDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RemoveSliceDocumentAsync(string sessionId, CMRemoveSliceDocument cMRemoveSliceDocument, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMRemoveSliceDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveSliceDocumentWithHttpInfoAsync(string sessionId, CMRemoveSliceDocument cMRemoveSliceDocument, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reset Evolve Application
        /// </summary>
        /// <remarks>
        /// Fully resets Evolve to an empty system
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">a valid SimSage Organisation id.</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ResetEvolveAsync(string organisationId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reset Evolve Application
        /// </summary>
        /// <remarks>
        /// Fully resets Evolve to an empty system
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">a valid SimSage Organisation id.</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ResetEvolveWithHttpInfoAsync(string organisationId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Inserts/Updates a project definition
        /// </summary>
        /// <remarks>
        /// Inserts/Updates the details for a project definition
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMProjectDefinition"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMCreatedProject</returns>
        System.Threading.Tasks.Task<CMCreatedProject> SaveProjectDefinitionAsync(string sessionId, CMProjectDefinition cMProjectDefinition, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Inserts/Updates a project definition
        /// </summary>
        /// <remarks>
        /// Inserts/Updates the details for a project definition
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMProjectDefinition"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMCreatedProject)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMCreatedProject>> SaveProjectDefinitionWithHttpInfoAsync(string sessionId, CMProjectDefinition cMProjectDefinition, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Slice configuration
        /// </summary>
        /// <remarks>
        /// Saves/updates the slices configured for a running project
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSetSliceDefinitions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SetSliceConfigAsync(string sessionId, CMSetSliceDefinitions cMSetSliceDefinitions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Slice configuration
        /// </summary>
        /// <remarks>
        /// Saves/updates the slices configured for a running project
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSetSliceDefinitions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SetSliceConfigWithHttpInfoAsync(string sessionId, CMSetSliceDefinitions cMSetSliceDefinitions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Document list for given slice and filters
        /// </summary>
        /// <remarks>
        /// Returns paged list of documents for the passed in slice and filters as well as totals
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSlicedDocumentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSlicedDocumentListAndTotals</returns>
        System.Threading.Tasks.Task<CMSlicedDocumentListAndTotals> SlicedDocumentsAsync(string sessionId, CMSlicedDocumentRequest cMSlicedDocumentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Document list for given slice and filters
        /// </summary>
        /// <remarks>
        /// Returns paged list of documents for the passed in slice and filters as well as totals
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSlicedDocumentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSlicedDocumentListAndTotals)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMSlicedDocumentListAndTotals>> SlicedDocumentsWithHttpInfoAsync(string sessionId, CMSlicedDocumentRequest cMSlicedDocumentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMStartProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> StartProjectAsync(string sessionId, CMStartProject cMStartProject, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMStartProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StartProjectWithHttpInfoAsync(string sessionId, CMStartProject cMStartProject, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update document status
        /// </summary>
        /// <remarks>
        /// Updates the status applied to a slice document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMUpdateDocumentStatus"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> UpdateDocumentStatusAsync(string sessionId, CMUpdateDocumentStatus cMUpdateDocumentStatus, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update document status
        /// </summary>
        /// <remarks>
        /// Updates the status applied to a slice document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMUpdateDocumentStatus"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> UpdateDocumentStatusWithHttpInfoAsync(string sessionId, CMUpdateDocumentStatus cMUpdateDocumentStatus, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update document redactions
        /// </summary>
        /// <remarks>
        /// Updates the redactions applied to a document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMUpdateRedactions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> UpdateRedactionsAsync(string sessionId, CMUpdateRedactions cMUpdateRedactions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update document redactions
        /// </summary>
        /// <remarks>
        /// Updates the redactions applied to a document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMUpdateRedactions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> UpdateRedactionsWithHttpInfoAsync(string sessionId, CMUpdateRedactions cMUpdateRedactions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataprojectApi : IDataprojectApiSync, IDataprojectApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataprojectApi : IDataprojectApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataprojectApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataprojectApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataprojectApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataprojectApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataprojectApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataprojectApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataprojectApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DataprojectApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Comment Adds a comment with the given level and ids
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMNewComment"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string AddComment(string sessionId, CMNewComment cMNewComment, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = AddCommentWithHttpInfo(sessionId, cMNewComment);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Comment Adds a comment with the given level and ids
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMNewComment"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Org.OpenAPITools.Client.ApiResponse<string> AddCommentWithHttpInfo(string sessionId, CMNewComment cMNewComment, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->AddComment");
            }

            // verify the required parameter 'cMNewComment' is set
            if (cMNewComment == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMNewComment' when calling DataprojectApi->AddComment");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMNewComment;

            localVarRequestOptions.Operation = "DataprojectApi.AddComment";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/api/dataproject/comment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Comment Adds a comment with the given level and ids
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMNewComment"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> AddCommentAsync(string sessionId, CMNewComment cMNewComment, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = await AddCommentWithHttpInfoAsync(sessionId, cMNewComment, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Comment Adds a comment with the given level and ids
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMNewComment"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<string>> AddCommentWithHttpInfoAsync(string sessionId, CMNewComment cMNewComment, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->AddComment");
            }

            // verify the required parameter 'cMNewComment' is set
            if (cMNewComment == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMNewComment' when calling DataprojectApi->AddComment");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMNewComment;

            localVarRequestOptions.Operation = "DataprojectApi.AddComment";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/api/dataproject/comment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get Running Projects Get the list of running projects
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMQueueFilter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMPagedQueueItems</returns>
        public CMPagedQueueItems AllTasks(string sessionId, CMQueueFilter cMQueueFilter, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMPagedQueueItems> localVarResponse = AllTasksWithHttpInfo(sessionId, cMQueueFilter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get Running Projects Get the list of running projects
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMQueueFilter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMPagedQueueItems</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMPagedQueueItems> AllTasksWithHttpInfo(string sessionId, CMQueueFilter cMQueueFilter, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->AllTasks");
            }

            // verify the required parameter 'cMQueueFilter' is set
            if (cMQueueFilter == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMQueueFilter' when calling DataprojectApi->AllTasks");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMQueueFilter;

            localVarRequestOptions.Operation = "DataprojectApi.AllTasks";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CMPagedQueueItems>("/api/dataproject/runningprojects", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AllTasks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get Running Projects Get the list of running projects
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMQueueFilter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMPagedQueueItems</returns>
        public async System.Threading.Tasks.Task<CMPagedQueueItems> AllTasksAsync(string sessionId, CMQueueFilter cMQueueFilter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMPagedQueueItems> localVarResponse = await AllTasksWithHttpInfoAsync(sessionId, cMQueueFilter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get Running Projects Get the list of running projects
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMQueueFilter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMPagedQueueItems)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMPagedQueueItems>> AllTasksWithHttpInfoAsync(string sessionId, CMQueueFilter cMQueueFilter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->AllTasks");
            }

            // verify the required parameter 'cMQueueFilter' is set
            if (cMQueueFilter == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMQueueFilter' when calling DataprojectApi->AllTasks");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMQueueFilter;

            localVarRequestOptions.Operation = "DataprojectApi.AllTasks";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CMPagedQueueItems>("/api/dataproject/runningprojects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AllTasks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change Task Phase Notifies Workflow engine that a task changed it&#39;s status and passes results in
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMChangeTaskPhase"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string ChangeTaskPhase(string sessionId, CMChangeTaskPhase cMChangeTaskPhase, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = ChangeTaskPhaseWithHttpInfo(sessionId, cMChangeTaskPhase);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Change Task Phase Notifies Workflow engine that a task changed it&#39;s status and passes results in
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMChangeTaskPhase"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Org.OpenAPITools.Client.ApiResponse<string> ChangeTaskPhaseWithHttpInfo(string sessionId, CMChangeTaskPhase cMChangeTaskPhase, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->ChangeTaskPhase");
            }

            // verify the required parameter 'cMChangeTaskPhase' is set
            if (cMChangeTaskPhase == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMChangeTaskPhase' when calling DataprojectApi->ChangeTaskPhase");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMChangeTaskPhase;

            localVarRequestOptions.Operation = "DataprojectApi.ChangeTaskPhase";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/api/dataproject/changetaskphase", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeTaskPhase", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change Task Phase Notifies Workflow engine that a task changed it&#39;s status and passes results in
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMChangeTaskPhase"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ChangeTaskPhaseAsync(string sessionId, CMChangeTaskPhase cMChangeTaskPhase, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = await ChangeTaskPhaseWithHttpInfoAsync(sessionId, cMChangeTaskPhase, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Change Task Phase Notifies Workflow engine that a task changed it&#39;s status and passes results in
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMChangeTaskPhase"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<string>> ChangeTaskPhaseWithHttpInfoAsync(string sessionId, CMChangeTaskPhase cMChangeTaskPhase, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->ChangeTaskPhase");
            }

            // verify the required parameter 'cMChangeTaskPhase' is set
            if (cMChangeTaskPhase == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMChangeTaskPhase' when calling DataprojectApi->ChangeTaskPhase");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMChangeTaskPhase;

            localVarRequestOptions.Operation = "DataprojectApi.ChangeTaskPhase";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/api/dataproject/changetaskphase", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeTaskPhase", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Claim sliced document Claim sliced document for signed in user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMClaimDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReturnedDocument</returns>
        public ReturnedDocument ClaimDocument(string sessionId, CMClaimDocument cMClaimDocument, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ReturnedDocument> localVarResponse = ClaimDocumentWithHttpInfo(sessionId, cMClaimDocument);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Claim sliced document Claim sliced document for signed in user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMClaimDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReturnedDocument</returns>
        public Org.OpenAPITools.Client.ApiResponse<ReturnedDocument> ClaimDocumentWithHttpInfo(string sessionId, CMClaimDocument cMClaimDocument, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->ClaimDocument");
            }

            // verify the required parameter 'cMClaimDocument' is set
            if (cMClaimDocument == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMClaimDocument' when calling DataprojectApi->ClaimDocument");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMClaimDocument;

            localVarRequestOptions.Operation = "DataprojectApi.ClaimDocument";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ReturnedDocument>("/api/dataproject/claimdocument", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClaimDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Claim sliced document Claim sliced document for signed in user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMClaimDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReturnedDocument</returns>
        public async System.Threading.Tasks.Task<ReturnedDocument> ClaimDocumentAsync(string sessionId, CMClaimDocument cMClaimDocument, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ReturnedDocument> localVarResponse = await ClaimDocumentWithHttpInfoAsync(sessionId, cMClaimDocument, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Claim sliced document Claim sliced document for signed in user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMClaimDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReturnedDocument)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ReturnedDocument>> ClaimDocumentWithHttpInfoAsync(string sessionId, CMClaimDocument cMClaimDocument, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->ClaimDocument");
            }

            // verify the required parameter 'cMClaimDocument' is set
            if (cMClaimDocument == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMClaimDocument' when calling DataprojectApi->ClaimDocument");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMClaimDocument;

            localVarRequestOptions.Operation = "DataprojectApi.ClaimDocument";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ReturnedDocument>("/api/dataproject/claimdocument", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClaimDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get Crawler Status Get the crawler status for the given task id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMCrawlerStatusTask</returns>
        public CMCrawlerStatusTask CrawlerStatus(string organisationId, string taskId, string sessionId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMCrawlerStatusTask> localVarResponse = CrawlerStatusWithHttpInfo(organisationId, taskId, sessionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get Crawler Status Get the crawler status for the given task id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMCrawlerStatusTask</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMCrawlerStatusTask> CrawlerStatusWithHttpInfo(string organisationId, string taskId, string sessionId, int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DataprojectApi->CrawlerStatus");
            }

            // verify the required parameter 'taskId' is set
            if (taskId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'taskId' when calling DataprojectApi->CrawlerStatus");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->CrawlerStatus");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("taskId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "DataprojectApi.CrawlerStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CMCrawlerStatusTask>("/api/dataproject/crawlerstatus/{organisationId}/{taskId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CrawlerStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get Crawler Status Get the crawler status for the given task id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMCrawlerStatusTask</returns>
        public async System.Threading.Tasks.Task<CMCrawlerStatusTask> CrawlerStatusAsync(string organisationId, string taskId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMCrawlerStatusTask> localVarResponse = await CrawlerStatusWithHttpInfoAsync(organisationId, taskId, sessionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get Crawler Status Get the crawler status for the given task id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMCrawlerStatusTask)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMCrawlerStatusTask>> CrawlerStatusWithHttpInfoAsync(string organisationId, string taskId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DataprojectApi->CrawlerStatus");
            }

            // verify the required parameter 'taskId' is set
            if (taskId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'taskId' when calling DataprojectApi->CrawlerStatus");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->CrawlerStatus");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("taskId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "DataprojectApi.CrawlerStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CMCrawlerStatusTask>("/api/dataproject/crawlerstatus/{organisationId}/{taskId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CrawlerStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns document list for tokens Returns paged list of documents for the given set of query tokens
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentsByToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMPagedProjectDocuments</returns>
        public CMPagedProjectDocuments DocumentsByTokens(string sessionId, CMDocumentsByToken cMDocumentsByToken, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMPagedProjectDocuments> localVarResponse = DocumentsByTokensWithHttpInfo(sessionId, cMDocumentsByToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns document list for tokens Returns paged list of documents for the given set of query tokens
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentsByToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMPagedProjectDocuments</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMPagedProjectDocuments> DocumentsByTokensWithHttpInfo(string sessionId, CMDocumentsByToken cMDocumentsByToken, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->DocumentsByTokens");
            }

            // verify the required parameter 'cMDocumentsByToken' is set
            if (cMDocumentsByToken == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMDocumentsByToken' when calling DataprojectApi->DocumentsByTokens");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMDocumentsByToken;

            localVarRequestOptions.Operation = "DataprojectApi.DocumentsByTokens";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CMPagedProjectDocuments>("/api/dataproject/documentsbytokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentsByTokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns document list for tokens Returns paged list of documents for the given set of query tokens
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentsByToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMPagedProjectDocuments</returns>
        public async System.Threading.Tasks.Task<CMPagedProjectDocuments> DocumentsByTokensAsync(string sessionId, CMDocumentsByToken cMDocumentsByToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMPagedProjectDocuments> localVarResponse = await DocumentsByTokensWithHttpInfoAsync(sessionId, cMDocumentsByToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns document list for tokens Returns paged list of documents for the given set of query tokens
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentsByToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMPagedProjectDocuments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMPagedProjectDocuments>> DocumentsByTokensWithHttpInfoAsync(string sessionId, CMDocumentsByToken cMDocumentsByToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->DocumentsByTokens");
            }

            // verify the required parameter 'cMDocumentsByToken' is set
            if (cMDocumentsByToken == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMDocumentsByToken' when calling DataprojectApi->DocumentsByTokens");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMDocumentsByToken;

            localVarRequestOptions.Operation = "DataprojectApi.DocumentsByTokens";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CMPagedProjectDocuments>("/api/dataproject/documentsbytokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentsByTokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Comments Retrieves the list of comments for the passed in Filter
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMCommentFilter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMRecordedComment&gt;</returns>
        public List<CMRecordedComment> FilteredComments(string sessionId, CMCommentFilter cMCommentFilter, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMRecordedComment>> localVarResponse = FilteredCommentsWithHttpInfo(sessionId, cMCommentFilter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Comments Retrieves the list of comments for the passed in Filter
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMCommentFilter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMRecordedComment&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<CMRecordedComment>> FilteredCommentsWithHttpInfo(string sessionId, CMCommentFilter cMCommentFilter, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->FilteredComments");
            }

            // verify the required parameter 'cMCommentFilter' is set
            if (cMCommentFilter == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMCommentFilter' when calling DataprojectApi->FilteredComments");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMCommentFilter;

            localVarRequestOptions.Operation = "DataprojectApi.FilteredComments";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<CMRecordedComment>>("/api/dataproject/filteredcomments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilteredComments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Comments Retrieves the list of comments for the passed in Filter
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMCommentFilter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMRecordedComment&gt;</returns>
        public async System.Threading.Tasks.Task<List<CMRecordedComment>> FilteredCommentsAsync(string sessionId, CMCommentFilter cMCommentFilter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMRecordedComment>> localVarResponse = await FilteredCommentsWithHttpInfoAsync(sessionId, cMCommentFilter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Comments Retrieves the list of comments for the passed in Filter
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMCommentFilter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMRecordedComment&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<CMRecordedComment>>> FilteredCommentsWithHttpInfoAsync(string sessionId, CMCommentFilter cMCommentFilter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->FilteredComments");
            }

            // verify the required parameter 'cMCommentFilter' is set
            if (cMCommentFilter == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMCommentFilter' when calling DataprojectApi->FilteredComments");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMCommentFilter;

            localVarRequestOptions.Operation = "DataprojectApi.FilteredComments";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<CMRecordedComment>>("/api/dataproject/filteredcomments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilteredComments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Document Redaction info Get list of all identified potential Redaction locations for the document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="sliceId">the id of the slice</param>
        /// <param name="documentKey">the document key of the document to be redacted</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;LocatedRedaction&gt;</returns>
        public List<LocatedRedaction> GetDocumentRedactionInfo(string organisationId, string sliceId, string documentKey, string sessionId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<LocatedRedaction>> localVarResponse = GetDocumentRedactionInfoWithHttpInfo(organisationId, sliceId, documentKey, sessionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Document Redaction info Get list of all identified potential Redaction locations for the document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="sliceId">the id of the slice</param>
        /// <param name="documentKey">the document key of the document to be redacted</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;LocatedRedaction&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<LocatedRedaction>> GetDocumentRedactionInfoWithHttpInfo(string organisationId, string sliceId, string documentKey, string sessionId, int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DataprojectApi->GetDocumentRedactionInfo");
            }

            // verify the required parameter 'sliceId' is set
            if (sliceId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sliceId' when calling DataprojectApi->GetDocumentRedactionInfo");
            }

            // verify the required parameter 'documentKey' is set
            if (documentKey == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'documentKey' when calling DataprojectApi->GetDocumentRedactionInfo");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->GetDocumentRedactionInfo");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sliceId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sliceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("documentKey", Org.OpenAPITools.Client.ClientUtils.ParameterToString(documentKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "DataprojectApi.GetDocumentRedactionInfo";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<LocatedRedaction>>("/api/dataproject/docredactioninfo/{organisationId}/{sliceId}/{documentKey}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDocumentRedactionInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Document Redaction info Get list of all identified potential Redaction locations for the document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="sliceId">the id of the slice</param>
        /// <param name="documentKey">the document key of the document to be redacted</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LocatedRedaction&gt;</returns>
        public async System.Threading.Tasks.Task<List<LocatedRedaction>> GetDocumentRedactionInfoAsync(string organisationId, string sliceId, string documentKey, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<LocatedRedaction>> localVarResponse = await GetDocumentRedactionInfoWithHttpInfoAsync(organisationId, sliceId, documentKey, sessionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Document Redaction info Get list of all identified potential Redaction locations for the document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="sliceId">the id of the slice</param>
        /// <param name="documentKey">the document key of the document to be redacted</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LocatedRedaction&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<LocatedRedaction>>> GetDocumentRedactionInfoWithHttpInfoAsync(string organisationId, string sliceId, string documentKey, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DataprojectApi->GetDocumentRedactionInfo");
            }

            // verify the required parameter 'sliceId' is set
            if (sliceId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sliceId' when calling DataprojectApi->GetDocumentRedactionInfo");
            }

            // verify the required parameter 'documentKey' is set
            if (documentKey == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'documentKey' when calling DataprojectApi->GetDocumentRedactionInfo");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->GetDocumentRedactionInfo");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sliceId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sliceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("documentKey", Org.OpenAPITools.Client.ClientUtils.ParameterToString(documentKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "DataprojectApi.GetDocumentRedactionInfo";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<LocatedRedaction>>("/api/dataproject/docredactioninfo/{organisationId}/{sliceId}/{documentKey}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDocumentRedactionInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get Project Definition Get the project definition of the project for the given task id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMProjectDefinitionTask</returns>
        public CMProjectDefinitionTask GetProjectDefinition(string organisationId, string taskId, string sessionId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMProjectDefinitionTask> localVarResponse = GetProjectDefinitionWithHttpInfo(organisationId, taskId, sessionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get Project Definition Get the project definition of the project for the given task id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMProjectDefinitionTask</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMProjectDefinitionTask> GetProjectDefinitionWithHttpInfo(string organisationId, string taskId, string sessionId, int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DataprojectApi->GetProjectDefinition");
            }

            // verify the required parameter 'taskId' is set
            if (taskId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'taskId' when calling DataprojectApi->GetProjectDefinition");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->GetProjectDefinition");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("taskId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "DataprojectApi.GetProjectDefinition";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CMProjectDefinitionTask>("/api/dataproject/projectdefinition/{organisationId}/{taskId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectDefinition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get Project Definition Get the project definition of the project for the given task id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMProjectDefinitionTask</returns>
        public async System.Threading.Tasks.Task<CMProjectDefinitionTask> GetProjectDefinitionAsync(string organisationId, string taskId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMProjectDefinitionTask> localVarResponse = await GetProjectDefinitionWithHttpInfoAsync(organisationId, taskId, sessionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get Project Definition Get the project definition of the project for the given task id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMProjectDefinitionTask)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMProjectDefinitionTask>> GetProjectDefinitionWithHttpInfoAsync(string organisationId, string taskId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DataprojectApi->GetProjectDefinition");
            }

            // verify the required parameter 'taskId' is set
            if (taskId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'taskId' when calling DataprojectApi->GetProjectDefinition");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->GetProjectDefinition");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("taskId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "DataprojectApi.GetProjectDefinition";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CMProjectDefinitionTask>("/api/dataproject/projectdefinition/{organisationId}/{taskId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectDefinition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get Project Definition Get the project review data of the project for the given project id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="projectId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMProjectReview</returns>
        public CMProjectReview GetProjectReview(string organisationId, string projectId, string sessionId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMProjectReview> localVarResponse = GetProjectReviewWithHttpInfo(organisationId, projectId, sessionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get Project Definition Get the project review data of the project for the given project id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="projectId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMProjectReview</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMProjectReview> GetProjectReviewWithHttpInfo(string organisationId, string projectId, string sessionId, int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DataprojectApi->GetProjectReview");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'projectId' when calling DataprojectApi->GetProjectReview");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->GetProjectReview");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("projectId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "DataprojectApi.GetProjectReview";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CMProjectReview>("/api/dataproject/projectreview/{organisationId}/{projectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectReview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get Project Definition Get the project review data of the project for the given project id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="projectId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMProjectReview</returns>
        public async System.Threading.Tasks.Task<CMProjectReview> GetProjectReviewAsync(string organisationId, string projectId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMProjectReview> localVarResponse = await GetProjectReviewWithHttpInfoAsync(organisationId, projectId, sessionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get Project Definition Get the project review data of the project for the given project id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="projectId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMProjectReview)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMProjectReview>> GetProjectReviewWithHttpInfoAsync(string organisationId, string projectId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DataprojectApi->GetProjectReview");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'projectId' when calling DataprojectApi->GetProjectReview");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->GetProjectReview");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("projectId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "DataprojectApi.GetProjectReview";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CMProjectReview>("/api/dataproject/projectreview/{organisationId}/{projectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectReview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get project slice Get the project project slice for the given task id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMProjectSliceTask&gt;</returns>
        public List<CMProjectSliceTask> GetProjectSlice(string organisationId, string taskId, string sessionId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMProjectSliceTask>> localVarResponse = GetProjectSliceWithHttpInfo(organisationId, taskId, sessionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get project slice Get the project project slice for the given task id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMProjectSliceTask&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<CMProjectSliceTask>> GetProjectSliceWithHttpInfo(string organisationId, string taskId, string sessionId, int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DataprojectApi->GetProjectSlice");
            }

            // verify the required parameter 'taskId' is set
            if (taskId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'taskId' when calling DataprojectApi->GetProjectSlice");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->GetProjectSlice");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("taskId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "DataprojectApi.GetProjectSlice";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CMProjectSliceTask>>("/api/dataproject/projectslice/{organisationId}/{taskId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectSlice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get project slice Get the project project slice for the given task id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMProjectSliceTask&gt;</returns>
        public async System.Threading.Tasks.Task<List<CMProjectSliceTask>> GetProjectSliceAsync(string organisationId, string taskId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMProjectSliceTask>> localVarResponse = await GetProjectSliceWithHttpInfoAsync(organisationId, taskId, sessionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get project slice Get the project project slice for the given task id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMProjectSliceTask&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<CMProjectSliceTask>>> GetProjectSliceWithHttpInfoAsync(string organisationId, string taskId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DataprojectApi->GetProjectSlice");
            }

            // verify the required parameter 'taskId' is set
            if (taskId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'taskId' when calling DataprojectApi->GetProjectSlice");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->GetProjectSlice");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("taskId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "DataprojectApi.GetProjectSlice";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CMProjectSliceTask>>("/api/dataproject/projectslice/{organisationId}/{taskId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectSlice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get Search Result Summary Get the summary information for the search results of a given project by task id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSearchResultSummaryTask</returns>
        public CMSearchResultSummaryTask GetSearchResultSummary(string organisationId, string taskId, string sessionId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMSearchResultSummaryTask> localVarResponse = GetSearchResultSummaryWithHttpInfo(organisationId, taskId, sessionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get Search Result Summary Get the summary information for the search results of a given project by task id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSearchResultSummaryTask</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMSearchResultSummaryTask> GetSearchResultSummaryWithHttpInfo(string organisationId, string taskId, string sessionId, int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DataprojectApi->GetSearchResultSummary");
            }

            // verify the required parameter 'taskId' is set
            if (taskId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'taskId' when calling DataprojectApi->GetSearchResultSummary");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->GetSearchResultSummary");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("taskId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "DataprojectApi.GetSearchResultSummary";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CMSearchResultSummaryTask>("/api/dataproject/searchresult/{organisationId}/{taskId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSearchResultSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get Search Result Summary Get the summary information for the search results of a given project by task id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSearchResultSummaryTask</returns>
        public async System.Threading.Tasks.Task<CMSearchResultSummaryTask> GetSearchResultSummaryAsync(string organisationId, string taskId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMSearchResultSummaryTask> localVarResponse = await GetSearchResultSummaryWithHttpInfoAsync(organisationId, taskId, sessionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get Search Result Summary Get the summary information for the search results of a given project by task id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="taskId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSearchResultSummaryTask)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMSearchResultSummaryTask>> GetSearchResultSummaryWithHttpInfoAsync(string organisationId, string taskId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DataprojectApi->GetSearchResultSummary");
            }

            // verify the required parameter 'taskId' is set
            if (taskId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'taskId' when calling DataprojectApi->GetSearchResultSummary");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->GetSearchResultSummary");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("taskId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "DataprojectApi.GetSearchResultSummary";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CMSearchResultSummaryTask>("/api/dataproject/searchresult/{organisationId}/{taskId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSearchResultSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get Search Result Summary Get the summary information for the search results of a given project by task id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="projectId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSearchResultSummary</returns>
        public CMSearchResultSummary GetSearchResultSummaryForReview(string organisationId, string projectId, string sessionId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMSearchResultSummary> localVarResponse = GetSearchResultSummaryForReviewWithHttpInfo(organisationId, projectId, sessionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get Search Result Summary Get the summary information for the search results of a given project by task id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="projectId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSearchResultSummary</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMSearchResultSummary> GetSearchResultSummaryForReviewWithHttpInfo(string organisationId, string projectId, string sessionId, int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DataprojectApi->GetSearchResultSummaryForReview");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'projectId' when calling DataprojectApi->GetSearchResultSummaryForReview");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->GetSearchResultSummaryForReview");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("projectId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "DataprojectApi.GetSearchResultSummaryForReview";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CMSearchResultSummary>("/api/dataproject/searchresultreview/{organisationId}/{projectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSearchResultSummaryForReview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get Search Result Summary Get the summary information for the search results of a given project by task id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="projectId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSearchResultSummary</returns>
        public async System.Threading.Tasks.Task<CMSearchResultSummary> GetSearchResultSummaryForReviewAsync(string organisationId, string projectId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMSearchResultSummary> localVarResponse = await GetSearchResultSummaryForReviewWithHttpInfoAsync(organisationId, projectId, sessionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get Search Result Summary Get the summary information for the search results of a given project by task id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="projectId">the id of the task</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSearchResultSummary)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMSearchResultSummary>> GetSearchResultSummaryForReviewWithHttpInfoAsync(string organisationId, string projectId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DataprojectApi->GetSearchResultSummaryForReview");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'projectId' when calling DataprojectApi->GetSearchResultSummaryForReview");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->GetSearchResultSummaryForReview");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("projectId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "DataprojectApi.GetSearchResultSummaryForReview";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CMSearchResultSummary>("/api/dataproject/searchresultreview/{organisationId}/{projectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSearchResultSummaryForReview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Document list for given slice and filters Returns paged list of documents for the passed in slice and filters as well as totals
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMNextDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSlicedDocumentListAndTotals</returns>
        public CMSlicedDocumentListAndTotals NextDocument(string sessionId, CMNextDocument cMNextDocument, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMSlicedDocumentListAndTotals> localVarResponse = NextDocumentWithHttpInfo(sessionId, cMNextDocument);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Document list for given slice and filters Returns paged list of documents for the passed in slice and filters as well as totals
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMNextDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSlicedDocumentListAndTotals</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMSlicedDocumentListAndTotals> NextDocumentWithHttpInfo(string sessionId, CMNextDocument cMNextDocument, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->NextDocument");
            }

            // verify the required parameter 'cMNextDocument' is set
            if (cMNextDocument == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMNextDocument' when calling DataprojectApi->NextDocument");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMNextDocument;

            localVarRequestOptions.Operation = "DataprojectApi.NextDocument";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CMSlicedDocumentListAndTotals>("/api/dataproject/nextdocument", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NextDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Document list for given slice and filters Returns paged list of documents for the passed in slice and filters as well as totals
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMNextDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSlicedDocumentListAndTotals</returns>
        public async System.Threading.Tasks.Task<CMSlicedDocumentListAndTotals> NextDocumentAsync(string sessionId, CMNextDocument cMNextDocument, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMSlicedDocumentListAndTotals> localVarResponse = await NextDocumentWithHttpInfoAsync(sessionId, cMNextDocument, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Document list for given slice and filters Returns paged list of documents for the passed in slice and filters as well as totals
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMNextDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSlicedDocumentListAndTotals)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMSlicedDocumentListAndTotals>> NextDocumentWithHttpInfoAsync(string sessionId, CMNextDocument cMNextDocument, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->NextDocument");
            }

            // verify the required parameter 'cMNextDocument' is set
            if (cMNextDocument == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMNextDocument' when calling DataprojectApi->NextDocument");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMNextDocument;

            localVarRequestOptions.Operation = "DataprojectApi.NextDocument";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CMSlicedDocumentListAndTotals>("/api/dataproject/nextdocument", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NextDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Binary Get the original for a document if available by url (latest version)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">a base64 encoded url</param>
        /// <param name="sessionId">a valid SimSage Session id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object PdfBinary(string organisationId, string kbId, string url, string? sessionId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = PdfBinaryWithHttpInfo(organisationId, kbId, url, sessionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Binary Get the original for a document if available by url (latest version)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">a base64 encoded url</param>
        /// <param name="sessionId">a valid SimSage Session id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> PdfBinaryWithHttpInfo(string organisationId, string kbId, string url, string? sessionId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DataprojectApi->PdfBinary");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DataprojectApi->PdfBinary");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DataprojectApi->PdfBinary");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            if (sessionId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            }

            localVarRequestOptions.Operation = "DataprojectApi.PdfBinary";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/dataproject/pdf/latest/{organisationId}/{kbId}/{url}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PdfBinary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Binary Get the original for a document if available by url (latest version)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">a base64 encoded url</param>
        /// <param name="sessionId">a valid SimSage Session id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PdfBinaryAsync(string organisationId, string kbId, string url, string? sessionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await PdfBinaryWithHttpInfoAsync(organisationId, kbId, url, sessionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Binary Get the original for a document if available by url (latest version)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">a base64 encoded url</param>
        /// <param name="sessionId">a valid SimSage Session id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> PdfBinaryWithHttpInfoAsync(string organisationId, string kbId, string url, string? sessionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DataprojectApi->PdfBinary");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DataprojectApi->PdfBinary");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DataprojectApi->PdfBinary");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            if (sessionId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            }

            localVarRequestOptions.Operation = "DataprojectApi.PdfBinary";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/dataproject/pdf/latest/{organisationId}/{kbId}/{url}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PdfBinary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get Project Types Get the list of available project types
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMProjectInfo&gt;</returns>
        public List<CMProjectInfo> ProjectTypes(string organisationId, string sessionId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMProjectInfo>> localVarResponse = ProjectTypesWithHttpInfo(organisationId, sessionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get Project Types Get the list of available project types
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMProjectInfo&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<CMProjectInfo>> ProjectTypesWithHttpInfo(string organisationId, string sessionId, int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DataprojectApi->ProjectTypes");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->ProjectTypes");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "DataprojectApi.ProjectTypes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CMProjectInfo>>("/api/dataproject/projects/{organisationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProjectTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get Project Types Get the list of available project types
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMProjectInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<CMProjectInfo>> ProjectTypesAsync(string organisationId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMProjectInfo>> localVarResponse = await ProjectTypesWithHttpInfoAsync(organisationId, sessionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get Project Types Get the list of available project types
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMProjectInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<CMProjectInfo>>> ProjectTypesWithHttpInfoAsync(string organisationId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DataprojectApi->ProjectTypes");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->ProjectTypes");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "DataprojectApi.ProjectTypes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CMProjectInfo>>("/api/dataproject/projects/{organisationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProjectTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMReassignSliceDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ReassignSliceDocument(string sessionId, CMReassignSliceDocument cMReassignSliceDocument, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = ReassignSliceDocumentWithHttpInfo(sessionId, cMReassignSliceDocument);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMReassignSliceDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ReassignSliceDocumentWithHttpInfo(string sessionId, CMReassignSliceDocument cMReassignSliceDocument, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->ReassignSliceDocument");
            }

            // verify the required parameter 'cMReassignSliceDocument' is set
            if (cMReassignSliceDocument == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMReassignSliceDocument' when calling DataprojectApi->ReassignSliceDocument");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMReassignSliceDocument;

            localVarRequestOptions.Operation = "DataprojectApi.ReassignSliceDocument";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/dataproject/reassignslicedoc", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReassignSliceDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMReassignSliceDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ReassignSliceDocumentAsync(string sessionId, CMReassignSliceDocument cMReassignSliceDocument, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await ReassignSliceDocumentWithHttpInfoAsync(sessionId, cMReassignSliceDocument, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMReassignSliceDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ReassignSliceDocumentWithHttpInfoAsync(string sessionId, CMReassignSliceDocument cMReassignSliceDocument, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->ReassignSliceDocument");
            }

            // verify the required parameter 'cMReassignSliceDocument' is set
            if (cMReassignSliceDocument == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMReassignSliceDocument' when calling DataprojectApi->ReassignSliceDocument");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMReassignSliceDocument;

            localVarRequestOptions.Operation = "DataprojectApi.ReassignSliceDocument";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/dataproject/reassignslicedoc", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReassignSliceDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Redacted Document Retrieves the redacted document binary
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMRedactionDetails"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReturnedDocument</returns>
        public ReturnedDocument RedactedDocument(string sessionId, CMRedactionDetails cMRedactionDetails, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ReturnedDocument> localVarResponse = RedactedDocumentWithHttpInfo(sessionId, cMRedactionDetails);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Redacted Document Retrieves the redacted document binary
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMRedactionDetails"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReturnedDocument</returns>
        public Org.OpenAPITools.Client.ApiResponse<ReturnedDocument> RedactedDocumentWithHttpInfo(string sessionId, CMRedactionDetails cMRedactionDetails, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->RedactedDocument");
            }

            // verify the required parameter 'cMRedactionDetails' is set
            if (cMRedactionDetails == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMRedactionDetails' when calling DataprojectApi->RedactedDocument");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMRedactionDetails;

            localVarRequestOptions.Operation = "DataprojectApi.RedactedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ReturnedDocument>("/api/dataproject/redacteddocument", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RedactedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Redacted Document Retrieves the redacted document binary
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMRedactionDetails"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReturnedDocument</returns>
        public async System.Threading.Tasks.Task<ReturnedDocument> RedactedDocumentAsync(string sessionId, CMRedactionDetails cMRedactionDetails, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ReturnedDocument> localVarResponse = await RedactedDocumentWithHttpInfoAsync(sessionId, cMRedactionDetails, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Redacted Document Retrieves the redacted document binary
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMRedactionDetails"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReturnedDocument)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ReturnedDocument>> RedactedDocumentWithHttpInfoAsync(string sessionId, CMRedactionDetails cMRedactionDetails, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->RedactedDocument");
            }

            // verify the required parameter 'cMRedactionDetails' is set
            if (cMRedactionDetails == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMRedactionDetails' when calling DataprojectApi->RedactedDocument");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMRedactionDetails;

            localVarRequestOptions.Operation = "DataprojectApi.RedactedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ReturnedDocument>("/api/dataproject/redacteddocument", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RedactedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMRemoveSliceDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object RemoveSliceDocument(string sessionId, CMRemoveSliceDocument cMRemoveSliceDocument, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = RemoveSliceDocumentWithHttpInfo(sessionId, cMRemoveSliceDocument);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMRemoveSliceDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RemoveSliceDocumentWithHttpInfo(string sessionId, CMRemoveSliceDocument cMRemoveSliceDocument, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->RemoveSliceDocument");
            }

            // verify the required parameter 'cMRemoveSliceDocument' is set
            if (cMRemoveSliceDocument == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMRemoveSliceDocument' when calling DataprojectApi->RemoveSliceDocument");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMRemoveSliceDocument;

            localVarRequestOptions.Operation = "DataprojectApi.RemoveSliceDocument";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/dataproject/removeslicedoc", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveSliceDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMRemoveSliceDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RemoveSliceDocumentAsync(string sessionId, CMRemoveSliceDocument cMRemoveSliceDocument, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await RemoveSliceDocumentWithHttpInfoAsync(sessionId, cMRemoveSliceDocument, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMRemoveSliceDocument"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RemoveSliceDocumentWithHttpInfoAsync(string sessionId, CMRemoveSliceDocument cMRemoveSliceDocument, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->RemoveSliceDocument");
            }

            // verify the required parameter 'cMRemoveSliceDocument' is set
            if (cMRemoveSliceDocument == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMRemoveSliceDocument' when calling DataprojectApi->RemoveSliceDocument");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMRemoveSliceDocument;

            localVarRequestOptions.Operation = "DataprojectApi.RemoveSliceDocument";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/dataproject/removeslicedoc", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveSliceDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset Evolve Application Fully resets Evolve to an empty system
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">a valid SimSage Organisation id.</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string ResetEvolve(string organisationId, string sessionId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = ResetEvolveWithHttpInfo(organisationId, sessionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reset Evolve Application Fully resets Evolve to an empty system
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">a valid SimSage Organisation id.</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Org.OpenAPITools.Client.ApiResponse<string> ResetEvolveWithHttpInfo(string organisationId, string sessionId, int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DataprojectApi->ResetEvolve");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->ResetEvolve");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("organisation-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "DataprojectApi.ResetEvolve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/api/dataproject/reset/{organisationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetEvolve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset Evolve Application Fully resets Evolve to an empty system
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">a valid SimSage Organisation id.</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ResetEvolveAsync(string organisationId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = await ResetEvolveWithHttpInfoAsync(organisationId, sessionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reset Evolve Application Fully resets Evolve to an empty system
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">a valid SimSage Organisation id.</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<string>> ResetEvolveWithHttpInfoAsync(string organisationId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DataprojectApi->ResetEvolve");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->ResetEvolve");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("organisation-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "DataprojectApi.ResetEvolve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/api/dataproject/reset/{organisationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetEvolve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Inserts/Updates a project definition Inserts/Updates the details for a project definition
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMProjectDefinition"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMCreatedProject</returns>
        public CMCreatedProject SaveProjectDefinition(string sessionId, CMProjectDefinition cMProjectDefinition, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMCreatedProject> localVarResponse = SaveProjectDefinitionWithHttpInfo(sessionId, cMProjectDefinition);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Inserts/Updates a project definition Inserts/Updates the details for a project definition
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMProjectDefinition"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMCreatedProject</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMCreatedProject> SaveProjectDefinitionWithHttpInfo(string sessionId, CMProjectDefinition cMProjectDefinition, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->SaveProjectDefinition");
            }

            // verify the required parameter 'cMProjectDefinition' is set
            if (cMProjectDefinition == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMProjectDefinition' when calling DataprojectApi->SaveProjectDefinition");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMProjectDefinition;

            localVarRequestOptions.Operation = "DataprojectApi.SaveProjectDefinition";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CMCreatedProject>("/api/dataproject/saveprojectdefinition", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveProjectDefinition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Inserts/Updates a project definition Inserts/Updates the details for a project definition
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMProjectDefinition"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMCreatedProject</returns>
        public async System.Threading.Tasks.Task<CMCreatedProject> SaveProjectDefinitionAsync(string sessionId, CMProjectDefinition cMProjectDefinition, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMCreatedProject> localVarResponse = await SaveProjectDefinitionWithHttpInfoAsync(sessionId, cMProjectDefinition, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Inserts/Updates a project definition Inserts/Updates the details for a project definition
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMProjectDefinition"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMCreatedProject)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMCreatedProject>> SaveProjectDefinitionWithHttpInfoAsync(string sessionId, CMProjectDefinition cMProjectDefinition, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->SaveProjectDefinition");
            }

            // verify the required parameter 'cMProjectDefinition' is set
            if (cMProjectDefinition == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMProjectDefinition' when calling DataprojectApi->SaveProjectDefinition");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMProjectDefinition;

            localVarRequestOptions.Operation = "DataprojectApi.SaveProjectDefinition";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CMCreatedProject>("/api/dataproject/saveprojectdefinition", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveProjectDefinition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Slice configuration Saves/updates the slices configured for a running project
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSetSliceDefinitions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string SetSliceConfig(string sessionId, CMSetSliceDefinitions cMSetSliceDefinitions, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = SetSliceConfigWithHttpInfo(sessionId, cMSetSliceDefinitions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Slice configuration Saves/updates the slices configured for a running project
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSetSliceDefinitions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Org.OpenAPITools.Client.ApiResponse<string> SetSliceConfigWithHttpInfo(string sessionId, CMSetSliceDefinitions cMSetSliceDefinitions, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->SetSliceConfig");
            }

            // verify the required parameter 'cMSetSliceDefinitions' is set
            if (cMSetSliceDefinitions == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMSetSliceDefinitions' when calling DataprojectApi->SetSliceConfig");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMSetSliceDefinitions;

            localVarRequestOptions.Operation = "DataprojectApi.SetSliceConfig";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/api/dataproject/setsliceconfig", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetSliceConfig", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Slice configuration Saves/updates the slices configured for a running project
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSetSliceDefinitions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SetSliceConfigAsync(string sessionId, CMSetSliceDefinitions cMSetSliceDefinitions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = await SetSliceConfigWithHttpInfoAsync(sessionId, cMSetSliceDefinitions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Slice configuration Saves/updates the slices configured for a running project
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSetSliceDefinitions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<string>> SetSliceConfigWithHttpInfoAsync(string sessionId, CMSetSliceDefinitions cMSetSliceDefinitions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->SetSliceConfig");
            }

            // verify the required parameter 'cMSetSliceDefinitions' is set
            if (cMSetSliceDefinitions == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMSetSliceDefinitions' when calling DataprojectApi->SetSliceConfig");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMSetSliceDefinitions;

            localVarRequestOptions.Operation = "DataprojectApi.SetSliceConfig";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/api/dataproject/setsliceconfig", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetSliceConfig", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Document list for given slice and filters Returns paged list of documents for the passed in slice and filters as well as totals
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSlicedDocumentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSlicedDocumentListAndTotals</returns>
        public CMSlicedDocumentListAndTotals SlicedDocuments(string sessionId, CMSlicedDocumentRequest cMSlicedDocumentRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMSlicedDocumentListAndTotals> localVarResponse = SlicedDocumentsWithHttpInfo(sessionId, cMSlicedDocumentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Document list for given slice and filters Returns paged list of documents for the passed in slice and filters as well as totals
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSlicedDocumentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSlicedDocumentListAndTotals</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMSlicedDocumentListAndTotals> SlicedDocumentsWithHttpInfo(string sessionId, CMSlicedDocumentRequest cMSlicedDocumentRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->SlicedDocuments");
            }

            // verify the required parameter 'cMSlicedDocumentRequest' is set
            if (cMSlicedDocumentRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMSlicedDocumentRequest' when calling DataprojectApi->SlicedDocuments");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMSlicedDocumentRequest;

            localVarRequestOptions.Operation = "DataprojectApi.SlicedDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CMSlicedDocumentListAndTotals>("/api/dataproject/sliceddocuments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SlicedDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Document list for given slice and filters Returns paged list of documents for the passed in slice and filters as well as totals
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSlicedDocumentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSlicedDocumentListAndTotals</returns>
        public async System.Threading.Tasks.Task<CMSlicedDocumentListAndTotals> SlicedDocumentsAsync(string sessionId, CMSlicedDocumentRequest cMSlicedDocumentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMSlicedDocumentListAndTotals> localVarResponse = await SlicedDocumentsWithHttpInfoAsync(sessionId, cMSlicedDocumentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Document list for given slice and filters Returns paged list of documents for the passed in slice and filters as well as totals
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSlicedDocumentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSlicedDocumentListAndTotals)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMSlicedDocumentListAndTotals>> SlicedDocumentsWithHttpInfoAsync(string sessionId, CMSlicedDocumentRequest cMSlicedDocumentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->SlicedDocuments");
            }

            // verify the required parameter 'cMSlicedDocumentRequest' is set
            if (cMSlicedDocumentRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMSlicedDocumentRequest' when calling DataprojectApi->SlicedDocuments");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMSlicedDocumentRequest;

            localVarRequestOptions.Operation = "DataprojectApi.SlicedDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CMSlicedDocumentListAndTotals>("/api/dataproject/sliceddocuments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SlicedDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMStartProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object StartProject(string sessionId, CMStartProject cMStartProject, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = StartProjectWithHttpInfo(sessionId, cMStartProject);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMStartProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> StartProjectWithHttpInfo(string sessionId, CMStartProject cMStartProject, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->StartProject");
            }

            // verify the required parameter 'cMStartProject' is set
            if (cMStartProject == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMStartProject' when calling DataprojectApi->StartProject");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMStartProject;

            localVarRequestOptions.Operation = "DataprojectApi.StartProject";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/dataproject/startproject", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMStartProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> StartProjectAsync(string sessionId, CMStartProject cMStartProject, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await StartProjectWithHttpInfoAsync(sessionId, cMStartProject, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMStartProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> StartProjectWithHttpInfoAsync(string sessionId, CMStartProject cMStartProject, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->StartProject");
            }

            // verify the required parameter 'cMStartProject' is set
            if (cMStartProject == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMStartProject' when calling DataprojectApi->StartProject");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMStartProject;

            localVarRequestOptions.Operation = "DataprojectApi.StartProject";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/dataproject/startproject", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update document status Updates the status applied to a slice document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMUpdateDocumentStatus"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string UpdateDocumentStatus(string sessionId, CMUpdateDocumentStatus cMUpdateDocumentStatus, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = UpdateDocumentStatusWithHttpInfo(sessionId, cMUpdateDocumentStatus);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update document status Updates the status applied to a slice document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMUpdateDocumentStatus"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Org.OpenAPITools.Client.ApiResponse<string> UpdateDocumentStatusWithHttpInfo(string sessionId, CMUpdateDocumentStatus cMUpdateDocumentStatus, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->UpdateDocumentStatus");
            }

            // verify the required parameter 'cMUpdateDocumentStatus' is set
            if (cMUpdateDocumentStatus == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMUpdateDocumentStatus' when calling DataprojectApi->UpdateDocumentStatus");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMUpdateDocumentStatus;

            localVarRequestOptions.Operation = "DataprojectApi.UpdateDocumentStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/api/dataproject/updatedocstatus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDocumentStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update document status Updates the status applied to a slice document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMUpdateDocumentStatus"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> UpdateDocumentStatusAsync(string sessionId, CMUpdateDocumentStatus cMUpdateDocumentStatus, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = await UpdateDocumentStatusWithHttpInfoAsync(sessionId, cMUpdateDocumentStatus, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update document status Updates the status applied to a slice document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMUpdateDocumentStatus"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<string>> UpdateDocumentStatusWithHttpInfoAsync(string sessionId, CMUpdateDocumentStatus cMUpdateDocumentStatus, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->UpdateDocumentStatus");
            }

            // verify the required parameter 'cMUpdateDocumentStatus' is set
            if (cMUpdateDocumentStatus == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMUpdateDocumentStatus' when calling DataprojectApi->UpdateDocumentStatus");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMUpdateDocumentStatus;

            localVarRequestOptions.Operation = "DataprojectApi.UpdateDocumentStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/api/dataproject/updatedocstatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDocumentStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update document redactions Updates the redactions applied to a document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMUpdateRedactions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string UpdateRedactions(string sessionId, CMUpdateRedactions cMUpdateRedactions, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = UpdateRedactionsWithHttpInfo(sessionId, cMUpdateRedactions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update document redactions Updates the redactions applied to a document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMUpdateRedactions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Org.OpenAPITools.Client.ApiResponse<string> UpdateRedactionsWithHttpInfo(string sessionId, CMUpdateRedactions cMUpdateRedactions, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->UpdateRedactions");
            }

            // verify the required parameter 'cMUpdateRedactions' is set
            if (cMUpdateRedactions == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMUpdateRedactions' when calling DataprojectApi->UpdateRedactions");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMUpdateRedactions;

            localVarRequestOptions.Operation = "DataprojectApi.UpdateRedactions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/api/dataproject/updateredactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRedactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update document redactions Updates the redactions applied to a document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMUpdateRedactions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> UpdateRedactionsAsync(string sessionId, CMUpdateRedactions cMUpdateRedactions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = await UpdateRedactionsWithHttpInfoAsync(sessionId, cMUpdateRedactions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update document redactions Updates the redactions applied to a document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMUpdateRedactions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<string>> UpdateRedactionsWithHttpInfoAsync(string sessionId, CMUpdateRedactions cMUpdateRedactions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DataprojectApi->UpdateRedactions");
            }

            // verify the required parameter 'cMUpdateRedactions' is set
            if (cMUpdateRedactions == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMUpdateRedactions' when calling DataprojectApi->UpdateRedactions");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMUpdateRedactions;

            localVarRequestOptions.Operation = "DataprojectApi.UpdateRedactions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/api/dataproject/updateredactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRedactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
