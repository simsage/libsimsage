/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDmsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a new folder
        /// </summary>
        /// <remarks>
        /// Add a new folder to the SimSage DMS.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMAddFolder"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMDocumentFolder</returns>
        CMDocumentFolder AddFolder(string sessionId, CMAddFolder cMAddFolder, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Add a new folder
        /// </summary>
        /// <remarks>
        /// Add a new folder to the SimSage DMS.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMAddFolder"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMDocumentFolder</returns>
        ApiResponse<CMDocumentFolder> AddFolderWithHttpInfo(string sessionId, CMAddFolder cMAddFolder, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Add a new source-folder
        /// </summary>
        /// <remarks>
        /// Add a new top-level folder (source folder) to the SimSage DMS.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMAddSourceFolder"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMDocumentFolder</returns>
        CMDocumentFolder AddSourceFolder(string sessionId, CMAddSourceFolder cMAddSourceFolder, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Add a new source-folder
        /// </summary>
        /// <remarks>
        /// Add a new top-level folder (source folder) to the SimSage DMS.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMAddSourceFolder"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMDocumentFolder</returns>
        ApiResponse<CMDocumentFolder> AddSourceFolderWithHttpInfo(string sessionId, CMAddSourceFolder cMAddSourceFolder, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// delete all Notes
        /// </summary>
        /// <remarks>
        /// delete all notes associated with a document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage DeleteAllNotes(string sessionId, string organisationId, string kbId, string url, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// delete all Notes
        /// </summary>
        /// <remarks>
        /// delete all notes associated with a document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> DeleteAllNotesWithHttpInfo(string sessionId, string organisationId, string kbId, string url, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Delete a Bookmark
        /// </summary>
        /// <remarks>
        /// Delete a user&#39;s bookmark associated with a document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMDocumentBookmark&gt;</returns>
        List<CMDocumentBookmark> DeleteBookmark(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Delete a Bookmark
        /// </summary>
        /// <remarks>
        /// Delete a user&#39;s bookmark associated with a document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMDocumentBookmark&gt;</returns>
        ApiResponse<List<CMDocumentBookmark>> DeleteBookmarkWithHttpInfo(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Delete a document or a folder
        /// </summary>
        /// <remarks>
        /// Mark a document/folder as deleted in the SimSage DMS.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="isFolder">is this a folder or a document?</param>
        /// <param name="sourceId">the source-id of the item being deleted</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="folderId">the folder&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMDocumentFolder</returns>
        CMDocumentFolder DeleteDocumentOrFolder(string sessionId, string organisationId, string kbId, bool isFolder, int sourceId, string url, string folderId, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Delete a document or a folder
        /// </summary>
        /// <remarks>
        /// Mark a document/folder as deleted in the SimSage DMS.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="isFolder">is this a folder or a document?</param>
        /// <param name="sourceId">the source-id of the item being deleted</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="folderId">the folder&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMDocumentFolder</returns>
        ApiResponse<CMDocumentFolder> DeleteDocumentOrFolderWithHttpInfo(string sessionId, string organisationId, string kbId, bool isFolder, int sourceId, string url, string folderId, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Delete a Note
        /// </summary>
        /// <remarks>
        /// Delete a note associated with a document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="noteId">the id of the note to delete</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMDocumentNote&gt;</returns>
        List<CMDocumentNote> DeleteNote(string sessionId, string organisationId, string kbId, string url, int noteId, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Delete a Note
        /// </summary>
        /// <remarks>
        /// Delete a note associated with a document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="noteId">the id of the note to delete</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMDocumentNote&gt;</returns>
        ApiResponse<List<CMDocumentNote>> DeleteNoteWithHttpInfo(string sessionId, string organisationId, string kbId, string url, int noteId, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Remove source-folder
        /// </summary>
        /// <remarks>
        /// Remove an existing top-level folder (source folder) from the SimSage DMS.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the sourceId of the source-folder to remove</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMDocumentFolder</returns>
        CMDocumentFolder DeleteSourceFolder(string sessionId, string organisationId, string kbId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Remove source-folder
        /// </summary>
        /// <remarks>
        /// Remove an existing top-level folder (source folder) from the SimSage DMS.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the sourceId of the source-folder to remove</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMDocumentFolder</returns>
        ApiResponse<CMDocumentFolder> DeleteSourceFolderWithHttpInfo(string sessionId, string organisationId, string kbId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Delete a Subscription
        /// </summary>
        /// <remarks>
        /// Delete a user&#39;s subscription associated with a document, returns an updated subscription set.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSubscriptions</returns>
        CMSubscriptions DeleteSubscription(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Delete a Subscription
        /// </summary>
        /// <remarks>
        /// Delete a user&#39;s subscription associated with a document, returns an updated subscription set.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSubscriptions</returns>
        ApiResponse<CMSubscriptions> DeleteSubscriptionWithHttpInfo(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Delete a Saved Search
        /// </summary>
        /// <remarks>
        /// Delete a user&#39;s saved search
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="text">the base64 encoded search-text value</param>
        /// <param name="top">how many records to return</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMSavedSearch&gt;</returns>
        List<CMSavedSearch> DeleteUserSearch(string sessionId, string organisationId, string kbId, string userId, string text, int top, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Delete a Saved Search
        /// </summary>
        /// <remarks>
        /// Delete a user&#39;s saved search
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="text">the base64 encoded search-text value</param>
        /// <param name="top">how many records to return</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMSavedSearch&gt;</returns>
        ApiResponse<List<CMSavedSearch>> DeleteUserSearchWithHttpInfo(string sessionId, string organisationId, string kbId, string userId, string text, int top, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get Document
        /// </summary>
        /// <remarks>
        /// Return a document&#39;s details by url-id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="urlId">the document&#39;s url-id, a unique id identifying a document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMDocument</returns>
        CMDocument Document1(string sessionId, string organisationId, string kbId, int urlId, int operationIndex = 0);

        /// <summary>
        /// Get Document
        /// </summary>
        /// <remarks>
        /// Return a document&#39;s details by url-id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="urlId">the document&#39;s url-id, a unique id identifying a document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMDocument</returns>
        ApiResponse<CMDocument> Document1WithHttpInfo(string sessionId, string organisationId, string kbId, int urlId, int operationIndex = 0);
        /// <summary>
        /// Binary
        /// </summary>
        /// <remarks>
        /// Get the original for a document if available by url (latest version)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">a base64 encoded url</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>byte[]</returns>
        byte[] DocumentBinary(string sessionId, string organisationId, string kbId, string url, int operationIndex = 0);

        /// <summary>
        /// Binary
        /// </summary>
        /// <remarks>
        /// Get the original for a document if available by url (latest version)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">a base64 encoded url</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DocumentBinaryWithHttpInfo(string sessionId, string organisationId, string kbId, string url, int operationIndex = 0);
        /// <summary>
        /// Get Binary Document
        /// </summary>
        /// <remarks>
        /// Return a document&#39;s binary by url and version
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the document&#39;s url, base64 encoded.  A unique id identifying a document.</param>
        /// <param name="varVersion">the document&#39;s binary version.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>byte[]</returns>
        byte[] DocumentVersion(string sessionId, string organisationId, string kbId, string url, int varVersion, int operationIndex = 0);

        /// <summary>
        /// Get Binary Document
        /// </summary>
        /// <remarks>
        /// Return a document&#39;s binary by url and version
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the document&#39;s url, base64 encoded.  A unique id identifying a document.</param>
        /// <param name="varVersion">the document&#39;s binary version.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DocumentVersionWithHttpInfo(string sessionId, string organisationId, string kbId, string url, int varVersion, int operationIndex = 0);
        /// <summary>
        /// Filter Folders
        /// </summary>
        /// <remarks>
        /// Filter a set of folders using Search
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="text">the text to use to filter (base64 encoded)</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMDocumentFolder</returns>
        CMDocumentFolder FilterFolders(string sessionId, string organisationId, string kbId, string text, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Filter Folders
        /// </summary>
        /// <remarks>
        /// Filter a set of folders using Search
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="text">the text to use to filter (base64 encoded)</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMDocumentFolder</returns>
        ApiResponse<CMDocumentFolder> FilterFoldersWithHttpInfo(string sessionId, string organisationId, string kbId, string text, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Force-release a lock
        /// </summary>
        /// <remarks>
        /// A system administrator or manager can force-unlock a document.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage ForceReleaseLock(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Force-release a lock
        /// </summary>
        /// <remarks>
        /// A system administrator or manager can force-unlock a document.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> ForceReleaseLockWithHttpInfo(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get Bookmarks
        /// </summary>
        /// <remarks>
        /// Return a list of bookmarks for a given user
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMDocumentBookmark&gt;</returns>
        List<CMDocumentBookmark> GetBookmarkList(string organisationId, string kbId, string userId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get Bookmarks
        /// </summary>
        /// <remarks>
        /// Return a list of bookmarks for a given user
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMDocumentBookmark&gt;</returns>
        ApiResponse<List<CMDocumentBookmark>> GetBookmarkListWithHttpInfo(string organisationId, string kbId, string userId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Deleted records with optional filter
        /// </summary>
        /// <remarks>
        /// Return a list of deleted document records for an administrator (all records) with an optional filter set.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="filter">an optional text filter for URLs</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;DocumentDeleted&gt;</returns>
        List<DocumentDeleted> GetDeletedDocuments(string sessionId, string organisationId, string kbId, string filter, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Deleted records with optional filter
        /// </summary>
        /// <remarks>
        /// Return a list of deleted document records for an administrator (all records) with an optional filter set.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="filter">an optional text filter for URLs</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;DocumentDeleted&gt;</returns>
        ApiResponse<List<DocumentDeleted>> GetDeletedDocumentsWithHttpInfo(string sessionId, string organisationId, string kbId, string filter, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Audit records for a document for a month
        /// </summary>
        /// <remarks>
        /// Return document audit records for a user (filtered) or administrator (all records) for a given document / month
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year for the notifications</param>
        /// <param name="month">the month for the notifications</param>
        /// <param name="url">the document url (base64 encoded) to get audit records for</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMDocumentAudit&gt;</returns>
        List<CMDocumentAudit> GetDocumentAudit(string sessionId, string organisationId, string kbId, int year, int month, string url, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Audit records for a document for a month
        /// </summary>
        /// <remarks>
        /// Return document audit records for a user (filtered) or administrator (all records) for a given document / month
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year for the notifications</param>
        /// <param name="month">the month for the notifications</param>
        /// <param name="url">the document url (base64 encoded) to get audit records for</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMDocumentAudit&gt;</returns>
        ApiResponse<List<CMDocumentAudit>> GetDocumentAuditWithHttpInfo(string sessionId, string organisationId, string kbId, int year, int month, string url, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get Folder Content
        /// </summary>
        /// <remarks>
        /// Return a folder&#39;s content
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the owner source&#39;s id</param>
        /// <param name="folderId">the folder&#39;s id</param>
        /// <param name="prevUrl">pagination, the previous last URL for the page-set (&#39;null&#39; is first page)</param>
        /// <param name="pageSize">page-size for a paginated set</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMDocumentFolder</returns>
        CMDocumentFolder GetFolder(string sessionId, string organisationId, string kbId, int sourceId, string folderId, string prevUrl, int pageSize, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get Folder Content
        /// </summary>
        /// <remarks>
        /// Return a folder&#39;s content
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the owner source&#39;s id</param>
        /// <param name="folderId">the folder&#39;s id</param>
        /// <param name="prevUrl">pagination, the previous last URL for the page-set (&#39;null&#39; is first page)</param>
        /// <param name="pageSize">page-size for a paginated set</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMDocumentFolder</returns>
        ApiResponse<CMDocumentFolder> GetFolderWithHttpInfo(string sessionId, string organisationId, string kbId, int sourceId, string folderId, string prevUrl, int pageSize, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Audit records for a month
        /// </summary>
        /// <remarks>
        /// Return document audit records for a user (filtered) or administrator (all records) for a given month
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year for the notifications</param>
        /// <param name="month">the month for the notifications</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMDocumentAudit&gt;</returns>
        List<CMDocumentAudit> GetFullAudit(string sessionId, string organisationId, string kbId, int year, int month, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Audit records for a month
        /// </summary>
        /// <remarks>
        /// Return document audit records for a user (filtered) or administrator (all records) for a given month
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year for the notifications</param>
        /// <param name="month">the month for the notifications</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMDocumentAudit&gt;</returns>
        ApiResponse<List<CMDocumentAudit>> GetFullAuditWithHttpInfo(string sessionId, string organisationId, string kbId, int year, int month, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get locked documents for user
        /// </summary>
        /// <remarks>
        /// Return a list of locked documents for a given user
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMDocument&gt;</returns>
        List<CMDocument> GetLockedList(string organisationId, string kbId, string userId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get locked documents for user
        /// </summary>
        /// <remarks>
        /// Return a list of locked documents for a given user
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMDocument&gt;</returns>
        ApiResponse<List<CMDocument>> GetLockedListWithHttpInfo(string organisationId, string kbId, string userId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get Notes
        /// </summary>
        /// <remarks>
        /// Return a list of notes for a given url
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMDocumentNote&gt;</returns>
        List<CMDocumentNote> GetNoteList(string sessionId, string organisationId, string kbId, string url, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get Notes
        /// </summary>
        /// <remarks>
        /// Return a list of notes for a given url
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMDocumentNote&gt;</returns>
        ApiResponse<List<CMDocumentNote>> GetNoteListWithHttpInfo(string sessionId, string organisationId, string kbId, string url, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// User&#39;s saved searches
        /// </summary>
        /// <remarks>
        /// Return a user&#39;s saved searches
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="top">how many records to return</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMSavedSearch&gt;</returns>
        List<CMSavedSearch> GetSavedSearches(string sessionId, string organisationId, string kbId, string userId, int top, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// User&#39;s saved searches
        /// </summary>
        /// <remarks>
        /// Return a user&#39;s saved searches
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="top">how many records to return</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMSavedSearch&gt;</returns>
        ApiResponse<List<CMSavedSearch>> GetSavedSearchesWithHttpInfo(string sessionId, string organisationId, string kbId, string userId, int top, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get source-folder
        /// </summary>
        /// <remarks>
        /// Return the content of a top-level folder (source folder).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the source-id of the item being deleted</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMDocumentFolder</returns>
        CMDocumentFolder GetSourceFolder(string organisationId, string kbId, int sourceId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get source-folder
        /// </summary>
        /// <remarks>
        /// Return the content of a top-level folder (source folder).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the source-id of the item being deleted</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMDocumentFolder</returns>
        ApiResponse<CMDocumentFolder> GetSourceFolderWithHttpInfo(string organisationId, string kbId, int sourceId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get Subscriptions
        /// </summary>
        /// <remarks>
        /// Return a subscriptions object for a given user
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSubscriptions</returns>
        CMSubscriptions GetSubscriptionList(string organisationId, string kbId, string userId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get Subscriptions
        /// </summary>
        /// <remarks>
        /// Return a subscriptions object for a given user
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSubscriptions</returns>
        ApiResponse<CMSubscriptions> GetSubscriptionListWithHttpInfo(string organisationId, string kbId, string userId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// User Dashboard
        /// </summary>
        /// <remarks>
        /// Return a the user&#39;s DMS dashboard
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMDUserDashboard</returns>
        CMDUserDashboard GetUserDashboard(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// User Dashboard
        /// </summary>
        /// <remarks>
        /// Return a the user&#39;s DMS dashboard
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMDUserDashboard</returns>
        ApiResponse<CMDUserDashboard> GetUserDashboardWithHttpInfo(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get User Notifications
        /// </summary>
        /// <remarks>
        /// Return all user notifications from the DMS for a given user by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year for the notifications</param>
        /// <param name="month">the month for the notifications</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMUserNotification&gt;</returns>
        List<CMUserNotification> GetUserNotifications(string sessionId, string organisationId, string kbId, int year, int month, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get User Notifications
        /// </summary>
        /// <remarks>
        /// Return all user notifications from the DMS for a given user by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year for the notifications</param>
        /// <param name="month">the month for the notifications</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMUserNotification&gt;</returns>
        ApiResponse<List<CMUserNotification>> GetUserNotificationsWithHttpInfo(string sessionId, string organisationId, string kbId, int year, int month, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Document Lock
        /// </summary>
        /// <remarks>
        /// Lock a document for a user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentLock"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMDocument&gt;</returns>
        List<CMDocument> LockDocument(string sessionId, CMDocumentLock cMDocumentLock, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Document Lock
        /// </summary>
        /// <remarks>
        /// Lock a document for a user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentLock"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMDocument&gt;</returns>
        ApiResponse<List<CMDocument>> LockDocumentWithHttpInfo(string sessionId, CMDocumentLock cMDocumentLock, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Release a lock
        /// </summary>
        /// <remarks>
        /// The originator of a lock releases a locked document.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMDocument&gt;</returns>
        List<CMDocument> ReleaseLock(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Release a lock
        /// </summary>
        /// <remarks>
        /// The originator of a lock releases a locked document.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMDocument&gt;</returns>
        ApiResponse<List<CMDocument>> ReleaseLockWithHttpInfo(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// DMS Client Query
        /// </summary>
        /// <remarks>
        /// a SimSage DMS client asks a question or performs a keyword-search.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMClientQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMClientQueryResult</returns>
        CMClientQueryResult RestfulDMSClientQuery(string sessionId, CMClientQuery cMClientQuery, int operationIndex = 0);

        /// <summary>
        /// DMS Client Query
        /// </summary>
        /// <remarks>
        /// a SimSage DMS client asks a question or performs a keyword-search.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMClientQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMClientQueryResult</returns>
        ApiResponse<CMClientQueryResult> RestfulDMSClientQueryWithHttpInfo(string sessionId, CMClientQuery cMClientQuery, int operationIndex = 0);
        /// <summary>
        /// Save Bookmark
        /// </summary>
        /// <remarks>
        /// Save (create or update) a SimSage Document Bookmark.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentBookmark"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;DocumentBookmark&gt;</returns>
        List<DocumentBookmark> SaveBookmark(string sessionId, CMDocumentBookmark cMDocumentBookmark, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Save Bookmark
        /// </summary>
        /// <remarks>
        /// Save (create or update) a SimSage Document Bookmark.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentBookmark"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;DocumentBookmark&gt;</returns>
        ApiResponse<List<DocumentBookmark>> SaveBookmarkWithHttpInfo(string sessionId, CMDocumentBookmark cMDocumentBookmark, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Save HashTag set for a document
        /// </summary>
        /// <remarks>
        /// Save (create / update / delete) a hashTag set for a document.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentHashTag"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage SaveHashTags(string sessionId, CMDocumentHashTag cMDocumentHashTag, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Save HashTag set for a document
        /// </summary>
        /// <remarks>
        /// Save (create / update / delete) a hashTag set for a document.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentHashTag"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> SaveHashTagsWithHttpInfo(string sessionId, CMDocumentHashTag cMDocumentHashTag, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Save Note
        /// </summary>
        /// <remarks>
        /// Save (create or update) a SimSage Document Note.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentNote"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMDocumentNote&gt;</returns>
        List<CMDocumentNote> SaveNote(string sessionId, CMDocumentNote cMDocumentNote, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Save Note
        /// </summary>
        /// <remarks>
        /// Save (create or update) a SimSage Document Note.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentNote"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMDocumentNote&gt;</returns>
        ApiResponse<List<CMDocumentNote>> SaveNoteWithHttpInfo(string sessionId, CMDocumentNote cMDocumentNote, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Save Search
        /// </summary>
        /// <remarks>
        /// Save a user&#39;s search query.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSavedSearch"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMSavedSearch&gt;</returns>
        List<CMSavedSearch> SaveSearch(string sessionId, CMSavedSearch cMSavedSearch, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Save Search
        /// </summary>
        /// <remarks>
        /// Save a user&#39;s search query.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSavedSearch"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMSavedSearch&gt;</returns>
        ApiResponse<List<CMSavedSearch>> SaveSearchWithHttpInfo(string sessionId, CMSavedSearch cMSavedSearch, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Save Subscription
        /// </summary>
        /// <remarks>
        /// Save (create or update) a SimSage Document subscription.  Returns a subscription object for this user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentSubscription"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSubscriptions</returns>
        CMSubscriptions SaveSubscription(string sessionId, CMDocumentSubscription cMDocumentSubscription, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Save Subscription
        /// </summary>
        /// <remarks>
        /// Save (create or update) a SimSage Document subscription.  Returns a subscription object for this user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentSubscription"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSubscriptions</returns>
        ApiResponse<CMSubscriptions> SaveSubscriptionWithHttpInfo(string sessionId, CMDocumentSubscription cMDocumentSubscription, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// un-delete a record
        /// </summary>
        /// <remarks>
        /// Un-delete a previously deleted document and return a list of deleted document records for an administrator (all records).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the item&#39;s source id</param>
        /// <param name="url">the document&#39;s url, base64 encoded.  A unique id identifying a document.</param>
        /// <param name="filter">an optional text filter for URLs</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;DocumentDeleted&gt;</returns>
        List<DocumentDeleted> UndeleteDocument(string sessionId, string organisationId, string kbId, int sourceId, string url, string filter, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// un-delete a record
        /// </summary>
        /// <remarks>
        /// Un-delete a previously deleted document and return a list of deleted document records for an administrator (all records).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the item&#39;s source id</param>
        /// <param name="url">the document&#39;s url, base64 encoded.  A unique id identifying a document.</param>
        /// <param name="filter">an optional text filter for URLs</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;DocumentDeleted&gt;</returns>
        ApiResponse<List<DocumentDeleted>> UndeleteDocumentWithHttpInfo(string sessionId, string organisationId, string kbId, int sourceId, string url, string filter, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Update an item&#39;s ACLs
        /// </summary>
        /// <remarks>
        /// Update the Access Control List of a SimSage DMS item (source, file, or folder).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMUpdateACLs"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage UpdateACLs(string sessionId, CMUpdateACLs cMUpdateACLs, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Update an item&#39;s ACLs
        /// </summary>
        /// <remarks>
        /// Update the Access Control List of a SimSage DMS item (source, file, or folder).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMUpdateACLs"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> UpdateACLsWithHttpInfo(string sessionId, CMUpdateACLs cMUpdateACLs, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Upload a Document
        /// </summary>
        /// <remarks>
        /// Upload a document into a DMS folder
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the owner source&#39;s id</param>
        /// <param name="folderId">the id of the folder we&#39;re uploading into</param>
        /// <param name="lastModified">lastModified unix-date-time</param>
        /// <param name="file">the file to upload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMDocumentFolder</returns>
        CMDocumentFolder UploadDocument(string sessionId, string organisationId, string kbId, int sourceId, string folderId, string lastModified, System.IO.Stream file, int operationIndex = 0);

        /// <summary>
        /// Upload a Document
        /// </summary>
        /// <remarks>
        /// Upload a document into a DMS folder
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the owner source&#39;s id</param>
        /// <param name="folderId">the id of the folder we&#39;re uploading into</param>
        /// <param name="lastModified">lastModified unix-date-time</param>
        /// <param name="file">the file to upload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMDocumentFolder</returns>
        ApiResponse<CMDocumentFolder> UploadDocumentWithHttpInfo(string sessionId, string organisationId, string kbId, int sourceId, string folderId, string lastModified, System.IO.Stream file, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDmsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a new folder
        /// </summary>
        /// <remarks>
        /// Add a new folder to the SimSage DMS.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMAddFolder"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMDocumentFolder</returns>
        System.Threading.Tasks.Task<CMDocumentFolder> AddFolderAsync(string sessionId, CMAddFolder cMAddFolder, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a new folder
        /// </summary>
        /// <remarks>
        /// Add a new folder to the SimSage DMS.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMAddFolder"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMDocumentFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMDocumentFolder>> AddFolderWithHttpInfoAsync(string sessionId, CMAddFolder cMAddFolder, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a new source-folder
        /// </summary>
        /// <remarks>
        /// Add a new top-level folder (source folder) to the SimSage DMS.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMAddSourceFolder"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMDocumentFolder</returns>
        System.Threading.Tasks.Task<CMDocumentFolder> AddSourceFolderAsync(string sessionId, CMAddSourceFolder cMAddSourceFolder, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a new source-folder
        /// </summary>
        /// <remarks>
        /// Add a new top-level folder (source folder) to the SimSage DMS.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMAddSourceFolder"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMDocumentFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMDocumentFolder>> AddSourceFolderWithHttpInfoAsync(string sessionId, CMAddSourceFolder cMAddSourceFolder, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// delete all Notes
        /// </summary>
        /// <remarks>
        /// delete all notes associated with a document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> DeleteAllNotesAsync(string sessionId, string organisationId, string kbId, string url, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// delete all Notes
        /// </summary>
        /// <remarks>
        /// delete all notes associated with a document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> DeleteAllNotesWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string url, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Bookmark
        /// </summary>
        /// <remarks>
        /// Delete a user&#39;s bookmark associated with a document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMDocumentBookmark&gt;</returns>
        System.Threading.Tasks.Task<List<CMDocumentBookmark>> DeleteBookmarkAsync(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Bookmark
        /// </summary>
        /// <remarks>
        /// Delete a user&#39;s bookmark associated with a document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMDocumentBookmark&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CMDocumentBookmark>>> DeleteBookmarkWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a document or a folder
        /// </summary>
        /// <remarks>
        /// Mark a document/folder as deleted in the SimSage DMS.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="isFolder">is this a folder or a document?</param>
        /// <param name="sourceId">the source-id of the item being deleted</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="folderId">the folder&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMDocumentFolder</returns>
        System.Threading.Tasks.Task<CMDocumentFolder> DeleteDocumentOrFolderAsync(string sessionId, string organisationId, string kbId, bool isFolder, int sourceId, string url, string folderId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a document or a folder
        /// </summary>
        /// <remarks>
        /// Mark a document/folder as deleted in the SimSage DMS.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="isFolder">is this a folder or a document?</param>
        /// <param name="sourceId">the source-id of the item being deleted</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="folderId">the folder&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMDocumentFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMDocumentFolder>> DeleteDocumentOrFolderWithHttpInfoAsync(string sessionId, string organisationId, string kbId, bool isFolder, int sourceId, string url, string folderId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Note
        /// </summary>
        /// <remarks>
        /// Delete a note associated with a document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="noteId">the id of the note to delete</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMDocumentNote&gt;</returns>
        System.Threading.Tasks.Task<List<CMDocumentNote>> DeleteNoteAsync(string sessionId, string organisationId, string kbId, string url, int noteId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Note
        /// </summary>
        /// <remarks>
        /// Delete a note associated with a document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="noteId">the id of the note to delete</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMDocumentNote&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CMDocumentNote>>> DeleteNoteWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string url, int noteId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove source-folder
        /// </summary>
        /// <remarks>
        /// Remove an existing top-level folder (source folder) from the SimSage DMS.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the sourceId of the source-folder to remove</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMDocumentFolder</returns>
        System.Threading.Tasks.Task<CMDocumentFolder> DeleteSourceFolderAsync(string sessionId, string organisationId, string kbId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove source-folder
        /// </summary>
        /// <remarks>
        /// Remove an existing top-level folder (source folder) from the SimSage DMS.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the sourceId of the source-folder to remove</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMDocumentFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMDocumentFolder>> DeleteSourceFolderWithHttpInfoAsync(string sessionId, string organisationId, string kbId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Subscription
        /// </summary>
        /// <remarks>
        /// Delete a user&#39;s subscription associated with a document, returns an updated subscription set.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSubscriptions</returns>
        System.Threading.Tasks.Task<CMSubscriptions> DeleteSubscriptionAsync(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Subscription
        /// </summary>
        /// <remarks>
        /// Delete a user&#39;s subscription associated with a document, returns an updated subscription set.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSubscriptions)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMSubscriptions>> DeleteSubscriptionWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Saved Search
        /// </summary>
        /// <remarks>
        /// Delete a user&#39;s saved search
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="text">the base64 encoded search-text value</param>
        /// <param name="top">how many records to return</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMSavedSearch&gt;</returns>
        System.Threading.Tasks.Task<List<CMSavedSearch>> DeleteUserSearchAsync(string sessionId, string organisationId, string kbId, string userId, string text, int top, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Saved Search
        /// </summary>
        /// <remarks>
        /// Delete a user&#39;s saved search
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="text">the base64 encoded search-text value</param>
        /// <param name="top">how many records to return</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMSavedSearch&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CMSavedSearch>>> DeleteUserSearchWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string userId, string text, int top, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Document
        /// </summary>
        /// <remarks>
        /// Return a document&#39;s details by url-id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="urlId">the document&#39;s url-id, a unique id identifying a document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMDocument</returns>
        System.Threading.Tasks.Task<CMDocument> Document1Async(string sessionId, string organisationId, string kbId, int urlId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Document
        /// </summary>
        /// <remarks>
        /// Return a document&#39;s details by url-id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="urlId">the document&#39;s url-id, a unique id identifying a document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMDocument>> Document1WithHttpInfoAsync(string sessionId, string organisationId, string kbId, int urlId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Binary
        /// </summary>
        /// <remarks>
        /// Get the original for a document if available by url (latest version)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">a base64 encoded url</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DocumentBinaryAsync(string sessionId, string organisationId, string kbId, string url, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Binary
        /// </summary>
        /// <remarks>
        /// Get the original for a document if available by url (latest version)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">a base64 encoded url</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentBinaryWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string url, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Binary Document
        /// </summary>
        /// <remarks>
        /// Return a document&#39;s binary by url and version
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the document&#39;s url, base64 encoded.  A unique id identifying a document.</param>
        /// <param name="varVersion">the document&#39;s binary version.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DocumentVersionAsync(string sessionId, string organisationId, string kbId, string url, int varVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Binary Document
        /// </summary>
        /// <remarks>
        /// Return a document&#39;s binary by url and version
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the document&#39;s url, base64 encoded.  A unique id identifying a document.</param>
        /// <param name="varVersion">the document&#39;s binary version.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentVersionWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string url, int varVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Filter Folders
        /// </summary>
        /// <remarks>
        /// Filter a set of folders using Search
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="text">the text to use to filter (base64 encoded)</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMDocumentFolder</returns>
        System.Threading.Tasks.Task<CMDocumentFolder> FilterFoldersAsync(string sessionId, string organisationId, string kbId, string text, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Filter Folders
        /// </summary>
        /// <remarks>
        /// Filter a set of folders using Search
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="text">the text to use to filter (base64 encoded)</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMDocumentFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMDocumentFolder>> FilterFoldersWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string text, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Force-release a lock
        /// </summary>
        /// <remarks>
        /// A system administrator or manager can force-unlock a document.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> ForceReleaseLockAsync(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Force-release a lock
        /// </summary>
        /// <remarks>
        /// A system administrator or manager can force-unlock a document.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> ForceReleaseLockWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Bookmarks
        /// </summary>
        /// <remarks>
        /// Return a list of bookmarks for a given user
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMDocumentBookmark&gt;</returns>
        System.Threading.Tasks.Task<List<CMDocumentBookmark>> GetBookmarkListAsync(string organisationId, string kbId, string userId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Bookmarks
        /// </summary>
        /// <remarks>
        /// Return a list of bookmarks for a given user
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMDocumentBookmark&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CMDocumentBookmark>>> GetBookmarkListWithHttpInfoAsync(string organisationId, string kbId, string userId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deleted records with optional filter
        /// </summary>
        /// <remarks>
        /// Return a list of deleted document records for an administrator (all records) with an optional filter set.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="filter">an optional text filter for URLs</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DocumentDeleted&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentDeleted>> GetDeletedDocumentsAsync(string sessionId, string organisationId, string kbId, string filter, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deleted records with optional filter
        /// </summary>
        /// <remarks>
        /// Return a list of deleted document records for an administrator (all records) with an optional filter set.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="filter">an optional text filter for URLs</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentDeleted&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentDeleted>>> GetDeletedDocumentsWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string filter, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Audit records for a document for a month
        /// </summary>
        /// <remarks>
        /// Return document audit records for a user (filtered) or administrator (all records) for a given document / month
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year for the notifications</param>
        /// <param name="month">the month for the notifications</param>
        /// <param name="url">the document url (base64 encoded) to get audit records for</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMDocumentAudit&gt;</returns>
        System.Threading.Tasks.Task<List<CMDocumentAudit>> GetDocumentAuditAsync(string sessionId, string organisationId, string kbId, int year, int month, string url, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Audit records for a document for a month
        /// </summary>
        /// <remarks>
        /// Return document audit records for a user (filtered) or administrator (all records) for a given document / month
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year for the notifications</param>
        /// <param name="month">the month for the notifications</param>
        /// <param name="url">the document url (base64 encoded) to get audit records for</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMDocumentAudit&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CMDocumentAudit>>> GetDocumentAuditWithHttpInfoAsync(string sessionId, string organisationId, string kbId, int year, int month, string url, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Folder Content
        /// </summary>
        /// <remarks>
        /// Return a folder&#39;s content
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the owner source&#39;s id</param>
        /// <param name="folderId">the folder&#39;s id</param>
        /// <param name="prevUrl">pagination, the previous last URL for the page-set (&#39;null&#39; is first page)</param>
        /// <param name="pageSize">page-size for a paginated set</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMDocumentFolder</returns>
        System.Threading.Tasks.Task<CMDocumentFolder> GetFolderAsync(string sessionId, string organisationId, string kbId, int sourceId, string folderId, string prevUrl, int pageSize, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Folder Content
        /// </summary>
        /// <remarks>
        /// Return a folder&#39;s content
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the owner source&#39;s id</param>
        /// <param name="folderId">the folder&#39;s id</param>
        /// <param name="prevUrl">pagination, the previous last URL for the page-set (&#39;null&#39; is first page)</param>
        /// <param name="pageSize">page-size for a paginated set</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMDocumentFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMDocumentFolder>> GetFolderWithHttpInfoAsync(string sessionId, string organisationId, string kbId, int sourceId, string folderId, string prevUrl, int pageSize, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Audit records for a month
        /// </summary>
        /// <remarks>
        /// Return document audit records for a user (filtered) or administrator (all records) for a given month
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year for the notifications</param>
        /// <param name="month">the month for the notifications</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMDocumentAudit&gt;</returns>
        System.Threading.Tasks.Task<List<CMDocumentAudit>> GetFullAuditAsync(string sessionId, string organisationId, string kbId, int year, int month, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Audit records for a month
        /// </summary>
        /// <remarks>
        /// Return document audit records for a user (filtered) or administrator (all records) for a given month
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year for the notifications</param>
        /// <param name="month">the month for the notifications</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMDocumentAudit&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CMDocumentAudit>>> GetFullAuditWithHttpInfoAsync(string sessionId, string organisationId, string kbId, int year, int month, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get locked documents for user
        /// </summary>
        /// <remarks>
        /// Return a list of locked documents for a given user
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMDocument&gt;</returns>
        System.Threading.Tasks.Task<List<CMDocument>> GetLockedListAsync(string organisationId, string kbId, string userId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get locked documents for user
        /// </summary>
        /// <remarks>
        /// Return a list of locked documents for a given user
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMDocument&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CMDocument>>> GetLockedListWithHttpInfoAsync(string organisationId, string kbId, string userId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Notes
        /// </summary>
        /// <remarks>
        /// Return a list of notes for a given url
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMDocumentNote&gt;</returns>
        System.Threading.Tasks.Task<List<CMDocumentNote>> GetNoteListAsync(string sessionId, string organisationId, string kbId, string url, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Notes
        /// </summary>
        /// <remarks>
        /// Return a list of notes for a given url
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMDocumentNote&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CMDocumentNote>>> GetNoteListWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string url, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// User&#39;s saved searches
        /// </summary>
        /// <remarks>
        /// Return a user&#39;s saved searches
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="top">how many records to return</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMSavedSearch&gt;</returns>
        System.Threading.Tasks.Task<List<CMSavedSearch>> GetSavedSearchesAsync(string sessionId, string organisationId, string kbId, string userId, int top, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User&#39;s saved searches
        /// </summary>
        /// <remarks>
        /// Return a user&#39;s saved searches
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="top">how many records to return</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMSavedSearch&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CMSavedSearch>>> GetSavedSearchesWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string userId, int top, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get source-folder
        /// </summary>
        /// <remarks>
        /// Return the content of a top-level folder (source folder).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the source-id of the item being deleted</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMDocumentFolder</returns>
        System.Threading.Tasks.Task<CMDocumentFolder> GetSourceFolderAsync(string organisationId, string kbId, int sourceId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get source-folder
        /// </summary>
        /// <remarks>
        /// Return the content of a top-level folder (source folder).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the source-id of the item being deleted</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMDocumentFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMDocumentFolder>> GetSourceFolderWithHttpInfoAsync(string organisationId, string kbId, int sourceId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Subscriptions
        /// </summary>
        /// <remarks>
        /// Return a subscriptions object for a given user
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSubscriptions</returns>
        System.Threading.Tasks.Task<CMSubscriptions> GetSubscriptionListAsync(string organisationId, string kbId, string userId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Subscriptions
        /// </summary>
        /// <remarks>
        /// Return a subscriptions object for a given user
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSubscriptions)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMSubscriptions>> GetSubscriptionListWithHttpInfoAsync(string organisationId, string kbId, string userId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// User Dashboard
        /// </summary>
        /// <remarks>
        /// Return a the user&#39;s DMS dashboard
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMDUserDashboard</returns>
        System.Threading.Tasks.Task<CMDUserDashboard> GetUserDashboardAsync(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User Dashboard
        /// </summary>
        /// <remarks>
        /// Return a the user&#39;s DMS dashboard
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMDUserDashboard)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMDUserDashboard>> GetUserDashboardWithHttpInfoAsync(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get User Notifications
        /// </summary>
        /// <remarks>
        /// Return all user notifications from the DMS for a given user by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year for the notifications</param>
        /// <param name="month">the month for the notifications</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMUserNotification&gt;</returns>
        System.Threading.Tasks.Task<List<CMUserNotification>> GetUserNotificationsAsync(string sessionId, string organisationId, string kbId, int year, int month, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get User Notifications
        /// </summary>
        /// <remarks>
        /// Return all user notifications from the DMS for a given user by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year for the notifications</param>
        /// <param name="month">the month for the notifications</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMUserNotification&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CMUserNotification>>> GetUserNotificationsWithHttpInfoAsync(string sessionId, string organisationId, string kbId, int year, int month, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Document Lock
        /// </summary>
        /// <remarks>
        /// Lock a document for a user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentLock"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMDocument&gt;</returns>
        System.Threading.Tasks.Task<List<CMDocument>> LockDocumentAsync(string sessionId, CMDocumentLock cMDocumentLock, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Document Lock
        /// </summary>
        /// <remarks>
        /// Lock a document for a user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentLock"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMDocument&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CMDocument>>> LockDocumentWithHttpInfoAsync(string sessionId, CMDocumentLock cMDocumentLock, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Release a lock
        /// </summary>
        /// <remarks>
        /// The originator of a lock releases a locked document.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMDocument&gt;</returns>
        System.Threading.Tasks.Task<List<CMDocument>> ReleaseLockAsync(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Release a lock
        /// </summary>
        /// <remarks>
        /// The originator of a lock releases a locked document.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMDocument&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CMDocument>>> ReleaseLockWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// DMS Client Query
        /// </summary>
        /// <remarks>
        /// a SimSage DMS client asks a question or performs a keyword-search.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMClientQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMClientQueryResult</returns>
        System.Threading.Tasks.Task<CMClientQueryResult> RestfulDMSClientQueryAsync(string sessionId, CMClientQuery cMClientQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// DMS Client Query
        /// </summary>
        /// <remarks>
        /// a SimSage DMS client asks a question or performs a keyword-search.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMClientQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMClientQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMClientQueryResult>> RestfulDMSClientQueryWithHttpInfoAsync(string sessionId, CMClientQuery cMClientQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Save Bookmark
        /// </summary>
        /// <remarks>
        /// Save (create or update) a SimSage Document Bookmark.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentBookmark"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DocumentBookmark&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentBookmark>> SaveBookmarkAsync(string sessionId, CMDocumentBookmark cMDocumentBookmark, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Save Bookmark
        /// </summary>
        /// <remarks>
        /// Save (create or update) a SimSage Document Bookmark.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentBookmark"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentBookmark&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentBookmark>>> SaveBookmarkWithHttpInfoAsync(string sessionId, CMDocumentBookmark cMDocumentBookmark, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Save HashTag set for a document
        /// </summary>
        /// <remarks>
        /// Save (create / update / delete) a hashTag set for a document.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentHashTag"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> SaveHashTagsAsync(string sessionId, CMDocumentHashTag cMDocumentHashTag, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Save HashTag set for a document
        /// </summary>
        /// <remarks>
        /// Save (create / update / delete) a hashTag set for a document.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentHashTag"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> SaveHashTagsWithHttpInfoAsync(string sessionId, CMDocumentHashTag cMDocumentHashTag, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Save Note
        /// </summary>
        /// <remarks>
        /// Save (create or update) a SimSage Document Note.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentNote"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMDocumentNote&gt;</returns>
        System.Threading.Tasks.Task<List<CMDocumentNote>> SaveNoteAsync(string sessionId, CMDocumentNote cMDocumentNote, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Save Note
        /// </summary>
        /// <remarks>
        /// Save (create or update) a SimSage Document Note.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentNote"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMDocumentNote&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CMDocumentNote>>> SaveNoteWithHttpInfoAsync(string sessionId, CMDocumentNote cMDocumentNote, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Save Search
        /// </summary>
        /// <remarks>
        /// Save a user&#39;s search query.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSavedSearch"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMSavedSearch&gt;</returns>
        System.Threading.Tasks.Task<List<CMSavedSearch>> SaveSearchAsync(string sessionId, CMSavedSearch cMSavedSearch, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Save Search
        /// </summary>
        /// <remarks>
        /// Save a user&#39;s search query.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSavedSearch"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMSavedSearch&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CMSavedSearch>>> SaveSearchWithHttpInfoAsync(string sessionId, CMSavedSearch cMSavedSearch, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Save Subscription
        /// </summary>
        /// <remarks>
        /// Save (create or update) a SimSage Document subscription.  Returns a subscription object for this user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentSubscription"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSubscriptions</returns>
        System.Threading.Tasks.Task<CMSubscriptions> SaveSubscriptionAsync(string sessionId, CMDocumentSubscription cMDocumentSubscription, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Save Subscription
        /// </summary>
        /// <remarks>
        /// Save (create or update) a SimSage Document subscription.  Returns a subscription object for this user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentSubscription"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSubscriptions)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMSubscriptions>> SaveSubscriptionWithHttpInfoAsync(string sessionId, CMDocumentSubscription cMDocumentSubscription, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// un-delete a record
        /// </summary>
        /// <remarks>
        /// Un-delete a previously deleted document and return a list of deleted document records for an administrator (all records).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the item&#39;s source id</param>
        /// <param name="url">the document&#39;s url, base64 encoded.  A unique id identifying a document.</param>
        /// <param name="filter">an optional text filter for URLs</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DocumentDeleted&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentDeleted>> UndeleteDocumentAsync(string sessionId, string organisationId, string kbId, int sourceId, string url, string filter, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// un-delete a record
        /// </summary>
        /// <remarks>
        /// Un-delete a previously deleted document and return a list of deleted document records for an administrator (all records).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the item&#39;s source id</param>
        /// <param name="url">the document&#39;s url, base64 encoded.  A unique id identifying a document.</param>
        /// <param name="filter">an optional text filter for URLs</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentDeleted&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentDeleted>>> UndeleteDocumentWithHttpInfoAsync(string sessionId, string organisationId, string kbId, int sourceId, string url, string filter, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an item&#39;s ACLs
        /// </summary>
        /// <remarks>
        /// Update the Access Control List of a SimSage DMS item (source, file, or folder).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMUpdateACLs"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> UpdateACLsAsync(string sessionId, CMUpdateACLs cMUpdateACLs, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an item&#39;s ACLs
        /// </summary>
        /// <remarks>
        /// Update the Access Control List of a SimSage DMS item (source, file, or folder).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMUpdateACLs"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> UpdateACLsWithHttpInfoAsync(string sessionId, CMUpdateACLs cMUpdateACLs, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload a Document
        /// </summary>
        /// <remarks>
        /// Upload a document into a DMS folder
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the owner source&#39;s id</param>
        /// <param name="folderId">the id of the folder we&#39;re uploading into</param>
        /// <param name="lastModified">lastModified unix-date-time</param>
        /// <param name="file">the file to upload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMDocumentFolder</returns>
        System.Threading.Tasks.Task<CMDocumentFolder> UploadDocumentAsync(string sessionId, string organisationId, string kbId, int sourceId, string folderId, string lastModified, System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload a Document
        /// </summary>
        /// <remarks>
        /// Upload a document into a DMS folder
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the owner source&#39;s id</param>
        /// <param name="folderId">the id of the folder we&#39;re uploading into</param>
        /// <param name="lastModified">lastModified unix-date-time</param>
        /// <param name="file">the file to upload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMDocumentFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMDocumentFolder>> UploadDocumentWithHttpInfoAsync(string sessionId, string organisationId, string kbId, int sourceId, string folderId, string lastModified, System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDmsApi : IDmsApiSync, IDmsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DmsApi : IDmsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DmsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DmsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DmsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DmsApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DmsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DmsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DmsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DmsApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a new folder Add a new folder to the SimSage DMS.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMAddFolder"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMDocumentFolder</returns>
        public CMDocumentFolder AddFolder(string sessionId, CMAddFolder cMAddFolder, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder> localVarResponse = AddFolderWithHttpInfo(sessionId, cMAddFolder, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new folder Add a new folder to the SimSage DMS.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMAddFolder"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMDocumentFolder</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder> AddFolderWithHttpInfo(string sessionId, CMAddFolder cMAddFolder, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->AddFolder");
            }

            // verify the required parameter 'cMAddFolder' is set
            if (cMAddFolder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMAddFolder' when calling DmsApi->AddFolder");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMAddFolder;

            localVarRequestOptions.Operation = "DmsApi.AddFolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CMDocumentFolder>("/api/dms/folder", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new folder Add a new folder to the SimSage DMS.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMAddFolder"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMDocumentFolder</returns>
        public async System.Threading.Tasks.Task<CMDocumentFolder> AddFolderAsync(string sessionId, CMAddFolder cMAddFolder, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder> localVarResponse = await AddFolderWithHttpInfoAsync(sessionId, cMAddFolder, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new folder Add a new folder to the SimSage DMS.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMAddFolder"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMDocumentFolder)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder>> AddFolderWithHttpInfoAsync(string sessionId, CMAddFolder cMAddFolder, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->AddFolder");
            }

            // verify the required parameter 'cMAddFolder' is set
            if (cMAddFolder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMAddFolder' when calling DmsApi->AddFolder");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMAddFolder;

            localVarRequestOptions.Operation = "DmsApi.AddFolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CMDocumentFolder>("/api/dms/folder", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new source-folder Add a new top-level folder (source folder) to the SimSage DMS.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMAddSourceFolder"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMDocumentFolder</returns>
        public CMDocumentFolder AddSourceFolder(string sessionId, CMAddSourceFolder cMAddSourceFolder, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder> localVarResponse = AddSourceFolderWithHttpInfo(sessionId, cMAddSourceFolder, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new source-folder Add a new top-level folder (source folder) to the SimSage DMS.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMAddSourceFolder"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMDocumentFolder</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder> AddSourceFolderWithHttpInfo(string sessionId, CMAddSourceFolder cMAddSourceFolder, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->AddSourceFolder");
            }

            // verify the required parameter 'cMAddSourceFolder' is set
            if (cMAddSourceFolder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMAddSourceFolder' when calling DmsApi->AddSourceFolder");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMAddSourceFolder;

            localVarRequestOptions.Operation = "DmsApi.AddSourceFolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CMDocumentFolder>("/api/dms/source", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddSourceFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new source-folder Add a new top-level folder (source folder) to the SimSage DMS.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMAddSourceFolder"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMDocumentFolder</returns>
        public async System.Threading.Tasks.Task<CMDocumentFolder> AddSourceFolderAsync(string sessionId, CMAddSourceFolder cMAddSourceFolder, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder> localVarResponse = await AddSourceFolderWithHttpInfoAsync(sessionId, cMAddSourceFolder, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new source-folder Add a new top-level folder (source folder) to the SimSage DMS.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMAddSourceFolder"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMDocumentFolder)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder>> AddSourceFolderWithHttpInfoAsync(string sessionId, CMAddSourceFolder cMAddSourceFolder, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->AddSourceFolder");
            }

            // verify the required parameter 'cMAddSourceFolder' is set
            if (cMAddSourceFolder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMAddSourceFolder' when calling DmsApi->AddSourceFolder");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMAddSourceFolder;

            localVarRequestOptions.Operation = "DmsApi.AddSourceFolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CMDocumentFolder>("/api/dms/source", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddSourceFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete all Notes delete all notes associated with a document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage DeleteAllNotes(string sessionId, string organisationId, string kbId, string url, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = DeleteAllNotesWithHttpInfo(sessionId, organisationId, kbId, url, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// delete all Notes delete all notes associated with a document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> DeleteAllNotesWithHttpInfo(string sessionId, string organisationId, string kbId, string url, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->DeleteAllNotes");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->DeleteAllNotes");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->DeleteAllNotes");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DmsApi->DeleteAllNotes");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.DeleteAllNotes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<JsonMessage>("/api/dms/note/{organisationId}/{kbId}/{url}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAllNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete all Notes delete all notes associated with a document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> DeleteAllNotesAsync(string sessionId, string organisationId, string kbId, string url, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await DeleteAllNotesWithHttpInfoAsync(sessionId, organisationId, kbId, url, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// delete all Notes delete all notes associated with a document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> DeleteAllNotesWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string url, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->DeleteAllNotes");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->DeleteAllNotes");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->DeleteAllNotes");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DmsApi->DeleteAllNotes");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.DeleteAllNotes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<JsonMessage>("/api/dms/note/{organisationId}/{kbId}/{url}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAllNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Bookmark Delete a user&#39;s bookmark associated with a document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMDocumentBookmark&gt;</returns>
        public List<CMDocumentBookmark> DeleteBookmark(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMDocumentBookmark>> localVarResponse = DeleteBookmarkWithHttpInfo(sessionId, organisationId, kbId, userId, url, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Bookmark Delete a user&#39;s bookmark associated with a document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMDocumentBookmark&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<CMDocumentBookmark>> DeleteBookmarkWithHttpInfo(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->DeleteBookmark");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->DeleteBookmark");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->DeleteBookmark");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling DmsApi->DeleteBookmark");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DmsApi->DeleteBookmark");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.DeleteBookmark";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<CMDocumentBookmark>>("/api/dms/bookmark/{organisationId}/{kbId}/{userId}/{url}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBookmark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Bookmark Delete a user&#39;s bookmark associated with a document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMDocumentBookmark&gt;</returns>
        public async System.Threading.Tasks.Task<List<CMDocumentBookmark>> DeleteBookmarkAsync(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMDocumentBookmark>> localVarResponse = await DeleteBookmarkWithHttpInfoAsync(sessionId, organisationId, kbId, userId, url, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Bookmark Delete a user&#39;s bookmark associated with a document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMDocumentBookmark&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<CMDocumentBookmark>>> DeleteBookmarkWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->DeleteBookmark");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->DeleteBookmark");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->DeleteBookmark");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling DmsApi->DeleteBookmark");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DmsApi->DeleteBookmark");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.DeleteBookmark";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<CMDocumentBookmark>>("/api/dms/bookmark/{organisationId}/{kbId}/{userId}/{url}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBookmark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a document or a folder Mark a document/folder as deleted in the SimSage DMS.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="isFolder">is this a folder or a document?</param>
        /// <param name="sourceId">the source-id of the item being deleted</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="folderId">the folder&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMDocumentFolder</returns>
        public CMDocumentFolder DeleteDocumentOrFolder(string sessionId, string organisationId, string kbId, bool isFolder, int sourceId, string url, string folderId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder> localVarResponse = DeleteDocumentOrFolderWithHttpInfo(sessionId, organisationId, kbId, isFolder, sourceId, url, folderId, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a document or a folder Mark a document/folder as deleted in the SimSage DMS.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="isFolder">is this a folder or a document?</param>
        /// <param name="sourceId">the source-id of the item being deleted</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="folderId">the folder&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMDocumentFolder</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder> DeleteDocumentOrFolderWithHttpInfo(string sessionId, string organisationId, string kbId, bool isFolder, int sourceId, string url, string folderId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->DeleteDocumentOrFolder");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->DeleteDocumentOrFolder");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->DeleteDocumentOrFolder");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DmsApi->DeleteDocumentOrFolder");
            }

            // verify the required parameter 'folderId' is set
            if (folderId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'folderId' when calling DmsApi->DeleteDocumentOrFolder");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("isFolder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(isFolder)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.PathParameters.Add("folderId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.DeleteDocumentOrFolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<CMDocumentFolder>("/api/dms/document/delete/{organisationId}/{kbId}/{isFolder}/{sourceId}/{url}/{folderId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDocumentOrFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a document or a folder Mark a document/folder as deleted in the SimSage DMS.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="isFolder">is this a folder or a document?</param>
        /// <param name="sourceId">the source-id of the item being deleted</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="folderId">the folder&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMDocumentFolder</returns>
        public async System.Threading.Tasks.Task<CMDocumentFolder> DeleteDocumentOrFolderAsync(string sessionId, string organisationId, string kbId, bool isFolder, int sourceId, string url, string folderId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder> localVarResponse = await DeleteDocumentOrFolderWithHttpInfoAsync(sessionId, organisationId, kbId, isFolder, sourceId, url, folderId, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a document or a folder Mark a document/folder as deleted in the SimSage DMS.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="isFolder">is this a folder or a document?</param>
        /// <param name="sourceId">the source-id of the item being deleted</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="folderId">the folder&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMDocumentFolder)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder>> DeleteDocumentOrFolderWithHttpInfoAsync(string sessionId, string organisationId, string kbId, bool isFolder, int sourceId, string url, string folderId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->DeleteDocumentOrFolder");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->DeleteDocumentOrFolder");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->DeleteDocumentOrFolder");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DmsApi->DeleteDocumentOrFolder");
            }

            // verify the required parameter 'folderId' is set
            if (folderId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'folderId' when calling DmsApi->DeleteDocumentOrFolder");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("isFolder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(isFolder)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.PathParameters.Add("folderId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.DeleteDocumentOrFolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<CMDocumentFolder>("/api/dms/document/delete/{organisationId}/{kbId}/{isFolder}/{sourceId}/{url}/{folderId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDocumentOrFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Note Delete a note associated with a document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="noteId">the id of the note to delete</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMDocumentNote&gt;</returns>
        public List<CMDocumentNote> DeleteNote(string sessionId, string organisationId, string kbId, string url, int noteId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMDocumentNote>> localVarResponse = DeleteNoteWithHttpInfo(sessionId, organisationId, kbId, url, noteId, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Note Delete a note associated with a document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="noteId">the id of the note to delete</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMDocumentNote&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<CMDocumentNote>> DeleteNoteWithHttpInfo(string sessionId, string organisationId, string kbId, string url, int noteId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->DeleteNote");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->DeleteNote");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->DeleteNote");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DmsApi->DeleteNote");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.PathParameters.Add("noteId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(noteId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.DeleteNote";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<CMDocumentNote>>("/api/dms/note/{organisationId}/{kbId}/{url}/{noteId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Note Delete a note associated with a document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="noteId">the id of the note to delete</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMDocumentNote&gt;</returns>
        public async System.Threading.Tasks.Task<List<CMDocumentNote>> DeleteNoteAsync(string sessionId, string organisationId, string kbId, string url, int noteId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMDocumentNote>> localVarResponse = await DeleteNoteWithHttpInfoAsync(sessionId, organisationId, kbId, url, noteId, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Note Delete a note associated with a document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="noteId">the id of the note to delete</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMDocumentNote&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<CMDocumentNote>>> DeleteNoteWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string url, int noteId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->DeleteNote");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->DeleteNote");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->DeleteNote");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DmsApi->DeleteNote");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.PathParameters.Add("noteId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(noteId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.DeleteNote";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<CMDocumentNote>>("/api/dms/note/{organisationId}/{kbId}/{url}/{noteId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove source-folder Remove an existing top-level folder (source folder) from the SimSage DMS.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the sourceId of the source-folder to remove</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMDocumentFolder</returns>
        public CMDocumentFolder DeleteSourceFolder(string sessionId, string organisationId, string kbId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder> localVarResponse = DeleteSourceFolderWithHttpInfo(sessionId, organisationId, kbId, sourceId, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove source-folder Remove an existing top-level folder (source folder) from the SimSage DMS.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the sourceId of the source-folder to remove</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMDocumentFolder</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder> DeleteSourceFolderWithHttpInfo(string sessionId, string organisationId, string kbId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->DeleteSourceFolder");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->DeleteSourceFolder");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->DeleteSourceFolder");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.DeleteSourceFolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<CMDocumentFolder>("/api/dms/source/{organisationId}/{kbId}/{sourceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSourceFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove source-folder Remove an existing top-level folder (source folder) from the SimSage DMS.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the sourceId of the source-folder to remove</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMDocumentFolder</returns>
        public async System.Threading.Tasks.Task<CMDocumentFolder> DeleteSourceFolderAsync(string sessionId, string organisationId, string kbId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder> localVarResponse = await DeleteSourceFolderWithHttpInfoAsync(sessionId, organisationId, kbId, sourceId, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove source-folder Remove an existing top-level folder (source folder) from the SimSage DMS.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the sourceId of the source-folder to remove</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMDocumentFolder)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder>> DeleteSourceFolderWithHttpInfoAsync(string sessionId, string organisationId, string kbId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->DeleteSourceFolder");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->DeleteSourceFolder");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->DeleteSourceFolder");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.DeleteSourceFolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<CMDocumentFolder>("/api/dms/source/{organisationId}/{kbId}/{sourceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSourceFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Subscription Delete a user&#39;s subscription associated with a document, returns an updated subscription set.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSubscriptions</returns>
        public CMSubscriptions DeleteSubscription(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMSubscriptions> localVarResponse = DeleteSubscriptionWithHttpInfo(sessionId, organisationId, kbId, userId, url, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Subscription Delete a user&#39;s subscription associated with a document, returns an updated subscription set.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSubscriptions</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMSubscriptions> DeleteSubscriptionWithHttpInfo(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->DeleteSubscription");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->DeleteSubscription");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->DeleteSubscription");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling DmsApi->DeleteSubscription");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DmsApi->DeleteSubscription");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.DeleteSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<CMSubscriptions>("/api/dms/subscription/{organisationId}/{kbId}/{userId}/{url}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Subscription Delete a user&#39;s subscription associated with a document, returns an updated subscription set.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSubscriptions</returns>
        public async System.Threading.Tasks.Task<CMSubscriptions> DeleteSubscriptionAsync(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMSubscriptions> localVarResponse = await DeleteSubscriptionWithHttpInfoAsync(sessionId, organisationId, kbId, userId, url, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Subscription Delete a user&#39;s subscription associated with a document, returns an updated subscription set.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSubscriptions)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMSubscriptions>> DeleteSubscriptionWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->DeleteSubscription");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->DeleteSubscription");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->DeleteSubscription");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling DmsApi->DeleteSubscription");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DmsApi->DeleteSubscription");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.DeleteSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<CMSubscriptions>("/api/dms/subscription/{organisationId}/{kbId}/{userId}/{url}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Saved Search Delete a user&#39;s saved search
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="text">the base64 encoded search-text value</param>
        /// <param name="top">how many records to return</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMSavedSearch&gt;</returns>
        public List<CMSavedSearch> DeleteUserSearch(string sessionId, string organisationId, string kbId, string userId, string text, int top, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMSavedSearch>> localVarResponse = DeleteUserSearchWithHttpInfo(sessionId, organisationId, kbId, userId, text, top, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Saved Search Delete a user&#39;s saved search
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="text">the base64 encoded search-text value</param>
        /// <param name="top">how many records to return</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMSavedSearch&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<CMSavedSearch>> DeleteUserSearchWithHttpInfo(string sessionId, string organisationId, string kbId, string userId, string text, int top, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->DeleteUserSearch");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->DeleteUserSearch");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->DeleteUserSearch");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling DmsApi->DeleteUserSearch");
            }

            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'text' when calling DmsApi->DeleteUserSearch");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("text", Org.OpenAPITools.Client.ClientUtils.ParameterToString(text)); // path parameter
            localVarRequestOptions.PathParameters.Add("top", Org.OpenAPITools.Client.ClientUtils.ParameterToString(top)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.DeleteUserSearch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<CMSavedSearch>>("/api/dms/saved-search/{organisationId}/{kbId}/{userId}/{text}/{top}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUserSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Saved Search Delete a user&#39;s saved search
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="text">the base64 encoded search-text value</param>
        /// <param name="top">how many records to return</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMSavedSearch&gt;</returns>
        public async System.Threading.Tasks.Task<List<CMSavedSearch>> DeleteUserSearchAsync(string sessionId, string organisationId, string kbId, string userId, string text, int top, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMSavedSearch>> localVarResponse = await DeleteUserSearchWithHttpInfoAsync(sessionId, organisationId, kbId, userId, text, top, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Saved Search Delete a user&#39;s saved search
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="text">the base64 encoded search-text value</param>
        /// <param name="top">how many records to return</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMSavedSearch&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<CMSavedSearch>>> DeleteUserSearchWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string userId, string text, int top, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->DeleteUserSearch");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->DeleteUserSearch");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->DeleteUserSearch");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling DmsApi->DeleteUserSearch");
            }

            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'text' when calling DmsApi->DeleteUserSearch");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("text", Org.OpenAPITools.Client.ClientUtils.ParameterToString(text)); // path parameter
            localVarRequestOptions.PathParameters.Add("top", Org.OpenAPITools.Client.ClientUtils.ParameterToString(top)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.DeleteUserSearch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<CMSavedSearch>>("/api/dms/saved-search/{organisationId}/{kbId}/{userId}/{text}/{top}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUserSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Document Return a document&#39;s details by url-id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="urlId">the document&#39;s url-id, a unique id identifying a document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMDocument</returns>
        public CMDocument Document1(string sessionId, string organisationId, string kbId, int urlId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMDocument> localVarResponse = Document1WithHttpInfo(sessionId, organisationId, kbId, urlId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Document Return a document&#39;s details by url-id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="urlId">the document&#39;s url-id, a unique id identifying a document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMDocument</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMDocument> Document1WithHttpInfo(string sessionId, string organisationId, string kbId, int urlId, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->Document1");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->Document1");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->Document1");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("urlId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(urlId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "DmsApi.Document1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CMDocument>("/api/dms/document/{organisationId}/{kbId}/{urlId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Document1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Document Return a document&#39;s details by url-id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="urlId">the document&#39;s url-id, a unique id identifying a document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMDocument</returns>
        public async System.Threading.Tasks.Task<CMDocument> Document1Async(string sessionId, string organisationId, string kbId, int urlId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMDocument> localVarResponse = await Document1WithHttpInfoAsync(sessionId, organisationId, kbId, urlId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Document Return a document&#39;s details by url-id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="urlId">the document&#39;s url-id, a unique id identifying a document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMDocument)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMDocument>> Document1WithHttpInfoAsync(string sessionId, string organisationId, string kbId, int urlId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->Document1");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->Document1");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->Document1");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("urlId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(urlId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "DmsApi.Document1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CMDocument>("/api/dms/document/{organisationId}/{kbId}/{urlId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Document1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Binary Get the original for a document if available by url (latest version)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">a base64 encoded url</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>byte[]</returns>
        public byte[] DocumentBinary(string sessionId, string organisationId, string kbId, string url, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<byte[]> localVarResponse = DocumentBinaryWithHttpInfo(sessionId, organisationId, kbId, url);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Binary Get the original for a document if available by url (latest version)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">a base64 encoded url</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public Org.OpenAPITools.Client.ApiResponse<byte[]> DocumentBinaryWithHttpInfo(string sessionId, string organisationId, string kbId, string url, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->DocumentBinary");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->DocumentBinary");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->DocumentBinary");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DmsApi->DocumentBinary");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "DmsApi.DocumentBinary";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<byte[]>("/api/dms/binary/latest/{organisationId}/{kbId}/{url}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentBinary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Binary Get the original for a document if available by url (latest version)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">a base64 encoded url</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DocumentBinaryAsync(string sessionId, string organisationId, string kbId, string url, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<byte[]> localVarResponse = await DocumentBinaryWithHttpInfoAsync(sessionId, organisationId, kbId, url, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Binary Get the original for a document if available by url (latest version)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">a base64 encoded url</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<byte[]>> DocumentBinaryWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string url, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->DocumentBinary");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->DocumentBinary");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->DocumentBinary");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DmsApi->DocumentBinary");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "DmsApi.DocumentBinary";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<byte[]>("/api/dms/binary/latest/{organisationId}/{kbId}/{url}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentBinary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Binary Document Return a document&#39;s binary by url and version
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the document&#39;s url, base64 encoded.  A unique id identifying a document.</param>
        /// <param name="varVersion">the document&#39;s binary version.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>byte[]</returns>
        public byte[] DocumentVersion(string sessionId, string organisationId, string kbId, string url, int varVersion, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<byte[]> localVarResponse = DocumentVersionWithHttpInfo(sessionId, organisationId, kbId, url, varVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Binary Document Return a document&#39;s binary by url and version
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the document&#39;s url, base64 encoded.  A unique id identifying a document.</param>
        /// <param name="varVersion">the document&#39;s binary version.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public Org.OpenAPITools.Client.ApiResponse<byte[]> DocumentVersionWithHttpInfo(string sessionId, string organisationId, string kbId, string url, int varVersion, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->DocumentVersion");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->DocumentVersion");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->DocumentVersion");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DmsApi->DocumentVersion");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(varVersion)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "DmsApi.DocumentVersion";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<byte[]>("/api/dms/binary/{organisationId}/{kbId}/{url}/{version}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Binary Document Return a document&#39;s binary by url and version
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the document&#39;s url, base64 encoded.  A unique id identifying a document.</param>
        /// <param name="varVersion">the document&#39;s binary version.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DocumentVersionAsync(string sessionId, string organisationId, string kbId, string url, int varVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<byte[]> localVarResponse = await DocumentVersionWithHttpInfoAsync(sessionId, organisationId, kbId, url, varVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Binary Document Return a document&#39;s binary by url and version
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the document&#39;s url, base64 encoded.  A unique id identifying a document.</param>
        /// <param name="varVersion">the document&#39;s binary version.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<byte[]>> DocumentVersionWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string url, int varVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->DocumentVersion");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->DocumentVersion");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->DocumentVersion");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DmsApi->DocumentVersion");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(varVersion)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter

            localVarRequestOptions.Operation = "DmsApi.DocumentVersion";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<byte[]>("/api/dms/binary/{organisationId}/{kbId}/{url}/{version}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Filter Folders Filter a set of folders using Search
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="text">the text to use to filter (base64 encoded)</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMDocumentFolder</returns>
        public CMDocumentFolder FilterFolders(string sessionId, string organisationId, string kbId, string text, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder> localVarResponse = FilterFoldersWithHttpInfo(sessionId, organisationId, kbId, text, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Filter Folders Filter a set of folders using Search
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="text">the text to use to filter (base64 encoded)</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMDocumentFolder</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder> FilterFoldersWithHttpInfo(string sessionId, string organisationId, string kbId, string text, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->FilterFolders");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->FilterFolders");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->FilterFolders");
            }

            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'text' when calling DmsApi->FilterFolders");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("text", Org.OpenAPITools.Client.ClientUtils.ParameterToString(text)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.FilterFolders";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CMDocumentFolder>("/api/dms/folder/filter/{organisationId}/{kbId}/{text}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilterFolders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Filter Folders Filter a set of folders using Search
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="text">the text to use to filter (base64 encoded)</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMDocumentFolder</returns>
        public async System.Threading.Tasks.Task<CMDocumentFolder> FilterFoldersAsync(string sessionId, string organisationId, string kbId, string text, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder> localVarResponse = await FilterFoldersWithHttpInfoAsync(sessionId, organisationId, kbId, text, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Filter Folders Filter a set of folders using Search
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="text">the text to use to filter (base64 encoded)</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMDocumentFolder)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder>> FilterFoldersWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string text, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->FilterFolders");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->FilterFolders");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->FilterFolders");
            }

            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'text' when calling DmsApi->FilterFolders");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("text", Org.OpenAPITools.Client.ClientUtils.ParameterToString(text)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.FilterFolders";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CMDocumentFolder>("/api/dms/folder/filter/{organisationId}/{kbId}/{text}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilterFolders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Force-release a lock A system administrator or manager can force-unlock a document.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage ForceReleaseLock(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = ForceReleaseLockWithHttpInfo(sessionId, organisationId, kbId, userId, url, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Force-release a lock A system administrator or manager can force-unlock a document.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> ForceReleaseLockWithHttpInfo(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->ForceReleaseLock");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->ForceReleaseLock");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->ForceReleaseLock");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling DmsApi->ForceReleaseLock");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DmsApi->ForceReleaseLock");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.ForceReleaseLock";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<JsonMessage>("/api/dms/lock/release/{organisationId}/{kbId}/{userId}/{url}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForceReleaseLock", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Force-release a lock A system administrator or manager can force-unlock a document.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> ForceReleaseLockAsync(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await ForceReleaseLockWithHttpInfoAsync(sessionId, organisationId, kbId, userId, url, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Force-release a lock A system administrator or manager can force-unlock a document.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> ForceReleaseLockWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->ForceReleaseLock");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->ForceReleaseLock");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->ForceReleaseLock");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling DmsApi->ForceReleaseLock");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DmsApi->ForceReleaseLock");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.ForceReleaseLock";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<JsonMessage>("/api/dms/lock/release/{organisationId}/{kbId}/{userId}/{url}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForceReleaseLock", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Bookmarks Return a list of bookmarks for a given user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMDocumentBookmark&gt;</returns>
        public List<CMDocumentBookmark> GetBookmarkList(string organisationId, string kbId, string userId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMDocumentBookmark>> localVarResponse = GetBookmarkListWithHttpInfo(organisationId, kbId, userId, sessionId, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Bookmarks Return a list of bookmarks for a given user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMDocumentBookmark&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<CMDocumentBookmark>> GetBookmarkListWithHttpInfo(string organisationId, string kbId, string userId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->GetBookmarkList");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->GetBookmarkList");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling DmsApi->GetBookmarkList");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->GetBookmarkList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.GetBookmarkList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CMDocumentBookmark>>("/api/dms/bookmark/{organisationId}/{kbId}/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBookmarkList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Bookmarks Return a list of bookmarks for a given user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMDocumentBookmark&gt;</returns>
        public async System.Threading.Tasks.Task<List<CMDocumentBookmark>> GetBookmarkListAsync(string organisationId, string kbId, string userId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMDocumentBookmark>> localVarResponse = await GetBookmarkListWithHttpInfoAsync(organisationId, kbId, userId, sessionId, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Bookmarks Return a list of bookmarks for a given user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMDocumentBookmark&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<CMDocumentBookmark>>> GetBookmarkListWithHttpInfoAsync(string organisationId, string kbId, string userId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->GetBookmarkList");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->GetBookmarkList");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling DmsApi->GetBookmarkList");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->GetBookmarkList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.GetBookmarkList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CMDocumentBookmark>>("/api/dms/bookmark/{organisationId}/{kbId}/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBookmarkList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deleted records with optional filter Return a list of deleted document records for an administrator (all records) with an optional filter set.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="filter">an optional text filter for URLs</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;DocumentDeleted&gt;</returns>
        public List<DocumentDeleted> GetDeletedDocuments(string sessionId, string organisationId, string kbId, string filter, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<DocumentDeleted>> localVarResponse = GetDeletedDocumentsWithHttpInfo(sessionId, organisationId, kbId, filter, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deleted records with optional filter Return a list of deleted document records for an administrator (all records) with an optional filter set.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="filter">an optional text filter for URLs</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;DocumentDeleted&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<DocumentDeleted>> GetDeletedDocumentsWithHttpInfo(string sessionId, string organisationId, string kbId, string filter, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->GetDeletedDocuments");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->GetDeletedDocuments");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->GetDeletedDocuments");
            }

            // verify the required parameter 'filter' is set
            if (filter == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'filter' when calling DmsApi->GetDeletedDocuments");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("filter", Org.OpenAPITools.Client.ClientUtils.ParameterToString(filter)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.GetDeletedDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DocumentDeleted>>("/api/dms/deleted/{organisationId}/{kbId}/{filter}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeletedDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deleted records with optional filter Return a list of deleted document records for an administrator (all records) with an optional filter set.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="filter">an optional text filter for URLs</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DocumentDeleted&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentDeleted>> GetDeletedDocumentsAsync(string sessionId, string organisationId, string kbId, string filter, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<DocumentDeleted>> localVarResponse = await GetDeletedDocumentsWithHttpInfoAsync(sessionId, organisationId, kbId, filter, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deleted records with optional filter Return a list of deleted document records for an administrator (all records) with an optional filter set.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="filter">an optional text filter for URLs</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentDeleted&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<DocumentDeleted>>> GetDeletedDocumentsWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string filter, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->GetDeletedDocuments");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->GetDeletedDocuments");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->GetDeletedDocuments");
            }

            // verify the required parameter 'filter' is set
            if (filter == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'filter' when calling DmsApi->GetDeletedDocuments");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("filter", Org.OpenAPITools.Client.ClientUtils.ParameterToString(filter)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.GetDeletedDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DocumentDeleted>>("/api/dms/deleted/{organisationId}/{kbId}/{filter}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeletedDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Audit records for a document for a month Return document audit records for a user (filtered) or administrator (all records) for a given document / month
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year for the notifications</param>
        /// <param name="month">the month for the notifications</param>
        /// <param name="url">the document url (base64 encoded) to get audit records for</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMDocumentAudit&gt;</returns>
        public List<CMDocumentAudit> GetDocumentAudit(string sessionId, string organisationId, string kbId, int year, int month, string url, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMDocumentAudit>> localVarResponse = GetDocumentAuditWithHttpInfo(sessionId, organisationId, kbId, year, month, url, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Audit records for a document for a month Return document audit records for a user (filtered) or administrator (all records) for a given document / month
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year for the notifications</param>
        /// <param name="month">the month for the notifications</param>
        /// <param name="url">the document url (base64 encoded) to get audit records for</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMDocumentAudit&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<CMDocumentAudit>> GetDocumentAuditWithHttpInfo(string sessionId, string organisationId, string kbId, int year, int month, string url, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->GetDocumentAudit");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->GetDocumentAudit");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->GetDocumentAudit");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DmsApi->GetDocumentAudit");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", Org.OpenAPITools.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("month", Org.OpenAPITools.Client.ClientUtils.ParameterToString(month)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.GetDocumentAudit";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CMDocumentAudit>>("/api/dms/audit/{organisationId}/{kbId}/{year}/{month}/{url}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDocumentAudit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Audit records for a document for a month Return document audit records for a user (filtered) or administrator (all records) for a given document / month
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year for the notifications</param>
        /// <param name="month">the month for the notifications</param>
        /// <param name="url">the document url (base64 encoded) to get audit records for</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMDocumentAudit&gt;</returns>
        public async System.Threading.Tasks.Task<List<CMDocumentAudit>> GetDocumentAuditAsync(string sessionId, string organisationId, string kbId, int year, int month, string url, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMDocumentAudit>> localVarResponse = await GetDocumentAuditWithHttpInfoAsync(sessionId, organisationId, kbId, year, month, url, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Audit records for a document for a month Return document audit records for a user (filtered) or administrator (all records) for a given document / month
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year for the notifications</param>
        /// <param name="month">the month for the notifications</param>
        /// <param name="url">the document url (base64 encoded) to get audit records for</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMDocumentAudit&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<CMDocumentAudit>>> GetDocumentAuditWithHttpInfoAsync(string sessionId, string organisationId, string kbId, int year, int month, string url, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->GetDocumentAudit");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->GetDocumentAudit");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->GetDocumentAudit");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DmsApi->GetDocumentAudit");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", Org.OpenAPITools.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("month", Org.OpenAPITools.Client.ClientUtils.ParameterToString(month)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.GetDocumentAudit";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CMDocumentAudit>>("/api/dms/audit/{organisationId}/{kbId}/{year}/{month}/{url}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDocumentAudit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Folder Content Return a folder&#39;s content
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the owner source&#39;s id</param>
        /// <param name="folderId">the folder&#39;s id</param>
        /// <param name="prevUrl">pagination, the previous last URL for the page-set (&#39;null&#39; is first page)</param>
        /// <param name="pageSize">page-size for a paginated set</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMDocumentFolder</returns>
        public CMDocumentFolder GetFolder(string sessionId, string organisationId, string kbId, int sourceId, string folderId, string prevUrl, int pageSize, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder> localVarResponse = GetFolderWithHttpInfo(sessionId, organisationId, kbId, sourceId, folderId, prevUrl, pageSize, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Folder Content Return a folder&#39;s content
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the owner source&#39;s id</param>
        /// <param name="folderId">the folder&#39;s id</param>
        /// <param name="prevUrl">pagination, the previous last URL for the page-set (&#39;null&#39; is first page)</param>
        /// <param name="pageSize">page-size for a paginated set</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMDocumentFolder</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder> GetFolderWithHttpInfo(string sessionId, string organisationId, string kbId, int sourceId, string folderId, string prevUrl, int pageSize, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->GetFolder");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->GetFolder");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->GetFolder");
            }

            // verify the required parameter 'folderId' is set
            if (folderId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'folderId' when calling DmsApi->GetFolder");
            }

            // verify the required parameter 'prevUrl' is set
            if (prevUrl == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'prevUrl' when calling DmsApi->GetFolder");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("folderId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("prevUrl", Org.OpenAPITools.Client.ClientUtils.ParameterToString(prevUrl)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageSize", Org.OpenAPITools.Client.ClientUtils.ParameterToString(pageSize)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.GetFolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CMDocumentFolder>("/api/dms/folder/{organisationId}/{kbId}/{sourceId}/{folderId}/{prevUrl}/{pageSize}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Folder Content Return a folder&#39;s content
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the owner source&#39;s id</param>
        /// <param name="folderId">the folder&#39;s id</param>
        /// <param name="prevUrl">pagination, the previous last URL for the page-set (&#39;null&#39; is first page)</param>
        /// <param name="pageSize">page-size for a paginated set</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMDocumentFolder</returns>
        public async System.Threading.Tasks.Task<CMDocumentFolder> GetFolderAsync(string sessionId, string organisationId, string kbId, int sourceId, string folderId, string prevUrl, int pageSize, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder> localVarResponse = await GetFolderWithHttpInfoAsync(sessionId, organisationId, kbId, sourceId, folderId, prevUrl, pageSize, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Folder Content Return a folder&#39;s content
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the owner source&#39;s id</param>
        /// <param name="folderId">the folder&#39;s id</param>
        /// <param name="prevUrl">pagination, the previous last URL for the page-set (&#39;null&#39; is first page)</param>
        /// <param name="pageSize">page-size for a paginated set</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMDocumentFolder)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder>> GetFolderWithHttpInfoAsync(string sessionId, string organisationId, string kbId, int sourceId, string folderId, string prevUrl, int pageSize, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->GetFolder");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->GetFolder");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->GetFolder");
            }

            // verify the required parameter 'folderId' is set
            if (folderId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'folderId' when calling DmsApi->GetFolder");
            }

            // verify the required parameter 'prevUrl' is set
            if (prevUrl == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'prevUrl' when calling DmsApi->GetFolder");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("folderId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("prevUrl", Org.OpenAPITools.Client.ClientUtils.ParameterToString(prevUrl)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageSize", Org.OpenAPITools.Client.ClientUtils.ParameterToString(pageSize)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.GetFolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CMDocumentFolder>("/api/dms/folder/{organisationId}/{kbId}/{sourceId}/{folderId}/{prevUrl}/{pageSize}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Audit records for a month Return document audit records for a user (filtered) or administrator (all records) for a given month
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year for the notifications</param>
        /// <param name="month">the month for the notifications</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMDocumentAudit&gt;</returns>
        public List<CMDocumentAudit> GetFullAudit(string sessionId, string organisationId, string kbId, int year, int month, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMDocumentAudit>> localVarResponse = GetFullAuditWithHttpInfo(sessionId, organisationId, kbId, year, month, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Audit records for a month Return document audit records for a user (filtered) or administrator (all records) for a given month
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year for the notifications</param>
        /// <param name="month">the month for the notifications</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMDocumentAudit&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<CMDocumentAudit>> GetFullAuditWithHttpInfo(string sessionId, string organisationId, string kbId, int year, int month, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->GetFullAudit");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->GetFullAudit");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->GetFullAudit");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", Org.OpenAPITools.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("month", Org.OpenAPITools.Client.ClientUtils.ParameterToString(month)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.GetFullAudit";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CMDocumentAudit>>("/api/dms/audit/{organisationId}/{kbId}/{year}/{month}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFullAudit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Audit records for a month Return document audit records for a user (filtered) or administrator (all records) for a given month
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year for the notifications</param>
        /// <param name="month">the month for the notifications</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMDocumentAudit&gt;</returns>
        public async System.Threading.Tasks.Task<List<CMDocumentAudit>> GetFullAuditAsync(string sessionId, string organisationId, string kbId, int year, int month, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMDocumentAudit>> localVarResponse = await GetFullAuditWithHttpInfoAsync(sessionId, organisationId, kbId, year, month, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Audit records for a month Return document audit records for a user (filtered) or administrator (all records) for a given month
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year for the notifications</param>
        /// <param name="month">the month for the notifications</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMDocumentAudit&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<CMDocumentAudit>>> GetFullAuditWithHttpInfoAsync(string sessionId, string organisationId, string kbId, int year, int month, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->GetFullAudit");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->GetFullAudit");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->GetFullAudit");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", Org.OpenAPITools.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("month", Org.OpenAPITools.Client.ClientUtils.ParameterToString(month)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.GetFullAudit";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CMDocumentAudit>>("/api/dms/audit/{organisationId}/{kbId}/{year}/{month}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFullAudit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get locked documents for user Return a list of locked documents for a given user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMDocument&gt;</returns>
        public List<CMDocument> GetLockedList(string organisationId, string kbId, string userId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMDocument>> localVarResponse = GetLockedListWithHttpInfo(organisationId, kbId, userId, sessionId, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get locked documents for user Return a list of locked documents for a given user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMDocument&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<CMDocument>> GetLockedListWithHttpInfo(string organisationId, string kbId, string userId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->GetLockedList");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->GetLockedList");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling DmsApi->GetLockedList");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->GetLockedList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.GetLockedList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CMDocument>>("/api/dms/lock/{organisationId}/{kbId}/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLockedList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get locked documents for user Return a list of locked documents for a given user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMDocument&gt;</returns>
        public async System.Threading.Tasks.Task<List<CMDocument>> GetLockedListAsync(string organisationId, string kbId, string userId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMDocument>> localVarResponse = await GetLockedListWithHttpInfoAsync(organisationId, kbId, userId, sessionId, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get locked documents for user Return a list of locked documents for a given user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMDocument&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<CMDocument>>> GetLockedListWithHttpInfoAsync(string organisationId, string kbId, string userId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->GetLockedList");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->GetLockedList");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling DmsApi->GetLockedList");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->GetLockedList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.GetLockedList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CMDocument>>("/api/dms/lock/{organisationId}/{kbId}/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLockedList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Notes Return a list of notes for a given url
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMDocumentNote&gt;</returns>
        public List<CMDocumentNote> GetNoteList(string sessionId, string organisationId, string kbId, string url, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMDocumentNote>> localVarResponse = GetNoteListWithHttpInfo(sessionId, organisationId, kbId, url, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Notes Return a list of notes for a given url
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMDocumentNote&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<CMDocumentNote>> GetNoteListWithHttpInfo(string sessionId, string organisationId, string kbId, string url, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->GetNoteList");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->GetNoteList");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->GetNoteList");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DmsApi->GetNoteList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.GetNoteList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CMDocumentNote>>("/api/dms/note/{organisationId}/{kbId}/{url}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNoteList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Notes Return a list of notes for a given url
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMDocumentNote&gt;</returns>
        public async System.Threading.Tasks.Task<List<CMDocumentNote>> GetNoteListAsync(string sessionId, string organisationId, string kbId, string url, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMDocumentNote>> localVarResponse = await GetNoteListWithHttpInfoAsync(sessionId, organisationId, kbId, url, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Notes Return a list of notes for a given url
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMDocumentNote&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<CMDocumentNote>>> GetNoteListWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string url, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->GetNoteList");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->GetNoteList");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->GetNoteList");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DmsApi->GetNoteList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.GetNoteList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CMDocumentNote>>("/api/dms/note/{organisationId}/{kbId}/{url}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNoteList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User&#39;s saved searches Return a user&#39;s saved searches
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="top">how many records to return</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMSavedSearch&gt;</returns>
        public List<CMSavedSearch> GetSavedSearches(string sessionId, string organisationId, string kbId, string userId, int top, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMSavedSearch>> localVarResponse = GetSavedSearchesWithHttpInfo(sessionId, organisationId, kbId, userId, top, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User&#39;s saved searches Return a user&#39;s saved searches
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="top">how many records to return</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMSavedSearch&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<CMSavedSearch>> GetSavedSearchesWithHttpInfo(string sessionId, string organisationId, string kbId, string userId, int top, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->GetSavedSearches");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->GetSavedSearches");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->GetSavedSearches");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling DmsApi->GetSavedSearches");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("top", Org.OpenAPITools.Client.ClientUtils.ParameterToString(top)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.GetSavedSearches";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CMSavedSearch>>("/api/dms/saved-searches/{organisationId}/{kbId}/{userId}/{top}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSavedSearches", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User&#39;s saved searches Return a user&#39;s saved searches
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="top">how many records to return</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMSavedSearch&gt;</returns>
        public async System.Threading.Tasks.Task<List<CMSavedSearch>> GetSavedSearchesAsync(string sessionId, string organisationId, string kbId, string userId, int top, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMSavedSearch>> localVarResponse = await GetSavedSearchesWithHttpInfoAsync(sessionId, organisationId, kbId, userId, top, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User&#39;s saved searches Return a user&#39;s saved searches
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="top">how many records to return</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMSavedSearch&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<CMSavedSearch>>> GetSavedSearchesWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string userId, int top, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->GetSavedSearches");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->GetSavedSearches");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->GetSavedSearches");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling DmsApi->GetSavedSearches");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("top", Org.OpenAPITools.Client.ClientUtils.ParameterToString(top)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.GetSavedSearches";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CMSavedSearch>>("/api/dms/saved-searches/{organisationId}/{kbId}/{userId}/{top}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSavedSearches", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get source-folder Return the content of a top-level folder (source folder).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the source-id of the item being deleted</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMDocumentFolder</returns>
        public CMDocumentFolder GetSourceFolder(string organisationId, string kbId, int sourceId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder> localVarResponse = GetSourceFolderWithHttpInfo(organisationId, kbId, sourceId, sessionId, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get source-folder Return the content of a top-level folder (source folder).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the source-id of the item being deleted</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMDocumentFolder</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder> GetSourceFolderWithHttpInfo(string organisationId, string kbId, int sourceId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->GetSourceFolder");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->GetSourceFolder");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->GetSourceFolder");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.GetSourceFolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CMDocumentFolder>("/api/dms/source/{organisationId}/{kbId}/{sourceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSourceFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get source-folder Return the content of a top-level folder (source folder).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the source-id of the item being deleted</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMDocumentFolder</returns>
        public async System.Threading.Tasks.Task<CMDocumentFolder> GetSourceFolderAsync(string organisationId, string kbId, int sourceId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder> localVarResponse = await GetSourceFolderWithHttpInfoAsync(organisationId, kbId, sourceId, sessionId, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get source-folder Return the content of a top-level folder (source folder).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the source-id of the item being deleted</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMDocumentFolder)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder>> GetSourceFolderWithHttpInfoAsync(string organisationId, string kbId, int sourceId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->GetSourceFolder");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->GetSourceFolder");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->GetSourceFolder");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.GetSourceFolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CMDocumentFolder>("/api/dms/source/{organisationId}/{kbId}/{sourceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSourceFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Subscriptions Return a subscriptions object for a given user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSubscriptions</returns>
        public CMSubscriptions GetSubscriptionList(string organisationId, string kbId, string userId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMSubscriptions> localVarResponse = GetSubscriptionListWithHttpInfo(organisationId, kbId, userId, sessionId, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Subscriptions Return a subscriptions object for a given user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSubscriptions</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMSubscriptions> GetSubscriptionListWithHttpInfo(string organisationId, string kbId, string userId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->GetSubscriptionList");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->GetSubscriptionList");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling DmsApi->GetSubscriptionList");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->GetSubscriptionList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.GetSubscriptionList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CMSubscriptions>("/api/dms/subscriptions/{organisationId}/{kbId}/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubscriptionList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Subscriptions Return a subscriptions object for a given user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSubscriptions</returns>
        public async System.Threading.Tasks.Task<CMSubscriptions> GetSubscriptionListAsync(string organisationId, string kbId, string userId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMSubscriptions> localVarResponse = await GetSubscriptionListWithHttpInfoAsync(organisationId, kbId, userId, sessionId, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Subscriptions Return a subscriptions object for a given user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSubscriptions)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMSubscriptions>> GetSubscriptionListWithHttpInfoAsync(string organisationId, string kbId, string userId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->GetSubscriptionList");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->GetSubscriptionList");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling DmsApi->GetSubscriptionList");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->GetSubscriptionList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.GetSubscriptionList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CMSubscriptions>("/api/dms/subscriptions/{organisationId}/{kbId}/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubscriptionList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Dashboard Return a the user&#39;s DMS dashboard
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMDUserDashboard</returns>
        public CMDUserDashboard GetUserDashboard(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMDUserDashboard> localVarResponse = GetUserDashboardWithHttpInfo(organisationId, kbId, sessionId, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Dashboard Return a the user&#39;s DMS dashboard
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMDUserDashboard</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMDUserDashboard> GetUserDashboardWithHttpInfo(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->GetUserDashboard");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->GetUserDashboard");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->GetUserDashboard");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.GetUserDashboard";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CMDUserDashboard>("/api/dms/dashboard/{organisationId}/{kbId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserDashboard", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Dashboard Return a the user&#39;s DMS dashboard
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMDUserDashboard</returns>
        public async System.Threading.Tasks.Task<CMDUserDashboard> GetUserDashboardAsync(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMDUserDashboard> localVarResponse = await GetUserDashboardWithHttpInfoAsync(organisationId, kbId, sessionId, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Dashboard Return a the user&#39;s DMS dashboard
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMDUserDashboard)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMDUserDashboard>> GetUserDashboardWithHttpInfoAsync(string organisationId, string kbId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->GetUserDashboard");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->GetUserDashboard");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->GetUserDashboard");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.GetUserDashboard";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CMDUserDashboard>("/api/dms/dashboard/{organisationId}/{kbId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserDashboard", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Notifications Return all user notifications from the DMS for a given user by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year for the notifications</param>
        /// <param name="month">the month for the notifications</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMUserNotification&gt;</returns>
        public List<CMUserNotification> GetUserNotifications(string sessionId, string organisationId, string kbId, int year, int month, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMUserNotification>> localVarResponse = GetUserNotificationsWithHttpInfo(sessionId, organisationId, kbId, year, month, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Notifications Return all user notifications from the DMS for a given user by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year for the notifications</param>
        /// <param name="month">the month for the notifications</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMUserNotification&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<CMUserNotification>> GetUserNotificationsWithHttpInfo(string sessionId, string organisationId, string kbId, int year, int month, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->GetUserNotifications");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->GetUserNotifications");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->GetUserNotifications");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", Org.OpenAPITools.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("month", Org.OpenAPITools.Client.ClientUtils.ParameterToString(month)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.GetUserNotifications";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CMUserNotification>>("/api/dms/notifications/{organisationId}/{kbId}/{year}/{month}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserNotifications", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Notifications Return all user notifications from the DMS for a given user by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year for the notifications</param>
        /// <param name="month">the month for the notifications</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMUserNotification&gt;</returns>
        public async System.Threading.Tasks.Task<List<CMUserNotification>> GetUserNotificationsAsync(string sessionId, string organisationId, string kbId, int year, int month, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMUserNotification>> localVarResponse = await GetUserNotificationsWithHttpInfoAsync(sessionId, organisationId, kbId, year, month, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Notifications Return all user notifications from the DMS for a given user by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="year">the year for the notifications</param>
        /// <param name="month">the month for the notifications</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMUserNotification&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<CMUserNotification>>> GetUserNotificationsWithHttpInfoAsync(string sessionId, string organisationId, string kbId, int year, int month, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->GetUserNotifications");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->GetUserNotifications");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->GetUserNotifications");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", Org.OpenAPITools.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("month", Org.OpenAPITools.Client.ClientUtils.ParameterToString(month)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.GetUserNotifications";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CMUserNotification>>("/api/dms/notifications/{organisationId}/{kbId}/{year}/{month}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserNotifications", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Document Lock Lock a document for a user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentLock"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMDocument&gt;</returns>
        public List<CMDocument> LockDocument(string sessionId, CMDocumentLock cMDocumentLock, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMDocument>> localVarResponse = LockDocumentWithHttpInfo(sessionId, cMDocumentLock, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Document Lock Lock a document for a user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentLock"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMDocument&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<CMDocument>> LockDocumentWithHttpInfo(string sessionId, CMDocumentLock cMDocumentLock, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->LockDocument");
            }

            // verify the required parameter 'cMDocumentLock' is set
            if (cMDocumentLock == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMDocumentLock' when calling DmsApi->LockDocument");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMDocumentLock;

            localVarRequestOptions.Operation = "DmsApi.LockDocument";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<CMDocument>>("/api/dms/lock", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LockDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Document Lock Lock a document for a user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentLock"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMDocument&gt;</returns>
        public async System.Threading.Tasks.Task<List<CMDocument>> LockDocumentAsync(string sessionId, CMDocumentLock cMDocumentLock, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMDocument>> localVarResponse = await LockDocumentWithHttpInfoAsync(sessionId, cMDocumentLock, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Document Lock Lock a document for a user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentLock"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMDocument&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<CMDocument>>> LockDocumentWithHttpInfoAsync(string sessionId, CMDocumentLock cMDocumentLock, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->LockDocument");
            }

            // verify the required parameter 'cMDocumentLock' is set
            if (cMDocumentLock == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMDocumentLock' when calling DmsApi->LockDocument");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMDocumentLock;

            localVarRequestOptions.Operation = "DmsApi.LockDocument";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<CMDocument>>("/api/dms/lock", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LockDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Release a lock The originator of a lock releases a locked document.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMDocument&gt;</returns>
        public List<CMDocument> ReleaseLock(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMDocument>> localVarResponse = ReleaseLockWithHttpInfo(sessionId, organisationId, kbId, userId, url, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Release a lock The originator of a lock releases a locked document.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMDocument&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<CMDocument>> ReleaseLockWithHttpInfo(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->ReleaseLock");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->ReleaseLock");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->ReleaseLock");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling DmsApi->ReleaseLock");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DmsApi->ReleaseLock");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.ReleaseLock";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<CMDocument>>("/api/dms/lock/{organisationId}/{kbId}/{userId}/{url}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReleaseLock", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Release a lock The originator of a lock releases a locked document.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMDocument&gt;</returns>
        public async System.Threading.Tasks.Task<List<CMDocument>> ReleaseLockAsync(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMDocument>> localVarResponse = await ReleaseLockWithHttpInfoAsync(sessionId, organisationId, kbId, userId, url, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Release a lock The originator of a lock releases a locked document.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="userId">the user&#39;s id</param>
        /// <param name="url">the base64 encoded url value</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMDocument&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<CMDocument>>> ReleaseLockWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string userId, string url, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->ReleaseLock");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->ReleaseLock");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->ReleaseLock");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling DmsApi->ReleaseLock");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DmsApi->ReleaseLock");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.ReleaseLock";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<CMDocument>>("/api/dms/lock/{organisationId}/{kbId}/{userId}/{url}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReleaseLock", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DMS Client Query a SimSage DMS client asks a question or performs a keyword-search.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMClientQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMClientQueryResult</returns>
        public CMClientQueryResult RestfulDMSClientQuery(string sessionId, CMClientQuery cMClientQuery, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMClientQueryResult> localVarResponse = RestfulDMSClientQueryWithHttpInfo(sessionId, cMClientQuery);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DMS Client Query a SimSage DMS client asks a question or performs a keyword-search.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMClientQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMClientQueryResult</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMClientQueryResult> RestfulDMSClientQueryWithHttpInfo(string sessionId, CMClientQuery cMClientQuery, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->RestfulDMSClientQuery");
            }

            // verify the required parameter 'cMClientQuery' is set
            if (cMClientQuery == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMClientQuery' when calling DmsApi->RestfulDMSClientQuery");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMClientQuery;

            localVarRequestOptions.Operation = "DmsApi.RestfulDMSClientQuery";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CMClientQueryResult>("/api/dms/query", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestfulDMSClientQuery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DMS Client Query a SimSage DMS client asks a question or performs a keyword-search.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMClientQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMClientQueryResult</returns>
        public async System.Threading.Tasks.Task<CMClientQueryResult> RestfulDMSClientQueryAsync(string sessionId, CMClientQuery cMClientQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMClientQueryResult> localVarResponse = await RestfulDMSClientQueryWithHttpInfoAsync(sessionId, cMClientQuery, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DMS Client Query a SimSage DMS client asks a question or performs a keyword-search.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMClientQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMClientQueryResult)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMClientQueryResult>> RestfulDMSClientQueryWithHttpInfoAsync(string sessionId, CMClientQuery cMClientQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->RestfulDMSClientQuery");
            }

            // verify the required parameter 'cMClientQuery' is set
            if (cMClientQuery == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMClientQuery' when calling DmsApi->RestfulDMSClientQuery");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.Data = cMClientQuery;

            localVarRequestOptions.Operation = "DmsApi.RestfulDMSClientQuery";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CMClientQueryResult>("/api/dms/query", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestfulDMSClientQuery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save Bookmark Save (create or update) a SimSage Document Bookmark.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentBookmark"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;DocumentBookmark&gt;</returns>
        public List<DocumentBookmark> SaveBookmark(string sessionId, CMDocumentBookmark cMDocumentBookmark, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<DocumentBookmark>> localVarResponse = SaveBookmarkWithHttpInfo(sessionId, cMDocumentBookmark, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save Bookmark Save (create or update) a SimSage Document Bookmark.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentBookmark"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;DocumentBookmark&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<DocumentBookmark>> SaveBookmarkWithHttpInfo(string sessionId, CMDocumentBookmark cMDocumentBookmark, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->SaveBookmark");
            }

            // verify the required parameter 'cMDocumentBookmark' is set
            if (cMDocumentBookmark == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMDocumentBookmark' when calling DmsApi->SaveBookmark");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMDocumentBookmark;

            localVarRequestOptions.Operation = "DmsApi.SaveBookmark";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<DocumentBookmark>>("/api/dms/bookmark", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveBookmark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save Bookmark Save (create or update) a SimSage Document Bookmark.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentBookmark"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DocumentBookmark&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentBookmark>> SaveBookmarkAsync(string sessionId, CMDocumentBookmark cMDocumentBookmark, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<DocumentBookmark>> localVarResponse = await SaveBookmarkWithHttpInfoAsync(sessionId, cMDocumentBookmark, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save Bookmark Save (create or update) a SimSage Document Bookmark.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentBookmark"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentBookmark&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<DocumentBookmark>>> SaveBookmarkWithHttpInfoAsync(string sessionId, CMDocumentBookmark cMDocumentBookmark, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->SaveBookmark");
            }

            // verify the required parameter 'cMDocumentBookmark' is set
            if (cMDocumentBookmark == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMDocumentBookmark' when calling DmsApi->SaveBookmark");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMDocumentBookmark;

            localVarRequestOptions.Operation = "DmsApi.SaveBookmark";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<DocumentBookmark>>("/api/dms/bookmark", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveBookmark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save HashTag set for a document Save (create / update / delete) a hashTag set for a document.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentHashTag"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage SaveHashTags(string sessionId, CMDocumentHashTag cMDocumentHashTag, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = SaveHashTagsWithHttpInfo(sessionId, cMDocumentHashTag, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save HashTag set for a document Save (create / update / delete) a hashTag set for a document.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentHashTag"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> SaveHashTagsWithHttpInfo(string sessionId, CMDocumentHashTag cMDocumentHashTag, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->SaveHashTags");
            }

            // verify the required parameter 'cMDocumentHashTag' is set
            if (cMDocumentHashTag == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMDocumentHashTag' when calling DmsApi->SaveHashTags");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMDocumentHashTag;

            localVarRequestOptions.Operation = "DmsApi.SaveHashTags";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<JsonMessage>("/api/dms/hash-tag", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveHashTags", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save HashTag set for a document Save (create / update / delete) a hashTag set for a document.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentHashTag"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> SaveHashTagsAsync(string sessionId, CMDocumentHashTag cMDocumentHashTag, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await SaveHashTagsWithHttpInfoAsync(sessionId, cMDocumentHashTag, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save HashTag set for a document Save (create / update / delete) a hashTag set for a document.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentHashTag"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> SaveHashTagsWithHttpInfoAsync(string sessionId, CMDocumentHashTag cMDocumentHashTag, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->SaveHashTags");
            }

            // verify the required parameter 'cMDocumentHashTag' is set
            if (cMDocumentHashTag == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMDocumentHashTag' when calling DmsApi->SaveHashTags");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMDocumentHashTag;

            localVarRequestOptions.Operation = "DmsApi.SaveHashTags";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JsonMessage>("/api/dms/hash-tag", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveHashTags", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save Note Save (create or update) a SimSage Document Note.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentNote"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMDocumentNote&gt;</returns>
        public List<CMDocumentNote> SaveNote(string sessionId, CMDocumentNote cMDocumentNote, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMDocumentNote>> localVarResponse = SaveNoteWithHttpInfo(sessionId, cMDocumentNote, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save Note Save (create or update) a SimSage Document Note.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentNote"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMDocumentNote&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<CMDocumentNote>> SaveNoteWithHttpInfo(string sessionId, CMDocumentNote cMDocumentNote, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->SaveNote");
            }

            // verify the required parameter 'cMDocumentNote' is set
            if (cMDocumentNote == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMDocumentNote' when calling DmsApi->SaveNote");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMDocumentNote;

            localVarRequestOptions.Operation = "DmsApi.SaveNote";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<CMDocumentNote>>("/api/dms/note", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save Note Save (create or update) a SimSage Document Note.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentNote"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMDocumentNote&gt;</returns>
        public async System.Threading.Tasks.Task<List<CMDocumentNote>> SaveNoteAsync(string sessionId, CMDocumentNote cMDocumentNote, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMDocumentNote>> localVarResponse = await SaveNoteWithHttpInfoAsync(sessionId, cMDocumentNote, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save Note Save (create or update) a SimSage Document Note.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentNote"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMDocumentNote&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<CMDocumentNote>>> SaveNoteWithHttpInfoAsync(string sessionId, CMDocumentNote cMDocumentNote, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->SaveNote");
            }

            // verify the required parameter 'cMDocumentNote' is set
            if (cMDocumentNote == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMDocumentNote' when calling DmsApi->SaveNote");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMDocumentNote;

            localVarRequestOptions.Operation = "DmsApi.SaveNote";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<CMDocumentNote>>("/api/dms/note", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save Search Save a user&#39;s search query.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSavedSearch"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMSavedSearch&gt;</returns>
        public List<CMSavedSearch> SaveSearch(string sessionId, CMSavedSearch cMSavedSearch, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMSavedSearch>> localVarResponse = SaveSearchWithHttpInfo(sessionId, cMSavedSearch, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save Search Save a user&#39;s search query.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSavedSearch"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMSavedSearch&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<CMSavedSearch>> SaveSearchWithHttpInfo(string sessionId, CMSavedSearch cMSavedSearch, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->SaveSearch");
            }

            // verify the required parameter 'cMSavedSearch' is set
            if (cMSavedSearch == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMSavedSearch' when calling DmsApi->SaveSearch");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMSavedSearch;

            localVarRequestOptions.Operation = "DmsApi.SaveSearch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<CMSavedSearch>>("/api/dms/save-search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save Search Save a user&#39;s search query.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSavedSearch"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMSavedSearch&gt;</returns>
        public async System.Threading.Tasks.Task<List<CMSavedSearch>> SaveSearchAsync(string sessionId, CMSavedSearch cMSavedSearch, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMSavedSearch>> localVarResponse = await SaveSearchWithHttpInfoAsync(sessionId, cMSavedSearch, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save Search Save a user&#39;s search query.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSavedSearch"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMSavedSearch&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<CMSavedSearch>>> SaveSearchWithHttpInfoAsync(string sessionId, CMSavedSearch cMSavedSearch, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->SaveSearch");
            }

            // verify the required parameter 'cMSavedSearch' is set
            if (cMSavedSearch == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMSavedSearch' when calling DmsApi->SaveSearch");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMSavedSearch;

            localVarRequestOptions.Operation = "DmsApi.SaveSearch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<CMSavedSearch>>("/api/dms/save-search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save Subscription Save (create or update) a SimSage Document subscription.  Returns a subscription object for this user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentSubscription"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSubscriptions</returns>
        public CMSubscriptions SaveSubscription(string sessionId, CMDocumentSubscription cMDocumentSubscription, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMSubscriptions> localVarResponse = SaveSubscriptionWithHttpInfo(sessionId, cMDocumentSubscription, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save Subscription Save (create or update) a SimSage Document subscription.  Returns a subscription object for this user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentSubscription"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSubscriptions</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMSubscriptions> SaveSubscriptionWithHttpInfo(string sessionId, CMDocumentSubscription cMDocumentSubscription, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->SaveSubscription");
            }

            // verify the required parameter 'cMDocumentSubscription' is set
            if (cMDocumentSubscription == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMDocumentSubscription' when calling DmsApi->SaveSubscription");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMDocumentSubscription;

            localVarRequestOptions.Operation = "DmsApi.SaveSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CMSubscriptions>("/api/dms/subscription", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save Subscription Save (create or update) a SimSage Document subscription.  Returns a subscription object for this user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentSubscription"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSubscriptions</returns>
        public async System.Threading.Tasks.Task<CMSubscriptions> SaveSubscriptionAsync(string sessionId, CMDocumentSubscription cMDocumentSubscription, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMSubscriptions> localVarResponse = await SaveSubscriptionWithHttpInfoAsync(sessionId, cMDocumentSubscription, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save Subscription Save (create or update) a SimSage Document subscription.  Returns a subscription object for this user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMDocumentSubscription"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSubscriptions)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMSubscriptions>> SaveSubscriptionWithHttpInfoAsync(string sessionId, CMDocumentSubscription cMDocumentSubscription, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->SaveSubscription");
            }

            // verify the required parameter 'cMDocumentSubscription' is set
            if (cMDocumentSubscription == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMDocumentSubscription' when calling DmsApi->SaveSubscription");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMDocumentSubscription;

            localVarRequestOptions.Operation = "DmsApi.SaveSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CMSubscriptions>("/api/dms/subscription", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// un-delete a record Un-delete a previously deleted document and return a list of deleted document records for an administrator (all records).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the item&#39;s source id</param>
        /// <param name="url">the document&#39;s url, base64 encoded.  A unique id identifying a document.</param>
        /// <param name="filter">an optional text filter for URLs</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;DocumentDeleted&gt;</returns>
        public List<DocumentDeleted> UndeleteDocument(string sessionId, string organisationId, string kbId, int sourceId, string url, string filter, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<DocumentDeleted>> localVarResponse = UndeleteDocumentWithHttpInfo(sessionId, organisationId, kbId, sourceId, url, filter, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// un-delete a record Un-delete a previously deleted document and return a list of deleted document records for an administrator (all records).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the item&#39;s source id</param>
        /// <param name="url">the document&#39;s url, base64 encoded.  A unique id identifying a document.</param>
        /// <param name="filter">an optional text filter for URLs</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;DocumentDeleted&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<DocumentDeleted>> UndeleteDocumentWithHttpInfo(string sessionId, string organisationId, string kbId, int sourceId, string url, string filter, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->UndeleteDocument");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->UndeleteDocument");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->UndeleteDocument");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DmsApi->UndeleteDocument");
            }

            // verify the required parameter 'filter' is set
            if (filter == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'filter' when calling DmsApi->UndeleteDocument");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.PathParameters.Add("filter", Org.OpenAPITools.Client.ClientUtils.ParameterToString(filter)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.UndeleteDocument";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<DocumentDeleted>>("/api/dms/un-delete/{organisationId}/{kbId}/{sourceId}/{url}/{filter}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UndeleteDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// un-delete a record Un-delete a previously deleted document and return a list of deleted document records for an administrator (all records).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the item&#39;s source id</param>
        /// <param name="url">the document&#39;s url, base64 encoded.  A unique id identifying a document.</param>
        /// <param name="filter">an optional text filter for URLs</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DocumentDeleted&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentDeleted>> UndeleteDocumentAsync(string sessionId, string organisationId, string kbId, int sourceId, string url, string filter, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<DocumentDeleted>> localVarResponse = await UndeleteDocumentWithHttpInfoAsync(sessionId, organisationId, kbId, sourceId, url, filter, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// un-delete a record Un-delete a previously deleted document and return a list of deleted document records for an administrator (all records).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the item&#39;s source id</param>
        /// <param name="url">the document&#39;s url, base64 encoded.  A unique id identifying a document.</param>
        /// <param name="filter">an optional text filter for URLs</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentDeleted&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<DocumentDeleted>>> UndeleteDocumentWithHttpInfoAsync(string sessionId, string organisationId, string kbId, int sourceId, string url, string filter, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->UndeleteDocument");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->UndeleteDocument");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->UndeleteDocument");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling DmsApi->UndeleteDocument");
            }

            // verify the required parameter 'filter' is set
            if (filter == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'filter' when calling DmsApi->UndeleteDocument");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("url", Org.OpenAPITools.Client.ClientUtils.ParameterToString(url)); // path parameter
            localVarRequestOptions.PathParameters.Add("filter", Org.OpenAPITools.Client.ClientUtils.ParameterToString(filter)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DmsApi.UndeleteDocument";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<DocumentDeleted>>("/api/dms/un-delete/{organisationId}/{kbId}/{sourceId}/{url}/{filter}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UndeleteDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an item&#39;s ACLs Update the Access Control List of a SimSage DMS item (source, file, or folder).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMUpdateACLs"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage UpdateACLs(string sessionId, CMUpdateACLs cMUpdateACLs, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = UpdateACLsWithHttpInfo(sessionId, cMUpdateACLs, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an item&#39;s ACLs Update the Access Control List of a SimSage DMS item (source, file, or folder).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMUpdateACLs"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> UpdateACLsWithHttpInfo(string sessionId, CMUpdateACLs cMUpdateACLs, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->UpdateACLs");
            }

            // verify the required parameter 'cMUpdateACLs' is set
            if (cMUpdateACLs == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMUpdateACLs' when calling DmsApi->UpdateACLs");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMUpdateACLs;

            localVarRequestOptions.Operation = "DmsApi.UpdateACLs";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<JsonMessage>("/api/dms/acls", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateACLs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an item&#39;s ACLs Update the Access Control List of a SimSage DMS item (source, file, or folder).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMUpdateACLs"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> UpdateACLsAsync(string sessionId, CMUpdateACLs cMUpdateACLs, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await UpdateACLsWithHttpInfoAsync(sessionId, cMUpdateACLs, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an item&#39;s ACLs Update the Access Control List of a SimSage DMS item (source, file, or folder).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMUpdateACLs"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> UpdateACLsWithHttpInfoAsync(string sessionId, CMUpdateACLs cMUpdateACLs, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->UpdateACLs");
            }

            // verify the required parameter 'cMUpdateACLs' is set
            if (cMUpdateACLs == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMUpdateACLs' when calling DmsApi->UpdateACLs");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMUpdateACLs;

            localVarRequestOptions.Operation = "DmsApi.UpdateACLs";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JsonMessage>("/api/dms/acls", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateACLs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a Document Upload a document into a DMS folder
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the owner source&#39;s id</param>
        /// <param name="folderId">the id of the folder we&#39;re uploading into</param>
        /// <param name="lastModified">lastModified unix-date-time</param>
        /// <param name="file">the file to upload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMDocumentFolder</returns>
        public CMDocumentFolder UploadDocument(string sessionId, string organisationId, string kbId, int sourceId, string folderId, string lastModified, System.IO.Stream file, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder> localVarResponse = UploadDocumentWithHttpInfo(sessionId, organisationId, kbId, sourceId, folderId, lastModified, file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a Document Upload a document into a DMS folder
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the owner source&#39;s id</param>
        /// <param name="folderId">the id of the folder we&#39;re uploading into</param>
        /// <param name="lastModified">lastModified unix-date-time</param>
        /// <param name="file">the file to upload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMDocumentFolder</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder> UploadDocumentWithHttpInfo(string sessionId, string organisationId, string kbId, int sourceId, string folderId, string lastModified, System.IO.Stream file, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->UploadDocument");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->UploadDocument");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->UploadDocument");
            }

            // verify the required parameter 'folderId' is set
            if (folderId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'folderId' when calling DmsApi->UploadDocument");
            }

            // verify the required parameter 'lastModified' is set
            if (lastModified == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'lastModified' when calling DmsApi->UploadDocument");
            }

            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'file' when calling DmsApi->UploadDocument");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("folderId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastModified", Org.OpenAPITools.Client.ClientUtils.ParameterToString(lastModified)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "DmsApi.UploadDocument";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CMDocumentFolder>("/api/dms/upload/document/{organisationId}/{kbId}/{sourceId}/{folderId}/{lastModified}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a Document Upload a document into a DMS folder
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the owner source&#39;s id</param>
        /// <param name="folderId">the id of the folder we&#39;re uploading into</param>
        /// <param name="lastModified">lastModified unix-date-time</param>
        /// <param name="file">the file to upload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMDocumentFolder</returns>
        public async System.Threading.Tasks.Task<CMDocumentFolder> UploadDocumentAsync(string sessionId, string organisationId, string kbId, int sourceId, string folderId, string lastModified, System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder> localVarResponse = await UploadDocumentWithHttpInfoAsync(sessionId, organisationId, kbId, sourceId, folderId, lastModified, file, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a Document Upload a document into a DMS folder
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation (its guid id)</param>
        /// <param name="kbId">the knowledge-base (its guid id)</param>
        /// <param name="sourceId">the owner source&#39;s id</param>
        /// <param name="folderId">the id of the folder we&#39;re uploading into</param>
        /// <param name="lastModified">lastModified unix-date-time</param>
        /// <param name="file">the file to upload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMDocumentFolder)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMDocumentFolder>> UploadDocumentWithHttpInfoAsync(string sessionId, string organisationId, string kbId, int sourceId, string folderId, string lastModified, System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DmsApi->UploadDocument");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling DmsApi->UploadDocument");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling DmsApi->UploadDocument");
            }

            // verify the required parameter 'folderId' is set
            if (folderId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'folderId' when calling DmsApi->UploadDocument");
            }

            // verify the required parameter 'lastModified' is set
            if (lastModified == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'lastModified' when calling DmsApi->UploadDocument");
            }

            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'file' when calling DmsApi->UploadDocument");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("folderId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastModified", Org.OpenAPITools.Client.ClientUtils.ParameterToString(lastModified)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "DmsApi.UploadDocument";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CMDocumentFolder>("/api/dms/upload/document/{organisationId}/{kbId}/{sourceId}/{folderId}/{lastModified}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
