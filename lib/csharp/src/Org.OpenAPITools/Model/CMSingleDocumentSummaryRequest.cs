/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// a document summarization object.
    /// </summary>
    [DataContract(Name = "CMSingleDocumentSummaryRequest")]
    public partial class CMSingleDocumentSummaryRequest : IEquatable<CMSingleDocumentSummaryRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMSingleDocumentSummaryRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMSingleDocumentSummaryRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMSingleDocumentSummaryRequest" /> class.
        /// </summary>
        /// <param name="organisationId">the organisation (its guid id) (required).</param>
        /// <param name="kbId">the knowledge-base id (its guid id) (required).</param>
        /// <param name="url">the url of the document to summarize (required).</param>
        /// <param name="top">the top-n sentences to return for the summary of the documents (required).</param>
        public CMSingleDocumentSummaryRequest(string organisationId = default(string), string kbId = default(string), string url = default(string), int top = default(int))
        {
            // to ensure "organisationId" is required (not null)
            if (organisationId == null)
            {
                throw new ArgumentNullException("organisationId is a required property for CMSingleDocumentSummaryRequest and cannot be null");
            }
            this.OrganisationId = organisationId;
            // to ensure "kbId" is required (not null)
            if (kbId == null)
            {
                throw new ArgumentNullException("kbId is a required property for CMSingleDocumentSummaryRequest and cannot be null");
            }
            this.KbId = kbId;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for CMSingleDocumentSummaryRequest and cannot be null");
            }
            this.Url = url;
            this.Top = top;
        }

        /// <summary>
        /// the organisation (its guid id)
        /// </summary>
        /// <value>the organisation (its guid id)</value>
        [DataMember(Name = "organisationId", IsRequired = true, EmitDefaultValue = true)]
        public string OrganisationId { get; set; }

        /// <summary>
        /// the knowledge-base id (its guid id)
        /// </summary>
        /// <value>the knowledge-base id (its guid id)</value>
        [DataMember(Name = "kbId", IsRequired = true, EmitDefaultValue = true)]
        public string KbId { get; set; }

        /// <summary>
        /// the url of the document to summarize
        /// </summary>
        /// <value>the url of the document to summarize</value>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// the top-n sentences to return for the summary of the documents
        /// </summary>
        /// <value>the top-n sentences to return for the summary of the documents</value>
        [DataMember(Name = "top", IsRequired = true, EmitDefaultValue = true)]
        public int Top { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMSingleDocumentSummaryRequest {\n");
            sb.Append("  OrganisationId: ").Append(OrganisationId).Append("\n");
            sb.Append("  KbId: ").Append(KbId).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Top: ").Append(Top).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMSingleDocumentSummaryRequest);
        }

        /// <summary>
        /// Returns true if CMSingleDocumentSummaryRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CMSingleDocumentSummaryRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMSingleDocumentSummaryRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OrganisationId == input.OrganisationId ||
                    (this.OrganisationId != null &&
                    this.OrganisationId.Equals(input.OrganisationId))
                ) && 
                (
                    this.KbId == input.KbId ||
                    (this.KbId != null &&
                    this.KbId.Equals(input.KbId))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Top == input.Top ||
                    this.Top.Equals(input.Top)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrganisationId != null)
                {
                    hashCode = (hashCode * 59) + this.OrganisationId.GetHashCode();
                }
                if (this.KbId != null)
                {
                    hashCode = (hashCode * 59) + this.KbId.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Top.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
