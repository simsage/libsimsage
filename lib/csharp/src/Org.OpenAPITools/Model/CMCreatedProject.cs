/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CMCreatedProject
    /// </summary>
    [DataContract(Name = "CMCreatedProject")]
    public partial class CMCreatedProject : IEquatable<CMCreatedProject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMCreatedProject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMCreatedProject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMCreatedProject" /> class.
        /// </summary>
        /// <param name="defineProjectTaskId">defineProjectTaskId (required).</param>
        /// <param name="projectId">projectId (required).</param>
        public CMCreatedProject(string defineProjectTaskId = default(string), string projectId = default(string))
        {
            // to ensure "defineProjectTaskId" is required (not null)
            if (defineProjectTaskId == null)
            {
                throw new ArgumentNullException("defineProjectTaskId is a required property for CMCreatedProject and cannot be null");
            }
            this.DefineProjectTaskId = defineProjectTaskId;
            // to ensure "projectId" is required (not null)
            if (projectId == null)
            {
                throw new ArgumentNullException("projectId is a required property for CMCreatedProject and cannot be null");
            }
            this.ProjectId = projectId;
        }

        /// <summary>
        /// Gets or Sets DefineProjectTaskId
        /// </summary>
        [DataMember(Name = "defineProjectTaskId", IsRequired = true, EmitDefaultValue = true)]
        public string DefineProjectTaskId { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name = "projectId", IsRequired = true, EmitDefaultValue = true)]
        public string ProjectId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMCreatedProject {\n");
            sb.Append("  DefineProjectTaskId: ").Append(DefineProjectTaskId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMCreatedProject);
        }

        /// <summary>
        /// Returns true if CMCreatedProject instances are equal
        /// </summary>
        /// <param name="input">Instance of CMCreatedProject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMCreatedProject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DefineProjectTaskId == input.DefineProjectTaskId ||
                    (this.DefineProjectTaskId != null &&
                    this.DefineProjectTaskId.Equals(input.DefineProjectTaskId))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefineProjectTaskId != null)
                {
                    hashCode = (hashCode * 59) + this.DefineProjectTaskId.GetHashCode();
                }
                if (this.ProjectId != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
