/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A knowledge-base is SimSage&#39;s representation of a list of information silos belonging to an organisation.  A knowledge-base represents a second level of isolation between data in SimSage.  The first level is an Organisation.  Each organisation in SimSage has a list of knowledge-bases, strictly isolated from each other.  Each knowledge-base in turn can have many sources (information collectors that add items to a knowledge-base like a file-crawler, or a web-crawler)
    /// </summary>
    [DataContract(Name = "CMKnowledgeBase")]
    public partial class CMKnowledgeBase : IEquatable<CMKnowledgeBase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMKnowledgeBase" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMKnowledgeBase() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMKnowledgeBase" /> class.
        /// </summary>
        /// <param name="organisationId">the main organisation (its guid id) (required).</param>
        /// <param name="kbId">the knowledge-base id (its guid id) (required).</param>
        /// <param name="name">the name of this knowledge-base (must be unique within an organisation) (required).</param>
        /// <param name="email">the support email of the person to email with any UI generated questions (required).</param>
        /// <param name="securityId">the security id (a guid) of this knowledge-base.  This is a shared secret between SimSage and external systems. (required).</param>
        /// <param name="created">when this knowledge-base was created, a unix date-time long (required).</param>
        /// <param name="maxQueriesPerDay">limit the number of queries per day (if greater than 0).  A value of zero (0) indicates no limits. (required).</param>
        /// <param name="analyticsWindowInMonths">How long to keep analytics for in months.  A value of zero (0) indicates forever (required).</param>
        /// <param name="enabled">a flag signalling this knowledge-base is active (can be used).  An inactive knowledge-base cannot be queried. (required).</param>
        /// <param name="operatorEnabled">a flag signalling this knowledge-base has operator support.  A value of false prevents this knowledge-base&#39;s operator from interacting with end-users. (required).</param>
        /// <param name="capacityWarnings">All queries are given a 10% grace when daily-limits (maxQueriesPerDay) are enforced.  If this flag is true, the owner of this knowledge-base (email) is sent a warning at 100% daily utiliziation. (required).</param>
        /// <param name="indexSchedule">the time-schedule for index-optimization, when active. (required).</param>
        /// <param name="lastIndexOptimizationTime">the last time this triggered and ran as a unix date-time (read only) (required).</param>
        public CMKnowledgeBase(string organisationId = default(string), string kbId = default(string), string name = default(string), string email = default(string), string securityId = default(string), long created = default(long), long maxQueriesPerDay = default(long), int analyticsWindowInMonths = default(int), bool enabled = default(bool), bool operatorEnabled = default(bool), bool capacityWarnings = default(bool), string indexSchedule = default(string), long lastIndexOptimizationTime = default(long))
        {
            // to ensure "organisationId" is required (not null)
            if (organisationId == null)
            {
                throw new ArgumentNullException("organisationId is a required property for CMKnowledgeBase and cannot be null");
            }
            this.OrganisationId = organisationId;
            // to ensure "kbId" is required (not null)
            if (kbId == null)
            {
                throw new ArgumentNullException("kbId is a required property for CMKnowledgeBase and cannot be null");
            }
            this.KbId = kbId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CMKnowledgeBase and cannot be null");
            }
            this.Name = name;
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for CMKnowledgeBase and cannot be null");
            }
            this.Email = email;
            // to ensure "securityId" is required (not null)
            if (securityId == null)
            {
                throw new ArgumentNullException("securityId is a required property for CMKnowledgeBase and cannot be null");
            }
            this.SecurityId = securityId;
            this.Created = created;
            this.MaxQueriesPerDay = maxQueriesPerDay;
            this.AnalyticsWindowInMonths = analyticsWindowInMonths;
            this.Enabled = enabled;
            this.OperatorEnabled = operatorEnabled;
            this.CapacityWarnings = capacityWarnings;
            // to ensure "indexSchedule" is required (not null)
            if (indexSchedule == null)
            {
                throw new ArgumentNullException("indexSchedule is a required property for CMKnowledgeBase and cannot be null");
            }
            this.IndexSchedule = indexSchedule;
            this.LastIndexOptimizationTime = lastIndexOptimizationTime;
        }

        /// <summary>
        /// the main organisation (its guid id)
        /// </summary>
        /// <value>the main organisation (its guid id)</value>
        [DataMember(Name = "organisationId", IsRequired = true, EmitDefaultValue = true)]
        public string OrganisationId { get; set; }

        /// <summary>
        /// the knowledge-base id (its guid id)
        /// </summary>
        /// <value>the knowledge-base id (its guid id)</value>
        [DataMember(Name = "kbId", IsRequired = true, EmitDefaultValue = true)]
        public string KbId { get; set; }

        /// <summary>
        /// the name of this knowledge-base (must be unique within an organisation)
        /// </summary>
        /// <value>the name of this knowledge-base (must be unique within an organisation)</value>
        /// <example>My little Pony knowledge-base</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// the support email of the person to email with any UI generated questions
        /// </summary>
        /// <value>the support email of the person to email with any UI generated questions</value>
        /// <example>example@simsage.co.uk</example>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// the security id (a guid) of this knowledge-base.  This is a shared secret between SimSage and external systems.
        /// </summary>
        /// <value>the security id (a guid) of this knowledge-base.  This is a shared secret between SimSage and external systems.</value>
        [DataMember(Name = "securityId", IsRequired = true, EmitDefaultValue = true)]
        public string SecurityId { get; set; }

        /// <summary>
        /// when this knowledge-base was created, a unix date-time long
        /// </summary>
        /// <value>when this knowledge-base was created, a unix date-time long</value>
        [DataMember(Name = "created", IsRequired = true, EmitDefaultValue = true)]
        public long Created { get; set; }

        /// <summary>
        /// limit the number of queries per day (if greater than 0).  A value of zero (0) indicates no limits.
        /// </summary>
        /// <value>limit the number of queries per day (if greater than 0).  A value of zero (0) indicates no limits.</value>
        /// <example>5000</example>
        [DataMember(Name = "maxQueriesPerDay", IsRequired = true, EmitDefaultValue = true)]
        public long MaxQueriesPerDay { get; set; }

        /// <summary>
        /// How long to keep analytics for in months.  A value of zero (0) indicates forever
        /// </summary>
        /// <value>How long to keep analytics for in months.  A value of zero (0) indicates forever</value>
        /// <example>12</example>
        [DataMember(Name = "analyticsWindowInMonths", IsRequired = true, EmitDefaultValue = true)]
        public int AnalyticsWindowInMonths { get; set; }

        /// <summary>
        /// a flag signalling this knowledge-base is active (can be used).  An inactive knowledge-base cannot be queried.
        /// </summary>
        /// <value>a flag signalling this knowledge-base is active (can be used).  An inactive knowledge-base cannot be queried.</value>
        /// <example>true</example>
        [DataMember(Name = "enabled", IsRequired = true, EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// a flag signalling this knowledge-base has operator support.  A value of false prevents this knowledge-base&#39;s operator from interacting with end-users.
        /// </summary>
        /// <value>a flag signalling this knowledge-base has operator support.  A value of false prevents this knowledge-base&#39;s operator from interacting with end-users.</value>
        /// <example>true</example>
        [DataMember(Name = "operatorEnabled", IsRequired = true, EmitDefaultValue = true)]
        public bool OperatorEnabled { get; set; }

        /// <summary>
        /// All queries are given a 10% grace when daily-limits (maxQueriesPerDay) are enforced.  If this flag is true, the owner of this knowledge-base (email) is sent a warning at 100% daily utiliziation.
        /// </summary>
        /// <value>All queries are given a 10% grace when daily-limits (maxQueriesPerDay) are enforced.  If this flag is true, the owner of this knowledge-base (email) is sent a warning at 100% daily utiliziation.</value>
        /// <example>true</example>
        [DataMember(Name = "capacityWarnings", IsRequired = true, EmitDefaultValue = true)]
        public bool CapacityWarnings { get; set; }

        /// <summary>
        /// the time-schedule for index-optimization, when active.
        /// </summary>
        /// <value>the time-schedule for index-optimization, when active.</value>
        /// <example>eg. If we want to optimize the indexes every Monday from midnight to 1am, and Tuesday 5pm (GMT), we&#39;d use: &quot;mon-00,tue-17&quot;</example>
        [DataMember(Name = "indexSchedule", IsRequired = true, EmitDefaultValue = true)]
        public string IndexSchedule { get; set; }

        /// <summary>
        /// the last time this triggered and ran as a unix date-time (read only)
        /// </summary>
        /// <value>the last time this triggered and ran as a unix date-time (read only)</value>
        [DataMember(Name = "lastIndexOptimizationTime", IsRequired = true, EmitDefaultValue = true)]
        public long LastIndexOptimizationTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMKnowledgeBase {\n");
            sb.Append("  OrganisationId: ").Append(OrganisationId).Append("\n");
            sb.Append("  KbId: ").Append(KbId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  SecurityId: ").Append(SecurityId).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  MaxQueriesPerDay: ").Append(MaxQueriesPerDay).Append("\n");
            sb.Append("  AnalyticsWindowInMonths: ").Append(AnalyticsWindowInMonths).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  OperatorEnabled: ").Append(OperatorEnabled).Append("\n");
            sb.Append("  CapacityWarnings: ").Append(CapacityWarnings).Append("\n");
            sb.Append("  IndexSchedule: ").Append(IndexSchedule).Append("\n");
            sb.Append("  LastIndexOptimizationTime: ").Append(LastIndexOptimizationTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMKnowledgeBase);
        }

        /// <summary>
        /// Returns true if CMKnowledgeBase instances are equal
        /// </summary>
        /// <param name="input">Instance of CMKnowledgeBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMKnowledgeBase input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OrganisationId == input.OrganisationId ||
                    (this.OrganisationId != null &&
                    this.OrganisationId.Equals(input.OrganisationId))
                ) && 
                (
                    this.KbId == input.KbId ||
                    (this.KbId != null &&
                    this.KbId.Equals(input.KbId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.SecurityId == input.SecurityId ||
                    (this.SecurityId != null &&
                    this.SecurityId.Equals(input.SecurityId))
                ) && 
                (
                    this.Created == input.Created ||
                    this.Created.Equals(input.Created)
                ) && 
                (
                    this.MaxQueriesPerDay == input.MaxQueriesPerDay ||
                    this.MaxQueriesPerDay.Equals(input.MaxQueriesPerDay)
                ) && 
                (
                    this.AnalyticsWindowInMonths == input.AnalyticsWindowInMonths ||
                    this.AnalyticsWindowInMonths.Equals(input.AnalyticsWindowInMonths)
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.OperatorEnabled == input.OperatorEnabled ||
                    this.OperatorEnabled.Equals(input.OperatorEnabled)
                ) && 
                (
                    this.CapacityWarnings == input.CapacityWarnings ||
                    this.CapacityWarnings.Equals(input.CapacityWarnings)
                ) && 
                (
                    this.IndexSchedule == input.IndexSchedule ||
                    (this.IndexSchedule != null &&
                    this.IndexSchedule.Equals(input.IndexSchedule))
                ) && 
                (
                    this.LastIndexOptimizationTime == input.LastIndexOptimizationTime ||
                    this.LastIndexOptimizationTime.Equals(input.LastIndexOptimizationTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrganisationId != null)
                {
                    hashCode = (hashCode * 59) + this.OrganisationId.GetHashCode();
                }
                if (this.KbId != null)
                {
                    hashCode = (hashCode * 59) + this.KbId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.SecurityId != null)
                {
                    hashCode = (hashCode * 59) + this.SecurityId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Created.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxQueriesPerDay.GetHashCode();
                hashCode = (hashCode * 59) + this.AnalyticsWindowInMonths.GetHashCode();
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                hashCode = (hashCode * 59) + this.OperatorEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.CapacityWarnings.GetHashCode();
                if (this.IndexSchedule != null)
                {
                    hashCode = (hashCode * 59) + this.IndexSchedule.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LastIndexOptimizationTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
