/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// a semantic update/create object
    /// </summary>
    [DataContract(Name = "CMTextToSearchEdit")]
    public partial class CMTextToSearchEdit : IEquatable<CMTextToSearchEdit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMTextToSearchEdit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMTextToSearchEdit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMTextToSearchEdit" /> class.
        /// </summary>
        /// <param name="searchType">the type, either \&quot;and\&quot; or \&quot;sub\&quot; (required).</param>
        /// <param name="searchPart">the search-part (required).</param>
        /// <param name="matchWordCsv">A list of query matches (required).</param>
        public CMTextToSearchEdit(string searchType = default(string), string searchPart = default(string), string matchWordCsv = default(string))
        {
            // to ensure "searchType" is required (not null)
            if (searchType == null)
            {
                throw new ArgumentNullException("searchType is a required property for CMTextToSearchEdit and cannot be null");
            }
            this.SearchType = searchType;
            // to ensure "searchPart" is required (not null)
            if (searchPart == null)
            {
                throw new ArgumentNullException("searchPart is a required property for CMTextToSearchEdit and cannot be null");
            }
            this.SearchPart = searchPart;
            // to ensure "matchWordCsv" is required (not null)
            if (matchWordCsv == null)
            {
                throw new ArgumentNullException("matchWordCsv is a required property for CMTextToSearchEdit and cannot be null");
            }
            this.MatchWordCsv = matchWordCsv;
        }

        /// <summary>
        /// the type, either \&quot;and\&quot; or \&quot;sub\&quot;
        /// </summary>
        /// <value>the type, either \&quot;and\&quot; or \&quot;sub\&quot;</value>
        /// <example>and</example>
        [DataMember(Name = "searchType", IsRequired = true, EmitDefaultValue = true)]
        public string SearchType { get; set; }

        /// <summary>
        /// the search-part
        /// </summary>
        /// <value>the search-part</value>
        /// <example>sort()</example>
        [DataMember(Name = "searchPart", IsRequired = true, EmitDefaultValue = true)]
        public string SearchPart { get; set; }

        /// <summary>
        /// A list of query matches
        /// </summary>
        /// <value>A list of query matches</value>
        /// <example>what city,where</example>
        [DataMember(Name = "matchWordCsv", IsRequired = true, EmitDefaultValue = true)]
        public string MatchWordCsv { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMTextToSearchEdit {\n");
            sb.Append("  SearchType: ").Append(SearchType).Append("\n");
            sb.Append("  SearchPart: ").Append(SearchPart).Append("\n");
            sb.Append("  MatchWordCsv: ").Append(MatchWordCsv).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMTextToSearchEdit);
        }

        /// <summary>
        /// Returns true if CMTextToSearchEdit instances are equal
        /// </summary>
        /// <param name="input">Instance of CMTextToSearchEdit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMTextToSearchEdit input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SearchType == input.SearchType ||
                    (this.SearchType != null &&
                    this.SearchType.Equals(input.SearchType))
                ) && 
                (
                    this.SearchPart == input.SearchPart ||
                    (this.SearchPart != null &&
                    this.SearchPart.Equals(input.SearchPart))
                ) && 
                (
                    this.MatchWordCsv == input.MatchWordCsv ||
                    (this.MatchWordCsv != null &&
                    this.MatchWordCsv.Equals(input.MatchWordCsv))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SearchType != null)
                {
                    hashCode = (hashCode * 59) + this.SearchType.GetHashCode();
                }
                if (this.SearchPart != null)
                {
                    hashCode = (hashCode * 59) + this.SearchPart.GetHashCode();
                }
                if (this.MatchWordCsv != null)
                {
                    hashCode = (hashCode * 59) + this.MatchWordCsv.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
