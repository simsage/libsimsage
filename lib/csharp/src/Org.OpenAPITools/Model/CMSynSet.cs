/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.14.12
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A SynSet is an ambiguous noun.  A SynSet tells SimSage how to distinguish between different homoglyphs (same word) with different meanings.
    /// </summary>
    [DataContract(Name = "CMSynSet")]
    public partial class CMSynSet : IEquatable<CMSynSet>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMSynSet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMSynSet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMSynSet" /> class.
        /// </summary>
        /// <param name="word">the word that makes a synset group (an ambiguous noun language concept) (eg. &#39;bank&#39;) (required).</param>
        /// <param name="lemma">the lemma of this word (ie. the simplified base, usually the same as the word, but the lemma of &#39;banks&#39; is &#39;bank&#39;) (required).</param>
        /// <param name="wordCloudCsvList">A list of word-clouds that form each distinct synset.  Each string in this variable is itself a csv string.  The first word of this cloud forms the distinct marker of the synset. (required).</param>
        public CMSynSet(string word = default(string), string lemma = default(string), string wordCloudCsvList = default(string))
        {
            // to ensure "word" is required (not null)
            if (word == null)
            {
                throw new ArgumentNullException("word is a required property for CMSynSet and cannot be null");
            }
            this.Word = word;
            // to ensure "lemma" is required (not null)
            if (lemma == null)
            {
                throw new ArgumentNullException("lemma is a required property for CMSynSet and cannot be null");
            }
            this.Lemma = lemma;
            // to ensure "wordCloudCsvList" is required (not null)
            if (wordCloudCsvList == null)
            {
                throw new ArgumentNullException("wordCloudCsvList is a required property for CMSynSet and cannot be null");
            }
            this.WordCloudCsvList = wordCloudCsvList;
        }

        /// <summary>
        /// the word that makes a synset group (an ambiguous noun language concept) (eg. &#39;bank&#39;)
        /// </summary>
        /// <value>the word that makes a synset group (an ambiguous noun language concept) (eg. &#39;bank&#39;)</value>
        /// <example>bank</example>
        [DataMember(Name = "word", IsRequired = true, EmitDefaultValue = true)]
        public string Word { get; set; }

        /// <summary>
        /// the lemma of this word (ie. the simplified base, usually the same as the word, but the lemma of &#39;banks&#39; is &#39;bank&#39;)
        /// </summary>
        /// <value>the lemma of this word (ie. the simplified base, usually the same as the word, but the lemma of &#39;banks&#39; is &#39;bank&#39;)</value>
        /// <example>bank</example>
        [DataMember(Name = "lemma", IsRequired = true, EmitDefaultValue = true)]
        public string Lemma { get; set; }

        /// <summary>
        /// A list of word-clouds that form each distinct synset.  Each string in this variable is itself a csv string.  The first word of this cloud forms the distinct marker of the synset.
        /// </summary>
        /// <value>A list of word-clouds that form each distinct synset.  Each string in this variable is itself a csv string.  The first word of this cloud forms the distinct marker of the synset.</value>
        /// <example>[&quot;finance,money,cashier,teller,industry&quot;,&quot;tree,river,nature,water&quot;]</example>
        [DataMember(Name = "wordCloudCsvList", IsRequired = true, EmitDefaultValue = true)]
        public string WordCloudCsvList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMSynSet {\n");
            sb.Append("  Word: ").Append(Word).Append("\n");
            sb.Append("  Lemma: ").Append(Lemma).Append("\n");
            sb.Append("  WordCloudCsvList: ").Append(WordCloudCsvList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMSynSet);
        }

        /// <summary>
        /// Returns true if CMSynSet instances are equal
        /// </summary>
        /// <param name="input">Instance of CMSynSet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMSynSet input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Word == input.Word ||
                    (this.Word != null &&
                    this.Word.Equals(input.Word))
                ) && 
                (
                    this.Lemma == input.Lemma ||
                    (this.Lemma != null &&
                    this.Lemma.Equals(input.Lemma))
                ) && 
                (
                    this.WordCloudCsvList == input.WordCloudCsvList ||
                    (this.WordCloudCsvList != null &&
                    this.WordCloudCsvList.Equals(input.WordCloudCsvList))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Word != null)
                {
                    hashCode = (hashCode * 59) + this.Word.GetHashCode();
                }
                if (this.Lemma != null)
                {
                    hashCode = (hashCode * 59) + this.Lemma.GetHashCode();
                }
                if (this.WordCloudCsvList != null)
                {
                    hashCode = (hashCode * 59) + this.WordCloudCsvList.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
