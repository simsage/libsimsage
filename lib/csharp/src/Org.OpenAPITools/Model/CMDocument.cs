/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.13.31
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A document is the main data carrying entity in SimSage.  A document can literally be a document like a pdf file found on a file-server, or a database-record, or something captured from a remote system like a web-page, or an image on a web-page.
    /// </summary>
    [DataContract(Name = "CMDocument")]
    public partial class CMDocument : IEquatable<CMDocument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMDocument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMDocument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMDocument" /> class.
        /// </summary>
        /// <param name="organisationId">the organisation (its guid id) (required).</param>
        /// <param name="kbId">the knowledge-base id (its guid id) (required).</param>
        /// <param name="url">A unique URL for this document. (required).</param>
        /// <param name="urlId">A unique URL-id for this document. (required).</param>
        /// <param name="origin">Where the document was sourced from (for external documents). (required).</param>
        /// <param name="title">The title of this document, can be empty. (required).</param>
        /// <param name="author">The author of this document, can be empty. (required).</param>
        /// <param name="documentType">The file extension of this document, its type. (required).</param>
        /// <param name="created">a unix-timestamp for the creation date-time of this document (required).</param>
        /// <param name="uploaded">a unix-timestamp for the upload date-time of this document to SimSage (required).</param>
        /// <param name="lastModified">a unix-timestamp for the last-modified date-time of this document (required).</param>
        /// <param name="crawled">a unix-timestamp for when a SimSage crawler last looked at this document (required).</param>
        /// <param name="converted">a unix-timestamp for when a SimSage converter last looked at this document (required).</param>
        /// <param name="parsed">a unix-timestamp for when a SimSage parser last looked at this document (required).</param>
        /// <param name="indexed">a unix-timestamp for when a SimSage indexer last looked at this document (required).</param>
        /// <param name="previewed">a unix-timestamp for when a SimSage image-converter last looked at this document (required).</param>
        /// <param name="changeHash">A unique hash-string identifying SimSage changes to this document.  SimSage uses the value to see if the content has changed since last. (required).</param>
        /// <param name="contentHash">A unique hash-string identifying the content of this document.  SimSage uses this value to find exact duplicates. (required).</param>
        /// <param name="sourceId">the source-id of this crawler (ie. the crawler&#39;s id) (required).</param>
        /// <param name="parentUrl">a related url if there is parentage to be considered for an item (required).</param>
        /// <param name="acls">a list of the exact ACLs applying to this document (can be empty) (required).</param>
        /// <param name="metadata">a series of name values for other metadata values found in the container of this document (required).</param>
        /// <param name="numSentences">the number of sentences in this document. (required).</param>
        /// <param name="numWords">the total number of words in this document. (required).</param>
        /// <param name="numRelationships">the total number of relationships in this document. (required).</param>
        /// <param name="binarySize">the size of the original document&#39;s binary in bytes. (required).</param>
        /// <param name="textSize">the size of the converted document&#39;s text in bytes. (required).</param>
        /// <param name="versionList">list of binary versions of this document (required).</param>
        /// <param name="noteList">list of checkout notes about this document (required).</param>
        /// <param name="activityList">list of activities for the last two months of this document (required).</param>
        /// <param name="typeDescription">a description of the type of this document (required).</param>
        /// <param name="filename">the filename of this document in the DMS system (required).</param>
        /// <param name="folderId">the folderId of this item in the DMS system (required).</param>
        public CMDocument(string organisationId = default(string), string kbId = default(string), string url = default(string), int urlId = default(int), string origin = default(string), string title = default(string), string author = default(string), string documentType = default(string), long created = default(long), long uploaded = default(long), long lastModified = default(long), long crawled = default(long), long converted = default(long), long parsed = default(long), long indexed = default(long), long previewed = default(long), string changeHash = default(string), string contentHash = default(string), int sourceId = default(int), string parentUrl = default(string), List<CMDocumentAcl> acls = default(List<CMDocumentAcl>), Dictionary<string, string> metadata = default(Dictionary<string, string>), int numSentences = default(int), int numWords = default(int), int numRelationships = default(int), long binarySize = default(long), int textSize = default(int), List<CMDocumentVersion> versionList = default(List<CMDocumentVersion>), List<CMDocumentNote> noteList = default(List<CMDocumentNote>), List<CMDocumentAudit> activityList = default(List<CMDocumentAudit>), string typeDescription = default(string), string filename = default(string), string folderId = default(string))
        {
            // to ensure "organisationId" is required (not null)
            if (organisationId == null)
            {
                throw new ArgumentNullException("organisationId is a required property for CMDocument and cannot be null");
            }
            this.OrganisationId = organisationId;
            // to ensure "kbId" is required (not null)
            if (kbId == null)
            {
                throw new ArgumentNullException("kbId is a required property for CMDocument and cannot be null");
            }
            this.KbId = kbId;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for CMDocument and cannot be null");
            }
            this.Url = url;
            this.UrlId = urlId;
            // to ensure "origin" is required (not null)
            if (origin == null)
            {
                throw new ArgumentNullException("origin is a required property for CMDocument and cannot be null");
            }
            this.Origin = origin;
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for CMDocument and cannot be null");
            }
            this.Title = title;
            // to ensure "author" is required (not null)
            if (author == null)
            {
                throw new ArgumentNullException("author is a required property for CMDocument and cannot be null");
            }
            this.Author = author;
            // to ensure "documentType" is required (not null)
            if (documentType == null)
            {
                throw new ArgumentNullException("documentType is a required property for CMDocument and cannot be null");
            }
            this.DocumentType = documentType;
            this.Created = created;
            this.Uploaded = uploaded;
            this.LastModified = lastModified;
            this.Crawled = crawled;
            this.Converted = converted;
            this.Parsed = parsed;
            this.Indexed = indexed;
            this.Previewed = previewed;
            // to ensure "changeHash" is required (not null)
            if (changeHash == null)
            {
                throw new ArgumentNullException("changeHash is a required property for CMDocument and cannot be null");
            }
            this.ChangeHash = changeHash;
            // to ensure "contentHash" is required (not null)
            if (contentHash == null)
            {
                throw new ArgumentNullException("contentHash is a required property for CMDocument and cannot be null");
            }
            this.ContentHash = contentHash;
            this.SourceId = sourceId;
            // to ensure "parentUrl" is required (not null)
            if (parentUrl == null)
            {
                throw new ArgumentNullException("parentUrl is a required property for CMDocument and cannot be null");
            }
            this.ParentUrl = parentUrl;
            // to ensure "acls" is required (not null)
            if (acls == null)
            {
                throw new ArgumentNullException("acls is a required property for CMDocument and cannot be null");
            }
            this.Acls = acls;
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new ArgumentNullException("metadata is a required property for CMDocument and cannot be null");
            }
            this.Metadata = metadata;
            this.NumSentences = numSentences;
            this.NumWords = numWords;
            this.NumRelationships = numRelationships;
            this.BinarySize = binarySize;
            this.TextSize = textSize;
            // to ensure "versionList" is required (not null)
            if (versionList == null)
            {
                throw new ArgumentNullException("versionList is a required property for CMDocument and cannot be null");
            }
            this.VersionList = versionList;
            // to ensure "noteList" is required (not null)
            if (noteList == null)
            {
                throw new ArgumentNullException("noteList is a required property for CMDocument and cannot be null");
            }
            this.NoteList = noteList;
            // to ensure "activityList" is required (not null)
            if (activityList == null)
            {
                throw new ArgumentNullException("activityList is a required property for CMDocument and cannot be null");
            }
            this.ActivityList = activityList;
            // to ensure "typeDescription" is required (not null)
            if (typeDescription == null)
            {
                throw new ArgumentNullException("typeDescription is a required property for CMDocument and cannot be null");
            }
            this.TypeDescription = typeDescription;
            // to ensure "filename" is required (not null)
            if (filename == null)
            {
                throw new ArgumentNullException("filename is a required property for CMDocument and cannot be null");
            }
            this.Filename = filename;
            // to ensure "folderId" is required (not null)
            if (folderId == null)
            {
                throw new ArgumentNullException("folderId is a required property for CMDocument and cannot be null");
            }
            this.FolderId = folderId;
        }

        /// <summary>
        /// the organisation (its guid id)
        /// </summary>
        /// <value>the organisation (its guid id)</value>
        [DataMember(Name = "organisationId", IsRequired = true, EmitDefaultValue = true)]
        public string OrganisationId { get; set; }

        /// <summary>
        /// the knowledge-base id (its guid id)
        /// </summary>
        /// <value>the knowledge-base id (its guid id)</value>
        [DataMember(Name = "kbId", IsRequired = true, EmitDefaultValue = true)]
        public string KbId { get; set; }

        /// <summary>
        /// A unique URL for this document.
        /// </summary>
        /// <value>A unique URL for this document.</value>
        /// <example>document-1</example>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// A unique URL-id for this document.
        /// </summary>
        /// <value>A unique URL-id for this document.</value>
        /// <example>1</example>
        [DataMember(Name = "urlId", IsRequired = true, EmitDefaultValue = true)]
        public int UrlId { get; set; }

        /// <summary>
        /// Where the document was sourced from (for external documents).
        /// </summary>
        /// <value>Where the document was sourced from (for external documents).</value>
        /// <example>uploaded</example>
        [DataMember(Name = "origin", IsRequired = true, EmitDefaultValue = true)]
        public string Origin { get; set; }

        /// <summary>
        /// The title of this document, can be empty.
        /// </summary>
        /// <value>The title of this document, can be empty.</value>
        /// <example>My little pony.</example>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// The author of this document, can be empty.
        /// </summary>
        /// <value>The author of this document, can be empty.</value>
        /// <example>John Manyberries</example>
        [DataMember(Name = "author", IsRequired = true, EmitDefaultValue = true)]
        public string Author { get; set; }

        /// <summary>
        /// The file extension of this document, its type.
        /// </summary>
        /// <value>The file extension of this document, its type.</value>
        /// <example>many possible values, eg. doc,pdf,html</example>
        [DataMember(Name = "documentType", IsRequired = true, EmitDefaultValue = true)]
        public string DocumentType { get; set; }

        /// <summary>
        /// a unix-timestamp for the creation date-time of this document
        /// </summary>
        /// <value>a unix-timestamp for the creation date-time of this document</value>
        [DataMember(Name = "created", IsRequired = true, EmitDefaultValue = true)]
        public long Created { get; set; }

        /// <summary>
        /// a unix-timestamp for the upload date-time of this document to SimSage
        /// </summary>
        /// <value>a unix-timestamp for the upload date-time of this document to SimSage</value>
        [DataMember(Name = "uploaded", IsRequired = true, EmitDefaultValue = true)]
        public long Uploaded { get; set; }

        /// <summary>
        /// a unix-timestamp for the last-modified date-time of this document
        /// </summary>
        /// <value>a unix-timestamp for the last-modified date-time of this document</value>
        [DataMember(Name = "lastModified", IsRequired = true, EmitDefaultValue = true)]
        public long LastModified { get; set; }

        /// <summary>
        /// a unix-timestamp for when a SimSage crawler last looked at this document
        /// </summary>
        /// <value>a unix-timestamp for when a SimSage crawler last looked at this document</value>
        [DataMember(Name = "crawled", IsRequired = true, EmitDefaultValue = true)]
        public long Crawled { get; set; }

        /// <summary>
        /// a unix-timestamp for when a SimSage converter last looked at this document
        /// </summary>
        /// <value>a unix-timestamp for when a SimSage converter last looked at this document</value>
        [DataMember(Name = "converted", IsRequired = true, EmitDefaultValue = true)]
        public long Converted { get; set; }

        /// <summary>
        /// a unix-timestamp for when a SimSage parser last looked at this document
        /// </summary>
        /// <value>a unix-timestamp for when a SimSage parser last looked at this document</value>
        [DataMember(Name = "parsed", IsRequired = true, EmitDefaultValue = true)]
        public long Parsed { get; set; }

        /// <summary>
        /// a unix-timestamp for when a SimSage indexer last looked at this document
        /// </summary>
        /// <value>a unix-timestamp for when a SimSage indexer last looked at this document</value>
        [DataMember(Name = "indexed", IsRequired = true, EmitDefaultValue = true)]
        public long Indexed { get; set; }

        /// <summary>
        /// a unix-timestamp for when a SimSage image-converter last looked at this document
        /// </summary>
        /// <value>a unix-timestamp for when a SimSage image-converter last looked at this document</value>
        [DataMember(Name = "previewed", IsRequired = true, EmitDefaultValue = true)]
        public long Previewed { get; set; }

        /// <summary>
        /// A unique hash-string identifying SimSage changes to this document.  SimSage uses the value to see if the content has changed since last.
        /// </summary>
        /// <value>A unique hash-string identifying SimSage changes to this document.  SimSage uses the value to see if the content has changed since last.</value>
        /// <example>118f6bcd4621d373cade4e832627b4cc</example>
        [DataMember(Name = "changeHash", IsRequired = true, EmitDefaultValue = true)]
        public string ChangeHash { get; set; }

        /// <summary>
        /// A unique hash-string identifying the content of this document.  SimSage uses this value to find exact duplicates.
        /// </summary>
        /// <value>A unique hash-string identifying the content of this document.  SimSage uses this value to find exact duplicates.</value>
        /// <example>098f6bcd4621d373cade4e832627b4f6</example>
        [DataMember(Name = "contentHash", IsRequired = true, EmitDefaultValue = true)]
        public string ContentHash { get; set; }

        /// <summary>
        /// the source-id of this crawler (ie. the crawler&#39;s id)
        /// </summary>
        /// <value>the source-id of this crawler (ie. the crawler&#39;s id)</value>
        /// <example>1</example>
        [DataMember(Name = "sourceId", IsRequired = true, EmitDefaultValue = true)]
        public int SourceId { get; set; }

        /// <summary>
        /// a related url if there is parentage to be considered for an item
        /// </summary>
        /// <value>a related url if there is parentage to be considered for an item</value>
        [DataMember(Name = "parentUrl", IsRequired = true, EmitDefaultValue = true)]
        public string ParentUrl { get; set; }

        /// <summary>
        /// a list of the exact ACLs applying to this document (can be empty)
        /// </summary>
        /// <value>a list of the exact ACLs applying to this document (can be empty)</value>
        [DataMember(Name = "acls", IsRequired = true, EmitDefaultValue = true)]
        public List<CMDocumentAcl> Acls { get; set; }

        /// <summary>
        /// a series of name values for other metadata values found in the container of this document
        /// </summary>
        /// <value>a series of name values for other metadata values found in the container of this document</value>
        /// <example>{&quot;file-extension&quot;:&quot;txt&quot;}</example>
        [DataMember(Name = "metadata", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// the number of sentences in this document.
        /// </summary>
        /// <value>the number of sentences in this document.</value>
        [DataMember(Name = "numSentences", IsRequired = true, EmitDefaultValue = true)]
        public int NumSentences { get; set; }

        /// <summary>
        /// the total number of words in this document.
        /// </summary>
        /// <value>the total number of words in this document.</value>
        [DataMember(Name = "numWords", IsRequired = true, EmitDefaultValue = true)]
        public int NumWords { get; set; }

        /// <summary>
        /// the total number of relationships in this document.
        /// </summary>
        /// <value>the total number of relationships in this document.</value>
        [DataMember(Name = "numRelationships", IsRequired = true, EmitDefaultValue = true)]
        public int NumRelationships { get; set; }

        /// <summary>
        /// the size of the original document&#39;s binary in bytes.
        /// </summary>
        /// <value>the size of the original document&#39;s binary in bytes.</value>
        [DataMember(Name = "binarySize", IsRequired = true, EmitDefaultValue = true)]
        public long BinarySize { get; set; }

        /// <summary>
        /// the size of the converted document&#39;s text in bytes.
        /// </summary>
        /// <value>the size of the converted document&#39;s text in bytes.</value>
        [DataMember(Name = "textSize", IsRequired = true, EmitDefaultValue = true)]
        public int TextSize { get; set; }

        /// <summary>
        /// list of binary versions of this document
        /// </summary>
        /// <value>list of binary versions of this document</value>
        [DataMember(Name = "versionList", IsRequired = true, EmitDefaultValue = true)]
        public List<CMDocumentVersion> VersionList { get; set; }

        /// <summary>
        /// list of checkout notes about this document
        /// </summary>
        /// <value>list of checkout notes about this document</value>
        [DataMember(Name = "noteList", IsRequired = true, EmitDefaultValue = true)]
        public List<CMDocumentNote> NoteList { get; set; }

        /// <summary>
        /// list of activities for the last two months of this document
        /// </summary>
        /// <value>list of activities for the last two months of this document</value>
        [DataMember(Name = "activityList", IsRequired = true, EmitDefaultValue = true)]
        public List<CMDocumentAudit> ActivityList { get; set; }

        /// <summary>
        /// a description of the type of this document
        /// </summary>
        /// <value>a description of the type of this document</value>
        /// <example>Portable Network Graphics</example>
        [DataMember(Name = "typeDescription", IsRequired = true, EmitDefaultValue = true)]
        public string TypeDescription { get; set; }

        /// <summary>
        /// the filename of this document in the DMS system
        /// </summary>
        /// <value>the filename of this document in the DMS system</value>
        /// <example>index.html</example>
        [DataMember(Name = "filename", IsRequired = true, EmitDefaultValue = true)]
        public string Filename { get; set; }

        /// <summary>
        /// the folderId of this item in the DMS system
        /// </summary>
        /// <value>the folderId of this item in the DMS system</value>
        /// <example>(a guid)</example>
        [DataMember(Name = "folderId", IsRequired = true, EmitDefaultValue = true)]
        public string FolderId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMDocument {\n");
            sb.Append("  OrganisationId: ").Append(OrganisationId).Append("\n");
            sb.Append("  KbId: ").Append(KbId).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  UrlId: ").Append(UrlId).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Uploaded: ").Append(Uploaded).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  Crawled: ").Append(Crawled).Append("\n");
            sb.Append("  Converted: ").Append(Converted).Append("\n");
            sb.Append("  Parsed: ").Append(Parsed).Append("\n");
            sb.Append("  Indexed: ").Append(Indexed).Append("\n");
            sb.Append("  Previewed: ").Append(Previewed).Append("\n");
            sb.Append("  ChangeHash: ").Append(ChangeHash).Append("\n");
            sb.Append("  ContentHash: ").Append(ContentHash).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  ParentUrl: ").Append(ParentUrl).Append("\n");
            sb.Append("  Acls: ").Append(Acls).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  NumSentences: ").Append(NumSentences).Append("\n");
            sb.Append("  NumWords: ").Append(NumWords).Append("\n");
            sb.Append("  NumRelationships: ").Append(NumRelationships).Append("\n");
            sb.Append("  BinarySize: ").Append(BinarySize).Append("\n");
            sb.Append("  TextSize: ").Append(TextSize).Append("\n");
            sb.Append("  VersionList: ").Append(VersionList).Append("\n");
            sb.Append("  NoteList: ").Append(NoteList).Append("\n");
            sb.Append("  ActivityList: ").Append(ActivityList).Append("\n");
            sb.Append("  TypeDescription: ").Append(TypeDescription).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMDocument);
        }

        /// <summary>
        /// Returns true if CMDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of CMDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMDocument input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OrganisationId == input.OrganisationId ||
                    (this.OrganisationId != null &&
                    this.OrganisationId.Equals(input.OrganisationId))
                ) && 
                (
                    this.KbId == input.KbId ||
                    (this.KbId != null &&
                    this.KbId.Equals(input.KbId))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.UrlId == input.UrlId ||
                    this.UrlId.Equals(input.UrlId)
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    (this.DocumentType != null &&
                    this.DocumentType.Equals(input.DocumentType))
                ) && 
                (
                    this.Created == input.Created ||
                    this.Created.Equals(input.Created)
                ) && 
                (
                    this.Uploaded == input.Uploaded ||
                    this.Uploaded.Equals(input.Uploaded)
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    this.LastModified.Equals(input.LastModified)
                ) && 
                (
                    this.Crawled == input.Crawled ||
                    this.Crawled.Equals(input.Crawled)
                ) && 
                (
                    this.Converted == input.Converted ||
                    this.Converted.Equals(input.Converted)
                ) && 
                (
                    this.Parsed == input.Parsed ||
                    this.Parsed.Equals(input.Parsed)
                ) && 
                (
                    this.Indexed == input.Indexed ||
                    this.Indexed.Equals(input.Indexed)
                ) && 
                (
                    this.Previewed == input.Previewed ||
                    this.Previewed.Equals(input.Previewed)
                ) && 
                (
                    this.ChangeHash == input.ChangeHash ||
                    (this.ChangeHash != null &&
                    this.ChangeHash.Equals(input.ChangeHash))
                ) && 
                (
                    this.ContentHash == input.ContentHash ||
                    (this.ContentHash != null &&
                    this.ContentHash.Equals(input.ContentHash))
                ) && 
                (
                    this.SourceId == input.SourceId ||
                    this.SourceId.Equals(input.SourceId)
                ) && 
                (
                    this.ParentUrl == input.ParentUrl ||
                    (this.ParentUrl != null &&
                    this.ParentUrl.Equals(input.ParentUrl))
                ) && 
                (
                    this.Acls == input.Acls ||
                    this.Acls != null &&
                    input.Acls != null &&
                    this.Acls.SequenceEqual(input.Acls)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.NumSentences == input.NumSentences ||
                    this.NumSentences.Equals(input.NumSentences)
                ) && 
                (
                    this.NumWords == input.NumWords ||
                    this.NumWords.Equals(input.NumWords)
                ) && 
                (
                    this.NumRelationships == input.NumRelationships ||
                    this.NumRelationships.Equals(input.NumRelationships)
                ) && 
                (
                    this.BinarySize == input.BinarySize ||
                    this.BinarySize.Equals(input.BinarySize)
                ) && 
                (
                    this.TextSize == input.TextSize ||
                    this.TextSize.Equals(input.TextSize)
                ) && 
                (
                    this.VersionList == input.VersionList ||
                    this.VersionList != null &&
                    input.VersionList != null &&
                    this.VersionList.SequenceEqual(input.VersionList)
                ) && 
                (
                    this.NoteList == input.NoteList ||
                    this.NoteList != null &&
                    input.NoteList != null &&
                    this.NoteList.SequenceEqual(input.NoteList)
                ) && 
                (
                    this.ActivityList == input.ActivityList ||
                    this.ActivityList != null &&
                    input.ActivityList != null &&
                    this.ActivityList.SequenceEqual(input.ActivityList)
                ) && 
                (
                    this.TypeDescription == input.TypeDescription ||
                    (this.TypeDescription != null &&
                    this.TypeDescription.Equals(input.TypeDescription))
                ) && 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.FolderId == input.FolderId ||
                    (this.FolderId != null &&
                    this.FolderId.Equals(input.FolderId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrganisationId != null)
                {
                    hashCode = (hashCode * 59) + this.OrganisationId.GetHashCode();
                }
                if (this.KbId != null)
                {
                    hashCode = (hashCode * 59) + this.KbId.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UrlId.GetHashCode();
                if (this.Origin != null)
                {
                    hashCode = (hashCode * 59) + this.Origin.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Author != null)
                {
                    hashCode = (hashCode * 59) + this.Author.GetHashCode();
                }
                if (this.DocumentType != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Created.GetHashCode();
                hashCode = (hashCode * 59) + this.Uploaded.GetHashCode();
                hashCode = (hashCode * 59) + this.LastModified.GetHashCode();
                hashCode = (hashCode * 59) + this.Crawled.GetHashCode();
                hashCode = (hashCode * 59) + this.Converted.GetHashCode();
                hashCode = (hashCode * 59) + this.Parsed.GetHashCode();
                hashCode = (hashCode * 59) + this.Indexed.GetHashCode();
                hashCode = (hashCode * 59) + this.Previewed.GetHashCode();
                if (this.ChangeHash != null)
                {
                    hashCode = (hashCode * 59) + this.ChangeHash.GetHashCode();
                }
                if (this.ContentHash != null)
                {
                    hashCode = (hashCode * 59) + this.ContentHash.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SourceId.GetHashCode();
                if (this.ParentUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ParentUrl.GetHashCode();
                }
                if (this.Acls != null)
                {
                    hashCode = (hashCode * 59) + this.Acls.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NumSentences.GetHashCode();
                hashCode = (hashCode * 59) + this.NumWords.GetHashCode();
                hashCode = (hashCode * 59) + this.NumRelationships.GetHashCode();
                hashCode = (hashCode * 59) + this.BinarySize.GetHashCode();
                hashCode = (hashCode * 59) + this.TextSize.GetHashCode();
                if (this.VersionList != null)
                {
                    hashCode = (hashCode * 59) + this.VersionList.GetHashCode();
                }
                if (this.NoteList != null)
                {
                    hashCode = (hashCode * 59) + this.NoteList.GetHashCode();
                }
                if (this.ActivityList != null)
                {
                    hashCode = (hashCode * 59) + this.ActivityList.GetHashCode();
                }
                if (this.TypeDescription != null)
                {
                    hashCode = (hashCode * 59) + this.TypeDescription.GetHashCode();
                }
                if (this.Filename != null)
                {
                    hashCode = (hashCode * 59) + this.Filename.GetHashCode();
                }
                if (this.FolderId != null)
                {
                    hashCode = (hashCode * 59) + this.FolderId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
