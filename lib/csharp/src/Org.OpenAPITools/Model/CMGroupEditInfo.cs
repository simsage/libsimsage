/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.14.12
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Information for editing groups in the admin interface
    /// </summary>
    [DataContract(Name = "CMGroupEditInfo")]
    public partial class CMGroupEditInfo : IEquatable<CMGroupEditInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMGroupEditInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMGroupEditInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMGroupEditInfo" /> class.
        /// </summary>
        /// <param name="userIdList">a list of user-ids (can be empty) part of this group (required).</param>
        /// <param name="activeUsersPage">pagination into the active (userIdList) set of users (required).</param>
        /// <param name="activeUsersFilter">a filter for first-name, surname, and/or email of the active users (required).</param>
        /// <param name="availableUsersPage">pagination into the available set of users (required).</param>
        /// <param name="availableUsersFilter">a filter for first-name, surname, and/or email of the available users (required).</param>
        /// <param name="pageSize">pagination size of both sets of information (required).</param>
        public CMGroupEditInfo(List<string> userIdList = default(List<string>), int activeUsersPage = default(int), string activeUsersFilter = default(string), int availableUsersPage = default(int), string availableUsersFilter = default(string), int pageSize = default(int))
        {
            // to ensure "userIdList" is required (not null)
            if (userIdList == null)
            {
                throw new ArgumentNullException("userIdList is a required property for CMGroupEditInfo and cannot be null");
            }
            this.UserIdList = userIdList;
            this.ActiveUsersPage = activeUsersPage;
            // to ensure "activeUsersFilter" is required (not null)
            if (activeUsersFilter == null)
            {
                throw new ArgumentNullException("activeUsersFilter is a required property for CMGroupEditInfo and cannot be null");
            }
            this.ActiveUsersFilter = activeUsersFilter;
            this.AvailableUsersPage = availableUsersPage;
            // to ensure "availableUsersFilter" is required (not null)
            if (availableUsersFilter == null)
            {
                throw new ArgumentNullException("availableUsersFilter is a required property for CMGroupEditInfo and cannot be null");
            }
            this.AvailableUsersFilter = availableUsersFilter;
            this.PageSize = pageSize;
        }

        /// <summary>
        /// a list of user-ids (can be empty) part of this group
        /// </summary>
        /// <value>a list of user-ids (can be empty) part of this group</value>
        [DataMember(Name = "userIdList", IsRequired = true, EmitDefaultValue = true)]
        public List<string> UserIdList { get; set; }

        /// <summary>
        /// pagination into the active (userIdList) set of users
        /// </summary>
        /// <value>pagination into the active (userIdList) set of users</value>
        [DataMember(Name = "activeUsersPage", IsRequired = true, EmitDefaultValue = true)]
        public int ActiveUsersPage { get; set; }

        /// <summary>
        /// a filter for first-name, surname, and/or email of the active users
        /// </summary>
        /// <value>a filter for first-name, surname, and/or email of the active users</value>
        [DataMember(Name = "activeUsersFilter", IsRequired = true, EmitDefaultValue = true)]
        public string ActiveUsersFilter { get; set; }

        /// <summary>
        /// pagination into the available set of users
        /// </summary>
        /// <value>pagination into the available set of users</value>
        [DataMember(Name = "availableUsersPage", IsRequired = true, EmitDefaultValue = true)]
        public int AvailableUsersPage { get; set; }

        /// <summary>
        /// a filter for first-name, surname, and/or email of the available users
        /// </summary>
        /// <value>a filter for first-name, surname, and/or email of the available users</value>
        [DataMember(Name = "availableUsersFilter", IsRequired = true, EmitDefaultValue = true)]
        public string AvailableUsersFilter { get; set; }

        /// <summary>
        /// pagination size of both sets of information
        /// </summary>
        /// <value>pagination size of both sets of information</value>
        [DataMember(Name = "pageSize", IsRequired = true, EmitDefaultValue = true)]
        public int PageSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMGroupEditInfo {\n");
            sb.Append("  UserIdList: ").Append(UserIdList).Append("\n");
            sb.Append("  ActiveUsersPage: ").Append(ActiveUsersPage).Append("\n");
            sb.Append("  ActiveUsersFilter: ").Append(ActiveUsersFilter).Append("\n");
            sb.Append("  AvailableUsersPage: ").Append(AvailableUsersPage).Append("\n");
            sb.Append("  AvailableUsersFilter: ").Append(AvailableUsersFilter).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMGroupEditInfo);
        }

        /// <summary>
        /// Returns true if CMGroupEditInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CMGroupEditInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMGroupEditInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UserIdList == input.UserIdList ||
                    this.UserIdList != null &&
                    input.UserIdList != null &&
                    this.UserIdList.SequenceEqual(input.UserIdList)
                ) && 
                (
                    this.ActiveUsersPage == input.ActiveUsersPage ||
                    this.ActiveUsersPage.Equals(input.ActiveUsersPage)
                ) && 
                (
                    this.ActiveUsersFilter == input.ActiveUsersFilter ||
                    (this.ActiveUsersFilter != null &&
                    this.ActiveUsersFilter.Equals(input.ActiveUsersFilter))
                ) && 
                (
                    this.AvailableUsersPage == input.AvailableUsersPage ||
                    this.AvailableUsersPage.Equals(input.AvailableUsersPage)
                ) && 
                (
                    this.AvailableUsersFilter == input.AvailableUsersFilter ||
                    (this.AvailableUsersFilter != null &&
                    this.AvailableUsersFilter.Equals(input.AvailableUsersFilter))
                ) && 
                (
                    this.PageSize == input.PageSize ||
                    this.PageSize.Equals(input.PageSize)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserIdList != null)
                {
                    hashCode = (hashCode * 59) + this.UserIdList.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ActiveUsersPage.GetHashCode();
                if (this.ActiveUsersFilter != null)
                {
                    hashCode = (hashCode * 59) + this.ActiveUsersFilter.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AvailableUsersPage.GetHashCode();
                if (this.AvailableUsersFilter != null)
                {
                    hashCode = (hashCode * 59) + this.AvailableUsersFilter.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PageSize.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
