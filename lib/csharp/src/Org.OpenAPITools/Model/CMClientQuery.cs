/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.11.4
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// a client query object
    /// </summary>
    [DataContract(Name = "CMClientQuery")]
    public partial class CMClientQuery : IEquatable<CMClientQuery>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMClientQuery" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMClientQuery() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMClientQuery" /> class.
        /// </summary>
        /// <param name="organisationId">the organisation (its guid id). (required).</param>
        /// <param name="kbList">a list of knowledge-base id&#39;s (guids) to use (required).</param>
        /// <param name="clientId">the client&#39;s id (a unique guid for keeping state against clients) (required).</param>
        /// <param name="semanticSearch">should we perform a semantic-search? (required).</param>
        /// <param name="qnaQuery">should we perform a Q&amp;A search? (required).</param>
        /// <param name="query">the user&#39;s search query (required).</param>
        /// <param name="filter">a filter expression generated by the UX (required).</param>
        /// <param name="numResults">the number of results to return for the Q&amp;A system (recommend 1, which returns the &#39;best match&#39; only) (required).</param>
        /// <param name="scoreThreshold">A threshold for answer rejection, recommend a value of around 81.25% (0.8125).  This value is between 0.0 and 1.0.  If this value is too low, you&#39;ll get bad answers, and if this value is too high you will only get exact matches. (required).</param>
        /// <param name="page">search engine pagination, the offset page starting at 0 (required).</param>
        /// <param name="pageSize">search engine pagination, the number of results per page (required).</param>
        /// <param name="fragmentCount">search engine pagination, the number of sentences matching per document (aka. document-sentence fragments) (required).</param>
        /// <param name="maxWordDistance">how far apart words are allowed to be before they stop matching.  A value of zero (0) allows any distance within the document and is akin to a document level keyword search. (required).</param>
        /// <param name="sourceId">The id of source (an integer) to filter results for.  You can only filter on one source per knowledge-base.  Leaving this value zero (0) indicates all sources should be searched. (required).</param>
        /// <param name="shardSizeList">Index sharding values.  These are used by the internal engine to determine the status of results across different shards in SimSage.  Leave this value alone.  It is set by SimSage.  Pass it back to SimSage as you got it if you&#39;re paginating the same query. (required).</param>
        /// <param name="spellingSuggest">should the search-engine return spelling-suggestions for items not understood? (required).</param>
        /// <param name="groupSimilarDocuments">should the search-engine group similar documents together (required).</param>
        /// <param name="sortByAge">should the search-engine sort results by age (required).</param>
        /// <param name="useQuestionAnsweringAi">use ChatGPT or equivalent to answer queries (required).</param>
        public CMClientQuery(string organisationId = default(string), List<string> kbList = default(List<string>), string clientId = default(string), bool semanticSearch = default(bool), bool qnaQuery = default(bool), string query = default(string), string filter = default(string), int numResults = default(int), float scoreThreshold = default(float), int page = default(int), int pageSize = default(int), int fragmentCount = default(int), int maxWordDistance = default(int), string sourceId = default(string), List<int> shardSizeList = default(List<int>), bool spellingSuggest = default(bool), bool groupSimilarDocuments = default(bool), bool sortByAge = default(bool), bool useQuestionAnsweringAi = default(bool))
        {
            // to ensure "organisationId" is required (not null)
            if (organisationId == null)
            {
                throw new ArgumentNullException("organisationId is a required property for CMClientQuery and cannot be null");
            }
            this.OrganisationId = organisationId;
            // to ensure "kbList" is required (not null)
            if (kbList == null)
            {
                throw new ArgumentNullException("kbList is a required property for CMClientQuery and cannot be null");
            }
            this.KbList = kbList;
            // to ensure "clientId" is required (not null)
            if (clientId == null)
            {
                throw new ArgumentNullException("clientId is a required property for CMClientQuery and cannot be null");
            }
            this.ClientId = clientId;
            this.SemanticSearch = semanticSearch;
            this.QnaQuery = qnaQuery;
            // to ensure "query" is required (not null)
            if (query == null)
            {
                throw new ArgumentNullException("query is a required property for CMClientQuery and cannot be null");
            }
            this.Query = query;
            // to ensure "filter" is required (not null)
            if (filter == null)
            {
                throw new ArgumentNullException("filter is a required property for CMClientQuery and cannot be null");
            }
            this.Filter = filter;
            this.NumResults = numResults;
            this.ScoreThreshold = scoreThreshold;
            this.Page = page;
            this.PageSize = pageSize;
            this.FragmentCount = fragmentCount;
            this.MaxWordDistance = maxWordDistance;
            // to ensure "sourceId" is required (not null)
            if (sourceId == null)
            {
                throw new ArgumentNullException("sourceId is a required property for CMClientQuery and cannot be null");
            }
            this.SourceId = sourceId;
            // to ensure "shardSizeList" is required (not null)
            if (shardSizeList == null)
            {
                throw new ArgumentNullException("shardSizeList is a required property for CMClientQuery and cannot be null");
            }
            this.ShardSizeList = shardSizeList;
            this.SpellingSuggest = spellingSuggest;
            this.GroupSimilarDocuments = groupSimilarDocuments;
            this.SortByAge = sortByAge;
            this.UseQuestionAnsweringAi = useQuestionAnsweringAi;
        }

        /// <summary>
        /// the organisation (its guid id).
        /// </summary>
        /// <value>the organisation (its guid id).</value>
        /// <example>00000000-0000-0000-0000-000000000001</example>
        [DataMember(Name = "organisationId", IsRequired = true, EmitDefaultValue = true)]
        public string OrganisationId { get; set; }

        /// <summary>
        /// a list of knowledge-base id&#39;s (guids) to use
        /// </summary>
        /// <value>a list of knowledge-base id&#39;s (guids) to use</value>
        [DataMember(Name = "kbList", IsRequired = true, EmitDefaultValue = true)]
        public List<string> KbList { get; set; }

        /// <summary>
        /// the client&#39;s id (a unique guid for keeping state against clients)
        /// </summary>
        /// <value>the client&#39;s id (a unique guid for keeping state against clients)</value>
        [DataMember(Name = "clientId", IsRequired = true, EmitDefaultValue = true)]
        public string ClientId { get; set; }

        /// <summary>
        /// should we perform a semantic-search?
        /// </summary>
        /// <value>should we perform a semantic-search?</value>
        /// <example>true</example>
        [DataMember(Name = "semanticSearch", IsRequired = true, EmitDefaultValue = true)]
        public bool SemanticSearch { get; set; }

        /// <summary>
        /// should we perform a Q&amp;A search?
        /// </summary>
        /// <value>should we perform a Q&amp;A search?</value>
        /// <example>true</example>
        [DataMember(Name = "qnaQuery", IsRequired = true, EmitDefaultValue = true)]
        public bool QnaQuery { get; set; }

        /// <summary>
        /// the user&#39;s search query
        /// </summary>
        /// <value>the user&#39;s search query</value>
        /// <example>most recent similar PDF files for annual reports</example>
        [DataMember(Name = "query", IsRequired = true, EmitDefaultValue = true)]
        public string Query { get; set; }

        /// <summary>
        /// a filter expression generated by the UX
        /// </summary>
        /// <value>a filter expression generated by the UX</value>
        /// <example>(doc(document-type,pdf) or doc(document-type,docx))</example>
        [DataMember(Name = "filter", IsRequired = true, EmitDefaultValue = true)]
        public string Filter { get; set; }

        /// <summary>
        /// the number of results to return for the Q&amp;A system (recommend 1, which returns the &#39;best match&#39; only)
        /// </summary>
        /// <value>the number of results to return for the Q&amp;A system (recommend 1, which returns the &#39;best match&#39; only)</value>
        /// <example>1</example>
        [DataMember(Name = "numResults", IsRequired = true, EmitDefaultValue = true)]
        public int NumResults { get; set; }

        /// <summary>
        /// A threshold for answer rejection, recommend a value of around 81.25% (0.8125).  This value is between 0.0 and 1.0.  If this value is too low, you&#39;ll get bad answers, and if this value is too high you will only get exact matches.
        /// </summary>
        /// <value>A threshold for answer rejection, recommend a value of around 81.25% (0.8125).  This value is between 0.0 and 1.0.  If this value is too low, you&#39;ll get bad answers, and if this value is too high you will only get exact matches.</value>
        /// <example>0.8125</example>
        [DataMember(Name = "scoreThreshold", IsRequired = true, EmitDefaultValue = true)]
        public float ScoreThreshold { get; set; }

        /// <summary>
        /// search engine pagination, the offset page starting at 0
        /// </summary>
        /// <value>search engine pagination, the offset page starting at 0</value>
        /// <example>0</example>
        [DataMember(Name = "page", IsRequired = true, EmitDefaultValue = true)]
        public int Page { get; set; }

        /// <summary>
        /// search engine pagination, the number of results per page
        /// </summary>
        /// <value>search engine pagination, the number of results per page</value>
        /// <example>10</example>
        [DataMember(Name = "pageSize", IsRequired = true, EmitDefaultValue = true)]
        public int PageSize { get; set; }

        /// <summary>
        /// search engine pagination, the number of sentences matching per document (aka. document-sentence fragments)
        /// </summary>
        /// <value>search engine pagination, the number of sentences matching per document (aka. document-sentence fragments)</value>
        /// <example>3</example>
        [DataMember(Name = "fragmentCount", IsRequired = true, EmitDefaultValue = true)]
        public int FragmentCount { get; set; }

        /// <summary>
        /// how far apart words are allowed to be before they stop matching.  A value of zero (0) allows any distance within the document and is akin to a document level keyword search.
        /// </summary>
        /// <value>how far apart words are allowed to be before they stop matching.  A value of zero (0) allows any distance within the document and is akin to a document level keyword search.</value>
        /// <example>20</example>
        [DataMember(Name = "maxWordDistance", IsRequired = true, EmitDefaultValue = true)]
        public int MaxWordDistance { get; set; }

        /// <summary>
        /// The id of source (an integer) to filter results for.  You can only filter on one source per knowledge-base.  Leaving this value zero (0) indicates all sources should be searched.
        /// </summary>
        /// <value>The id of source (an integer) to filter results for.  You can only filter on one source per knowledge-base.  Leaving this value zero (0) indicates all sources should be searched.</value>
        /// <example>0</example>
        [DataMember(Name = "sourceId", IsRequired = true, EmitDefaultValue = true)]
        public string SourceId { get; set; }

        /// <summary>
        /// Index sharding values.  These are used by the internal engine to determine the status of results across different shards in SimSage.  Leave this value alone.  It is set by SimSage.  Pass it back to SimSage as you got it if you&#39;re paginating the same query.
        /// </summary>
        /// <value>Index sharding values.  These are used by the internal engine to determine the status of results across different shards in SimSage.  Leave this value alone.  It is set by SimSage.  Pass it back to SimSage as you got it if you&#39;re paginating the same query.</value>
        /// <example>[1,3,2]</example>
        [DataMember(Name = "shardSizeList", IsRequired = true, EmitDefaultValue = true)]
        public List<int> ShardSizeList { get; set; }

        /// <summary>
        /// should the search-engine return spelling-suggestions for items not understood?
        /// </summary>
        /// <value>should the search-engine return spelling-suggestions for items not understood?</value>
        /// <example>false</example>
        [DataMember(Name = "spellingSuggest", IsRequired = true, EmitDefaultValue = true)]
        public bool SpellingSuggest { get; set; }

        /// <summary>
        /// should the search-engine group similar documents together
        /// </summary>
        /// <value>should the search-engine group similar documents together</value>
        /// <example>false</example>
        [DataMember(Name = "groupSimilarDocuments", IsRequired = true, EmitDefaultValue = true)]
        public bool GroupSimilarDocuments { get; set; }

        /// <summary>
        /// should the search-engine sort results by age
        /// </summary>
        /// <value>should the search-engine sort results by age</value>
        /// <example>false</example>
        [DataMember(Name = "sortByAge", IsRequired = true, EmitDefaultValue = true)]
        public bool SortByAge { get; set; }

        /// <summary>
        /// use ChatGPT or equivalent to answer queries
        /// </summary>
        /// <value>use ChatGPT or equivalent to answer queries</value>
        /// <example>false</example>
        [DataMember(Name = "useQuestionAnsweringAi", IsRequired = true, EmitDefaultValue = true)]
        public bool UseQuestionAnsweringAi { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMClientQuery {\n");
            sb.Append("  OrganisationId: ").Append(OrganisationId).Append("\n");
            sb.Append("  KbList: ").Append(KbList).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  SemanticSearch: ").Append(SemanticSearch).Append("\n");
            sb.Append("  QnaQuery: ").Append(QnaQuery).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  NumResults: ").Append(NumResults).Append("\n");
            sb.Append("  ScoreThreshold: ").Append(ScoreThreshold).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  FragmentCount: ").Append(FragmentCount).Append("\n");
            sb.Append("  MaxWordDistance: ").Append(MaxWordDistance).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  ShardSizeList: ").Append(ShardSizeList).Append("\n");
            sb.Append("  SpellingSuggest: ").Append(SpellingSuggest).Append("\n");
            sb.Append("  GroupSimilarDocuments: ").Append(GroupSimilarDocuments).Append("\n");
            sb.Append("  SortByAge: ").Append(SortByAge).Append("\n");
            sb.Append("  UseQuestionAnsweringAi: ").Append(UseQuestionAnsweringAi).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMClientQuery);
        }

        /// <summary>
        /// Returns true if CMClientQuery instances are equal
        /// </summary>
        /// <param name="input">Instance of CMClientQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMClientQuery input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OrganisationId == input.OrganisationId ||
                    (this.OrganisationId != null &&
                    this.OrganisationId.Equals(input.OrganisationId))
                ) && 
                (
                    this.KbList == input.KbList ||
                    this.KbList != null &&
                    input.KbList != null &&
                    this.KbList.SequenceEqual(input.KbList)
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.SemanticSearch == input.SemanticSearch ||
                    this.SemanticSearch.Equals(input.SemanticSearch)
                ) && 
                (
                    this.QnaQuery == input.QnaQuery ||
                    this.QnaQuery.Equals(input.QnaQuery)
                ) && 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                ) && 
                (
                    this.NumResults == input.NumResults ||
                    this.NumResults.Equals(input.NumResults)
                ) && 
                (
                    this.ScoreThreshold == input.ScoreThreshold ||
                    this.ScoreThreshold.Equals(input.ScoreThreshold)
                ) && 
                (
                    this.Page == input.Page ||
                    this.Page.Equals(input.Page)
                ) && 
                (
                    this.PageSize == input.PageSize ||
                    this.PageSize.Equals(input.PageSize)
                ) && 
                (
                    this.FragmentCount == input.FragmentCount ||
                    this.FragmentCount.Equals(input.FragmentCount)
                ) && 
                (
                    this.MaxWordDistance == input.MaxWordDistance ||
                    this.MaxWordDistance.Equals(input.MaxWordDistance)
                ) && 
                (
                    this.SourceId == input.SourceId ||
                    (this.SourceId != null &&
                    this.SourceId.Equals(input.SourceId))
                ) && 
                (
                    this.ShardSizeList == input.ShardSizeList ||
                    this.ShardSizeList != null &&
                    input.ShardSizeList != null &&
                    this.ShardSizeList.SequenceEqual(input.ShardSizeList)
                ) && 
                (
                    this.SpellingSuggest == input.SpellingSuggest ||
                    this.SpellingSuggest.Equals(input.SpellingSuggest)
                ) && 
                (
                    this.GroupSimilarDocuments == input.GroupSimilarDocuments ||
                    this.GroupSimilarDocuments.Equals(input.GroupSimilarDocuments)
                ) && 
                (
                    this.SortByAge == input.SortByAge ||
                    this.SortByAge.Equals(input.SortByAge)
                ) && 
                (
                    this.UseQuestionAnsweringAi == input.UseQuestionAnsweringAi ||
                    this.UseQuestionAnsweringAi.Equals(input.UseQuestionAnsweringAi)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrganisationId != null)
                {
                    hashCode = (hashCode * 59) + this.OrganisationId.GetHashCode();
                }
                if (this.KbList != null)
                {
                    hashCode = (hashCode * 59) + this.KbList.GetHashCode();
                }
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SemanticSearch.GetHashCode();
                hashCode = (hashCode * 59) + this.QnaQuery.GetHashCode();
                if (this.Query != null)
                {
                    hashCode = (hashCode * 59) + this.Query.GetHashCode();
                }
                if (this.Filter != null)
                {
                    hashCode = (hashCode * 59) + this.Filter.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NumResults.GetHashCode();
                hashCode = (hashCode * 59) + this.ScoreThreshold.GetHashCode();
                hashCode = (hashCode * 59) + this.Page.GetHashCode();
                hashCode = (hashCode * 59) + this.PageSize.GetHashCode();
                hashCode = (hashCode * 59) + this.FragmentCount.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxWordDistance.GetHashCode();
                if (this.SourceId != null)
                {
                    hashCode = (hashCode * 59) + this.SourceId.GetHashCode();
                }
                if (this.ShardSizeList != null)
                {
                    hashCode = (hashCode * 59) + this.ShardSizeList.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SpellingSuggest.GetHashCode();
                hashCode = (hashCode * 59) + this.GroupSimilarDocuments.GetHashCode();
                hashCode = (hashCode * 59) + this.SortByAge.GetHashCode();
                hashCode = (hashCode * 59) + this.UseQuestionAnsweringAi.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
