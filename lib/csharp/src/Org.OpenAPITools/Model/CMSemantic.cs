/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.13.31
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A SimSAge semantic.  A semantic is an &#39;is-a&#39; relationship.  A generalization/specialization relationship.  The &#39;word&#39; (the more specialized part) is the primary-key/id of this relationship.
    /// </summary>
    [DataContract(Name = "CMSemantic")]
    public partial class CMSemantic : IEquatable<CMSemantic>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMSemantic" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMSemantic() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMSemantic" /> class.
        /// </summary>
        /// <param name="word">The word of a semantic is the more specific concept (eg. in &#39;John is a person&#39;, then &#39;John&#39; is the more specific concept, and &#39;person&#39; is the semantic). (required).</param>
        /// <param name="semantic">The semantic is the more general concept (eg. in &#39;John is a person&#39;, &#39;person&#39; is the more general concept, and &#39;John&#39; is more specific). (required).</param>
        public CMSemantic(string word = default(string), string semantic = default(string))
        {
            // to ensure "word" is required (not null)
            if (word == null)
            {
                throw new ArgumentNullException("word is a required property for CMSemantic and cannot be null");
            }
            this.Word = word;
            // to ensure "semantic" is required (not null)
            if (semantic == null)
            {
                throw new ArgumentNullException("semantic is a required property for CMSemantic and cannot be null");
            }
            this.Semantic = semantic;
        }

        /// <summary>
        /// The word of a semantic is the more specific concept (eg. in &#39;John is a person&#39;, then &#39;John&#39; is the more specific concept, and &#39;person&#39; is the semantic).
        /// </summary>
        /// <value>The word of a semantic is the more specific concept (eg. in &#39;John is a person&#39;, then &#39;John&#39; is the more specific concept, and &#39;person&#39; is the semantic).</value>
        /// <example>John</example>
        [DataMember(Name = "word", IsRequired = true, EmitDefaultValue = true)]
        public string Word { get; set; }

        /// <summary>
        /// The semantic is the more general concept (eg. in &#39;John is a person&#39;, &#39;person&#39; is the more general concept, and &#39;John&#39; is more specific).
        /// </summary>
        /// <value>The semantic is the more general concept (eg. in &#39;John is a person&#39;, &#39;person&#39; is the more general concept, and &#39;John&#39; is more specific).</value>
        /// <example>person</example>
        [DataMember(Name = "semantic", IsRequired = true, EmitDefaultValue = true)]
        public string Semantic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMSemantic {\n");
            sb.Append("  Word: ").Append(Word).Append("\n");
            sb.Append("  Semantic: ").Append(Semantic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMSemantic);
        }

        /// <summary>
        /// Returns true if CMSemantic instances are equal
        /// </summary>
        /// <param name="input">Instance of CMSemantic to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMSemantic input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Word == input.Word ||
                    (this.Word != null &&
                    this.Word.Equals(input.Word))
                ) && 
                (
                    this.Semantic == input.Semantic ||
                    (this.Semantic != null &&
                    this.Semantic.Equals(input.Semantic))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Word != null)
                {
                    hashCode = (hashCode * 59) + this.Word.GetHashCode();
                }
                if (this.Semantic != null)
                {
                    hashCode = (hashCode * 59) + this.Semantic.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
