/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.14.12
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CMRedactionData
    /// </summary>
    [DataContract(Name = "CMRedactionData")]
    public partial class CMRedactionData : IEquatable<CMRedactionData>, IValidatableObject
    {
        /// <summary>
        /// Defines DocumentStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DocumentStatusEnum
        {
            /// <summary>
            /// Enum NEW for value: NEW
            /// </summary>
            [EnumMember(Value = "NEW")]
            NEW = 1,

            /// <summary>
            /// Enum INPROGRESS for value: IN_PROGRESS
            /// </summary>
            [EnumMember(Value = "IN_PROGRESS")]
            INPROGRESS = 2,

            /// <summary>
            /// Enum COMPLETED for value: COMPLETED
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETED = 3
        }


        /// <summary>
        /// Gets or Sets DocumentStatus
        /// </summary>
        [DataMember(Name = "documentStatus", IsRequired = true, EmitDefaultValue = true)]
        public DocumentStatusEnum DocumentStatus { get; set; }
        /// <summary>
        /// Defines DocumentAction
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DocumentActionEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum REDACT for value: REDACT
            /// </summary>
            [EnumMember(Value = "REDACT")]
            REDACT = 2,

            /// <summary>
            /// Enum IGNORE for value: IGNORE
            /// </summary>
            [EnumMember(Value = "IGNORE")]
            IGNORE = 3,

            /// <summary>
            /// Enum DELETE for value: DELETE
            /// </summary>
            [EnumMember(Value = "DELETE")]
            DELETE = 4
        }


        /// <summary>
        /// Gets or Sets DocumentAction
        /// </summary>
        [DataMember(Name = "documentAction", IsRequired = true, EmitDefaultValue = true)]
        public DocumentActionEnum DocumentAction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMRedactionData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMRedactionData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMRedactionData" /> class.
        /// </summary>
        /// <param name="organisationId">organisationId (required).</param>
        /// <param name="kbId">kbId (required).</param>
        /// <param name="projectId">projectId (required).</param>
        /// <param name="url">url (required).</param>
        /// <param name="redactions">redactions (required).</param>
        /// <param name="documentStatus">documentStatus (required).</param>
        /// <param name="documentAction">documentAction (required).</param>
        /// <param name="annotated">annotated (required).</param>
        /// <param name="createForExport">createForExport (required).</param>
        /// <param name="exportNativeFormat">exportNativeFormat (required).</param>
        public CMRedactionData(string organisationId = default(string), string kbId = default(string), string projectId = default(string), string url = default(string), List<CMRedaction> redactions = default(List<CMRedaction>), DocumentStatusEnum documentStatus = default(DocumentStatusEnum), DocumentActionEnum documentAction = default(DocumentActionEnum), bool annotated = default(bool), bool createForExport = default(bool), bool exportNativeFormat = default(bool))
        {
            // to ensure "organisationId" is required (not null)
            if (organisationId == null)
            {
                throw new ArgumentNullException("organisationId is a required property for CMRedactionData and cannot be null");
            }
            this.OrganisationId = organisationId;
            // to ensure "kbId" is required (not null)
            if (kbId == null)
            {
                throw new ArgumentNullException("kbId is a required property for CMRedactionData and cannot be null");
            }
            this.KbId = kbId;
            // to ensure "projectId" is required (not null)
            if (projectId == null)
            {
                throw new ArgumentNullException("projectId is a required property for CMRedactionData and cannot be null");
            }
            this.ProjectId = projectId;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for CMRedactionData and cannot be null");
            }
            this.Url = url;
            // to ensure "redactions" is required (not null)
            if (redactions == null)
            {
                throw new ArgumentNullException("redactions is a required property for CMRedactionData and cannot be null");
            }
            this.Redactions = redactions;
            this.DocumentStatus = documentStatus;
            this.DocumentAction = documentAction;
            this.Annotated = annotated;
            this.CreateForExport = createForExport;
            this.ExportNativeFormat = exportNativeFormat;
        }

        /// <summary>
        /// Gets or Sets OrganisationId
        /// </summary>
        [DataMember(Name = "organisationId", IsRequired = true, EmitDefaultValue = true)]
        public string OrganisationId { get; set; }

        /// <summary>
        /// Gets or Sets KbId
        /// </summary>
        [DataMember(Name = "kbId", IsRequired = true, EmitDefaultValue = true)]
        public string KbId { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name = "projectId", IsRequired = true, EmitDefaultValue = true)]
        public string ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Redactions
        /// </summary>
        [DataMember(Name = "redactions", IsRequired = true, EmitDefaultValue = true)]
        public List<CMRedaction> Redactions { get; set; }

        /// <summary>
        /// Gets or Sets Annotated
        /// </summary>
        [DataMember(Name = "annotated", IsRequired = true, EmitDefaultValue = true)]
        public bool Annotated { get; set; }

        /// <summary>
        /// Gets or Sets CreateForExport
        /// </summary>
        [DataMember(Name = "createForExport", IsRequired = true, EmitDefaultValue = true)]
        public bool CreateForExport { get; set; }

        /// <summary>
        /// Gets or Sets ExportNativeFormat
        /// </summary>
        [DataMember(Name = "exportNativeFormat", IsRequired = true, EmitDefaultValue = true)]
        public bool ExportNativeFormat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMRedactionData {\n");
            sb.Append("  OrganisationId: ").Append(OrganisationId).Append("\n");
            sb.Append("  KbId: ").Append(KbId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Redactions: ").Append(Redactions).Append("\n");
            sb.Append("  DocumentStatus: ").Append(DocumentStatus).Append("\n");
            sb.Append("  DocumentAction: ").Append(DocumentAction).Append("\n");
            sb.Append("  Annotated: ").Append(Annotated).Append("\n");
            sb.Append("  CreateForExport: ").Append(CreateForExport).Append("\n");
            sb.Append("  ExportNativeFormat: ").Append(ExportNativeFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMRedactionData);
        }

        /// <summary>
        /// Returns true if CMRedactionData instances are equal
        /// </summary>
        /// <param name="input">Instance of CMRedactionData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMRedactionData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OrganisationId == input.OrganisationId ||
                    (this.OrganisationId != null &&
                    this.OrganisationId.Equals(input.OrganisationId))
                ) && 
                (
                    this.KbId == input.KbId ||
                    (this.KbId != null &&
                    this.KbId.Equals(input.KbId))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Redactions == input.Redactions ||
                    this.Redactions != null &&
                    input.Redactions != null &&
                    this.Redactions.SequenceEqual(input.Redactions)
                ) && 
                (
                    this.DocumentStatus == input.DocumentStatus ||
                    this.DocumentStatus.Equals(input.DocumentStatus)
                ) && 
                (
                    this.DocumentAction == input.DocumentAction ||
                    this.DocumentAction.Equals(input.DocumentAction)
                ) && 
                (
                    this.Annotated == input.Annotated ||
                    this.Annotated.Equals(input.Annotated)
                ) && 
                (
                    this.CreateForExport == input.CreateForExport ||
                    this.CreateForExport.Equals(input.CreateForExport)
                ) && 
                (
                    this.ExportNativeFormat == input.ExportNativeFormat ||
                    this.ExportNativeFormat.Equals(input.ExportNativeFormat)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrganisationId != null)
                {
                    hashCode = (hashCode * 59) + this.OrganisationId.GetHashCode();
                }
                if (this.KbId != null)
                {
                    hashCode = (hashCode * 59) + this.KbId.GetHashCode();
                }
                if (this.ProjectId != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectId.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.Redactions != null)
                {
                    hashCode = (hashCode * 59) + this.Redactions.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DocumentStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.DocumentAction.GetHashCode();
                hashCode = (hashCode * 59) + this.Annotated.GetHashCode();
                hashCode = (hashCode * 59) + this.CreateForExport.GetHashCode();
                hashCode = (hashCode * 59) + this.ExportNativeFormat.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
