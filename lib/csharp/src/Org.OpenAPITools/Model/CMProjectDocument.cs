/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.13.31
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CMProjectDocument
    /// </summary>
    [DataContract(Name = "CMProjectDocument")]
    public partial class CMProjectDocument : IEquatable<CMProjectDocument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMProjectDocument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMProjectDocument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMProjectDocument" /> class.
        /// </summary>
        /// <param name="projectId">projectId (required).</param>
        /// <param name="source">source (required).</param>
        /// <param name="extension">extension (required).</param>
        /// <param name="documentKey">documentKey (required).</param>
        /// <param name="title">title (required).</param>
        /// <param name="size">size (required).</param>
        /// <param name="folderId">folderId (required).</param>
        /// <param name="count">count (required).</param>
        /// <param name="confidence">confidence (required).</param>
        /// <param name="displayType">displayType (required).</param>
        public CMProjectDocument(string projectId = default(string), string source = default(string), string extension = default(string), string documentKey = default(string), string title = default(string), long size = default(long), string folderId = default(string), long count = default(long), int confidence = default(int), string displayType = default(string))
        {
            // to ensure "projectId" is required (not null)
            if (projectId == null)
            {
                throw new ArgumentNullException("projectId is a required property for CMProjectDocument and cannot be null");
            }
            this.ProjectId = projectId;
            // to ensure "source" is required (not null)
            if (source == null)
            {
                throw new ArgumentNullException("source is a required property for CMProjectDocument and cannot be null");
            }
            this.Source = source;
            // to ensure "extension" is required (not null)
            if (extension == null)
            {
                throw new ArgumentNullException("extension is a required property for CMProjectDocument and cannot be null");
            }
            this.Extension = extension;
            // to ensure "documentKey" is required (not null)
            if (documentKey == null)
            {
                throw new ArgumentNullException("documentKey is a required property for CMProjectDocument and cannot be null");
            }
            this.DocumentKey = documentKey;
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for CMProjectDocument and cannot be null");
            }
            this.Title = title;
            this.Size = size;
            // to ensure "folderId" is required (not null)
            if (folderId == null)
            {
                throw new ArgumentNullException("folderId is a required property for CMProjectDocument and cannot be null");
            }
            this.FolderId = folderId;
            this.Count = count;
            this.Confidence = confidence;
            // to ensure "displayType" is required (not null)
            if (displayType == null)
            {
                throw new ArgumentNullException("displayType is a required property for CMProjectDocument and cannot be null");
            }
            this.DisplayType = displayType;
        }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name = "projectId", IsRequired = true, EmitDefaultValue = true)]
        public string ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", IsRequired = true, EmitDefaultValue = true)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets Extension
        /// </summary>
        [DataMember(Name = "extension", IsRequired = true, EmitDefaultValue = true)]
        public string Extension { get; set; }

        /// <summary>
        /// Gets or Sets DocumentKey
        /// </summary>
        [DataMember(Name = "documentKey", IsRequired = true, EmitDefaultValue = true)]
        public string DocumentKey { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name = "size", IsRequired = true, EmitDefaultValue = true)]
        public long Size { get; set; }

        /// <summary>
        /// Gets or Sets FolderId
        /// </summary>
        [DataMember(Name = "folderId", IsRequired = true, EmitDefaultValue = true)]
        public string FolderId { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "count", IsRequired = true, EmitDefaultValue = true)]
        public long Count { get; set; }

        /// <summary>
        /// Gets or Sets Confidence
        /// </summary>
        [DataMember(Name = "confidence", IsRequired = true, EmitDefaultValue = true)]
        public int Confidence { get; set; }

        /// <summary>
        /// Gets or Sets DisplayType
        /// </summary>
        [DataMember(Name = "displayType", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMProjectDocument {\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  DocumentKey: ").Append(DocumentKey).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("  DisplayType: ").Append(DisplayType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMProjectDocument);
        }

        /// <summary>
        /// Returns true if CMProjectDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of CMProjectDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMProjectDocument input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Extension == input.Extension ||
                    (this.Extension != null &&
                    this.Extension.Equals(input.Extension))
                ) && 
                (
                    this.DocumentKey == input.DocumentKey ||
                    (this.DocumentKey != null &&
                    this.DocumentKey.Equals(input.DocumentKey))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Size == input.Size ||
                    this.Size.Equals(input.Size)
                ) && 
                (
                    this.FolderId == input.FolderId ||
                    (this.FolderId != null &&
                    this.FolderId.Equals(input.FolderId))
                ) && 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.Confidence == input.Confidence ||
                    this.Confidence.Equals(input.Confidence)
                ) && 
                (
                    this.DisplayType == input.DisplayType ||
                    (this.DisplayType != null &&
                    this.DisplayType.Equals(input.DisplayType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProjectId != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectId.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                if (this.Extension != null)
                {
                    hashCode = (hashCode * 59) + this.Extension.GetHashCode();
                }
                if (this.DocumentKey != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentKey.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Size.GetHashCode();
                if (this.FolderId != null)
                {
                    hashCode = (hashCode * 59) + this.FolderId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                hashCode = (hashCode * 59) + this.Confidence.GetHashCode();
                if (this.DisplayType != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
