/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.14.12
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A SimSage source object used for updating and creating SimSage crawlers/connections to external silos like Sharepoint, OneDrive, Exchange, DropBox, Box, iManage, and others.
    /// </summary>
    [DataContract(Name = "CMSource")]
    public partial class CMSource : IEquatable<CMSource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMSource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMSource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMSource" /> class.
        /// </summary>
        /// <param name="sourceId">the source-id, primary key of the source (required).</param>
        /// <param name="organisationId">the main organisation (its guid id) for this source/crawler (required).</param>
        /// <param name="kbId">the knowledge-base id (its guid id) for this source/crawler (required).</param>
        /// <param name="weight">the importance of this source relative to others &lt;0.0,1.0] (required).</param>
        /// <param name="nodeId">the system&#39;s node id of this source (what kubernetes-node to run on, starting with zero, set NODE_ID in env to manipulate this value).  Sources will only run on machines with a matching node-id (required).</param>
        /// <param name="name">the display-name (descriptive name) of this source.  The source&#39;s name must be unique within a knowledge-base. (required).</param>
        /// <param name="crawlerType">the type of this source (required).</param>
        /// <param name="schedule">the time-schedule of this crawler, when active and when not repeating in a weekly-per hour cycle in GMT time.  Empty string means not active at all (required).</param>
        /// <param name="deleteFiles">Should this crawler remove files that are no longer visible after a crawl completes without errors?  Used for sources that cannot report on file/data removal. (required).</param>
        /// <param name="allowAnonymous">Is the content of this crawler accessible anonymously (ie. no permissions/ACLs required).  Some crawlers like the web crawler always have this value as true.  NB.  Setting this flag to \&quot;true\&quot; will bypass any security on the source&#39;s own ACLs and make all its content available to everyone. (required).</param>
        /// <param name="processingLevel">How much processing should SimSage give each file of this source.  As defined internally in ProcessingLevel.  level 1, CONVERT: convert all document binaries to text (creates metadata text).  level 2, PARSE: NLP process the files (creates sentences and tokens for all text).  level 3, INDEX: create inverted indexes for files (creates indexes). (required).</param>
        /// <param name="enablePreview">Generate per-document image-preview information as well as full HTML previews if set to \&quot;true\&quot;. (required).</param>
        /// <param name="filesPerSecond">Any value greater than 0 will cause the crawler to sleep for as many milliseconds between file uploads. (required).</param>
        /// <param name="specificJson">A json string with specific values for this type of source.  Generated by the SimSage administrative system. (required).</param>
        /// <param name="sessionId">a valid session-guid id. (required).</param>
        /// <param name="maxItems">Set a content limit for the maximum number of items to contain for this source.  A value of zero (0) indicates no limits. (required).</param>
        /// <param name="maxBotItems">Set a Question and Answer content limit for the maximum number of deep-learning Q&amp;A items this source can contain.  A value of zero (0) indicates no limits. (required).</param>
        /// <param name="customRender">Does this source require custom render templates or use ordinary search-results? (required).</param>
        /// <param name="edgeDeviceId">The associated Edge device for this source (or empty string if not associated with one) (required).</param>
        /// <param name="numResults">the default number of search results to return from the semantic-search system (required).</param>
        /// <param name="numFragments">the number of fragments to return per search-result from the semantic-search system.  Affects accuracy, a value of \&quot;1\&quot; will only look at the first match.  Higher values look for more matches inside a single document.  Too high a value will affect performance.  Default value \&quot;3\&quot;. (required).</param>
        /// <param name="numErrors">the number of errors from the last source-run (required).</param>
        /// <param name="errorThreshold">the number of errors allowed before failing the source and not force-removing any files at the end of a run through an external source. (required).</param>
        /// <param name="startTime">when the last run of this source started (required).</param>
        /// <param name="endTime">when the last run of this source finished (required).</param>
        /// <param name="acls">A list for overwriting security permission for a source.  Can be empty.  Use this to override security on external systems. (required).</param>
        /// <param name="isCrawling">\&quot;true\&quot; if this source busy/active. (required).</param>
        /// <param name="numCrawledDocuments">the number of documents seen by the crawler thus-far. (required).</param>
        /// <param name="numConvertedDocuments">the number of documents converted by SimSage thus-far. (required).</param>
        /// <param name="numParsedDocuments">the number of documents parsed by SimSage thus-far. (required).</param>
        /// <param name="numIndexedDocuments">the number of documents indexed by SimSage thus-far. (required).</param>
        /// <param name="numFinishedDocuments">the number of finished (fully processed) by SimSage thus-far. (required).</param>
        /// <param name="numErroredDocuments">the number of errored documents by SimSage thus-far. (required).</param>
        /// <param name="numTotalDocuments">the total number of documents for this source in SimSage. (required).</param>
        /// <param name="numTotalErroredDocuments">the total number of documents for this source marked as errored in SimSage. (required).</param>
        /// <param name="useDefaultRelationships">\&quot;true\&quot; if this source is to use the default (built-in) SimSage relationships.  All user-defined relationships and language-entities will be used regardless of the value of this flag. (required).</param>
        /// <param name="isBusy">\&quot;true\&quot; if this source is currently being optimized / processed by the index-optimizer. (required).</param>
        /// <param name="storeBinary">\&quot;true\&quot; if this source is to store all documents locally on the SimSage platform (required).</param>
        /// <param name="versioned">\&quot;true\&quot; if this source is to store all versions of documents locally on the SimSage platform (required).</param>
        /// <param name="writeToCassandra">\&quot;true\&quot; if this source is to write any changes direct to Cassandra, otherwise this source will collect indexes on disk first (for initial loading) (required).</param>
        /// <param name="processorConfig">Json string defining any optional processors configured on the source (required).</param>
        /// <param name="enableDocumentSimilarity">enable document similarity calculations. (required).</param>
        /// <param name="documentSimilarityThreshold">the document similarity threshold for grouping documents, a value between 0.75 and 1.0 (required).</param>
        /// <param name="isExternal">is this crawler to be connected as an external source using our external crawler software? (required).</param>
        /// <param name="useOCR">enable OCR processing for files in this source? (required).</param>
        /// <param name="useSTT">enable Speech-to-text processing for files in this source? (required).</param>
        /// <param name="deltaIndicator">A saved value indicating last crawler state (required).</param>
        /// <param name="transmitExternalLogs">enabling sending of logs to SimSage for external crawlers (required).</param>
        /// <param name="sourceError">sourceError (required).</param>
        /// <param name="external">external.</param>
        /// <param name="crawling">crawling.</param>
        /// <param name="busy">busy.</param>
        public CMSource(int sourceId = default(int), string organisationId = default(string), string kbId = default(string), float weight = default(float), int nodeId = default(int), string name = default(string), string crawlerType = default(string), string schedule = default(string), bool deleteFiles = default(bool), bool allowAnonymous = default(bool), string processingLevel = default(string), bool enablePreview = default(bool), float filesPerSecond = default(float), string specificJson = default(string), string sessionId = default(string), long maxItems = default(long), long maxBotItems = default(long), bool customRender = default(bool), string edgeDeviceId = default(string), int numResults = default(int), int numFragments = default(int), int numErrors = default(int), int errorThreshold = default(int), long startTime = default(long), long endTime = default(long), List<CMDocumentAcl> acls = default(List<CMDocumentAcl>), bool isCrawling = default(bool), int numCrawledDocuments = default(int), int numConvertedDocuments = default(int), int numParsedDocuments = default(int), int numIndexedDocuments = default(int), int numFinishedDocuments = default(int), int numErroredDocuments = default(int), int numTotalDocuments = default(int), int numTotalErroredDocuments = default(int), bool useDefaultRelationships = default(bool), bool isBusy = default(bool), bool storeBinary = default(bool), bool versioned = default(bool), bool writeToCassandra = default(bool), string processorConfig = default(string), bool enableDocumentSimilarity = default(bool), float documentSimilarityThreshold = default(float), bool isExternal = default(bool), bool useOCR = default(bool), bool useSTT = default(bool), string deltaIndicator = default(string), bool transmitExternalLogs = default(bool), CMSourceError sourceError = default(CMSourceError), bool external = default(bool), bool crawling = default(bool), bool busy = default(bool))
        {
            this.SourceId = sourceId;
            // to ensure "organisationId" is required (not null)
            if (organisationId == null)
            {
                throw new ArgumentNullException("organisationId is a required property for CMSource and cannot be null");
            }
            this.OrganisationId = organisationId;
            // to ensure "kbId" is required (not null)
            if (kbId == null)
            {
                throw new ArgumentNullException("kbId is a required property for CMSource and cannot be null");
            }
            this.KbId = kbId;
            this.Weight = weight;
            this.NodeId = nodeId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CMSource and cannot be null");
            }
            this.Name = name;
            // to ensure "crawlerType" is required (not null)
            if (crawlerType == null)
            {
                throw new ArgumentNullException("crawlerType is a required property for CMSource and cannot be null");
            }
            this.CrawlerType = crawlerType;
            // to ensure "schedule" is required (not null)
            if (schedule == null)
            {
                throw new ArgumentNullException("schedule is a required property for CMSource and cannot be null");
            }
            this.Schedule = schedule;
            this.DeleteFiles = deleteFiles;
            this.AllowAnonymous = allowAnonymous;
            // to ensure "processingLevel" is required (not null)
            if (processingLevel == null)
            {
                throw new ArgumentNullException("processingLevel is a required property for CMSource and cannot be null");
            }
            this.ProcessingLevel = processingLevel;
            this.EnablePreview = enablePreview;
            this.FilesPerSecond = filesPerSecond;
            // to ensure "specificJson" is required (not null)
            if (specificJson == null)
            {
                throw new ArgumentNullException("specificJson is a required property for CMSource and cannot be null");
            }
            this.SpecificJson = specificJson;
            // to ensure "sessionId" is required (not null)
            if (sessionId == null)
            {
                throw new ArgumentNullException("sessionId is a required property for CMSource and cannot be null");
            }
            this.SessionId = sessionId;
            this.MaxItems = maxItems;
            this.MaxBotItems = maxBotItems;
            this.CustomRender = customRender;
            // to ensure "edgeDeviceId" is required (not null)
            if (edgeDeviceId == null)
            {
                throw new ArgumentNullException("edgeDeviceId is a required property for CMSource and cannot be null");
            }
            this.EdgeDeviceId = edgeDeviceId;
            this.NumResults = numResults;
            this.NumFragments = numFragments;
            this.NumErrors = numErrors;
            this.ErrorThreshold = errorThreshold;
            this.StartTime = startTime;
            this.EndTime = endTime;
            // to ensure "acls" is required (not null)
            if (acls == null)
            {
                throw new ArgumentNullException("acls is a required property for CMSource and cannot be null");
            }
            this.Acls = acls;
            this.IsCrawling = isCrawling;
            this.NumCrawledDocuments = numCrawledDocuments;
            this.NumConvertedDocuments = numConvertedDocuments;
            this.NumParsedDocuments = numParsedDocuments;
            this.NumIndexedDocuments = numIndexedDocuments;
            this.NumFinishedDocuments = numFinishedDocuments;
            this.NumErroredDocuments = numErroredDocuments;
            this.NumTotalDocuments = numTotalDocuments;
            this.NumTotalErroredDocuments = numTotalErroredDocuments;
            this.UseDefaultRelationships = useDefaultRelationships;
            this.IsBusy = isBusy;
            this.StoreBinary = storeBinary;
            this.Versioned = versioned;
            this.WriteToCassandra = writeToCassandra;
            // to ensure "processorConfig" is required (not null)
            if (processorConfig == null)
            {
                throw new ArgumentNullException("processorConfig is a required property for CMSource and cannot be null");
            }
            this.ProcessorConfig = processorConfig;
            this.EnableDocumentSimilarity = enableDocumentSimilarity;
            this.DocumentSimilarityThreshold = documentSimilarityThreshold;
            this.IsExternal = isExternal;
            this.UseOCR = useOCR;
            this.UseSTT = useSTT;
            // to ensure "deltaIndicator" is required (not null)
            if (deltaIndicator == null)
            {
                throw new ArgumentNullException("deltaIndicator is a required property for CMSource and cannot be null");
            }
            this.DeltaIndicator = deltaIndicator;
            this.TransmitExternalLogs = transmitExternalLogs;
            // to ensure "sourceError" is required (not null)
            if (sourceError == null)
            {
                throw new ArgumentNullException("sourceError is a required property for CMSource and cannot be null");
            }
            this.SourceError = sourceError;
            this.External = external;
            this.Crawling = crawling;
            this.Busy = busy;
        }

        /// <summary>
        /// the source-id, primary key of the source
        /// </summary>
        /// <value>the source-id, primary key of the source</value>
        /// <example>1</example>
        [DataMember(Name = "sourceId", IsRequired = true, EmitDefaultValue = true)]
        public int SourceId { get; set; }

        /// <summary>
        /// the main organisation (its guid id) for this source/crawler
        /// </summary>
        /// <value>the main organisation (its guid id) for this source/crawler</value>
        [DataMember(Name = "organisationId", IsRequired = true, EmitDefaultValue = true)]
        public string OrganisationId { get; set; }

        /// <summary>
        /// the knowledge-base id (its guid id) for this source/crawler
        /// </summary>
        /// <value>the knowledge-base id (its guid id) for this source/crawler</value>
        [DataMember(Name = "kbId", IsRequired = true, EmitDefaultValue = true)]
        public string KbId { get; set; }

        /// <summary>
        /// the importance of this source relative to others &lt;0.0,1.0]
        /// </summary>
        /// <value>the importance of this source relative to others &lt;0.0,1.0]</value>
        /// <example>1.0</example>
        [DataMember(Name = "weight", IsRequired = true, EmitDefaultValue = true)]
        public float Weight { get; set; }

        /// <summary>
        /// the system&#39;s node id of this source (what kubernetes-node to run on, starting with zero, set NODE_ID in env to manipulate this value).  Sources will only run on machines with a matching node-id
        /// </summary>
        /// <value>the system&#39;s node id of this source (what kubernetes-node to run on, starting with zero, set NODE_ID in env to manipulate this value).  Sources will only run on machines with a matching node-id</value>
        /// <example>0</example>
        [DataMember(Name = "nodeId", IsRequired = true, EmitDefaultValue = true)]
        public int NodeId { get; set; }

        /// <summary>
        /// the display-name (descriptive name) of this source.  The source&#39;s name must be unique within a knowledge-base.
        /// </summary>
        /// <value>the display-name (descriptive name) of this source.  The source&#39;s name must be unique within a knowledge-base.</value>
        /// <example>web crawler</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// the type of this source
        /// </summary>
        /// <value>the type of this source</value>
        /// <example>one of &quot;rss&quot;,&quot;external&quot;,&quot;web&quot;,&quot;discourse&quot;,&quot;file&quot;,&quot;database&quot;,&quot;onedrive&quot;,&quot;exchange365&quot;,&quot;sharepoint365&quot;,&quot;imanage&quot;,&quot;box&quot;,&quot;dropbox&quot;,&quot;wordpress&quot;,&quot;gdrive&quot;,&quot;nfs&quot;,&quot;restfull&quot;</example>
        [DataMember(Name = "crawlerType", IsRequired = true, EmitDefaultValue = true)]
        public string CrawlerType { get; set; }

        /// <summary>
        /// the time-schedule of this crawler, when active and when not repeating in a weekly-per hour cycle in GMT time.  Empty string means not active at all
        /// </summary>
        /// <value>the time-schedule of this crawler, when active and when not repeating in a weekly-per hour cycle in GMT time.  Empty string means not active at all</value>
        /// <example>eg. If we want this crawler to be active every Monday from midnight to 1am, and Tuesday from 5pm to 6pm (GMT), we&#39;d use: &quot;mon-00,tue-17&quot;</example>
        [DataMember(Name = "schedule", IsRequired = true, EmitDefaultValue = true)]
        public string Schedule { get; set; }

        /// <summary>
        /// Should this crawler remove files that are no longer visible after a crawl completes without errors?  Used for sources that cannot report on file/data removal.
        /// </summary>
        /// <value>Should this crawler remove files that are no longer visible after a crawl completes without errors?  Used for sources that cannot report on file/data removal.</value>
        /// <example>true</example>
        [DataMember(Name = "deleteFiles", IsRequired = true, EmitDefaultValue = true)]
        public bool DeleteFiles { get; set; }

        /// <summary>
        /// Is the content of this crawler accessible anonymously (ie. no permissions/ACLs required).  Some crawlers like the web crawler always have this value as true.  NB.  Setting this flag to \&quot;true\&quot; will bypass any security on the source&#39;s own ACLs and make all its content available to everyone.
        /// </summary>
        /// <value>Is the content of this crawler accessible anonymously (ie. no permissions/ACLs required).  Some crawlers like the web crawler always have this value as true.  NB.  Setting this flag to \&quot;true\&quot; will bypass any security on the source&#39;s own ACLs and make all its content available to everyone.</value>
        /// <example>false</example>
        [DataMember(Name = "allowAnonymous", IsRequired = true, EmitDefaultValue = true)]
        public bool AllowAnonymous { get; set; }

        /// <summary>
        /// How much processing should SimSage give each file of this source.  As defined internally in ProcessingLevel.  level 1, CONVERT: convert all document binaries to text (creates metadata text).  level 2, PARSE: NLP process the files (creates sentences and tokens for all text).  level 3, INDEX: create inverted indexes for files (creates indexes).
        /// </summary>
        /// <value>How much processing should SimSage give each file of this source.  As defined internally in ProcessingLevel.  level 1, CONVERT: convert all document binaries to text (creates metadata text).  level 2, PARSE: NLP process the files (creates sentences and tokens for all text).  level 3, INDEX: create inverted indexes for files (creates indexes).</value>
        /// <example>one of: CONVERT, PARSE, INDEX</example>
        [DataMember(Name = "processingLevel", IsRequired = true, EmitDefaultValue = true)]
        public string ProcessingLevel { get; set; }

        /// <summary>
        /// Generate per-document image-preview information as well as full HTML previews if set to \&quot;true\&quot;.
        /// </summary>
        /// <value>Generate per-document image-preview information as well as full HTML previews if set to \&quot;true\&quot;.</value>
        /// <example>true</example>
        [DataMember(Name = "enablePreview", IsRequired = true, EmitDefaultValue = true)]
        public bool EnablePreview { get; set; }

        /// <summary>
        /// Any value greater than 0 will cause the crawler to sleep for as many milliseconds between file uploads.
        /// </summary>
        /// <value>Any value greater than 0 will cause the crawler to sleep for as many milliseconds between file uploads.</value>
        /// <example>0.0</example>
        [DataMember(Name = "filesPerSecond", IsRequired = true, EmitDefaultValue = true)]
        public float FilesPerSecond { get; set; }

        /// <summary>
        /// A json string with specific values for this type of source.  Generated by the SimSage administrative system.
        /// </summary>
        /// <value>A json string with specific values for this type of source.  Generated by the SimSage administrative system.</value>
        /// <example>{}</example>
        [DataMember(Name = "specificJson", IsRequired = true, EmitDefaultValue = true)]
        public string SpecificJson { get; set; }

        /// <summary>
        /// a valid session-guid id.
        /// </summary>
        /// <value>a valid session-guid id.</value>
        [DataMember(Name = "sessionId", IsRequired = true, EmitDefaultValue = true)]
        public string SessionId { get; set; }

        /// <summary>
        /// Set a content limit for the maximum number of items to contain for this source.  A value of zero (0) indicates no limits.
        /// </summary>
        /// <value>Set a content limit for the maximum number of items to contain for this source.  A value of zero (0) indicates no limits.</value>
        /// <example>0</example>
        [DataMember(Name = "maxItems", IsRequired = true, EmitDefaultValue = true)]
        public long MaxItems { get; set; }

        /// <summary>
        /// Set a Question and Answer content limit for the maximum number of deep-learning Q&amp;A items this source can contain.  A value of zero (0) indicates no limits.
        /// </summary>
        /// <value>Set a Question and Answer content limit for the maximum number of deep-learning Q&amp;A items this source can contain.  A value of zero (0) indicates no limits.</value>
        /// <example>0</example>
        [DataMember(Name = "maxBotItems", IsRequired = true, EmitDefaultValue = true)]
        public long MaxBotItems { get; set; }

        /// <summary>
        /// Does this source require custom render templates or use ordinary search-results?
        /// </summary>
        /// <value>Does this source require custom render templates or use ordinary search-results?</value>
        /// <example>false</example>
        [DataMember(Name = "customRender", IsRequired = true, EmitDefaultValue = true)]
        public bool CustomRender { get; set; }

        /// <summary>
        /// The associated Edge device for this source (or empty string if not associated with one)
        /// </summary>
        /// <value>The associated Edge device for this source (or empty string if not associated with one)</value>
        [DataMember(Name = "edgeDeviceId", IsRequired = true, EmitDefaultValue = true)]
        public string EdgeDeviceId { get; set; }

        /// <summary>
        /// the default number of search results to return from the semantic-search system
        /// </summary>
        /// <value>the default number of search results to return from the semantic-search system</value>
        [DataMember(Name = "numResults", IsRequired = true, EmitDefaultValue = true)]
        public int NumResults { get; set; }

        /// <summary>
        /// the number of fragments to return per search-result from the semantic-search system.  Affects accuracy, a value of \&quot;1\&quot; will only look at the first match.  Higher values look for more matches inside a single document.  Too high a value will affect performance.  Default value \&quot;3\&quot;.
        /// </summary>
        /// <value>the number of fragments to return per search-result from the semantic-search system.  Affects accuracy, a value of \&quot;1\&quot; will only look at the first match.  Higher values look for more matches inside a single document.  Too high a value will affect performance.  Default value \&quot;3\&quot;.</value>
        [DataMember(Name = "numFragments", IsRequired = true, EmitDefaultValue = true)]
        public int NumFragments { get; set; }

        /// <summary>
        /// the number of errors from the last source-run
        /// </summary>
        /// <value>the number of errors from the last source-run</value>
        [DataMember(Name = "numErrors", IsRequired = true, EmitDefaultValue = true)]
        public int NumErrors { get; set; }

        /// <summary>
        /// the number of errors allowed before failing the source and not force-removing any files at the end of a run through an external source.
        /// </summary>
        /// <value>the number of errors allowed before failing the source and not force-removing any files at the end of a run through an external source.</value>
        [DataMember(Name = "errorThreshold", IsRequired = true, EmitDefaultValue = true)]
        public int ErrorThreshold { get; set; }

        /// <summary>
        /// when the last run of this source started
        /// </summary>
        /// <value>when the last run of this source started</value>
        [DataMember(Name = "startTime", IsRequired = true, EmitDefaultValue = true)]
        public long StartTime { get; set; }

        /// <summary>
        /// when the last run of this source finished
        /// </summary>
        /// <value>when the last run of this source finished</value>
        [DataMember(Name = "endTime", IsRequired = true, EmitDefaultValue = true)]
        public long EndTime { get; set; }

        /// <summary>
        /// A list for overwriting security permission for a source.  Can be empty.  Use this to override security on external systems.
        /// </summary>
        /// <value>A list for overwriting security permission for a source.  Can be empty.  Use this to override security on external systems.</value>
        [DataMember(Name = "acls", IsRequired = true, EmitDefaultValue = true)]
        public List<CMDocumentAcl> Acls { get; set; }

        /// <summary>
        /// \&quot;true\&quot; if this source busy/active.
        /// </summary>
        /// <value>\&quot;true\&quot; if this source busy/active.</value>
        /// <example>false</example>
        [DataMember(Name = "isCrawling", IsRequired = true, EmitDefaultValue = true)]
        public bool IsCrawling { get; set; }

        /// <summary>
        /// the number of documents seen by the crawler thus-far.
        /// </summary>
        /// <value>the number of documents seen by the crawler thus-far.</value>
        /// <example>0</example>
        [DataMember(Name = "numCrawledDocuments", IsRequired = true, EmitDefaultValue = true)]
        public int NumCrawledDocuments { get; set; }

        /// <summary>
        /// the number of documents converted by SimSage thus-far.
        /// </summary>
        /// <value>the number of documents converted by SimSage thus-far.</value>
        /// <example>0</example>
        [DataMember(Name = "numConvertedDocuments", IsRequired = true, EmitDefaultValue = true)]
        public int NumConvertedDocuments { get; set; }

        /// <summary>
        /// the number of documents parsed by SimSage thus-far.
        /// </summary>
        /// <value>the number of documents parsed by SimSage thus-far.</value>
        /// <example>0</example>
        [DataMember(Name = "numParsedDocuments", IsRequired = true, EmitDefaultValue = true)]
        public int NumParsedDocuments { get; set; }

        /// <summary>
        /// the number of documents indexed by SimSage thus-far.
        /// </summary>
        /// <value>the number of documents indexed by SimSage thus-far.</value>
        /// <example>0</example>
        [DataMember(Name = "numIndexedDocuments", IsRequired = true, EmitDefaultValue = true)]
        public int NumIndexedDocuments { get; set; }

        /// <summary>
        /// the number of finished (fully processed) by SimSage thus-far.
        /// </summary>
        /// <value>the number of finished (fully processed) by SimSage thus-far.</value>
        /// <example>0</example>
        [DataMember(Name = "numFinishedDocuments", IsRequired = true, EmitDefaultValue = true)]
        public int NumFinishedDocuments { get; set; }

        /// <summary>
        /// the number of errored documents by SimSage thus-far.
        /// </summary>
        /// <value>the number of errored documents by SimSage thus-far.</value>
        /// <example>0</example>
        [DataMember(Name = "numErroredDocuments", IsRequired = true, EmitDefaultValue = true)]
        public int NumErroredDocuments { get; set; }

        /// <summary>
        /// the total number of documents for this source in SimSage.
        /// </summary>
        /// <value>the total number of documents for this source in SimSage.</value>
        /// <example>0</example>
        [DataMember(Name = "numTotalDocuments", IsRequired = true, EmitDefaultValue = true)]
        public int NumTotalDocuments { get; set; }

        /// <summary>
        /// the total number of documents for this source marked as errored in SimSage.
        /// </summary>
        /// <value>the total number of documents for this source marked as errored in SimSage.</value>
        /// <example>0</example>
        [DataMember(Name = "numTotalErroredDocuments", IsRequired = true, EmitDefaultValue = true)]
        public int NumTotalErroredDocuments { get; set; }

        /// <summary>
        /// \&quot;true\&quot; if this source is to use the default (built-in) SimSage relationships.  All user-defined relationships and language-entities will be used regardless of the value of this flag.
        /// </summary>
        /// <value>\&quot;true\&quot; if this source is to use the default (built-in) SimSage relationships.  All user-defined relationships and language-entities will be used regardless of the value of this flag.</value>
        /// <example>true</example>
        [DataMember(Name = "useDefaultRelationships", IsRequired = true, EmitDefaultValue = true)]
        public bool UseDefaultRelationships { get; set; }

        /// <summary>
        /// \&quot;true\&quot; if this source is currently being optimized / processed by the index-optimizer.
        /// </summary>
        /// <value>\&quot;true\&quot; if this source is currently being optimized / processed by the index-optimizer.</value>
        /// <example>true</example>
        [DataMember(Name = "isBusy", IsRequired = true, EmitDefaultValue = true)]
        public bool IsBusy { get; set; }

        /// <summary>
        /// \&quot;true\&quot; if this source is to store all documents locally on the SimSage platform
        /// </summary>
        /// <value>\&quot;true\&quot; if this source is to store all documents locally on the SimSage platform</value>
        /// <example>true</example>
        [DataMember(Name = "storeBinary", IsRequired = true, EmitDefaultValue = true)]
        public bool StoreBinary { get; set; }

        /// <summary>
        /// \&quot;true\&quot; if this source is to store all versions of documents locally on the SimSage platform
        /// </summary>
        /// <value>\&quot;true\&quot; if this source is to store all versions of documents locally on the SimSage platform</value>
        /// <example>true</example>
        [DataMember(Name = "versioned", IsRequired = true, EmitDefaultValue = true)]
        public bool Versioned { get; set; }

        /// <summary>
        /// \&quot;true\&quot; if this source is to write any changes direct to Cassandra, otherwise this source will collect indexes on disk first (for initial loading)
        /// </summary>
        /// <value>\&quot;true\&quot; if this source is to write any changes direct to Cassandra, otherwise this source will collect indexes on disk first (for initial loading)</value>
        /// <example>true</example>
        [DataMember(Name = "writeToCassandra", IsRequired = true, EmitDefaultValue = true)]
        public bool WriteToCassandra { get; set; }

        /// <summary>
        /// Json string defining any optional processors configured on the source
        /// </summary>
        /// <value>Json string defining any optional processors configured on the source</value>
        /// <example>{}</example>
        [DataMember(Name = "processorConfig", IsRequired = true, EmitDefaultValue = true)]
        public string ProcessorConfig { get; set; }

        /// <summary>
        /// enable document similarity calculations.
        /// </summary>
        /// <value>enable document similarity calculations.</value>
        /// <example>true</example>
        [DataMember(Name = "enableDocumentSimilarity", IsRequired = true, EmitDefaultValue = true)]
        public bool EnableDocumentSimilarity { get; set; }

        /// <summary>
        /// the document similarity threshold for grouping documents, a value between 0.75 and 1.0
        /// </summary>
        /// <value>the document similarity threshold for grouping documents, a value between 0.75 and 1.0</value>
        /// <example>0.9</example>
        [DataMember(Name = "documentSimilarityThreshold", IsRequired = true, EmitDefaultValue = true)]
        public float DocumentSimilarityThreshold { get; set; }

        /// <summary>
        /// is this crawler to be connected as an external source using our external crawler software?
        /// </summary>
        /// <value>is this crawler to be connected as an external source using our external crawler software?</value>
        /// <example>false</example>
        [DataMember(Name = "isExternal", IsRequired = true, EmitDefaultValue = true)]
        public bool IsExternal { get; set; }

        /// <summary>
        /// enable OCR processing for files in this source?
        /// </summary>
        /// <value>enable OCR processing for files in this source?</value>
        /// <example>true</example>
        [DataMember(Name = "useOCR", IsRequired = true, EmitDefaultValue = true)]
        public bool UseOCR { get; set; }

        /// <summary>
        /// enable Speech-to-text processing for files in this source?
        /// </summary>
        /// <value>enable Speech-to-text processing for files in this source?</value>
        /// <example>true</example>
        [DataMember(Name = "useSTT", IsRequired = true, EmitDefaultValue = true)]
        public bool UseSTT { get; set; }

        /// <summary>
        /// A saved value indicating last crawler state
        /// </summary>
        /// <value>A saved value indicating last crawler state</value>
        /// <example>12345</example>
        [DataMember(Name = "deltaIndicator", IsRequired = true, EmitDefaultValue = true)]
        public string DeltaIndicator { get; set; }

        /// <summary>
        /// enabling sending of logs to SimSage for external crawlers
        /// </summary>
        /// <value>enabling sending of logs to SimSage for external crawlers</value>
        /// <example>false</example>
        [DataMember(Name = "transmitExternalLogs", IsRequired = true, EmitDefaultValue = true)]
        public bool TransmitExternalLogs { get; set; }

        /// <summary>
        /// Gets or Sets SourceError
        /// </summary>
        [DataMember(Name = "sourceError", IsRequired = true, EmitDefaultValue = true)]
        public CMSourceError SourceError { get; set; }

        /// <summary>
        /// Gets or Sets External
        /// </summary>
        [DataMember(Name = "external", EmitDefaultValue = true)]
        public bool External { get; set; }

        /// <summary>
        /// Gets or Sets Crawling
        /// </summary>
        [DataMember(Name = "crawling", EmitDefaultValue = true)]
        public bool Crawling { get; set; }

        /// <summary>
        /// Gets or Sets Busy
        /// </summary>
        [DataMember(Name = "busy", EmitDefaultValue = true)]
        public bool Busy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMSource {\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  OrganisationId: ").Append(OrganisationId).Append("\n");
            sb.Append("  KbId: ").Append(KbId).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CrawlerType: ").Append(CrawlerType).Append("\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("  DeleteFiles: ").Append(DeleteFiles).Append("\n");
            sb.Append("  AllowAnonymous: ").Append(AllowAnonymous).Append("\n");
            sb.Append("  ProcessingLevel: ").Append(ProcessingLevel).Append("\n");
            sb.Append("  EnablePreview: ").Append(EnablePreview).Append("\n");
            sb.Append("  FilesPerSecond: ").Append(FilesPerSecond).Append("\n");
            sb.Append("  SpecificJson: ").Append(SpecificJson).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  MaxItems: ").Append(MaxItems).Append("\n");
            sb.Append("  MaxBotItems: ").Append(MaxBotItems).Append("\n");
            sb.Append("  CustomRender: ").Append(CustomRender).Append("\n");
            sb.Append("  EdgeDeviceId: ").Append(EdgeDeviceId).Append("\n");
            sb.Append("  NumResults: ").Append(NumResults).Append("\n");
            sb.Append("  NumFragments: ").Append(NumFragments).Append("\n");
            sb.Append("  NumErrors: ").Append(NumErrors).Append("\n");
            sb.Append("  ErrorThreshold: ").Append(ErrorThreshold).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Acls: ").Append(Acls).Append("\n");
            sb.Append("  IsCrawling: ").Append(IsCrawling).Append("\n");
            sb.Append("  NumCrawledDocuments: ").Append(NumCrawledDocuments).Append("\n");
            sb.Append("  NumConvertedDocuments: ").Append(NumConvertedDocuments).Append("\n");
            sb.Append("  NumParsedDocuments: ").Append(NumParsedDocuments).Append("\n");
            sb.Append("  NumIndexedDocuments: ").Append(NumIndexedDocuments).Append("\n");
            sb.Append("  NumFinishedDocuments: ").Append(NumFinishedDocuments).Append("\n");
            sb.Append("  NumErroredDocuments: ").Append(NumErroredDocuments).Append("\n");
            sb.Append("  NumTotalDocuments: ").Append(NumTotalDocuments).Append("\n");
            sb.Append("  NumTotalErroredDocuments: ").Append(NumTotalErroredDocuments).Append("\n");
            sb.Append("  UseDefaultRelationships: ").Append(UseDefaultRelationships).Append("\n");
            sb.Append("  IsBusy: ").Append(IsBusy).Append("\n");
            sb.Append("  StoreBinary: ").Append(StoreBinary).Append("\n");
            sb.Append("  Versioned: ").Append(Versioned).Append("\n");
            sb.Append("  WriteToCassandra: ").Append(WriteToCassandra).Append("\n");
            sb.Append("  ProcessorConfig: ").Append(ProcessorConfig).Append("\n");
            sb.Append("  EnableDocumentSimilarity: ").Append(EnableDocumentSimilarity).Append("\n");
            sb.Append("  DocumentSimilarityThreshold: ").Append(DocumentSimilarityThreshold).Append("\n");
            sb.Append("  IsExternal: ").Append(IsExternal).Append("\n");
            sb.Append("  UseOCR: ").Append(UseOCR).Append("\n");
            sb.Append("  UseSTT: ").Append(UseSTT).Append("\n");
            sb.Append("  DeltaIndicator: ").Append(DeltaIndicator).Append("\n");
            sb.Append("  TransmitExternalLogs: ").Append(TransmitExternalLogs).Append("\n");
            sb.Append("  SourceError: ").Append(SourceError).Append("\n");
            sb.Append("  External: ").Append(External).Append("\n");
            sb.Append("  Crawling: ").Append(Crawling).Append("\n");
            sb.Append("  Busy: ").Append(Busy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMSource);
        }

        /// <summary>
        /// Returns true if CMSource instances are equal
        /// </summary>
        /// <param name="input">Instance of CMSource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMSource input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SourceId == input.SourceId ||
                    this.SourceId.Equals(input.SourceId)
                ) && 
                (
                    this.OrganisationId == input.OrganisationId ||
                    (this.OrganisationId != null &&
                    this.OrganisationId.Equals(input.OrganisationId))
                ) && 
                (
                    this.KbId == input.KbId ||
                    (this.KbId != null &&
                    this.KbId.Equals(input.KbId))
                ) && 
                (
                    this.Weight == input.Weight ||
                    this.Weight.Equals(input.Weight)
                ) && 
                (
                    this.NodeId == input.NodeId ||
                    this.NodeId.Equals(input.NodeId)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CrawlerType == input.CrawlerType ||
                    (this.CrawlerType != null &&
                    this.CrawlerType.Equals(input.CrawlerType))
                ) && 
                (
                    this.Schedule == input.Schedule ||
                    (this.Schedule != null &&
                    this.Schedule.Equals(input.Schedule))
                ) && 
                (
                    this.DeleteFiles == input.DeleteFiles ||
                    this.DeleteFiles.Equals(input.DeleteFiles)
                ) && 
                (
                    this.AllowAnonymous == input.AllowAnonymous ||
                    this.AllowAnonymous.Equals(input.AllowAnonymous)
                ) && 
                (
                    this.ProcessingLevel == input.ProcessingLevel ||
                    (this.ProcessingLevel != null &&
                    this.ProcessingLevel.Equals(input.ProcessingLevel))
                ) && 
                (
                    this.EnablePreview == input.EnablePreview ||
                    this.EnablePreview.Equals(input.EnablePreview)
                ) && 
                (
                    this.FilesPerSecond == input.FilesPerSecond ||
                    this.FilesPerSecond.Equals(input.FilesPerSecond)
                ) && 
                (
                    this.SpecificJson == input.SpecificJson ||
                    (this.SpecificJson != null &&
                    this.SpecificJson.Equals(input.SpecificJson))
                ) && 
                (
                    this.SessionId == input.SessionId ||
                    (this.SessionId != null &&
                    this.SessionId.Equals(input.SessionId))
                ) && 
                (
                    this.MaxItems == input.MaxItems ||
                    this.MaxItems.Equals(input.MaxItems)
                ) && 
                (
                    this.MaxBotItems == input.MaxBotItems ||
                    this.MaxBotItems.Equals(input.MaxBotItems)
                ) && 
                (
                    this.CustomRender == input.CustomRender ||
                    this.CustomRender.Equals(input.CustomRender)
                ) && 
                (
                    this.EdgeDeviceId == input.EdgeDeviceId ||
                    (this.EdgeDeviceId != null &&
                    this.EdgeDeviceId.Equals(input.EdgeDeviceId))
                ) && 
                (
                    this.NumResults == input.NumResults ||
                    this.NumResults.Equals(input.NumResults)
                ) && 
                (
                    this.NumFragments == input.NumFragments ||
                    this.NumFragments.Equals(input.NumFragments)
                ) && 
                (
                    this.NumErrors == input.NumErrors ||
                    this.NumErrors.Equals(input.NumErrors)
                ) && 
                (
                    this.ErrorThreshold == input.ErrorThreshold ||
                    this.ErrorThreshold.Equals(input.ErrorThreshold)
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    this.StartTime.Equals(input.StartTime)
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    this.EndTime.Equals(input.EndTime)
                ) && 
                (
                    this.Acls == input.Acls ||
                    this.Acls != null &&
                    input.Acls != null &&
                    this.Acls.SequenceEqual(input.Acls)
                ) && 
                (
                    this.IsCrawling == input.IsCrawling ||
                    this.IsCrawling.Equals(input.IsCrawling)
                ) && 
                (
                    this.NumCrawledDocuments == input.NumCrawledDocuments ||
                    this.NumCrawledDocuments.Equals(input.NumCrawledDocuments)
                ) && 
                (
                    this.NumConvertedDocuments == input.NumConvertedDocuments ||
                    this.NumConvertedDocuments.Equals(input.NumConvertedDocuments)
                ) && 
                (
                    this.NumParsedDocuments == input.NumParsedDocuments ||
                    this.NumParsedDocuments.Equals(input.NumParsedDocuments)
                ) && 
                (
                    this.NumIndexedDocuments == input.NumIndexedDocuments ||
                    this.NumIndexedDocuments.Equals(input.NumIndexedDocuments)
                ) && 
                (
                    this.NumFinishedDocuments == input.NumFinishedDocuments ||
                    this.NumFinishedDocuments.Equals(input.NumFinishedDocuments)
                ) && 
                (
                    this.NumErroredDocuments == input.NumErroredDocuments ||
                    this.NumErroredDocuments.Equals(input.NumErroredDocuments)
                ) && 
                (
                    this.NumTotalDocuments == input.NumTotalDocuments ||
                    this.NumTotalDocuments.Equals(input.NumTotalDocuments)
                ) && 
                (
                    this.NumTotalErroredDocuments == input.NumTotalErroredDocuments ||
                    this.NumTotalErroredDocuments.Equals(input.NumTotalErroredDocuments)
                ) && 
                (
                    this.UseDefaultRelationships == input.UseDefaultRelationships ||
                    this.UseDefaultRelationships.Equals(input.UseDefaultRelationships)
                ) && 
                (
                    this.IsBusy == input.IsBusy ||
                    this.IsBusy.Equals(input.IsBusy)
                ) && 
                (
                    this.StoreBinary == input.StoreBinary ||
                    this.StoreBinary.Equals(input.StoreBinary)
                ) && 
                (
                    this.Versioned == input.Versioned ||
                    this.Versioned.Equals(input.Versioned)
                ) && 
                (
                    this.WriteToCassandra == input.WriteToCassandra ||
                    this.WriteToCassandra.Equals(input.WriteToCassandra)
                ) && 
                (
                    this.ProcessorConfig == input.ProcessorConfig ||
                    (this.ProcessorConfig != null &&
                    this.ProcessorConfig.Equals(input.ProcessorConfig))
                ) && 
                (
                    this.EnableDocumentSimilarity == input.EnableDocumentSimilarity ||
                    this.EnableDocumentSimilarity.Equals(input.EnableDocumentSimilarity)
                ) && 
                (
                    this.DocumentSimilarityThreshold == input.DocumentSimilarityThreshold ||
                    this.DocumentSimilarityThreshold.Equals(input.DocumentSimilarityThreshold)
                ) && 
                (
                    this.IsExternal == input.IsExternal ||
                    this.IsExternal.Equals(input.IsExternal)
                ) && 
                (
                    this.UseOCR == input.UseOCR ||
                    this.UseOCR.Equals(input.UseOCR)
                ) && 
                (
                    this.UseSTT == input.UseSTT ||
                    this.UseSTT.Equals(input.UseSTT)
                ) && 
                (
                    this.DeltaIndicator == input.DeltaIndicator ||
                    (this.DeltaIndicator != null &&
                    this.DeltaIndicator.Equals(input.DeltaIndicator))
                ) && 
                (
                    this.TransmitExternalLogs == input.TransmitExternalLogs ||
                    this.TransmitExternalLogs.Equals(input.TransmitExternalLogs)
                ) && 
                (
                    this.SourceError == input.SourceError ||
                    (this.SourceError != null &&
                    this.SourceError.Equals(input.SourceError))
                ) && 
                (
                    this.External == input.External ||
                    this.External.Equals(input.External)
                ) && 
                (
                    this.Crawling == input.Crawling ||
                    this.Crawling.Equals(input.Crawling)
                ) && 
                (
                    this.Busy == input.Busy ||
                    this.Busy.Equals(input.Busy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SourceId.GetHashCode();
                if (this.OrganisationId != null)
                {
                    hashCode = (hashCode * 59) + this.OrganisationId.GetHashCode();
                }
                if (this.KbId != null)
                {
                    hashCode = (hashCode * 59) + this.KbId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Weight.GetHashCode();
                hashCode = (hashCode * 59) + this.NodeId.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.CrawlerType != null)
                {
                    hashCode = (hashCode * 59) + this.CrawlerType.GetHashCode();
                }
                if (this.Schedule != null)
                {
                    hashCode = (hashCode * 59) + this.Schedule.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DeleteFiles.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowAnonymous.GetHashCode();
                if (this.ProcessingLevel != null)
                {
                    hashCode = (hashCode * 59) + this.ProcessingLevel.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EnablePreview.GetHashCode();
                hashCode = (hashCode * 59) + this.FilesPerSecond.GetHashCode();
                if (this.SpecificJson != null)
                {
                    hashCode = (hashCode * 59) + this.SpecificJson.GetHashCode();
                }
                if (this.SessionId != null)
                {
                    hashCode = (hashCode * 59) + this.SessionId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MaxItems.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxBotItems.GetHashCode();
                hashCode = (hashCode * 59) + this.CustomRender.GetHashCode();
                if (this.EdgeDeviceId != null)
                {
                    hashCode = (hashCode * 59) + this.EdgeDeviceId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NumResults.GetHashCode();
                hashCode = (hashCode * 59) + this.NumFragments.GetHashCode();
                hashCode = (hashCode * 59) + this.NumErrors.GetHashCode();
                hashCode = (hashCode * 59) + this.ErrorThreshold.GetHashCode();
                hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                hashCode = (hashCode * 59) + this.EndTime.GetHashCode();
                if (this.Acls != null)
                {
                    hashCode = (hashCode * 59) + this.Acls.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsCrawling.GetHashCode();
                hashCode = (hashCode * 59) + this.NumCrawledDocuments.GetHashCode();
                hashCode = (hashCode * 59) + this.NumConvertedDocuments.GetHashCode();
                hashCode = (hashCode * 59) + this.NumParsedDocuments.GetHashCode();
                hashCode = (hashCode * 59) + this.NumIndexedDocuments.GetHashCode();
                hashCode = (hashCode * 59) + this.NumFinishedDocuments.GetHashCode();
                hashCode = (hashCode * 59) + this.NumErroredDocuments.GetHashCode();
                hashCode = (hashCode * 59) + this.NumTotalDocuments.GetHashCode();
                hashCode = (hashCode * 59) + this.NumTotalErroredDocuments.GetHashCode();
                hashCode = (hashCode * 59) + this.UseDefaultRelationships.GetHashCode();
                hashCode = (hashCode * 59) + this.IsBusy.GetHashCode();
                hashCode = (hashCode * 59) + this.StoreBinary.GetHashCode();
                hashCode = (hashCode * 59) + this.Versioned.GetHashCode();
                hashCode = (hashCode * 59) + this.WriteToCassandra.GetHashCode();
                if (this.ProcessorConfig != null)
                {
                    hashCode = (hashCode * 59) + this.ProcessorConfig.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EnableDocumentSimilarity.GetHashCode();
                hashCode = (hashCode * 59) + this.DocumentSimilarityThreshold.GetHashCode();
                hashCode = (hashCode * 59) + this.IsExternal.GetHashCode();
                hashCode = (hashCode * 59) + this.UseOCR.GetHashCode();
                hashCode = (hashCode * 59) + this.UseSTT.GetHashCode();
                if (this.DeltaIndicator != null)
                {
                    hashCode = (hashCode * 59) + this.DeltaIndicator.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TransmitExternalLogs.GetHashCode();
                if (this.SourceError != null)
                {
                    hashCode = (hashCode * 59) + this.SourceError.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.External.GetHashCode();
                hashCode = (hashCode * 59) + this.Crawling.GetHashCode();
                hashCode = (hashCode * 59) + this.Busy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
