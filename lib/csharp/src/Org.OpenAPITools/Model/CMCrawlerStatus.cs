/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CMCrawlerStatus
    /// </summary>
    [DataContract(Name = "CMCrawlerStatus")]
    public partial class CMCrawlerStatus : IEquatable<CMCrawlerStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMCrawlerStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMCrawlerStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMCrawlerStatus" /> class.
        /// </summary>
        /// <param name="organisationId">organisationId (required).</param>
        /// <param name="kbId">kbId (required).</param>
        /// <param name="projectTitle">projectTitle (required).</param>
        /// <param name="projectType">projectType (required).</param>
        /// <param name="crawlerId">crawlerId (required).</param>
        /// <param name="crawlerName">crawlerName (required).</param>
        /// <param name="startTime">startTime (required).</param>
        /// <param name="endTime">endTime (required).</param>
        /// <param name="isRunning">isRunning (required).</param>
        /// <param name="specificJson">specificJson (required).</param>
        public CMCrawlerStatus(string organisationId = default(string), string kbId = default(string), string projectTitle = default(string), string projectType = default(string), string crawlerId = default(string), string crawlerName = default(string), long startTime = default(long), long endTime = default(long), bool isRunning = default(bool), string specificJson = default(string))
        {
            // to ensure "organisationId" is required (not null)
            if (organisationId == null)
            {
                throw new ArgumentNullException("organisationId is a required property for CMCrawlerStatus and cannot be null");
            }
            this.OrganisationId = organisationId;
            // to ensure "kbId" is required (not null)
            if (kbId == null)
            {
                throw new ArgumentNullException("kbId is a required property for CMCrawlerStatus and cannot be null");
            }
            this.KbId = kbId;
            // to ensure "projectTitle" is required (not null)
            if (projectTitle == null)
            {
                throw new ArgumentNullException("projectTitle is a required property for CMCrawlerStatus and cannot be null");
            }
            this.ProjectTitle = projectTitle;
            // to ensure "projectType" is required (not null)
            if (projectType == null)
            {
                throw new ArgumentNullException("projectType is a required property for CMCrawlerStatus and cannot be null");
            }
            this.ProjectType = projectType;
            // to ensure "crawlerId" is required (not null)
            if (crawlerId == null)
            {
                throw new ArgumentNullException("crawlerId is a required property for CMCrawlerStatus and cannot be null");
            }
            this.CrawlerId = crawlerId;
            // to ensure "crawlerName" is required (not null)
            if (crawlerName == null)
            {
                throw new ArgumentNullException("crawlerName is a required property for CMCrawlerStatus and cannot be null");
            }
            this.CrawlerName = crawlerName;
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.IsRunning = isRunning;
            // to ensure "specificJson" is required (not null)
            if (specificJson == null)
            {
                throw new ArgumentNullException("specificJson is a required property for CMCrawlerStatus and cannot be null");
            }
            this.SpecificJson = specificJson;
        }

        /// <summary>
        /// Gets or Sets OrganisationId
        /// </summary>
        [DataMember(Name = "organisationId", IsRequired = true, EmitDefaultValue = true)]
        public string OrganisationId { get; set; }

        /// <summary>
        /// Gets or Sets KbId
        /// </summary>
        [DataMember(Name = "kbId", IsRequired = true, EmitDefaultValue = true)]
        public string KbId { get; set; }

        /// <summary>
        /// Gets or Sets ProjectTitle
        /// </summary>
        [DataMember(Name = "projectTitle", IsRequired = true, EmitDefaultValue = true)]
        public string ProjectTitle { get; set; }

        /// <summary>
        /// Gets or Sets ProjectType
        /// </summary>
        [DataMember(Name = "projectType", IsRequired = true, EmitDefaultValue = true)]
        public string ProjectType { get; set; }

        /// <summary>
        /// Gets or Sets CrawlerId
        /// </summary>
        [DataMember(Name = "crawlerId", IsRequired = true, EmitDefaultValue = true)]
        public string CrawlerId { get; set; }

        /// <summary>
        /// Gets or Sets CrawlerName
        /// </summary>
        [DataMember(Name = "crawlerName", IsRequired = true, EmitDefaultValue = true)]
        public string CrawlerName { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "startTime", IsRequired = true, EmitDefaultValue = true)]
        public long StartTime { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name = "endTime", IsRequired = true, EmitDefaultValue = true)]
        public long EndTime { get; set; }

        /// <summary>
        /// Gets or Sets IsRunning
        /// </summary>
        [DataMember(Name = "isRunning", IsRequired = true, EmitDefaultValue = true)]
        public bool IsRunning { get; set; }

        /// <summary>
        /// Gets or Sets SpecificJson
        /// </summary>
        [DataMember(Name = "specificJson", IsRequired = true, EmitDefaultValue = true)]
        public string SpecificJson { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMCrawlerStatus {\n");
            sb.Append("  OrganisationId: ").Append(OrganisationId).Append("\n");
            sb.Append("  KbId: ").Append(KbId).Append("\n");
            sb.Append("  ProjectTitle: ").Append(ProjectTitle).Append("\n");
            sb.Append("  ProjectType: ").Append(ProjectType).Append("\n");
            sb.Append("  CrawlerId: ").Append(CrawlerId).Append("\n");
            sb.Append("  CrawlerName: ").Append(CrawlerName).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  IsRunning: ").Append(IsRunning).Append("\n");
            sb.Append("  SpecificJson: ").Append(SpecificJson).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMCrawlerStatus);
        }

        /// <summary>
        /// Returns true if CMCrawlerStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of CMCrawlerStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMCrawlerStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OrganisationId == input.OrganisationId ||
                    (this.OrganisationId != null &&
                    this.OrganisationId.Equals(input.OrganisationId))
                ) && 
                (
                    this.KbId == input.KbId ||
                    (this.KbId != null &&
                    this.KbId.Equals(input.KbId))
                ) && 
                (
                    this.ProjectTitle == input.ProjectTitle ||
                    (this.ProjectTitle != null &&
                    this.ProjectTitle.Equals(input.ProjectTitle))
                ) && 
                (
                    this.ProjectType == input.ProjectType ||
                    (this.ProjectType != null &&
                    this.ProjectType.Equals(input.ProjectType))
                ) && 
                (
                    this.CrawlerId == input.CrawlerId ||
                    (this.CrawlerId != null &&
                    this.CrawlerId.Equals(input.CrawlerId))
                ) && 
                (
                    this.CrawlerName == input.CrawlerName ||
                    (this.CrawlerName != null &&
                    this.CrawlerName.Equals(input.CrawlerName))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    this.StartTime.Equals(input.StartTime)
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    this.EndTime.Equals(input.EndTime)
                ) && 
                (
                    this.IsRunning == input.IsRunning ||
                    this.IsRunning.Equals(input.IsRunning)
                ) && 
                (
                    this.SpecificJson == input.SpecificJson ||
                    (this.SpecificJson != null &&
                    this.SpecificJson.Equals(input.SpecificJson))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrganisationId != null)
                {
                    hashCode = (hashCode * 59) + this.OrganisationId.GetHashCode();
                }
                if (this.KbId != null)
                {
                    hashCode = (hashCode * 59) + this.KbId.GetHashCode();
                }
                if (this.ProjectTitle != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectTitle.GetHashCode();
                }
                if (this.ProjectType != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectType.GetHashCode();
                }
                if (this.CrawlerId != null)
                {
                    hashCode = (hashCode * 59) + this.CrawlerId.GetHashCode();
                }
                if (this.CrawlerName != null)
                {
                    hashCode = (hashCode * 59) + this.CrawlerName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                hashCode = (hashCode * 59) + this.EndTime.GetHashCode();
                hashCode = (hashCode * 59) + this.IsRunning.GetHashCode();
                if (this.SpecificJson != null)
                {
                    hashCode = (hashCode * 59) + this.SpecificJson.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
