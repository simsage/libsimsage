/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.14.12
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A SimSage return search-result message for Q&amp;A and semantic-search queries.
    /// </summary>
    [DataContract(Name = "CMClientQueryResult")]
    public partial class CMClientQueryResult : IEquatable<CMClientQueryResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMClientQueryResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMClientQueryResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMClientQueryResult" /> class.
        /// </summary>
        /// <param name="messageType">messageType (required).</param>
        /// <param name="organisationId">the organisation (its guid id). (required).</param>
        /// <param name="kbId">the knowledge-base id (its guid id) (required).</param>
        /// <param name="text">the text sent. (required).</param>
        /// <param name="hasResult">is there a result/reply or not? (required).</param>
        /// <param name="urlList">a list of reference urls associated with this answer (required).</param>
        /// <param name="metadata">metadata associated with the Question/Answer pair, user defined. (required).</param>
        /// <param name="qnaScore">how well the Q&amp;A matcher performed a value between 0.0 and 1.0 (required).</param>
        /// <param name="imageList">A list of image urls associated with the Q&amp;A pair (required).</param>
        /// <param name="totalDocumentCount">the total number of documents found (but not included necessarily) (required).</param>
        /// <param name="shardSizeList">Index sharding values.  These are used by the internal engine to determine the status of results across different shards in SimSage.  Leave this value alone.  It is set by SimSage.  Pass it back to SimSage as you got it if you&#39;re paginating the same query. (required).</param>
        /// <param name="resultList">the actual search results, one for each item found (required).</param>
        /// <param name="spellingCorrection">a spelling correction suggestion if appropriate and enabled. (required).</param>
        /// <param name="semanticSet">A descriptor of semantic categories and words with frequencies in each category (required).</param>
        /// <param name="knowEmail">do we know the email address of this person?  if they&#39;ve supplied it in the past this will be set to true. (required).</param>
        /// <param name="categoryList">updated categories (if applicable) with updated counts (required).</param>
        /// <param name="synSetList">A list of syn-sets used in the query (required).</param>
        /// <param name="customRender">Does this source require custom render templates or use ordinary search-results? (required).</param>
        /// <param name="sourceIdToCounts">a map of sourceId -&gt; number of documents found inside this source (required).</param>
        /// <param name="documentTypeToCounts">a map of document-type -&gt; number of documents found of this type (required).</param>
        /// <param name="savedSearchList">a list of previous searches if applicable (required).</param>
        /// <param name="querySummarization">an optional summarization of the search results (required).</param>
        public CMClientQueryResult(string messageType = default(string), string organisationId = default(string), string kbId = default(string), string text = default(string), bool hasResult = default(bool), List<string> urlList = default(List<string>), string metadata = default(string), float qnaScore = default(float), List<string> imageList = default(List<string>), int totalDocumentCount = default(int), List<int> shardSizeList = default(List<int>), List<CMSearchResult> resultList = default(List<CMSearchResult>), string spellingCorrection = default(string), Dictionary<string, List<CMWordFrequency>> semanticSet = default(Dictionary<string, List<CMWordFrequency>>), bool knowEmail = default(bool), List<SearchCategory> categoryList = default(List<SearchCategory>), List<CMSynSet> synSetList = default(List<CMSynSet>), bool customRender = default(bool), Dictionary<string, int> sourceIdToCounts = default(Dictionary<string, int>), Dictionary<string, int> documentTypeToCounts = default(Dictionary<string, int>), List<CMSavedSearch> savedSearchList = default(List<CMSavedSearch>), string querySummarization = default(string))
        {
            // to ensure "messageType" is required (not null)
            if (messageType == null)
            {
                throw new ArgumentNullException("messageType is a required property for CMClientQueryResult and cannot be null");
            }
            this.MessageType = messageType;
            // to ensure "organisationId" is required (not null)
            if (organisationId == null)
            {
                throw new ArgumentNullException("organisationId is a required property for CMClientQueryResult and cannot be null");
            }
            this.OrganisationId = organisationId;
            // to ensure "kbId" is required (not null)
            if (kbId == null)
            {
                throw new ArgumentNullException("kbId is a required property for CMClientQueryResult and cannot be null");
            }
            this.KbId = kbId;
            // to ensure "text" is required (not null)
            if (text == null)
            {
                throw new ArgumentNullException("text is a required property for CMClientQueryResult and cannot be null");
            }
            this.Text = text;
            this.HasResult = hasResult;
            // to ensure "urlList" is required (not null)
            if (urlList == null)
            {
                throw new ArgumentNullException("urlList is a required property for CMClientQueryResult and cannot be null");
            }
            this.UrlList = urlList;
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new ArgumentNullException("metadata is a required property for CMClientQueryResult and cannot be null");
            }
            this.Metadata = metadata;
            this.QnaScore = qnaScore;
            // to ensure "imageList" is required (not null)
            if (imageList == null)
            {
                throw new ArgumentNullException("imageList is a required property for CMClientQueryResult and cannot be null");
            }
            this.ImageList = imageList;
            this.TotalDocumentCount = totalDocumentCount;
            // to ensure "shardSizeList" is required (not null)
            if (shardSizeList == null)
            {
                throw new ArgumentNullException("shardSizeList is a required property for CMClientQueryResult and cannot be null");
            }
            this.ShardSizeList = shardSizeList;
            // to ensure "resultList" is required (not null)
            if (resultList == null)
            {
                throw new ArgumentNullException("resultList is a required property for CMClientQueryResult and cannot be null");
            }
            this.ResultList = resultList;
            // to ensure "spellingCorrection" is required (not null)
            if (spellingCorrection == null)
            {
                throw new ArgumentNullException("spellingCorrection is a required property for CMClientQueryResult and cannot be null");
            }
            this.SpellingCorrection = spellingCorrection;
            // to ensure "semanticSet" is required (not null)
            if (semanticSet == null)
            {
                throw new ArgumentNullException("semanticSet is a required property for CMClientQueryResult and cannot be null");
            }
            this.SemanticSet = semanticSet;
            this.KnowEmail = knowEmail;
            // to ensure "categoryList" is required (not null)
            if (categoryList == null)
            {
                throw new ArgumentNullException("categoryList is a required property for CMClientQueryResult and cannot be null");
            }
            this.CategoryList = categoryList;
            // to ensure "synSetList" is required (not null)
            if (synSetList == null)
            {
                throw new ArgumentNullException("synSetList is a required property for CMClientQueryResult and cannot be null");
            }
            this.SynSetList = synSetList;
            this.CustomRender = customRender;
            // to ensure "sourceIdToCounts" is required (not null)
            if (sourceIdToCounts == null)
            {
                throw new ArgumentNullException("sourceIdToCounts is a required property for CMClientQueryResult and cannot be null");
            }
            this.SourceIdToCounts = sourceIdToCounts;
            // to ensure "documentTypeToCounts" is required (not null)
            if (documentTypeToCounts == null)
            {
                throw new ArgumentNullException("documentTypeToCounts is a required property for CMClientQueryResult and cannot be null");
            }
            this.DocumentTypeToCounts = documentTypeToCounts;
            // to ensure "savedSearchList" is required (not null)
            if (savedSearchList == null)
            {
                throw new ArgumentNullException("savedSearchList is a required property for CMClientQueryResult and cannot be null");
            }
            this.SavedSearchList = savedSearchList;
            // to ensure "querySummarization" is required (not null)
            if (querySummarization == null)
            {
                throw new ArgumentNullException("querySummarization is a required property for CMClientQueryResult and cannot be null");
            }
            this.QuerySummarization = querySummarization;
        }

        /// <summary>
        /// Gets or Sets MessageType
        /// </summary>
        [DataMember(Name = "messageType", IsRequired = true, EmitDefaultValue = true)]
        public string MessageType { get; set; }

        /// <summary>
        /// the organisation (its guid id).
        /// </summary>
        /// <value>the organisation (its guid id).</value>
        /// <example>00000000-0000-0000-0000-000000000001</example>
        [DataMember(Name = "organisationId", IsRequired = true, EmitDefaultValue = true)]
        public string OrganisationId { get; set; }

        /// <summary>
        /// the knowledge-base id (its guid id)
        /// </summary>
        /// <value>the knowledge-base id (its guid id)</value>
        /// <example>00000000-0000-0000-0000-000000000001</example>
        [DataMember(Name = "kbId", IsRequired = true, EmitDefaultValue = true)]
        public string KbId { get; set; }

        /// <summary>
        /// the text sent.
        /// </summary>
        /// <value>the text sent.</value>
        /// <example>hello there!</example>
        [DataMember(Name = "text", IsRequired = true, EmitDefaultValue = true)]
        public string Text { get; set; }

        /// <summary>
        /// is there a result/reply or not?
        /// </summary>
        /// <value>is there a result/reply or not?</value>
        /// <example>true</example>
        [DataMember(Name = "hasResult", IsRequired = true, EmitDefaultValue = true)]
        public bool HasResult { get; set; }

        /// <summary>
        /// a list of reference urls associated with this answer
        /// </summary>
        /// <value>a list of reference urls associated with this answer</value>
        [DataMember(Name = "urlList", IsRequired = true, EmitDefaultValue = true)]
        public List<string> UrlList { get; set; }

        /// <summary>
        /// metadata associated with the Question/Answer pair, user defined.
        /// </summary>
        /// <value>metadata associated with the Question/Answer pair, user defined.</value>
        /// <example>some user data</example>
        [DataMember(Name = "metadata", IsRequired = true, EmitDefaultValue = true)]
        public string Metadata { get; set; }

        /// <summary>
        /// how well the Q&amp;A matcher performed a value between 0.0 and 1.0
        /// </summary>
        /// <value>how well the Q&amp;A matcher performed a value between 0.0 and 1.0</value>
        /// <example>1.0</example>
        [DataMember(Name = "qnaScore", IsRequired = true, EmitDefaultValue = true)]
        public float QnaScore { get; set; }

        /// <summary>
        /// A list of image urls associated with the Q&amp;A pair
        /// </summary>
        /// <value>A list of image urls associated with the Q&amp;A pair</value>
        /// <example>[&quot;http://server/image1.jpg&quot;]</example>
        [DataMember(Name = "imageList", IsRequired = true, EmitDefaultValue = true)]
        public List<string> ImageList { get; set; }

        /// <summary>
        /// the total number of documents found (but not included necessarily)
        /// </summary>
        /// <value>the total number of documents found (but not included necessarily)</value>
        /// <example>1000</example>
        [DataMember(Name = "totalDocumentCount", IsRequired = true, EmitDefaultValue = true)]
        public int TotalDocumentCount { get; set; }

        /// <summary>
        /// Index sharding values.  These are used by the internal engine to determine the status of results across different shards in SimSage.  Leave this value alone.  It is set by SimSage.  Pass it back to SimSage as you got it if you&#39;re paginating the same query.
        /// </summary>
        /// <value>Index sharding values.  These are used by the internal engine to determine the status of results across different shards in SimSage.  Leave this value alone.  It is set by SimSage.  Pass it back to SimSage as you got it if you&#39;re paginating the same query.</value>
        /// <example>[1,3,2]</example>
        [DataMember(Name = "shardSizeList", IsRequired = true, EmitDefaultValue = true)]
        public List<int> ShardSizeList { get; set; }

        /// <summary>
        /// the actual search results, one for each item found
        /// </summary>
        /// <value>the actual search results, one for each item found</value>
        [DataMember(Name = "resultList", IsRequired = true, EmitDefaultValue = true)]
        public List<CMSearchResult> ResultList { get; set; }

        /// <summary>
        /// a spelling correction suggestion if appropriate and enabled.
        /// </summary>
        /// <value>a spelling correction suggestion if appropriate and enabled.</value>
        [DataMember(Name = "spellingCorrection", IsRequired = true, EmitDefaultValue = true)]
        public string SpellingCorrection { get; set; }

        /// <summary>
        /// A descriptor of semantic categories and words with frequencies in each category
        /// </summary>
        /// <value>A descriptor of semantic categories and words with frequencies in each category</value>
        [DataMember(Name = "semanticSet", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, List<CMWordFrequency>> SemanticSet { get; set; }

        /// <summary>
        /// do we know the email address of this person?  if they&#39;ve supplied it in the past this will be set to true.
        /// </summary>
        /// <value>do we know the email address of this person?  if they&#39;ve supplied it in the past this will be set to true.</value>
        /// <example>true</example>
        [DataMember(Name = "knowEmail", IsRequired = true, EmitDefaultValue = true)]
        public bool KnowEmail { get; set; }

        /// <summary>
        /// updated categories (if applicable) with updated counts
        /// </summary>
        /// <value>updated categories (if applicable) with updated counts</value>
        /// <example>[]</example>
        [DataMember(Name = "categoryList", IsRequired = true, EmitDefaultValue = true)]
        public List<SearchCategory> CategoryList { get; set; }

        /// <summary>
        /// A list of syn-sets used in the query
        /// </summary>
        /// <value>A list of syn-sets used in the query</value>
        [DataMember(Name = "synSetList", IsRequired = true, EmitDefaultValue = true)]
        public List<CMSynSet> SynSetList { get; set; }

        /// <summary>
        /// Does this source require custom render templates or use ordinary search-results?
        /// </summary>
        /// <value>Does this source require custom render templates or use ordinary search-results?</value>
        /// <example>false</example>
        [DataMember(Name = "customRender", IsRequired = true, EmitDefaultValue = true)]
        public bool CustomRender { get; set; }

        /// <summary>
        /// a map of sourceId -&gt; number of documents found inside this source
        /// </summary>
        /// <value>a map of sourceId -&gt; number of documents found inside this source</value>
        [DataMember(Name = "sourceIdToCounts", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, int> SourceIdToCounts { get; set; }

        /// <summary>
        /// a map of document-type -&gt; number of documents found of this type
        /// </summary>
        /// <value>a map of document-type -&gt; number of documents found of this type</value>
        [DataMember(Name = "documentTypeToCounts", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, int> DocumentTypeToCounts { get; set; }

        /// <summary>
        /// a list of previous searches if applicable
        /// </summary>
        /// <value>a list of previous searches if applicable</value>
        [DataMember(Name = "savedSearchList", IsRequired = true, EmitDefaultValue = true)]
        public List<CMSavedSearch> SavedSearchList { get; set; }

        /// <summary>
        /// an optional summarization of the search results
        /// </summary>
        /// <value>an optional summarization of the search results</value>
        [DataMember(Name = "querySummarization", IsRequired = true, EmitDefaultValue = true)]
        public string QuerySummarization { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMClientQueryResult {\n");
            sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            sb.Append("  OrganisationId: ").Append(OrganisationId).Append("\n");
            sb.Append("  KbId: ").Append(KbId).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  HasResult: ").Append(HasResult).Append("\n");
            sb.Append("  UrlList: ").Append(UrlList).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  QnaScore: ").Append(QnaScore).Append("\n");
            sb.Append("  ImageList: ").Append(ImageList).Append("\n");
            sb.Append("  TotalDocumentCount: ").Append(TotalDocumentCount).Append("\n");
            sb.Append("  ShardSizeList: ").Append(ShardSizeList).Append("\n");
            sb.Append("  ResultList: ").Append(ResultList).Append("\n");
            sb.Append("  SpellingCorrection: ").Append(SpellingCorrection).Append("\n");
            sb.Append("  SemanticSet: ").Append(SemanticSet).Append("\n");
            sb.Append("  KnowEmail: ").Append(KnowEmail).Append("\n");
            sb.Append("  CategoryList: ").Append(CategoryList).Append("\n");
            sb.Append("  SynSetList: ").Append(SynSetList).Append("\n");
            sb.Append("  CustomRender: ").Append(CustomRender).Append("\n");
            sb.Append("  SourceIdToCounts: ").Append(SourceIdToCounts).Append("\n");
            sb.Append("  DocumentTypeToCounts: ").Append(DocumentTypeToCounts).Append("\n");
            sb.Append("  SavedSearchList: ").Append(SavedSearchList).Append("\n");
            sb.Append("  QuerySummarization: ").Append(QuerySummarization).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMClientQueryResult);
        }

        /// <summary>
        /// Returns true if CMClientQueryResult instances are equal
        /// </summary>
        /// <param name="input">Instance of CMClientQueryResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMClientQueryResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MessageType == input.MessageType ||
                    (this.MessageType != null &&
                    this.MessageType.Equals(input.MessageType))
                ) && 
                (
                    this.OrganisationId == input.OrganisationId ||
                    (this.OrganisationId != null &&
                    this.OrganisationId.Equals(input.OrganisationId))
                ) && 
                (
                    this.KbId == input.KbId ||
                    (this.KbId != null &&
                    this.KbId.Equals(input.KbId))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.HasResult == input.HasResult ||
                    this.HasResult.Equals(input.HasResult)
                ) && 
                (
                    this.UrlList == input.UrlList ||
                    this.UrlList != null &&
                    input.UrlList != null &&
                    this.UrlList.SequenceEqual(input.UrlList)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.QnaScore == input.QnaScore ||
                    this.QnaScore.Equals(input.QnaScore)
                ) && 
                (
                    this.ImageList == input.ImageList ||
                    this.ImageList != null &&
                    input.ImageList != null &&
                    this.ImageList.SequenceEqual(input.ImageList)
                ) && 
                (
                    this.TotalDocumentCount == input.TotalDocumentCount ||
                    this.TotalDocumentCount.Equals(input.TotalDocumentCount)
                ) && 
                (
                    this.ShardSizeList == input.ShardSizeList ||
                    this.ShardSizeList != null &&
                    input.ShardSizeList != null &&
                    this.ShardSizeList.SequenceEqual(input.ShardSizeList)
                ) && 
                (
                    this.ResultList == input.ResultList ||
                    this.ResultList != null &&
                    input.ResultList != null &&
                    this.ResultList.SequenceEqual(input.ResultList)
                ) && 
                (
                    this.SpellingCorrection == input.SpellingCorrection ||
                    (this.SpellingCorrection != null &&
                    this.SpellingCorrection.Equals(input.SpellingCorrection))
                ) && 
                (
                    this.SemanticSet == input.SemanticSet ||
                    this.SemanticSet != null &&
                    input.SemanticSet != null &&
                    this.SemanticSet.SequenceEqual(input.SemanticSet)
                ) && 
                (
                    this.KnowEmail == input.KnowEmail ||
                    this.KnowEmail.Equals(input.KnowEmail)
                ) && 
                (
                    this.CategoryList == input.CategoryList ||
                    this.CategoryList != null &&
                    input.CategoryList != null &&
                    this.CategoryList.SequenceEqual(input.CategoryList)
                ) && 
                (
                    this.SynSetList == input.SynSetList ||
                    this.SynSetList != null &&
                    input.SynSetList != null &&
                    this.SynSetList.SequenceEqual(input.SynSetList)
                ) && 
                (
                    this.CustomRender == input.CustomRender ||
                    this.CustomRender.Equals(input.CustomRender)
                ) && 
                (
                    this.SourceIdToCounts == input.SourceIdToCounts ||
                    this.SourceIdToCounts != null &&
                    input.SourceIdToCounts != null &&
                    this.SourceIdToCounts.SequenceEqual(input.SourceIdToCounts)
                ) && 
                (
                    this.DocumentTypeToCounts == input.DocumentTypeToCounts ||
                    this.DocumentTypeToCounts != null &&
                    input.DocumentTypeToCounts != null &&
                    this.DocumentTypeToCounts.SequenceEqual(input.DocumentTypeToCounts)
                ) && 
                (
                    this.SavedSearchList == input.SavedSearchList ||
                    this.SavedSearchList != null &&
                    input.SavedSearchList != null &&
                    this.SavedSearchList.SequenceEqual(input.SavedSearchList)
                ) && 
                (
                    this.QuerySummarization == input.QuerySummarization ||
                    (this.QuerySummarization != null &&
                    this.QuerySummarization.Equals(input.QuerySummarization))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MessageType != null)
                {
                    hashCode = (hashCode * 59) + this.MessageType.GetHashCode();
                }
                if (this.OrganisationId != null)
                {
                    hashCode = (hashCode * 59) + this.OrganisationId.GetHashCode();
                }
                if (this.KbId != null)
                {
                    hashCode = (hashCode * 59) + this.KbId.GetHashCode();
                }
                if (this.Text != null)
                {
                    hashCode = (hashCode * 59) + this.Text.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasResult.GetHashCode();
                if (this.UrlList != null)
                {
                    hashCode = (hashCode * 59) + this.UrlList.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.QnaScore.GetHashCode();
                if (this.ImageList != null)
                {
                    hashCode = (hashCode * 59) + this.ImageList.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalDocumentCount.GetHashCode();
                if (this.ShardSizeList != null)
                {
                    hashCode = (hashCode * 59) + this.ShardSizeList.GetHashCode();
                }
                if (this.ResultList != null)
                {
                    hashCode = (hashCode * 59) + this.ResultList.GetHashCode();
                }
                if (this.SpellingCorrection != null)
                {
                    hashCode = (hashCode * 59) + this.SpellingCorrection.GetHashCode();
                }
                if (this.SemanticSet != null)
                {
                    hashCode = (hashCode * 59) + this.SemanticSet.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.KnowEmail.GetHashCode();
                if (this.CategoryList != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryList.GetHashCode();
                }
                if (this.SynSetList != null)
                {
                    hashCode = (hashCode * 59) + this.SynSetList.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CustomRender.GetHashCode();
                if (this.SourceIdToCounts != null)
                {
                    hashCode = (hashCode * 59) + this.SourceIdToCounts.GetHashCode();
                }
                if (this.DocumentTypeToCounts != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentTypeToCounts.GetHashCode();
                }
                if (this.SavedSearchList != null)
                {
                    hashCode = (hashCode * 59) + this.SavedSearchList.GetHashCode();
                }
                if (this.QuerySummarization != null)
                {
                    hashCode = (hashCode * 59) + this.QuerySummarization.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
