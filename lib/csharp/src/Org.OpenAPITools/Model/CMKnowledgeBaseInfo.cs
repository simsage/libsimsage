/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Knowledge base-info represents information needed by external UX systems interacting with SimSage.  This object contains information of a SimSage knowledge-base.  The name, and id of, and sources inside this knowledge-base.
    /// </summary>
    [DataContract(Name = "CMKnowledgeBaseInfo")]
    public partial class CMKnowledgeBaseInfo : IEquatable<CMKnowledgeBaseInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMKnowledgeBaseInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMKnowledgeBaseInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMKnowledgeBaseInfo" /> class.
        /// </summary>
        /// <param name="name">the name of this knowledge-base (required).</param>
        /// <param name="id">the knowledge-base id (its guid id) (required).</param>
        /// <param name="categoryList">a list of metadata-categories present in this source, names and values. (required).</param>
        /// <param name="sourceList">the list of sources that are in this knowledge-base (required).</param>
        /// <param name="projectKb">Flag to indicate whether this knowledge-base was created for an &#39;Automate&#39; data project (required).</param>
        public CMKnowledgeBaseInfo(string name = default(string), string id = default(string), List<SearchCategory> categoryList = default(List<SearchCategory>), List<CMSourceBaseInfo> sourceList = default(List<CMSourceBaseInfo>), bool projectKb = default(bool))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CMKnowledgeBaseInfo and cannot be null");
            }
            this.Name = name;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for CMKnowledgeBaseInfo and cannot be null");
            }
            this.Id = id;
            // to ensure "categoryList" is required (not null)
            if (categoryList == null)
            {
                throw new ArgumentNullException("categoryList is a required property for CMKnowledgeBaseInfo and cannot be null");
            }
            this.CategoryList = categoryList;
            // to ensure "sourceList" is required (not null)
            if (sourceList == null)
            {
                throw new ArgumentNullException("sourceList is a required property for CMKnowledgeBaseInfo and cannot be null");
            }
            this.SourceList = sourceList;
            this.ProjectKb = projectKb;
        }

        /// <summary>
        /// the name of this knowledge-base
        /// </summary>
        /// <value>the name of this knowledge-base</value>
        /// <example>My little Pony knowledge-base</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// the knowledge-base id (its guid id)
        /// </summary>
        /// <value>the knowledge-base id (its guid id)</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// a list of metadata-categories present in this source, names and values.
        /// </summary>
        /// <value>a list of metadata-categories present in this source, names and values.</value>
        [DataMember(Name = "categoryList", IsRequired = true, EmitDefaultValue = true)]
        public List<SearchCategory> CategoryList { get; set; }

        /// <summary>
        /// the list of sources that are in this knowledge-base
        /// </summary>
        /// <value>the list of sources that are in this knowledge-base</value>
        [DataMember(Name = "sourceList", IsRequired = true, EmitDefaultValue = true)]
        public List<CMSourceBaseInfo> SourceList { get; set; }

        /// <summary>
        /// Flag to indicate whether this knowledge-base was created for an &#39;Automate&#39; data project
        /// </summary>
        /// <value>Flag to indicate whether this knowledge-base was created for an &#39;Automate&#39; data project</value>
        [DataMember(Name = "projectKb", IsRequired = true, EmitDefaultValue = true)]
        public bool ProjectKb { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMKnowledgeBaseInfo {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CategoryList: ").Append(CategoryList).Append("\n");
            sb.Append("  SourceList: ").Append(SourceList).Append("\n");
            sb.Append("  ProjectKb: ").Append(ProjectKb).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMKnowledgeBaseInfo);
        }

        /// <summary>
        /// Returns true if CMKnowledgeBaseInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CMKnowledgeBaseInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMKnowledgeBaseInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CategoryList == input.CategoryList ||
                    this.CategoryList != null &&
                    input.CategoryList != null &&
                    this.CategoryList.SequenceEqual(input.CategoryList)
                ) && 
                (
                    this.SourceList == input.SourceList ||
                    this.SourceList != null &&
                    input.SourceList != null &&
                    this.SourceList.SequenceEqual(input.SourceList)
                ) && 
                (
                    this.ProjectKb == input.ProjectKb ||
                    this.ProjectKb.Equals(input.ProjectKb)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.CategoryList != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryList.GetHashCode();
                }
                if (this.SourceList != null)
                {
                    hashCode = (hashCode * 59) + this.SourceList.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProjectKb.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
