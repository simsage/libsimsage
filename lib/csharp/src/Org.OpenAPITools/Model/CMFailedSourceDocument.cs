/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Description of an external document upload failure.
    /// </summary>
    [DataContract(Name = "CMFailedSourceDocument")]
    public partial class CMFailedSourceDocument : IEquatable<CMFailedSourceDocument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMFailedSourceDocument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMFailedSourceDocument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMFailedSourceDocument" /> class.
        /// </summary>
        /// <param name="organisationId">the main organisation (its guid id) for this source/crawler (required).</param>
        /// <param name="kbId">the knowledge-base id (its guid id) for this source/crawler (required).</param>
        /// <param name="sourceId">the source-id, primary key of the source (required).</param>
        /// <param name="sourceSystemId">the unique id of the document in the source system, mostly same as web url (required).</param>
        /// <param name="webUrl">the web url to access the document, can be different from url (required).</param>
        /// <param name="runId">the id of the crawler run adding the exception (required).</param>
        /// <param name="errorMessage">the error message added by the system (required).</param>
        /// <param name="encrypted">Do we need to add transport encryption (required).</param>
        /// <param name="seed">The seed used if encrypted (required).</param>
        /// <param name="sid">the security-id (a guid) of the knowledge-base.  This is effectively the shared secret between SimSage and the external-crawler system. (required).</param>
        public CMFailedSourceDocument(string organisationId = default(string), string kbId = default(string), int sourceId = default(int), string sourceSystemId = default(string), string webUrl = default(string), string runId = default(string), string errorMessage = default(string), bool encrypted = default(bool), int seed = default(int), string sid = default(string))
        {
            // to ensure "organisationId" is required (not null)
            if (organisationId == null)
            {
                throw new ArgumentNullException("organisationId is a required property for CMFailedSourceDocument and cannot be null");
            }
            this.OrganisationId = organisationId;
            // to ensure "kbId" is required (not null)
            if (kbId == null)
            {
                throw new ArgumentNullException("kbId is a required property for CMFailedSourceDocument and cannot be null");
            }
            this.KbId = kbId;
            this.SourceId = sourceId;
            // to ensure "sourceSystemId" is required (not null)
            if (sourceSystemId == null)
            {
                throw new ArgumentNullException("sourceSystemId is a required property for CMFailedSourceDocument and cannot be null");
            }
            this.SourceSystemId = sourceSystemId;
            // to ensure "webUrl" is required (not null)
            if (webUrl == null)
            {
                throw new ArgumentNullException("webUrl is a required property for CMFailedSourceDocument and cannot be null");
            }
            this.WebUrl = webUrl;
            // to ensure "runId" is required (not null)
            if (runId == null)
            {
                throw new ArgumentNullException("runId is a required property for CMFailedSourceDocument and cannot be null");
            }
            this.RunId = runId;
            // to ensure "errorMessage" is required (not null)
            if (errorMessage == null)
            {
                throw new ArgumentNullException("errorMessage is a required property for CMFailedSourceDocument and cannot be null");
            }
            this.ErrorMessage = errorMessage;
            this.Encrypted = encrypted;
            this.Seed = seed;
            // to ensure "sid" is required (not null)
            if (sid == null)
            {
                throw new ArgumentNullException("sid is a required property for CMFailedSourceDocument and cannot be null");
            }
            this.Sid = sid;
        }

        /// <summary>
        /// the main organisation (its guid id) for this source/crawler
        /// </summary>
        /// <value>the main organisation (its guid id) for this source/crawler</value>
        [DataMember(Name = "organisationId", IsRequired = true, EmitDefaultValue = true)]
        public string OrganisationId { get; set; }

        /// <summary>
        /// the knowledge-base id (its guid id) for this source/crawler
        /// </summary>
        /// <value>the knowledge-base id (its guid id) for this source/crawler</value>
        [DataMember(Name = "kbId", IsRequired = true, EmitDefaultValue = true)]
        public string KbId { get; set; }

        /// <summary>
        /// the source-id, primary key of the source
        /// </summary>
        /// <value>the source-id, primary key of the source</value>
        /// <example>1</example>
        [DataMember(Name = "sourceId", IsRequired = true, EmitDefaultValue = true)]
        public int SourceId { get; set; }

        /// <summary>
        /// the unique id of the document in the source system, mostly same as web url
        /// </summary>
        /// <value>the unique id of the document in the source system, mostly same as web url</value>
        /// <example>https://sharepoint/demo/document.doc</example>
        [DataMember(Name = "sourceSystemId", IsRequired = true, EmitDefaultValue = true)]
        public string SourceSystemId { get; set; }

        /// <summary>
        /// the web url to access the document, can be different from url
        /// </summary>
        /// <value>the web url to access the document, can be different from url</value>
        /// <example>https://sharepoint/demo/document.doc</example>
        [DataMember(Name = "webUrl", IsRequired = true, EmitDefaultValue = true)]
        public string WebUrl { get; set; }

        /// <summary>
        /// the id of the crawler run adding the exception
        /// </summary>
        /// <value>the id of the crawler run adding the exception</value>
        /// <example>018bfc81-d26a-78c7-aabc-6e3a7c4d2f2f</example>
        [DataMember(Name = "runId", IsRequired = true, EmitDefaultValue = true)]
        public string RunId { get; set; }

        /// <summary>
        /// the error message added by the system
        /// </summary>
        /// <value>the error message added by the system</value>
        /// <example>1</example>
        [DataMember(Name = "errorMessage", IsRequired = true, EmitDefaultValue = true)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Do we need to add transport encryption
        /// </summary>
        /// <value>Do we need to add transport encryption</value>
        /// <example>true</example>
        [DataMember(Name = "encrypted", IsRequired = true, EmitDefaultValue = true)]
        public bool Encrypted { get; set; }

        /// <summary>
        /// The seed used if encrypted
        /// </summary>
        /// <value>The seed used if encrypted</value>
        /// <example>0</example>
        [DataMember(Name = "seed", IsRequired = true, EmitDefaultValue = true)]
        public int Seed { get; set; }

        /// <summary>
        /// the security-id (a guid) of the knowledge-base.  This is effectively the shared secret between SimSage and the external-crawler system.
        /// </summary>
        /// <value>the security-id (a guid) of the knowledge-base.  This is effectively the shared secret between SimSage and the external-crawler system.</value>
        [DataMember(Name = "sid", IsRequired = true, EmitDefaultValue = true)]
        public string Sid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMFailedSourceDocument {\n");
            sb.Append("  OrganisationId: ").Append(OrganisationId).Append("\n");
            sb.Append("  KbId: ").Append(KbId).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  SourceSystemId: ").Append(SourceSystemId).Append("\n");
            sb.Append("  WebUrl: ").Append(WebUrl).Append("\n");
            sb.Append("  RunId: ").Append(RunId).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  Encrypted: ").Append(Encrypted).Append("\n");
            sb.Append("  Seed: ").Append(Seed).Append("\n");
            sb.Append("  Sid: ").Append(Sid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMFailedSourceDocument);
        }

        /// <summary>
        /// Returns true if CMFailedSourceDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of CMFailedSourceDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMFailedSourceDocument input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OrganisationId == input.OrganisationId ||
                    (this.OrganisationId != null &&
                    this.OrganisationId.Equals(input.OrganisationId))
                ) && 
                (
                    this.KbId == input.KbId ||
                    (this.KbId != null &&
                    this.KbId.Equals(input.KbId))
                ) && 
                (
                    this.SourceId == input.SourceId ||
                    this.SourceId.Equals(input.SourceId)
                ) && 
                (
                    this.SourceSystemId == input.SourceSystemId ||
                    (this.SourceSystemId != null &&
                    this.SourceSystemId.Equals(input.SourceSystemId))
                ) && 
                (
                    this.WebUrl == input.WebUrl ||
                    (this.WebUrl != null &&
                    this.WebUrl.Equals(input.WebUrl))
                ) && 
                (
                    this.RunId == input.RunId ||
                    (this.RunId != null &&
                    this.RunId.Equals(input.RunId))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.Encrypted == input.Encrypted ||
                    this.Encrypted.Equals(input.Encrypted)
                ) && 
                (
                    this.Seed == input.Seed ||
                    this.Seed.Equals(input.Seed)
                ) && 
                (
                    this.Sid == input.Sid ||
                    (this.Sid != null &&
                    this.Sid.Equals(input.Sid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrganisationId != null)
                {
                    hashCode = (hashCode * 59) + this.OrganisationId.GetHashCode();
                }
                if (this.KbId != null)
                {
                    hashCode = (hashCode * 59) + this.KbId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SourceId.GetHashCode();
                if (this.SourceSystemId != null)
                {
                    hashCode = (hashCode * 59) + this.SourceSystemId.GetHashCode();
                }
                if (this.WebUrl != null)
                {
                    hashCode = (hashCode * 59) + this.WebUrl.GetHashCode();
                }
                if (this.RunId != null)
                {
                    hashCode = (hashCode * 59) + this.RunId.GetHashCode();
                }
                if (this.ErrorMessage != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorMessage.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Encrypted.GetHashCode();
                hashCode = (hashCode * 59) + this.Seed.GetHashCode();
                if (this.Sid != null)
                {
                    hashCode = (hashCode * 59) + this.Sid.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
