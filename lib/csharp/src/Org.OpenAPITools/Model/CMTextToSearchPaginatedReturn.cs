/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.14.12
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A set of paginated text-to-search objects for a given organisation/knowledge-base with a total count.
    /// </summary>
    [DataContract(Name = "CMTextToSearchPaginatedReturn")]
    public partial class CMTextToSearchPaginatedReturn : IEquatable<CMTextToSearchPaginatedReturn>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMTextToSearchPaginatedReturn" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMTextToSearchPaginatedReturn() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMTextToSearchPaginatedReturn" /> class.
        /// </summary>
        /// <param name="textToSearchList">a list of text-to-search items (required).</param>
        /// <param name="numTextToSearch">the total number of text-to-search items (required).</param>
        public CMTextToSearchPaginatedReturn(List<TextToSearch> textToSearchList = default(List<TextToSearch>), int numTextToSearch = default(int))
        {
            // to ensure "textToSearchList" is required (not null)
            if (textToSearchList == null)
            {
                throw new ArgumentNullException("textToSearchList is a required property for CMTextToSearchPaginatedReturn and cannot be null");
            }
            this.TextToSearchList = textToSearchList;
            this.NumTextToSearch = numTextToSearch;
        }

        /// <summary>
        /// a list of text-to-search items
        /// </summary>
        /// <value>a list of text-to-search items</value>
        [DataMember(Name = "textToSearchList", IsRequired = true, EmitDefaultValue = true)]
        public List<TextToSearch> TextToSearchList { get; set; }

        /// <summary>
        /// the total number of text-to-search items
        /// </summary>
        /// <value>the total number of text-to-search items</value>
        /// <example>100</example>
        [DataMember(Name = "numTextToSearch", IsRequired = true, EmitDefaultValue = true)]
        public int NumTextToSearch { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMTextToSearchPaginatedReturn {\n");
            sb.Append("  TextToSearchList: ").Append(TextToSearchList).Append("\n");
            sb.Append("  NumTextToSearch: ").Append(NumTextToSearch).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMTextToSearchPaginatedReturn);
        }

        /// <summary>
        /// Returns true if CMTextToSearchPaginatedReturn instances are equal
        /// </summary>
        /// <param name="input">Instance of CMTextToSearchPaginatedReturn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMTextToSearchPaginatedReturn input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TextToSearchList == input.TextToSearchList ||
                    this.TextToSearchList != null &&
                    input.TextToSearchList != null &&
                    this.TextToSearchList.SequenceEqual(input.TextToSearchList)
                ) && 
                (
                    this.NumTextToSearch == input.NumTextToSearch ||
                    this.NumTextToSearch.Equals(input.NumTextToSearch)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TextToSearchList != null)
                {
                    hashCode = (hashCode * 59) + this.TextToSearchList.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NumTextToSearch.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
