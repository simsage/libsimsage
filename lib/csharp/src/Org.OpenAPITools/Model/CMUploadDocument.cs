/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.13.31
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// An external document representation object.
    /// </summary>
    [DataContract(Name = "CMUploadDocument")]
    public partial class CMUploadDocument : IEquatable<CMUploadDocument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMUploadDocument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMUploadDocument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMUploadDocument" /> class.
        /// </summary>
        /// <param name="objectType">the type of this class, just in case this object is encrypted (required).</param>
        /// <param name="organisationId">the organisation (its guid id) this document should go into. (required).</param>
        /// <param name="kbId">the knowledge-base (its guid id) this document should go into. (required).</param>
        /// <param name="sid">the security-id (a guid) of the knowledge-base.  This is effectively the shared secret between SimSage and the external-crawler system. (required).</param>
        /// <param name="sourceId">the source-id of this crawler (ie. the crawler&#39;s id) this document came from. (required).</param>
        /// <param name="url">A unique URL for this document. (required).</param>
        /// <param name="mimeType">The mime-type of this document, must be a known-datatype to SimSage. (required).</param>
        /// <param name="puid">The Pronom Unique ID for this document. (required).</param>
        /// <param name="acls">A list of security permission for this document.  Can be empty (ie. no security applied). (required).</param>
        /// <param name="title">The title of this document, can be empty. (required).</param>
        /// <param name="author">The author of this document, can be empty. (required).</param>
        /// <param name="changeHash">A unique hash-string identifying the change state of this document.  This can be any hash-function you choose.  SimSage uses the value to see if the content has changed since last. (required).</param>
        /// <param name="contentHash">A unique hash-string identifying the contents this document.  This can be any hash-function you choose.  SimSage uses this value for exact duplicate detection. (required).</param>
        /// <param name="data">the base64 encoded content of this document.  Must be prefixed with &#39;;base64,&#39;, can be empty indicating the content wasn&#39;t valid. (required).</param>
        /// <param name="binarySize">the binary-size of the document in bytes if data is not set. (required).</param>
        /// <param name="text">the text content of the asset (if set). (required).</param>
        /// <param name="created">a unix-timestamp of the creation date-time of this document (required).</param>
        /// <param name="lastModified">a unix-timestamp of the last-modified date-time of this document (required).</param>
        /// <param name="metadata">a series of name values for other metadata values found in the container of this document (required).</param>
        /// <param name="categories">A list of special SimSage metadata categories for matching this document with.  Can be empty. (required).</param>
        /// <param name="size">The size of this document (the original) in bytes (required).</param>
        /// <param name="template">A render template for this document.  This is only appropriate for Database and RESTful type sources. (required).</param>
        /// <param name="encrypted">Do we need to add transport encryption (required).</param>
        /// <param name="seed">The seed used if encrypted (required).</param>
        /// <param name="runId">the id (a unix timestamp) of the current &#39;go through the source once&#39;.  This is a unique per-run identifier. (required).</param>
        public CMUploadDocument(string objectType = default(string), string organisationId = default(string), string kbId = default(string), string sid = default(string), int sourceId = default(int), string url = default(string), string mimeType = default(string), string puid = default(string), string acls = default(string), string title = default(string), string author = default(string), string changeHash = default(string), string contentHash = default(string), string data = default(string), int binarySize = default(int), string text = default(string), long created = default(long), long lastModified = default(long), Dictionary<string, string> metadata = default(Dictionary<string, string>), List<MDMetadataMapping> categories = default(List<MDMetadataMapping>), long size = default(long), string template = default(string), bool encrypted = default(bool), int seed = default(int), long runId = default(long))
        {
            // to ensure "objectType" is required (not null)
            if (objectType == null)
            {
                throw new ArgumentNullException("objectType is a required property for CMUploadDocument and cannot be null");
            }
            this.ObjectType = objectType;
            // to ensure "organisationId" is required (not null)
            if (organisationId == null)
            {
                throw new ArgumentNullException("organisationId is a required property for CMUploadDocument and cannot be null");
            }
            this.OrganisationId = organisationId;
            // to ensure "kbId" is required (not null)
            if (kbId == null)
            {
                throw new ArgumentNullException("kbId is a required property for CMUploadDocument and cannot be null");
            }
            this.KbId = kbId;
            // to ensure "sid" is required (not null)
            if (sid == null)
            {
                throw new ArgumentNullException("sid is a required property for CMUploadDocument and cannot be null");
            }
            this.Sid = sid;
            this.SourceId = sourceId;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for CMUploadDocument and cannot be null");
            }
            this.Url = url;
            // to ensure "mimeType" is required (not null)
            if (mimeType == null)
            {
                throw new ArgumentNullException("mimeType is a required property for CMUploadDocument and cannot be null");
            }
            this.MimeType = mimeType;
            // to ensure "puid" is required (not null)
            if (puid == null)
            {
                throw new ArgumentNullException("puid is a required property for CMUploadDocument and cannot be null");
            }
            this.Puid = puid;
            // to ensure "acls" is required (not null)
            if (acls == null)
            {
                throw new ArgumentNullException("acls is a required property for CMUploadDocument and cannot be null");
            }
            this.Acls = acls;
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for CMUploadDocument and cannot be null");
            }
            this.Title = title;
            // to ensure "author" is required (not null)
            if (author == null)
            {
                throw new ArgumentNullException("author is a required property for CMUploadDocument and cannot be null");
            }
            this.Author = author;
            // to ensure "changeHash" is required (not null)
            if (changeHash == null)
            {
                throw new ArgumentNullException("changeHash is a required property for CMUploadDocument and cannot be null");
            }
            this.ChangeHash = changeHash;
            // to ensure "contentHash" is required (not null)
            if (contentHash == null)
            {
                throw new ArgumentNullException("contentHash is a required property for CMUploadDocument and cannot be null");
            }
            this.ContentHash = contentHash;
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new ArgumentNullException("data is a required property for CMUploadDocument and cannot be null");
            }
            this.Data = data;
            this.BinarySize = binarySize;
            // to ensure "text" is required (not null)
            if (text == null)
            {
                throw new ArgumentNullException("text is a required property for CMUploadDocument and cannot be null");
            }
            this.Text = text;
            this.Created = created;
            this.LastModified = lastModified;
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new ArgumentNullException("metadata is a required property for CMUploadDocument and cannot be null");
            }
            this.Metadata = metadata;
            // to ensure "categories" is required (not null)
            if (categories == null)
            {
                throw new ArgumentNullException("categories is a required property for CMUploadDocument and cannot be null");
            }
            this.Categories = categories;
            this.Size = size;
            // to ensure "template" is required (not null)
            if (template == null)
            {
                throw new ArgumentNullException("template is a required property for CMUploadDocument and cannot be null");
            }
            this.Template = template;
            this.Encrypted = encrypted;
            this.Seed = seed;
            this.RunId = runId;
        }

        /// <summary>
        /// the type of this class, just in case this object is encrypted
        /// </summary>
        /// <value>the type of this class, just in case this object is encrypted</value>
        /// <example>CMUploadDocument</example>
        [DataMember(Name = "objectType", IsRequired = true, EmitDefaultValue = true)]
        public string ObjectType { get; set; }

        /// <summary>
        /// the organisation (its guid id) this document should go into.
        /// </summary>
        /// <value>the organisation (its guid id) this document should go into.</value>
        [DataMember(Name = "organisationId", IsRequired = true, EmitDefaultValue = true)]
        public string OrganisationId { get; set; }

        /// <summary>
        /// the knowledge-base (its guid id) this document should go into.
        /// </summary>
        /// <value>the knowledge-base (its guid id) this document should go into.</value>
        [DataMember(Name = "kbId", IsRequired = true, EmitDefaultValue = true)]
        public string KbId { get; set; }

        /// <summary>
        /// the security-id (a guid) of the knowledge-base.  This is effectively the shared secret between SimSage and the external-crawler system.
        /// </summary>
        /// <value>the security-id (a guid) of the knowledge-base.  This is effectively the shared secret between SimSage and the external-crawler system.</value>
        [DataMember(Name = "sid", IsRequired = true, EmitDefaultValue = true)]
        public string Sid { get; set; }

        /// <summary>
        /// the source-id of this crawler (ie. the crawler&#39;s id) this document came from.
        /// </summary>
        /// <value>the source-id of this crawler (ie. the crawler&#39;s id) this document came from.</value>
        /// <example>1</example>
        [DataMember(Name = "sourceId", IsRequired = true, EmitDefaultValue = true)]
        public int SourceId { get; set; }

        /// <summary>
        /// A unique URL for this document.
        /// </summary>
        /// <value>A unique URL for this document.</value>
        /// <example>document-1</example>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// The mime-type of this document, must be a known-datatype to SimSage.
        /// </summary>
        /// <value>The mime-type of this document, must be a known-datatype to SimSage.</value>
        /// <example>text/plain</example>
        [DataMember(Name = "mimeType", IsRequired = true, EmitDefaultValue = true)]
        public string MimeType { get; set; }

        /// <summary>
        /// The Pronom Unique ID for this document.
        /// </summary>
        /// <value>The Pronom Unique ID for this document.</value>
        /// <example>fmt/123</example>
        [DataMember(Name = "puid", IsRequired = true, EmitDefaultValue = true)]
        public string Puid { get; set; }

        /// <summary>
        /// A list of security permission for this document.  Can be empty (ie. no security applied).
        /// </summary>
        /// <value>A list of security permission for this document.  Can be empty (ie. no security applied).</value>
        /// <example>users:RW,administrator:RWD</example>
        [DataMember(Name = "acls", IsRequired = true, EmitDefaultValue = true)]
        public string Acls { get; set; }

        /// <summary>
        /// The title of this document, can be empty.
        /// </summary>
        /// <value>The title of this document, can be empty.</value>
        /// <example>My little pony.</example>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// The author of this document, can be empty.
        /// </summary>
        /// <value>The author of this document, can be empty.</value>
        /// <example>John Manyberries</example>
        [DataMember(Name = "author", IsRequired = true, EmitDefaultValue = true)]
        public string Author { get; set; }

        /// <summary>
        /// A unique hash-string identifying the change state of this document.  This can be any hash-function you choose.  SimSage uses the value to see if the content has changed since last.
        /// </summary>
        /// <value>A unique hash-string identifying the change state of this document.  This can be any hash-function you choose.  SimSage uses the value to see if the content has changed since last.</value>
        /// <example>098f6bcd4621d373cade4e832627b4f6</example>
        [DataMember(Name = "changeHash", IsRequired = true, EmitDefaultValue = true)]
        public string ChangeHash { get; set; }

        /// <summary>
        /// A unique hash-string identifying the contents this document.  This can be any hash-function you choose.  SimSage uses this value for exact duplicate detection.
        /// </summary>
        /// <value>A unique hash-string identifying the contents this document.  This can be any hash-function you choose.  SimSage uses this value for exact duplicate detection.</value>
        /// <example>118f6bcd4621d373cade4e832627b4cc</example>
        [DataMember(Name = "contentHash", IsRequired = true, EmitDefaultValue = true)]
        public string ContentHash { get; set; }

        /// <summary>
        /// the base64 encoded content of this document.  Must be prefixed with &#39;;base64,&#39;, can be empty indicating the content wasn&#39;t valid.
        /// </summary>
        /// <value>the base64 encoded content of this document.  Must be prefixed with &#39;;base64,&#39;, can be empty indicating the content wasn&#39;t valid.</value>
        [DataMember(Name = "data", IsRequired = true, EmitDefaultValue = true)]
        public string Data { get; set; }

        /// <summary>
        /// the binary-size of the document in bytes if data is not set.
        /// </summary>
        /// <value>the binary-size of the document in bytes if data is not set.</value>
        [DataMember(Name = "binarySize", IsRequired = true, EmitDefaultValue = true)]
        public int BinarySize { get; set; }

        /// <summary>
        /// the text content of the asset (if set).
        /// </summary>
        /// <value>the text content of the asset (if set).</value>
        [DataMember(Name = "text", IsRequired = true, EmitDefaultValue = true)]
        public string Text { get; set; }

        /// <summary>
        /// a unix-timestamp of the creation date-time of this document
        /// </summary>
        /// <value>a unix-timestamp of the creation date-time of this document</value>
        [DataMember(Name = "created", IsRequired = true, EmitDefaultValue = true)]
        public long Created { get; set; }

        /// <summary>
        /// a unix-timestamp of the last-modified date-time of this document
        /// </summary>
        /// <value>a unix-timestamp of the last-modified date-time of this document</value>
        [DataMember(Name = "lastModified", IsRequired = true, EmitDefaultValue = true)]
        public long LastModified { get; set; }

        /// <summary>
        /// a series of name values for other metadata values found in the container of this document
        /// </summary>
        /// <value>a series of name values for other metadata values found in the container of this document</value>
        /// <example>{&quot;file-extension&quot;:&quot;txt&quot;}</example>
        [DataMember(Name = "metadata", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// A list of special SimSage metadata categories for matching this document with.  Can be empty.
        /// </summary>
        /// <value>A list of special SimSage metadata categories for matching this document with.  Can be empty.</value>
        [DataMember(Name = "categories", IsRequired = true, EmitDefaultValue = true)]
        public List<MDMetadataMapping> Categories { get; set; }

        /// <summary>
        /// The size of this document (the original) in bytes
        /// </summary>
        /// <value>The size of this document (the original) in bytes</value>
        /// <example>41231</example>
        [DataMember(Name = "size", IsRequired = true, EmitDefaultValue = true)]
        public long Size { get; set; }

        /// <summary>
        /// A render template for this document.  This is only appropriate for Database and RESTful type sources.
        /// </summary>
        /// <value>A render template for this document.  This is only appropriate for Database and RESTful type sources.</value>
        /// <example>&lt;div classname&#x3D;&quot;db-record&quot;&gt;My little Pony.&lt;/div&gt;</example>
        [DataMember(Name = "template", IsRequired = true, EmitDefaultValue = true)]
        public string Template { get; set; }

        /// <summary>
        /// Do we need to add transport encryption
        /// </summary>
        /// <value>Do we need to add transport encryption</value>
        /// <example>true</example>
        [DataMember(Name = "encrypted", IsRequired = true, EmitDefaultValue = true)]
        public bool Encrypted { get; set; }

        /// <summary>
        /// The seed used if encrypted
        /// </summary>
        /// <value>The seed used if encrypted</value>
        /// <example>0</example>
        [DataMember(Name = "seed", IsRequired = true, EmitDefaultValue = true)]
        public int Seed { get; set; }

        /// <summary>
        /// the id (a unix timestamp) of the current &#39;go through the source once&#39;.  This is a unique per-run identifier.
        /// </summary>
        /// <value>the id (a unix timestamp) of the current &#39;go through the source once&#39;.  This is a unique per-run identifier.</value>
        [DataMember(Name = "runId", IsRequired = true, EmitDefaultValue = true)]
        public long RunId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMUploadDocument {\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  OrganisationId: ").Append(OrganisationId).Append("\n");
            sb.Append("  KbId: ").Append(KbId).Append("\n");
            sb.Append("  Sid: ").Append(Sid).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  Puid: ").Append(Puid).Append("\n");
            sb.Append("  Acls: ").Append(Acls).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  ChangeHash: ").Append(ChangeHash).Append("\n");
            sb.Append("  ContentHash: ").Append(ContentHash).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  BinarySize: ").Append(BinarySize).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  Encrypted: ").Append(Encrypted).Append("\n");
            sb.Append("  Seed: ").Append(Seed).Append("\n");
            sb.Append("  RunId: ").Append(RunId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMUploadDocument);
        }

        /// <summary>
        /// Returns true if CMUploadDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of CMUploadDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMUploadDocument input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ObjectType == input.ObjectType ||
                    (this.ObjectType != null &&
                    this.ObjectType.Equals(input.ObjectType))
                ) && 
                (
                    this.OrganisationId == input.OrganisationId ||
                    (this.OrganisationId != null &&
                    this.OrganisationId.Equals(input.OrganisationId))
                ) && 
                (
                    this.KbId == input.KbId ||
                    (this.KbId != null &&
                    this.KbId.Equals(input.KbId))
                ) && 
                (
                    this.Sid == input.Sid ||
                    (this.Sid != null &&
                    this.Sid.Equals(input.Sid))
                ) && 
                (
                    this.SourceId == input.SourceId ||
                    this.SourceId.Equals(input.SourceId)
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.MimeType == input.MimeType ||
                    (this.MimeType != null &&
                    this.MimeType.Equals(input.MimeType))
                ) && 
                (
                    this.Puid == input.Puid ||
                    (this.Puid != null &&
                    this.Puid.Equals(input.Puid))
                ) && 
                (
                    this.Acls == input.Acls ||
                    (this.Acls != null &&
                    this.Acls.Equals(input.Acls))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.ChangeHash == input.ChangeHash ||
                    (this.ChangeHash != null &&
                    this.ChangeHash.Equals(input.ChangeHash))
                ) && 
                (
                    this.ContentHash == input.ContentHash ||
                    (this.ContentHash != null &&
                    this.ContentHash.Equals(input.ContentHash))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.BinarySize == input.BinarySize ||
                    this.BinarySize.Equals(input.BinarySize)
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Created == input.Created ||
                    this.Created.Equals(input.Created)
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    this.LastModified.Equals(input.LastModified)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.Categories == input.Categories ||
                    this.Categories != null &&
                    input.Categories != null &&
                    this.Categories.SequenceEqual(input.Categories)
                ) && 
                (
                    this.Size == input.Size ||
                    this.Size.Equals(input.Size)
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) && 
                (
                    this.Encrypted == input.Encrypted ||
                    this.Encrypted.Equals(input.Encrypted)
                ) && 
                (
                    this.Seed == input.Seed ||
                    this.Seed.Equals(input.Seed)
                ) && 
                (
                    this.RunId == input.RunId ||
                    this.RunId.Equals(input.RunId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ObjectType != null)
                {
                    hashCode = (hashCode * 59) + this.ObjectType.GetHashCode();
                }
                if (this.OrganisationId != null)
                {
                    hashCode = (hashCode * 59) + this.OrganisationId.GetHashCode();
                }
                if (this.KbId != null)
                {
                    hashCode = (hashCode * 59) + this.KbId.GetHashCode();
                }
                if (this.Sid != null)
                {
                    hashCode = (hashCode * 59) + this.Sid.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SourceId.GetHashCode();
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.MimeType != null)
                {
                    hashCode = (hashCode * 59) + this.MimeType.GetHashCode();
                }
                if (this.Puid != null)
                {
                    hashCode = (hashCode * 59) + this.Puid.GetHashCode();
                }
                if (this.Acls != null)
                {
                    hashCode = (hashCode * 59) + this.Acls.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Author != null)
                {
                    hashCode = (hashCode * 59) + this.Author.GetHashCode();
                }
                if (this.ChangeHash != null)
                {
                    hashCode = (hashCode * 59) + this.ChangeHash.GetHashCode();
                }
                if (this.ContentHash != null)
                {
                    hashCode = (hashCode * 59) + this.ContentHash.GetHashCode();
                }
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BinarySize.GetHashCode();
                if (this.Text != null)
                {
                    hashCode = (hashCode * 59) + this.Text.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Created.GetHashCode();
                hashCode = (hashCode * 59) + this.LastModified.GetHashCode();
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.Categories != null)
                {
                    hashCode = (hashCode * 59) + this.Categories.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Size.GetHashCode();
                if (this.Template != null)
                {
                    hashCode = (hashCode * 59) + this.Template.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Encrypted.GetHashCode();
                hashCode = (hashCode * 59) + this.Seed.GetHashCode();
                hashCode = (hashCode * 59) + this.RunId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
