/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.14.12
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A document folder content item.
    /// </summary>
    [DataContract(Name = "CMDocumentFolder")]
    public partial class CMDocumentFolder : IEquatable<CMDocumentFolder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMDocumentFolder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMDocumentFolder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMDocumentFolder" /> class.
        /// </summary>
        /// <param name="sourceId">the source-id of the owner of this folder (required).</param>
        /// <param name="url">The unique URL of a document or folder. (required).</param>
        /// <param name="parentFolderId">The id of the parent folder of this folder. (required).</param>
        /// <param name="folderId">The id of this folder. (required).</param>
        /// <param name="urlId">the internal SimSage id for this url (required).</param>
        /// <param name="folderName">the display name of the folder (required).</param>
        /// <param name="itemType">the type of folder (crawlerType for sources) (required).</param>
        /// <param name="folderList">the folder items in this folder (required).</param>
        /// <param name="fileList">the files in this folder (required).</param>
        /// <param name="acls">the security permissions for this item (required).</param>
        public CMDocumentFolder(int sourceId = default(int), string url = default(string), string parentFolderId = default(string), string folderId = default(string), int urlId = default(int), string folderName = default(string), string itemType = default(string), List<CMDocumentFolder> folderList = default(List<CMDocumentFolder>), List<CMDocument> fileList = default(List<CMDocument>), List<CMDocumentAcl> acls = default(List<CMDocumentAcl>))
        {
            this.SourceId = sourceId;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for CMDocumentFolder and cannot be null");
            }
            this.Url = url;
            // to ensure "parentFolderId" is required (not null)
            if (parentFolderId == null)
            {
                throw new ArgumentNullException("parentFolderId is a required property for CMDocumentFolder and cannot be null");
            }
            this.ParentFolderId = parentFolderId;
            // to ensure "folderId" is required (not null)
            if (folderId == null)
            {
                throw new ArgumentNullException("folderId is a required property for CMDocumentFolder and cannot be null");
            }
            this.FolderId = folderId;
            this.UrlId = urlId;
            // to ensure "folderName" is required (not null)
            if (folderName == null)
            {
                throw new ArgumentNullException("folderName is a required property for CMDocumentFolder and cannot be null");
            }
            this.FolderName = folderName;
            // to ensure "itemType" is required (not null)
            if (itemType == null)
            {
                throw new ArgumentNullException("itemType is a required property for CMDocumentFolder and cannot be null");
            }
            this.ItemType = itemType;
            // to ensure "folderList" is required (not null)
            if (folderList == null)
            {
                throw new ArgumentNullException("folderList is a required property for CMDocumentFolder and cannot be null");
            }
            this.FolderList = folderList;
            // to ensure "fileList" is required (not null)
            if (fileList == null)
            {
                throw new ArgumentNullException("fileList is a required property for CMDocumentFolder and cannot be null");
            }
            this.FileList = fileList;
            // to ensure "acls" is required (not null)
            if (acls == null)
            {
                throw new ArgumentNullException("acls is a required property for CMDocumentFolder and cannot be null");
            }
            this.Acls = acls;
        }

        /// <summary>
        /// the source-id of the owner of this folder
        /// </summary>
        /// <value>the source-id of the owner of this folder</value>
        /// <example>1</example>
        [DataMember(Name = "sourceId", IsRequired = true, EmitDefaultValue = true)]
        public int SourceId { get; set; }

        /// <summary>
        /// The unique URL of a document or folder.
        /// </summary>
        /// <value>The unique URL of a document or folder.</value>
        /// <example>/folder-1/document-1</example>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// The id of the parent folder of this folder.
        /// </summary>
        /// <value>The id of the parent folder of this folder.</value>
        [DataMember(Name = "parentFolderId", IsRequired = true, EmitDefaultValue = true)]
        public string ParentFolderId { get; set; }

        /// <summary>
        /// The id of this folder.
        /// </summary>
        /// <value>The id of this folder.</value>
        [DataMember(Name = "folderId", IsRequired = true, EmitDefaultValue = true)]
        public string FolderId { get; set; }

        /// <summary>
        /// the internal SimSage id for this url
        /// </summary>
        /// <value>the internal SimSage id for this url</value>
        /// <example>22</example>
        [DataMember(Name = "urlId", IsRequired = true, EmitDefaultValue = true)]
        public int UrlId { get; set; }

        /// <summary>
        /// the display name of the folder
        /// </summary>
        /// <value>the display name of the folder</value>
        /// <example>folder-1</example>
        [DataMember(Name = "folderName", IsRequired = true, EmitDefaultValue = true)]
        public string FolderName { get; set; }

        /// <summary>
        /// the type of folder (crawlerType for sources)
        /// </summary>
        /// <value>the type of folder (crawlerType for sources)</value>
        /// <example>dms</example>
        [DataMember(Name = "itemType", IsRequired = true, EmitDefaultValue = true)]
        public string ItemType { get; set; }

        /// <summary>
        /// the folder items in this folder
        /// </summary>
        /// <value>the folder items in this folder</value>
        [DataMember(Name = "folderList", IsRequired = true, EmitDefaultValue = true)]
        public List<CMDocumentFolder> FolderList { get; set; }

        /// <summary>
        /// the files in this folder
        /// </summary>
        /// <value>the files in this folder</value>
        [DataMember(Name = "fileList", IsRequired = true, EmitDefaultValue = true)]
        public List<CMDocument> FileList { get; set; }

        /// <summary>
        /// the security permissions for this item
        /// </summary>
        /// <value>the security permissions for this item</value>
        [DataMember(Name = "acls", IsRequired = true, EmitDefaultValue = true)]
        public List<CMDocumentAcl> Acls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMDocumentFolder {\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  ParentFolderId: ").Append(ParentFolderId).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  UrlId: ").Append(UrlId).Append("\n");
            sb.Append("  FolderName: ").Append(FolderName).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  FolderList: ").Append(FolderList).Append("\n");
            sb.Append("  FileList: ").Append(FileList).Append("\n");
            sb.Append("  Acls: ").Append(Acls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMDocumentFolder);
        }

        /// <summary>
        /// Returns true if CMDocumentFolder instances are equal
        /// </summary>
        /// <param name="input">Instance of CMDocumentFolder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMDocumentFolder input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SourceId == input.SourceId ||
                    this.SourceId.Equals(input.SourceId)
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.ParentFolderId == input.ParentFolderId ||
                    (this.ParentFolderId != null &&
                    this.ParentFolderId.Equals(input.ParentFolderId))
                ) && 
                (
                    this.FolderId == input.FolderId ||
                    (this.FolderId != null &&
                    this.FolderId.Equals(input.FolderId))
                ) && 
                (
                    this.UrlId == input.UrlId ||
                    this.UrlId.Equals(input.UrlId)
                ) && 
                (
                    this.FolderName == input.FolderName ||
                    (this.FolderName != null &&
                    this.FolderName.Equals(input.FolderName))
                ) && 
                (
                    this.ItemType == input.ItemType ||
                    (this.ItemType != null &&
                    this.ItemType.Equals(input.ItemType))
                ) && 
                (
                    this.FolderList == input.FolderList ||
                    this.FolderList != null &&
                    input.FolderList != null &&
                    this.FolderList.SequenceEqual(input.FolderList)
                ) && 
                (
                    this.FileList == input.FileList ||
                    this.FileList != null &&
                    input.FileList != null &&
                    this.FileList.SequenceEqual(input.FileList)
                ) && 
                (
                    this.Acls == input.Acls ||
                    this.Acls != null &&
                    input.Acls != null &&
                    this.Acls.SequenceEqual(input.Acls)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SourceId.GetHashCode();
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.ParentFolderId != null)
                {
                    hashCode = (hashCode * 59) + this.ParentFolderId.GetHashCode();
                }
                if (this.FolderId != null)
                {
                    hashCode = (hashCode * 59) + this.FolderId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UrlId.GetHashCode();
                if (this.FolderName != null)
                {
                    hashCode = (hashCode * 59) + this.FolderName.GetHashCode();
                }
                if (this.ItemType != null)
                {
                    hashCode = (hashCode * 59) + this.ItemType.GetHashCode();
                }
                if (this.FolderList != null)
                {
                    hashCode = (hashCode * 59) + this.FolderList.GetHashCode();
                }
                if (this.FileList != null)
                {
                    hashCode = (hashCode * 59) + this.FileList.GetHashCode();
                }
                if (this.Acls != null)
                {
                    hashCode = (hashCode * 59) + this.Acls.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
