/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.14.12
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A SimSage metadata-mapping.  This object represents a map of metadata between an external source and SimSage.
    /// </summary>
    [DataContract(Name = "MDMetadataMapping")]
    public partial class MDMetadataMapping : IEquatable<MDMetadataMapping>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MDMetadataMapping" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MDMetadataMapping() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MDMetadataMapping" /> class.
        /// </summary>
        /// <param name="dataType">The SimSage data-type of the item (required).</param>
        /// <param name="display">A friendly display name for any UI component rendering this component (required).</param>
        /// <param name="extMetadata">the external metadata item being mapped (required).</param>
        /// <param name="metadata">The metadata-name inside SimSage for this item.  Only a..z A..Z 0..9 and - are allowed as characters in this string. (required).</param>
        /// <param name="stringValueList">A list of string values (if string based) for this metadata category item.  These are the values this document \&quot;belongs to\&quot; (required).</param>
        /// <param name="numberValueList">Alternatively, a list of numeric values (if number based) for this metadata category item.  These are the values this document \&quot;belongs to\&quot; (required).</param>
        public MDMetadataMapping(string dataType = default(string), string display = default(string), string extMetadata = default(string), string metadata = default(string), string stringValueList = default(string), string numberValueList = default(string))
        {
            // to ensure "dataType" is required (not null)
            if (dataType == null)
            {
                throw new ArgumentNullException("dataType is a required property for MDMetadataMapping and cannot be null");
            }
            this.DataType = dataType;
            // to ensure "display" is required (not null)
            if (display == null)
            {
                throw new ArgumentNullException("display is a required property for MDMetadataMapping and cannot be null");
            }
            this.Display = display;
            // to ensure "extMetadata" is required (not null)
            if (extMetadata == null)
            {
                throw new ArgumentNullException("extMetadata is a required property for MDMetadataMapping and cannot be null");
            }
            this.ExtMetadata = extMetadata;
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new ArgumentNullException("metadata is a required property for MDMetadataMapping and cannot be null");
            }
            this.Metadata = metadata;
            // to ensure "stringValueList" is required (not null)
            if (stringValueList == null)
            {
                throw new ArgumentNullException("stringValueList is a required property for MDMetadataMapping and cannot be null");
            }
            this.StringValueList = stringValueList;
            // to ensure "numberValueList" is required (not null)
            if (numberValueList == null)
            {
                throw new ArgumentNullException("numberValueList is a required property for MDMetadataMapping and cannot be null");
            }
            this.NumberValueList = numberValueList;
        }

        /// <summary>
        /// The SimSage data-type of the item
        /// </summary>
        /// <value>The SimSage data-type of the item</value>
        /// <example>one of: string, long</example>
        [DataMember(Name = "dataType", IsRequired = true, EmitDefaultValue = true)]
        public string DataType { get; set; }

        /// <summary>
        /// A friendly display name for any UI component rendering this component
        /// </summary>
        /// <value>A friendly display name for any UI component rendering this component</value>
        /// <example>The price of the item</example>
        [DataMember(Name = "display", IsRequired = true, EmitDefaultValue = true)]
        public string Display { get; set; }

        /// <summary>
        /// the external metadata item being mapped
        /// </summary>
        /// <value>the external metadata item being mapped</value>
        /// <example>a name</example>
        [DataMember(Name = "extMetadata", IsRequired = true, EmitDefaultValue = true)]
        public string ExtMetadata { get; set; }

        /// <summary>
        /// The metadata-name inside SimSage for this item.  Only a..z A..Z 0..9 and - are allowed as characters in this string.
        /// </summary>
        /// <value>The metadata-name inside SimSage for this item.  Only a..z A..Z 0..9 and - are allowed as characters in this string.</value>
        /// <example>price</example>
        [DataMember(Name = "metadata", IsRequired = true, EmitDefaultValue = true)]
        public string Metadata { get; set; }

        /// <summary>
        /// A list of string values (if string based) for this metadata category item.  These are the values this document \&quot;belongs to\&quot;
        /// </summary>
        /// <value>A list of string values (if string based) for this metadata category item.  These are the values this document \&quot;belongs to\&quot;</value>
        /// <example>pants,shorts</example>
        [DataMember(Name = "stringValueList", IsRequired = true, EmitDefaultValue = true)]
        public string StringValueList { get; set; }

        /// <summary>
        /// Alternatively, a list of numeric values (if number based) for this metadata category item.  These are the values this document \&quot;belongs to\&quot;
        /// </summary>
        /// <value>Alternatively, a list of numeric values (if number based) for this metadata category item.  These are the values this document \&quot;belongs to\&quot;</value>
        /// <example>1.0</example>
        [DataMember(Name = "numberValueList", IsRequired = true, EmitDefaultValue = true)]
        public string NumberValueList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MDMetadataMapping {\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  Display: ").Append(Display).Append("\n");
            sb.Append("  ExtMetadata: ").Append(ExtMetadata).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  StringValueList: ").Append(StringValueList).Append("\n");
            sb.Append("  NumberValueList: ").Append(NumberValueList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MDMetadataMapping);
        }

        /// <summary>
        /// Returns true if MDMetadataMapping instances are equal
        /// </summary>
        /// <param name="input">Instance of MDMetadataMapping to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MDMetadataMapping input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DataType == input.DataType ||
                    (this.DataType != null &&
                    this.DataType.Equals(input.DataType))
                ) && 
                (
                    this.Display == input.Display ||
                    (this.Display != null &&
                    this.Display.Equals(input.Display))
                ) && 
                (
                    this.ExtMetadata == input.ExtMetadata ||
                    (this.ExtMetadata != null &&
                    this.ExtMetadata.Equals(input.ExtMetadata))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.StringValueList == input.StringValueList ||
                    (this.StringValueList != null &&
                    this.StringValueList.Equals(input.StringValueList))
                ) && 
                (
                    this.NumberValueList == input.NumberValueList ||
                    (this.NumberValueList != null &&
                    this.NumberValueList.Equals(input.NumberValueList))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DataType != null)
                {
                    hashCode = (hashCode * 59) + this.DataType.GetHashCode();
                }
                if (this.Display != null)
                {
                    hashCode = (hashCode * 59) + this.Display.GetHashCode();
                }
                if (this.ExtMetadata != null)
                {
                    hashCode = (hashCode * 59) + this.ExtMetadata.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.StringValueList != null)
                {
                    hashCode = (hashCode * 59) + this.StringValueList.GetHashCode();
                }
                if (this.NumberValueList != null)
                {
                    hashCode = (hashCode * 59) + this.NumberValueList.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
