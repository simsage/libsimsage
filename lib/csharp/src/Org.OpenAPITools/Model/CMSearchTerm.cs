/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.14.12
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CMSearchTerm
    /// </summary>
    [DataContract(Name = "CMSearchTerm")]
    public partial class CMSearchTerm : IEquatable<CMSearchTerm>, IValidatableObject
    {
        /// <summary>
        /// Defines SearchUsage
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SearchUsageEnum
        {
            /// <summary>
            /// Enum REQUIRED for value: REQUIRED
            /// </summary>
            [EnumMember(Value = "REQUIRED")]
            REQUIRED = 1,

            /// <summary>
            /// Enum NOTAVAILABLE for value: NOT_AVAILABLE
            /// </summary>
            [EnumMember(Value = "NOT_AVAILABLE")]
            NOTAVAILABLE = 2,

            /// <summary>
            /// Enum DEFAULTON for value: DEFAULT_ON
            /// </summary>
            [EnumMember(Value = "DEFAULT_ON")]
            DEFAULTON = 3,

            /// <summary>
            /// Enum DEFAULTOFF for value: DEFAULT_OFF
            /// </summary>
            [EnumMember(Value = "DEFAULT_OFF")]
            DEFAULTOFF = 4
        }


        /// <summary>
        /// Gets or Sets SearchUsage
        /// </summary>
        [DataMember(Name = "searchUsage", IsRequired = true, EmitDefaultValue = true)]
        public SearchUsageEnum SearchUsage { get; set; }
        /// <summary>
        /// Defines RedactionUsage
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RedactionUsageEnum
        {
            /// <summary>
            /// Enum REQUIRED for value: REQUIRED
            /// </summary>
            [EnumMember(Value = "REQUIRED")]
            REQUIRED = 1,

            /// <summary>
            /// Enum NOTAVAILABLE for value: NOT_AVAILABLE
            /// </summary>
            [EnumMember(Value = "NOT_AVAILABLE")]
            NOTAVAILABLE = 2,

            /// <summary>
            /// Enum DEFAULTON for value: DEFAULT_ON
            /// </summary>
            [EnumMember(Value = "DEFAULT_ON")]
            DEFAULTON = 3,

            /// <summary>
            /// Enum DEFAULTOFF for value: DEFAULT_OFF
            /// </summary>
            [EnumMember(Value = "DEFAULT_OFF")]
            DEFAULTOFF = 4
        }


        /// <summary>
        /// Gets or Sets RedactionUsage
        /// </summary>
        [DataMember(Name = "redactionUsage", IsRequired = true, EmitDefaultValue = true)]
        public RedactionUsageEnum RedactionUsage { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMSearchTerm" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMSearchTerm() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMSearchTerm" /> class.
        /// </summary>
        /// <param name="key">key (required).</param>
        /// <param name="caption">caption (required).</param>
        /// <param name="searchUsage">searchUsage (required).</param>
        /// <param name="redactionUsage">redactionUsage (required).</param>
        /// <param name="defaultValue">defaultValue (required).</param>
        /// <param name="subTerms">subTerms (required).</param>
        public CMSearchTerm(string key = default(string), string caption = default(string), SearchUsageEnum searchUsage = default(SearchUsageEnum), RedactionUsageEnum redactionUsage = default(RedactionUsageEnum), string defaultValue = default(string), List<CMSubTerm> subTerms = default(List<CMSubTerm>))
        {
            // to ensure "key" is required (not null)
            if (key == null)
            {
                throw new ArgumentNullException("key is a required property for CMSearchTerm and cannot be null");
            }
            this.Key = key;
            // to ensure "caption" is required (not null)
            if (caption == null)
            {
                throw new ArgumentNullException("caption is a required property for CMSearchTerm and cannot be null");
            }
            this.Caption = caption;
            this.SearchUsage = searchUsage;
            this.RedactionUsage = redactionUsage;
            // to ensure "defaultValue" is required (not null)
            if (defaultValue == null)
            {
                throw new ArgumentNullException("defaultValue is a required property for CMSearchTerm and cannot be null");
            }
            this.DefaultValue = defaultValue;
            // to ensure "subTerms" is required (not null)
            if (subTerms == null)
            {
                throw new ArgumentNullException("subTerms is a required property for CMSearchTerm and cannot be null");
            }
            this.SubTerms = subTerms;
        }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name = "key", IsRequired = true, EmitDefaultValue = true)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets Caption
        /// </summary>
        [DataMember(Name = "caption", IsRequired = true, EmitDefaultValue = true)]
        public string Caption { get; set; }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [DataMember(Name = "defaultValue", IsRequired = true, EmitDefaultValue = true)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// Gets or Sets SubTerms
        /// </summary>
        [DataMember(Name = "subTerms", IsRequired = true, EmitDefaultValue = true)]
        public List<CMSubTerm> SubTerms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMSearchTerm {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Caption: ").Append(Caption).Append("\n");
            sb.Append("  SearchUsage: ").Append(SearchUsage).Append("\n");
            sb.Append("  RedactionUsage: ").Append(RedactionUsage).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  SubTerms: ").Append(SubTerms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMSearchTerm);
        }

        /// <summary>
        /// Returns true if CMSearchTerm instances are equal
        /// </summary>
        /// <param name="input">Instance of CMSearchTerm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMSearchTerm input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Caption == input.Caption ||
                    (this.Caption != null &&
                    this.Caption.Equals(input.Caption))
                ) && 
                (
                    this.SearchUsage == input.SearchUsage ||
                    this.SearchUsage.Equals(input.SearchUsage)
                ) && 
                (
                    this.RedactionUsage == input.RedactionUsage ||
                    this.RedactionUsage.Equals(input.RedactionUsage)
                ) && 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    this.SubTerms == input.SubTerms ||
                    this.SubTerms != null &&
                    input.SubTerms != null &&
                    this.SubTerms.SequenceEqual(input.SubTerms)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }
                if (this.Caption != null)
                {
                    hashCode = (hashCode * 59) + this.Caption.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SearchUsage.GetHashCode();
                hashCode = (hashCode * 59) + this.RedactionUsage.GetHashCode();
                if (this.DefaultValue != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultValue.GetHashCode();
                }
                if (this.SubTerms != null)
                {
                    hashCode = (hashCode * 59) + this.SubTerms.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
