/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A set of items subscribed to.
    /// </summary>
    [DataContract(Name = "CMSubscriptions")]
    public partial class CMSubscriptions : IEquatable<CMSubscriptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMSubscriptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMSubscriptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMSubscriptions" /> class.
        /// </summary>
        /// <param name="folderList">list of folders subscribed to (required).</param>
        /// <param name="documentList">list of documents subscribed to (required).</param>
        public CMSubscriptions(List<CMDocumentFolder> folderList = default(List<CMDocumentFolder>), List<CMDocument> documentList = default(List<CMDocument>))
        {
            // to ensure "folderList" is required (not null)
            if (folderList == null)
            {
                throw new ArgumentNullException("folderList is a required property for CMSubscriptions and cannot be null");
            }
            this.FolderList = folderList;
            // to ensure "documentList" is required (not null)
            if (documentList == null)
            {
                throw new ArgumentNullException("documentList is a required property for CMSubscriptions and cannot be null");
            }
            this.DocumentList = documentList;
        }

        /// <summary>
        /// list of folders subscribed to
        /// </summary>
        /// <value>list of folders subscribed to</value>
        [DataMember(Name = "folderList", IsRequired = true, EmitDefaultValue = true)]
        public List<CMDocumentFolder> FolderList { get; set; }

        /// <summary>
        /// list of documents subscribed to
        /// </summary>
        /// <value>list of documents subscribed to</value>
        [DataMember(Name = "documentList", IsRequired = true, EmitDefaultValue = true)]
        public List<CMDocument> DocumentList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMSubscriptions {\n");
            sb.Append("  FolderList: ").Append(FolderList).Append("\n");
            sb.Append("  DocumentList: ").Append(DocumentList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMSubscriptions);
        }

        /// <summary>
        /// Returns true if CMSubscriptions instances are equal
        /// </summary>
        /// <param name="input">Instance of CMSubscriptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMSubscriptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FolderList == input.FolderList ||
                    this.FolderList != null &&
                    input.FolderList != null &&
                    this.FolderList.SequenceEqual(input.FolderList)
                ) && 
                (
                    this.DocumentList == input.DocumentList ||
                    this.DocumentList != null &&
                    input.DocumentList != null &&
                    this.DocumentList.SequenceEqual(input.DocumentList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FolderList != null)
                {
                    hashCode = (hashCode * 59) + this.FolderList.GetHashCode();
                }
                if (this.DocumentList != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentList.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
