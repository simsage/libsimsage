/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.11.4
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A version object description for a binary-document.
    /// </summary>
    [DataContract(Name = "CMDocumentVersion")]
    public partial class CMDocumentVersion : IEquatable<CMDocumentVersion>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMDocumentVersion" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMDocumentVersion() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMDocumentVersion" /> class.
        /// </summary>
        /// <param name="url">The unique URL of this document. (required).</param>
        /// <param name="varVersion">version of this binary (required).</param>
        /// <param name="changeHash">A unique hash-string identifying SimSage level changes of this document. (required).</param>
        /// <param name="created">a unix-timestamp for the creation of this document version (required).</param>
        public CMDocumentVersion(string url = default(string), int varVersion = default(int), string changeHash = default(string), long created = default(long))
        {
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for CMDocumentVersion and cannot be null");
            }
            this.Url = url;
            this.VarVersion = varVersion;
            // to ensure "changeHash" is required (not null)
            if (changeHash == null)
            {
                throw new ArgumentNullException("changeHash is a required property for CMDocumentVersion and cannot be null");
            }
            this.ChangeHash = changeHash;
            this.Created = created;
        }

        /// <summary>
        /// The unique URL of this document.
        /// </summary>
        /// <value>The unique URL of this document.</value>
        /// <example>https://server.com/document-1</example>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// version of this binary
        /// </summary>
        /// <value>version of this binary</value>
        /// <example>1</example>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public int VarVersion { get; set; }

        /// <summary>
        /// A unique hash-string identifying SimSage level changes of this document.
        /// </summary>
        /// <value>A unique hash-string identifying SimSage level changes of this document.</value>
        /// <example>098f6bcd4621d373cade4e832627b4f6</example>
        [DataMember(Name = "changeHash", IsRequired = true, EmitDefaultValue = true)]
        public string ChangeHash { get; set; }

        /// <summary>
        /// a unix-timestamp for the creation of this document version
        /// </summary>
        /// <value>a unix-timestamp for the creation of this document version</value>
        [DataMember(Name = "created", IsRequired = true, EmitDefaultValue = true)]
        public long Created { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMDocumentVersion {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  ChangeHash: ").Append(ChangeHash).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMDocumentVersion);
        }

        /// <summary>
        /// Returns true if CMDocumentVersion instances are equal
        /// </summary>
        /// <param name="input">Instance of CMDocumentVersion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMDocumentVersion input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.VarVersion == input.VarVersion ||
                    this.VarVersion.Equals(input.VarVersion)
                ) && 
                (
                    this.ChangeHash == input.ChangeHash ||
                    (this.ChangeHash != null &&
                    this.ChangeHash.Equals(input.ChangeHash))
                ) && 
                (
                    this.Created == input.Created ||
                    this.Created.Equals(input.Created)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                if (this.ChangeHash != null)
                {
                    hashCode = (hashCode * 59) + this.ChangeHash.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Created.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
