/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.14.12
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CMRedaction
    /// </summary>
    [DataContract(Name = "CMRedaction")]
    public partial class CMRedaction : IEquatable<CMRedaction>, IValidatableObject
    {
        /// <summary>
        /// Defines RedactionType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RedactionTypeEnum
        {
            /// <summary>
            /// Enum SEARCH for value: SEARCH
            /// </summary>
            [EnumMember(Value = "SEARCH")]
            SEARCH = 1,

            /// <summary>
            /// Enum SEMANTIC for value: SEMANTIC
            /// </summary>
            [EnumMember(Value = "SEMANTIC")]
            SEMANTIC = 2,

            /// <summary>
            /// Enum MANUAL for value: MANUAL
            /// </summary>
            [EnumMember(Value = "MANUAL")]
            MANUAL = 3
        }


        /// <summary>
        /// Gets or Sets RedactionType
        /// </summary>
        [DataMember(Name = "redactionType", IsRequired = true, EmitDefaultValue = true)]
        public RedactionTypeEnum RedactionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMRedaction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMRedaction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMRedaction" /> class.
        /// </summary>
        /// <param name="redactionType">redactionType (required).</param>
        /// <param name="typeKey">typeKey (required).</param>
        /// <param name="value">value (required).</param>
        /// <param name="page">page (required).</param>
        /// <param name="height">height (required).</param>
        /// <param name="left">left (required).</param>
        /// <param name="top">top (required).</param>
        /// <param name="width">width (required).</param>
        public CMRedaction(RedactionTypeEnum redactionType = default(RedactionTypeEnum), string typeKey = default(string), string value = default(string), int page = default(int), double height = default(double), double left = default(double), double top = default(double), double width = default(double))
        {
            this.RedactionType = redactionType;
            // to ensure "typeKey" is required (not null)
            if (typeKey == null)
            {
                throw new ArgumentNullException("typeKey is a required property for CMRedaction and cannot be null");
            }
            this.TypeKey = typeKey;
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for CMRedaction and cannot be null");
            }
            this.Value = value;
            this.Page = page;
            this.Height = height;
            this.Left = left;
            this.Top = top;
            this.Width = width;
        }

        /// <summary>
        /// Gets or Sets TypeKey
        /// </summary>
        [DataMember(Name = "typeKey", IsRequired = true, EmitDefaultValue = true)]
        public string TypeKey { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets Page
        /// </summary>
        [DataMember(Name = "page", IsRequired = true, EmitDefaultValue = true)]
        public int Page { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name = "height", IsRequired = true, EmitDefaultValue = true)]
        public double Height { get; set; }

        /// <summary>
        /// Gets or Sets Left
        /// </summary>
        [DataMember(Name = "left", IsRequired = true, EmitDefaultValue = true)]
        public double Left { get; set; }

        /// <summary>
        /// Gets or Sets Top
        /// </summary>
        [DataMember(Name = "top", IsRequired = true, EmitDefaultValue = true)]
        public double Top { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name = "width", IsRequired = true, EmitDefaultValue = true)]
        public double Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMRedaction {\n");
            sb.Append("  RedactionType: ").Append(RedactionType).Append("\n");
            sb.Append("  TypeKey: ").Append(TypeKey).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Left: ").Append(Left).Append("\n");
            sb.Append("  Top: ").Append(Top).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMRedaction);
        }

        /// <summary>
        /// Returns true if CMRedaction instances are equal
        /// </summary>
        /// <param name="input">Instance of CMRedaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMRedaction input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RedactionType == input.RedactionType ||
                    this.RedactionType.Equals(input.RedactionType)
                ) && 
                (
                    this.TypeKey == input.TypeKey ||
                    (this.TypeKey != null &&
                    this.TypeKey.Equals(input.TypeKey))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Page == input.Page ||
                    this.Page.Equals(input.Page)
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                ) && 
                (
                    this.Left == input.Left ||
                    this.Left.Equals(input.Left)
                ) && 
                (
                    this.Top == input.Top ||
                    this.Top.Equals(input.Top)
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.RedactionType.GetHashCode();
                if (this.TypeKey != null)
                {
                    hashCode = (hashCode * 59) + this.TypeKey.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Page.GetHashCode();
                hashCode = (hashCode * 59) + this.Height.GetHashCode();
                hashCode = (hashCode * 59) + this.Left.GetHashCode();
                hashCode = (hashCode * 59) + this.Top.GetHashCode();
                hashCode = (hashCode * 59) + this.Width.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
