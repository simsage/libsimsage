/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Source base-info represents information needed by external UI systems interacting with SimSage.  This object has information pertaining to a source in SimSage.  Its name, id, what sort of a source it is, and what sort of security integration (if any) this source has.  This object is contained inside a CMKnowledgeBaseInfo object.
    /// </summary>
    [DataContract(Name = "CMSourceBaseInfo")]
    public partial class CMSourceBaseInfo : IEquatable<CMSourceBaseInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMSourceBaseInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMSourceBaseInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMSourceBaseInfo" /> class.
        /// </summary>
        /// <param name="name">the name of this source (required).</param>
        /// <param name="sourceId">the id of this source (required).</param>
        /// <param name="sourceType">the type of this source (required).</param>
        /// <param name="customRender">Does this source require custom render templates or use ordinary search-results? (required).</param>
        /// <param name="domainType">the domain security type (if applicable) of this source (can be empty).  Types: &#39;ad&#39; classical Microsoft Active Directory, &#39;aad&#39; Azure Active Directory, &#39;simsage&#39; SimSage platform user accounts (required).</param>
        /// <param name="clientId">a Microsoft client-id for Azure Domain access (required).</param>
        /// <param name="redirectUrl">a Microsoft redirect-url for Azure Domain access (required).</param>
        public CMSourceBaseInfo(string name = default(string), int sourceId = default(int), string sourceType = default(string), bool customRender = default(bool), string domainType = default(string), string clientId = default(string), string redirectUrl = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CMSourceBaseInfo and cannot be null");
            }
            this.Name = name;
            this.SourceId = sourceId;
            // to ensure "sourceType" is required (not null)
            if (sourceType == null)
            {
                throw new ArgumentNullException("sourceType is a required property for CMSourceBaseInfo and cannot be null");
            }
            this.SourceType = sourceType;
            this.CustomRender = customRender;
            // to ensure "domainType" is required (not null)
            if (domainType == null)
            {
                throw new ArgumentNullException("domainType is a required property for CMSourceBaseInfo and cannot be null");
            }
            this.DomainType = domainType;
            // to ensure "clientId" is required (not null)
            if (clientId == null)
            {
                throw new ArgumentNullException("clientId is a required property for CMSourceBaseInfo and cannot be null");
            }
            this.ClientId = clientId;
            // to ensure "redirectUrl" is required (not null)
            if (redirectUrl == null)
            {
                throw new ArgumentNullException("redirectUrl is a required property for CMSourceBaseInfo and cannot be null");
            }
            this.RedirectUrl = redirectUrl;
        }

        /// <summary>
        /// the name of this source
        /// </summary>
        /// <value>the name of this source</value>
        /// <example>web source</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// the id of this source
        /// </summary>
        /// <value>the id of this source</value>
        /// <example>1</example>
        [DataMember(Name = "sourceId", IsRequired = true, EmitDefaultValue = true)]
        public int SourceId { get; set; }

        /// <summary>
        /// the type of this source
        /// </summary>
        /// <value>the type of this source</value>
        /// <example>one of: rss,external,web,discourse,file,database,onedrive,exchange365,sharepoint365,imanage,box,dropbox,wordpress,gdrive,nfs,restfull</example>
        [DataMember(Name = "sourceType", IsRequired = true, EmitDefaultValue = true)]
        public string SourceType { get; set; }

        /// <summary>
        /// Does this source require custom render templates or use ordinary search-results?
        /// </summary>
        /// <value>Does this source require custom render templates or use ordinary search-results?</value>
        /// <example>false</example>
        [DataMember(Name = "customRender", IsRequired = true, EmitDefaultValue = true)]
        public bool CustomRender { get; set; }

        /// <summary>
        /// the domain security type (if applicable) of this source (can be empty).  Types: &#39;ad&#39; classical Microsoft Active Directory, &#39;aad&#39; Azure Active Directory, &#39;simsage&#39; SimSage platform user accounts
        /// </summary>
        /// <value>the domain security type (if applicable) of this source (can be empty).  Types: &#39;ad&#39; classical Microsoft Active Directory, &#39;aad&#39; Azure Active Directory, &#39;simsage&#39; SimSage platform user accounts</value>
        /// <example>one of: ad,aad,simsage</example>
        [DataMember(Name = "domainType", IsRequired = true, EmitDefaultValue = true)]
        public string DomainType { get; set; }

        /// <summary>
        /// a Microsoft client-id for Azure Domain access
        /// </summary>
        /// <value>a Microsoft client-id for Azure Domain access</value>
        [DataMember(Name = "clientId", IsRequired = true, EmitDefaultValue = true)]
        public string ClientId { get; set; }

        /// <summary>
        /// a Microsoft redirect-url for Azure Domain access
        /// </summary>
        /// <value>a Microsoft redirect-url for Azure Domain access</value>
        [DataMember(Name = "redirectUrl", IsRequired = true, EmitDefaultValue = true)]
        public string RedirectUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMSourceBaseInfo {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("  CustomRender: ").Append(CustomRender).Append("\n");
            sb.Append("  DomainType: ").Append(DomainType).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  RedirectUrl: ").Append(RedirectUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMSourceBaseInfo);
        }

        /// <summary>
        /// Returns true if CMSourceBaseInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CMSourceBaseInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMSourceBaseInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SourceId == input.SourceId ||
                    this.SourceId.Equals(input.SourceId)
                ) && 
                (
                    this.SourceType == input.SourceType ||
                    (this.SourceType != null &&
                    this.SourceType.Equals(input.SourceType))
                ) && 
                (
                    this.CustomRender == input.CustomRender ||
                    this.CustomRender.Equals(input.CustomRender)
                ) && 
                (
                    this.DomainType == input.DomainType ||
                    (this.DomainType != null &&
                    this.DomainType.Equals(input.DomainType))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.RedirectUrl == input.RedirectUrl ||
                    (this.RedirectUrl != null &&
                    this.RedirectUrl.Equals(input.RedirectUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SourceId.GetHashCode();
                if (this.SourceType != null)
                {
                    hashCode = (hashCode * 59) + this.SourceType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CustomRender.GetHashCode();
                if (this.DomainType != null)
                {
                    hashCode = (hashCode * 59) + this.DomainType.GetHashCode();
                }
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.RedirectUrl != null)
                {
                    hashCode = (hashCode * 59) + this.RedirectUrl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
