/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.13.31
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// An Info record contains information for external UI systems wishing to interact with SimSage.  This information is for a single-organisation and contains all the knowledge-bases and their information for this organisation.
    /// </summary>
    [DataContract(Name = "CMInfo")]
    public partial class CMInfo : IEquatable<CMInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMInfo" /> class.
        /// </summary>
        /// <param name="organisationId">the main organisation (its guid id) (required).</param>
        /// <param name="kbList">the list of knowledge-base information items that belong to the given organisation. (required).</param>
        public CMInfo(string organisationId = default(string), List<CMKnowledgeBaseInfo> kbList = default(List<CMKnowledgeBaseInfo>))
        {
            // to ensure "organisationId" is required (not null)
            if (organisationId == null)
            {
                throw new ArgumentNullException("organisationId is a required property for CMInfo and cannot be null");
            }
            this.OrganisationId = organisationId;
            // to ensure "kbList" is required (not null)
            if (kbList == null)
            {
                throw new ArgumentNullException("kbList is a required property for CMInfo and cannot be null");
            }
            this.KbList = kbList;
        }

        /// <summary>
        /// the main organisation (its guid id)
        /// </summary>
        /// <value>the main organisation (its guid id)</value>
        [DataMember(Name = "organisationId", IsRequired = true, EmitDefaultValue = true)]
        public string OrganisationId { get; set; }

        /// <summary>
        /// the list of knowledge-base information items that belong to the given organisation.
        /// </summary>
        /// <value>the list of knowledge-base information items that belong to the given organisation.</value>
        [DataMember(Name = "kbList", IsRequired = true, EmitDefaultValue = true)]
        public List<CMKnowledgeBaseInfo> KbList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMInfo {\n");
            sb.Append("  OrganisationId: ").Append(OrganisationId).Append("\n");
            sb.Append("  KbList: ").Append(KbList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMInfo);
        }

        /// <summary>
        /// Returns true if CMInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CMInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OrganisationId == input.OrganisationId ||
                    (this.OrganisationId != null &&
                    this.OrganisationId.Equals(input.OrganisationId))
                ) && 
                (
                    this.KbList == input.KbList ||
                    this.KbList != null &&
                    input.KbList != null &&
                    this.KbList.SequenceEqual(input.KbList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrganisationId != null)
                {
                    hashCode = (hashCode * 59) + this.OrganisationId.GetHashCode();
                }
                if (this.KbList != null)
                {
                    hashCode = (hashCode * 59) + this.KbList.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
