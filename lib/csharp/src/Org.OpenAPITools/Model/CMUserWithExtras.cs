/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.11.4
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// An object used for updating a SimSage user.  This object can be used to update the user&#39;s password too.
    /// </summary>
    [DataContract(Name = "CMUserWithExtras")]
    public partial class CMUserWithExtras : IEquatable<CMUserWithExtras>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMUserWithExtras" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMUserWithExtras() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMUserWithExtras" /> class.
        /// </summary>
        /// <param name="id">the user&#39;s id (its guid id). (required).</param>
        /// <param name="email">the email of this user (required).</param>
        /// <param name="password">a password for this user (or blank if not to be changed) (required).</param>
        /// <param name="firstName">the first-name of this user (required).</param>
        /// <param name="surname">the last-name (surname) of this user (required).</param>
        /// <param name="roles">the roles to be associated with this user (required).</param>
        /// <param name="operatorKBList">the operator-id and knowledge-base id to be associated with this user.  This user is to be an operator if set. (required).</param>
        /// <param name="groupList">a list of groups this user is part of (can be empty) (required).</param>
        public CMUserWithExtras(string id = default(string), string email = default(string), string password = default(string), string firstName = default(string), string surname = default(string), string roles = default(string), string operatorKBList = default(string), List<CMGroup> groupList = default(List<CMGroup>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for CMUserWithExtras and cannot be null");
            }
            this.Id = id;
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for CMUserWithExtras and cannot be null");
            }
            this.Email = email;
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new ArgumentNullException("password is a required property for CMUserWithExtras and cannot be null");
            }
            this.Password = password;
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new ArgumentNullException("firstName is a required property for CMUserWithExtras and cannot be null");
            }
            this.FirstName = firstName;
            // to ensure "surname" is required (not null)
            if (surname == null)
            {
                throw new ArgumentNullException("surname is a required property for CMUserWithExtras and cannot be null");
            }
            this.Surname = surname;
            // to ensure "roles" is required (not null)
            if (roles == null)
            {
                throw new ArgumentNullException("roles is a required property for CMUserWithExtras and cannot be null");
            }
            this.Roles = roles;
            // to ensure "operatorKBList" is required (not null)
            if (operatorKBList == null)
            {
                throw new ArgumentNullException("operatorKBList is a required property for CMUserWithExtras and cannot be null");
            }
            this.OperatorKBList = operatorKBList;
            // to ensure "groupList" is required (not null)
            if (groupList == null)
            {
                throw new ArgumentNullException("groupList is a required property for CMUserWithExtras and cannot be null");
            }
            this.GroupList = groupList;
        }

        /// <summary>
        /// the user&#39;s id (its guid id).
        /// </summary>
        /// <value>the user&#39;s id (its guid id).</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// the email of this user
        /// </summary>
        /// <value>the email of this user</value>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// a password for this user (or blank if not to be changed)
        /// </summary>
        /// <value>a password for this user (or blank if not to be changed)</value>
        [DataMember(Name = "password", IsRequired = true, EmitDefaultValue = true)]
        public string Password { get; set; }

        /// <summary>
        /// the first-name of this user
        /// </summary>
        /// <value>the first-name of this user</value>
        [DataMember(Name = "firstName", IsRequired = true, EmitDefaultValue = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// the last-name (surname) of this user
        /// </summary>
        /// <value>the last-name (surname) of this user</value>
        [DataMember(Name = "surname", IsRequired = true, EmitDefaultValue = true)]
        public string Surname { get; set; }

        /// <summary>
        /// the roles to be associated with this user
        /// </summary>
        /// <value>the roles to be associated with this user</value>
        [DataMember(Name = "roles", IsRequired = true, EmitDefaultValue = true)]
        public string Roles { get; set; }

        /// <summary>
        /// the operator-id and knowledge-base id to be associated with this user.  This user is to be an operator if set.
        /// </summary>
        /// <value>the operator-id and knowledge-base id to be associated with this user.  This user is to be an operator if set.</value>
        [DataMember(Name = "operatorKBList", IsRequired = true, EmitDefaultValue = true)]
        public string OperatorKBList { get; set; }

        /// <summary>
        /// a list of groups this user is part of (can be empty)
        /// </summary>
        /// <value>a list of groups this user is part of (can be empty)</value>
        [DataMember(Name = "groupList", IsRequired = true, EmitDefaultValue = true)]
        public List<CMGroup> GroupList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMUserWithExtras {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  OperatorKBList: ").Append(OperatorKBList).Append("\n");
            sb.Append("  GroupList: ").Append(GroupList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMUserWithExtras);
        }

        /// <summary>
        /// Returns true if CMUserWithExtras instances are equal
        /// </summary>
        /// <param name="input">Instance of CMUserWithExtras to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMUserWithExtras input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.Roles == input.Roles ||
                    (this.Roles != null &&
                    this.Roles.Equals(input.Roles))
                ) && 
                (
                    this.OperatorKBList == input.OperatorKBList ||
                    (this.OperatorKBList != null &&
                    this.OperatorKBList.Equals(input.OperatorKBList))
                ) && 
                (
                    this.GroupList == input.GroupList ||
                    this.GroupList != null &&
                    input.GroupList != null &&
                    this.GroupList.SequenceEqual(input.GroupList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.Surname != null)
                {
                    hashCode = (hashCode * 59) + this.Surname.GetHashCode();
                }
                if (this.Roles != null)
                {
                    hashCode = (hashCode * 59) + this.Roles.GetHashCode();
                }
                if (this.OperatorKBList != null)
                {
                    hashCode = (hashCode * 59) + this.OperatorKBList.GetHashCode();
                }
                if (this.GroupList != null)
                {
                    hashCode = (hashCode * 59) + this.GroupList.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
