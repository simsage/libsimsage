/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.14.12
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A paginated/filtered list of users with a total user count.
    /// </summary>
    [DataContract(Name = "CMUserList")]
    public partial class CMUserList : IEquatable<CMUserList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMUserList" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMUserList() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMUserList" /> class.
        /// </summary>
        /// <param name="userList">the list of user objects. (required).</param>
        /// <param name="userCount">the total user count. (required).</param>
        public CMUserList(List<CMUser> userList = default(List<CMUser>), int userCount = default(int))
        {
            // to ensure "userList" is required (not null)
            if (userList == null)
            {
                throw new ArgumentNullException("userList is a required property for CMUserList and cannot be null");
            }
            this.UserList = userList;
            this.UserCount = userCount;
        }

        /// <summary>
        /// the list of user objects.
        /// </summary>
        /// <value>the list of user objects.</value>
        /// <example>[]</example>
        [DataMember(Name = "userList", IsRequired = true, EmitDefaultValue = true)]
        public List<CMUser> UserList { get; set; }

        /// <summary>
        /// the total user count.
        /// </summary>
        /// <value>the total user count.</value>
        /// <example>1000</example>
        [DataMember(Name = "userCount", IsRequired = true, EmitDefaultValue = true)]
        public int UserCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMUserList {\n");
            sb.Append("  UserList: ").Append(UserList).Append("\n");
            sb.Append("  UserCount: ").Append(UserCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMUserList);
        }

        /// <summary>
        /// Returns true if CMUserList instances are equal
        /// </summary>
        /// <param name="input">Instance of CMUserList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMUserList input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UserList == input.UserList ||
                    this.UserList != null &&
                    input.UserList != null &&
                    this.UserList.SequenceEqual(input.UserList)
                ) && 
                (
                    this.UserCount == input.UserCount ||
                    this.UserCount.Equals(input.UserCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserList != null)
                {
                    hashCode = (hashCode * 59) + this.UserList.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UserCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
