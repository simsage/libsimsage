/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// the ACLs for the object
    /// </summary>
    [DataContract(Name = "CMUpdateACLs")]
    public partial class CMUpdateACLs : IEquatable<CMUpdateACLs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMUpdateACLs" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMUpdateACLs() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMUpdateACLs" /> class.
        /// </summary>
        /// <param name="organisationId">the main organisation (its guid id) for this source/crawler (required).</param>
        /// <param name="kbId">the knowledge-base id of this context item, a guid-string (required).</param>
        /// <param name="sourceId">the source-id of the owner of the url (required).</param>
        /// <param name="parentId">the parent id of the update to update (required).</param>
        /// <param name="objectId">the id of the update to update (required).</param>
        /// <param name="itemType">the type of item to update, one of source, file or folder (required).</param>
        /// <param name="acls">the initial ACLs for this source-folder. (required).</param>
        /// <param name="applyToChildren">apply these ACLs to any children of this object? (required).</param>
        public CMUpdateACLs(string organisationId = default(string), string kbId = default(string), int sourceId = default(int), string parentId = default(string), string objectId = default(string), string itemType = default(string), List<CMDocumentAcl> acls = default(List<CMDocumentAcl>), bool applyToChildren = default(bool))
        {
            // to ensure "organisationId" is required (not null)
            if (organisationId == null)
            {
                throw new ArgumentNullException("organisationId is a required property for CMUpdateACLs and cannot be null");
            }
            this.OrganisationId = organisationId;
            // to ensure "kbId" is required (not null)
            if (kbId == null)
            {
                throw new ArgumentNullException("kbId is a required property for CMUpdateACLs and cannot be null");
            }
            this.KbId = kbId;
            this.SourceId = sourceId;
            // to ensure "parentId" is required (not null)
            if (parentId == null)
            {
                throw new ArgumentNullException("parentId is a required property for CMUpdateACLs and cannot be null");
            }
            this.ParentId = parentId;
            // to ensure "objectId" is required (not null)
            if (objectId == null)
            {
                throw new ArgumentNullException("objectId is a required property for CMUpdateACLs and cannot be null");
            }
            this.ObjectId = objectId;
            // to ensure "itemType" is required (not null)
            if (itemType == null)
            {
                throw new ArgumentNullException("itemType is a required property for CMUpdateACLs and cannot be null");
            }
            this.ItemType = itemType;
            // to ensure "acls" is required (not null)
            if (acls == null)
            {
                throw new ArgumentNullException("acls is a required property for CMUpdateACLs and cannot be null");
            }
            this.Acls = acls;
            this.ApplyToChildren = applyToChildren;
        }

        /// <summary>
        /// the main organisation (its guid id) for this source/crawler
        /// </summary>
        /// <value>the main organisation (its guid id) for this source/crawler</value>
        [DataMember(Name = "organisationId", IsRequired = true, EmitDefaultValue = true)]
        public string OrganisationId { get; set; }

        /// <summary>
        /// the knowledge-base id of this context item, a guid-string
        /// </summary>
        /// <value>the knowledge-base id of this context item, a guid-string</value>
        [DataMember(Name = "kbId", IsRequired = true, EmitDefaultValue = true)]
        public string KbId { get; set; }

        /// <summary>
        /// the source-id of the owner of the url
        /// </summary>
        /// <value>the source-id of the owner of the url</value>
        /// <example>1</example>
        [DataMember(Name = "sourceId", IsRequired = true, EmitDefaultValue = true)]
        public int SourceId { get; set; }

        /// <summary>
        /// the parent id of the update to update
        /// </summary>
        /// <value>the parent id of the update to update</value>
        [DataMember(Name = "parentId", IsRequired = true, EmitDefaultValue = true)]
        public string ParentId { get; set; }

        /// <summary>
        /// the id of the update to update
        /// </summary>
        /// <value>the id of the update to update</value>
        [DataMember(Name = "objectId", IsRequired = true, EmitDefaultValue = true)]
        public string ObjectId { get; set; }

        /// <summary>
        /// the type of item to update, one of source, file or folder
        /// </summary>
        /// <value>the type of item to update, one of source, file or folder</value>
        /// <example>source</example>
        [DataMember(Name = "itemType", IsRequired = true, EmitDefaultValue = true)]
        public string ItemType { get; set; }

        /// <summary>
        /// the initial ACLs for this source-folder.
        /// </summary>
        /// <value>the initial ACLs for this source-folder.</value>
        [DataMember(Name = "acls", IsRequired = true, EmitDefaultValue = true)]
        public List<CMDocumentAcl> Acls { get; set; }

        /// <summary>
        /// apply these ACLs to any children of this object?
        /// </summary>
        /// <value>apply these ACLs to any children of this object?</value>
        [DataMember(Name = "applyToChildren", IsRequired = true, EmitDefaultValue = true)]
        public bool ApplyToChildren { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMUpdateACLs {\n");
            sb.Append("  OrganisationId: ").Append(OrganisationId).Append("\n");
            sb.Append("  KbId: ").Append(KbId).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  ObjectId: ").Append(ObjectId).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  Acls: ").Append(Acls).Append("\n");
            sb.Append("  ApplyToChildren: ").Append(ApplyToChildren).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMUpdateACLs);
        }

        /// <summary>
        /// Returns true if CMUpdateACLs instances are equal
        /// </summary>
        /// <param name="input">Instance of CMUpdateACLs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMUpdateACLs input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OrganisationId == input.OrganisationId ||
                    (this.OrganisationId != null &&
                    this.OrganisationId.Equals(input.OrganisationId))
                ) && 
                (
                    this.KbId == input.KbId ||
                    (this.KbId != null &&
                    this.KbId.Equals(input.KbId))
                ) && 
                (
                    this.SourceId == input.SourceId ||
                    this.SourceId.Equals(input.SourceId)
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.ObjectId == input.ObjectId ||
                    (this.ObjectId != null &&
                    this.ObjectId.Equals(input.ObjectId))
                ) && 
                (
                    this.ItemType == input.ItemType ||
                    (this.ItemType != null &&
                    this.ItemType.Equals(input.ItemType))
                ) && 
                (
                    this.Acls == input.Acls ||
                    this.Acls != null &&
                    input.Acls != null &&
                    this.Acls.SequenceEqual(input.Acls)
                ) && 
                (
                    this.ApplyToChildren == input.ApplyToChildren ||
                    this.ApplyToChildren.Equals(input.ApplyToChildren)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrganisationId != null)
                {
                    hashCode = (hashCode * 59) + this.OrganisationId.GetHashCode();
                }
                if (this.KbId != null)
                {
                    hashCode = (hashCode * 59) + this.KbId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SourceId.GetHashCode();
                if (this.ParentId != null)
                {
                    hashCode = (hashCode * 59) + this.ParentId.GetHashCode();
                }
                if (this.ObjectId != null)
                {
                    hashCode = (hashCode * 59) + this.ObjectId.GetHashCode();
                }
                if (this.ItemType != null)
                {
                    hashCode = (hashCode * 59) + this.ItemType.GetHashCode();
                }
                if (this.Acls != null)
                {
                    hashCode = (hashCode * 59) + this.Acls.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ApplyToChildren.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
