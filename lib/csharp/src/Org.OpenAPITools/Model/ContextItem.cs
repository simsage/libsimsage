/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ContextItem
    /// </summary>
    [DataContract(Name = "ContextItem")]
    public partial class ContextItem : IEquatable<ContextItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContextItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContextItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContextItem" /> class.
        /// </summary>
        /// <param name="kbId">kbId (required).</param>
        /// <param name="created">created (required).</param>
        /// <param name="nameValue">nameValue (required).</param>
        /// <param name="synSetLemma">synSetLemma (required).</param>
        /// <param name="synSetCloud">synSetCloud (required).</param>
        public ContextItem(string kbId = default(string), long created = default(long), Dictionary<string, string> nameValue = default(Dictionary<string, string>), string synSetLemma = default(string), List<string> synSetCloud = default(List<string>))
        {
            // to ensure "kbId" is required (not null)
            if (kbId == null)
            {
                throw new ArgumentNullException("kbId is a required property for ContextItem and cannot be null");
            }
            this.KbId = kbId;
            this.Created = created;
            // to ensure "nameValue" is required (not null)
            if (nameValue == null)
            {
                throw new ArgumentNullException("nameValue is a required property for ContextItem and cannot be null");
            }
            this.NameValue = nameValue;
            // to ensure "synSetLemma" is required (not null)
            if (synSetLemma == null)
            {
                throw new ArgumentNullException("synSetLemma is a required property for ContextItem and cannot be null");
            }
            this.SynSetLemma = synSetLemma;
            // to ensure "synSetCloud" is required (not null)
            if (synSetCloud == null)
            {
                throw new ArgumentNullException("synSetCloud is a required property for ContextItem and cannot be null");
            }
            this.SynSetCloud = synSetCloud;
        }

        /// <summary>
        /// Gets or Sets KbId
        /// </summary>
        [DataMember(Name = "kbId", IsRequired = true, EmitDefaultValue = true)]
        public string KbId { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name = "created", IsRequired = true, EmitDefaultValue = true)]
        public long Created { get; set; }

        /// <summary>
        /// Gets or Sets NameValue
        /// </summary>
        [DataMember(Name = "nameValue", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> NameValue { get; set; }

        /// <summary>
        /// Gets or Sets SynSetLemma
        /// </summary>
        [DataMember(Name = "synSetLemma", IsRequired = true, EmitDefaultValue = true)]
        public string SynSetLemma { get; set; }

        /// <summary>
        /// Gets or Sets SynSetCloud
        /// </summary>
        [DataMember(Name = "synSetCloud", IsRequired = true, EmitDefaultValue = true)]
        public List<string> SynSetCloud { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContextItem {\n");
            sb.Append("  KbId: ").Append(KbId).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  NameValue: ").Append(NameValue).Append("\n");
            sb.Append("  SynSetLemma: ").Append(SynSetLemma).Append("\n");
            sb.Append("  SynSetCloud: ").Append(SynSetCloud).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContextItem);
        }

        /// <summary>
        /// Returns true if ContextItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ContextItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContextItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.KbId == input.KbId ||
                    (this.KbId != null &&
                    this.KbId.Equals(input.KbId))
                ) && 
                (
                    this.Created == input.Created ||
                    this.Created.Equals(input.Created)
                ) && 
                (
                    this.NameValue == input.NameValue ||
                    this.NameValue != null &&
                    input.NameValue != null &&
                    this.NameValue.SequenceEqual(input.NameValue)
                ) && 
                (
                    this.SynSetLemma == input.SynSetLemma ||
                    (this.SynSetLemma != null &&
                    this.SynSetLemma.Equals(input.SynSetLemma))
                ) && 
                (
                    this.SynSetCloud == input.SynSetCloud ||
                    this.SynSetCloud != null &&
                    input.SynSetCloud != null &&
                    this.SynSetCloud.SequenceEqual(input.SynSetCloud)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.KbId != null)
                {
                    hashCode = (hashCode * 59) + this.KbId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Created.GetHashCode();
                if (this.NameValue != null)
                {
                    hashCode = (hashCode * 59) + this.NameValue.GetHashCode();
                }
                if (this.SynSetLemma != null)
                {
                    hashCode = (hashCode * 59) + this.SynSetLemma.GetHashCode();
                }
                if (this.SynSetCloud != null)
                {
                    hashCode = (hashCode * 59) + this.SynSetCloud.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
