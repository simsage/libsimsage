/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.13.31
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CMResultsSection
    /// </summary>
    [DataContract(Name = "CMResultsSection")]
    public partial class CMResultsSection : IEquatable<CMResultsSection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMResultsSection" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMResultsSection() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMResultsSection" /> class.
        /// </summary>
        /// <param name="queryTokens">queryTokens (required).</param>
        /// <param name="caption">caption (required).</param>
        /// <param name="hasSubTerms">hasSubTerms (required).</param>
        /// <param name="count">count (required).</param>
        public CMResultsSection(List<CMQueryToken> queryTokens = default(List<CMQueryToken>), string caption = default(string), bool hasSubTerms = default(bool), int count = default(int))
        {
            // to ensure "queryTokens" is required (not null)
            if (queryTokens == null)
            {
                throw new ArgumentNullException("queryTokens is a required property for CMResultsSection and cannot be null");
            }
            this.QueryTokens = queryTokens;
            // to ensure "caption" is required (not null)
            if (caption == null)
            {
                throw new ArgumentNullException("caption is a required property for CMResultsSection and cannot be null");
            }
            this.Caption = caption;
            this.HasSubTerms = hasSubTerms;
            this.Count = count;
        }

        /// <summary>
        /// Gets or Sets QueryTokens
        /// </summary>
        [DataMember(Name = "queryTokens", IsRequired = true, EmitDefaultValue = true)]
        public List<CMQueryToken> QueryTokens { get; set; }

        /// <summary>
        /// Gets or Sets Caption
        /// </summary>
        [DataMember(Name = "caption", IsRequired = true, EmitDefaultValue = true)]
        public string Caption { get; set; }

        /// <summary>
        /// Gets or Sets HasSubTerms
        /// </summary>
        [DataMember(Name = "hasSubTerms", IsRequired = true, EmitDefaultValue = true)]
        public bool HasSubTerms { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "count", IsRequired = true, EmitDefaultValue = true)]
        public int Count { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMResultsSection {\n");
            sb.Append("  QueryTokens: ").Append(QueryTokens).Append("\n");
            sb.Append("  Caption: ").Append(Caption).Append("\n");
            sb.Append("  HasSubTerms: ").Append(HasSubTerms).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMResultsSection);
        }

        /// <summary>
        /// Returns true if CMResultsSection instances are equal
        /// </summary>
        /// <param name="input">Instance of CMResultsSection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMResultsSection input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.QueryTokens == input.QueryTokens ||
                    this.QueryTokens != null &&
                    input.QueryTokens != null &&
                    this.QueryTokens.SequenceEqual(input.QueryTokens)
                ) && 
                (
                    this.Caption == input.Caption ||
                    (this.Caption != null &&
                    this.Caption.Equals(input.Caption))
                ) && 
                (
                    this.HasSubTerms == input.HasSubTerms ||
                    this.HasSubTerms.Equals(input.HasSubTerms)
                ) && 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QueryTokens != null)
                {
                    hashCode = (hashCode * 59) + this.QueryTokens.GetHashCode();
                }
                if (this.Caption != null)
                {
                    hashCode = (hashCode * 59) + this.Caption.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasSubTerms.GetHashCode();
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
