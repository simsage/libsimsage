// tslint:disable
/**
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.14.12
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    CMGroup,
    CMGroupEditInfo,
    CMGroupList,
    CMImportUsers,
    CMOrganisation,
    CMPasswordResetRequest,
    CMSessionVersion,
    CMSignInParameters,
    CMUserList,
    CMUserPasswordReset,
    CMUserWithExtras,
    JsonMessage,
    SignInAdmin,
    SignInCmd,
    SignInDmsCmd,
} from '../models';

export interface DeleteGroupRequest {
    organisationId: string;
    name: string;
    sessionId: string;
}

export interface DeleteOrganisationRequest {
    organisationId: string;
    sessionId: string;
}

export interface GetGroupsRequest {
    organisationId: string;
    sessionId: string;
}

export interface GetOTTRequest {
    organisationId: string;
    sessionId: string;
}

export interface GetUserOrganisationListRequest {
    filter: string;
    sessionId: string;
}

export interface GetUsersPaginatedRequest {
    organisationId: string;
    page: number;
    pageSize: number;
    filter: string;
    sessionId: string;
}

export interface GroupEditInfoRequest {
    organisationId: string;
    sessionId: string;
    cMGroupEditInfo: CMGroupEditInfo;
}

export interface ImportUsersAndGroupsRequest {
    sessionId: string;
    cMImportUsers: CMImportUsers;
    aPIVersion?: ImportUsersAndGroupsAPIVersionEnum;
}

export interface MyRolesRequest {
    organisationId: string;
    sessionId: string;
}

export interface RemoveUserFromOrganisationRequest {
    userId: string;
    organisationId: string;
    sessionId: string;
}

export interface ResetPasswordRequest {
    cMUserPasswordReset: CMUserPasswordReset;
}

export interface ResetPasswordRequestRequest {
    cMPasswordResetRequest: CMPasswordResetRequest;
}

export interface SaveGroupRequest {
    sessionId: string;
    cMGroup: CMGroup;
}

export interface SignInRequest {
    cMSignInParameters: CMSignInParameters;
}

export interface SignInAdminUsingJWTMsalRequest {
    jwt: string;
}

export interface SignInAdminUsingSessionIdRequest {
    sessionId: string;
}

export interface SignInDmsUsingJWTMsalRequest {
    jwt: string;
    organisationId: string;
}

export interface SignInEvolveUsingJWTMsalRequest {
    jwt: string;
    organisationId: string;
}

export interface SignInSearchUsingJWTMsalRequest {
    jwt: string;
    organisationId: string;
}

export interface SignOutRequest {
    sessionId: string;
    aPIVersion?: SignOutAPIVersionEnum;
}

export interface UpdateOrganisationRequest {
    sessionId: string;
    cMOrganisation: CMOrganisation;
}

export interface UpdateUserRequest {
    organisationId: string;
    sessionId: string;
    cMUserWithExtras: CMUserWithExtras;
}

/**
 * no description
 */
export class AuthApi extends BaseAPI {

    /**
     * Delete a group by name.
     * Delete Group
     */
    deleteGroup({ organisationId, name, sessionId }: DeleteGroupRequest): Observable<JsonMessage>
    deleteGroup({ organisationId, name, sessionId }: DeleteGroupRequest, opts?: OperationOpts): Observable<AjaxResponse<JsonMessage>>
    deleteGroup({ organisationId, name, sessionId }: DeleteGroupRequest, opts?: OperationOpts): Observable<JsonMessage | AjaxResponse<JsonMessage>> {
        throwIfNullOrUndefined(organisationId, 'organisationId', 'deleteGroup');
        throwIfNullOrUndefined(name, 'name', 'deleteGroup');
        throwIfNullOrUndefined(sessionId, 'sessionId', 'deleteGroup');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<JsonMessage>({
            url: '/api/auth/group/{organisationId}/{name}'.replace('{organisationId}', encodeURI(organisationId)).replace('{name}', encodeURI(name)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete / remove an organisation and its knowledge bases.
     * Delete Organisation
     */
    deleteOrganisation({ organisationId, sessionId }: DeleteOrganisationRequest): Observable<JsonMessage>
    deleteOrganisation({ organisationId, sessionId }: DeleteOrganisationRequest, opts?: OperationOpts): Observable<AjaxResponse<JsonMessage>>
    deleteOrganisation({ organisationId, sessionId }: DeleteOrganisationRequest, opts?: OperationOpts): Observable<JsonMessage | AjaxResponse<JsonMessage>> {
        throwIfNullOrUndefined(organisationId, 'organisationId', 'deleteOrganisation');
        throwIfNullOrUndefined(sessionId, 'sessionId', 'deleteOrganisation');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<JsonMessage>({
            url: '/api/auth/organisation/{organisationId}'.replace('{organisationId}', encodeURI(organisationId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Return a paginated, filtered list of groups for a given organisation.
     * Get Groups
     */
    getGroups({ organisationId, sessionId }: GetGroupsRequest): Observable<CMGroupList>
    getGroups({ organisationId, sessionId }: GetGroupsRequest, opts?: OperationOpts): Observable<AjaxResponse<CMGroupList>>
    getGroups({ organisationId, sessionId }: GetGroupsRequest, opts?: OperationOpts): Observable<CMGroupList | AjaxResponse<CMGroupList>> {
        throwIfNullOrUndefined(organisationId, 'organisationId', 'getGroups');
        throwIfNullOrUndefined(sessionId, 'sessionId', 'getGroups');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<CMGroupList>({
            url: '/api/auth/groups/{organisationId}'.replace('{organisationId}', encodeURI(organisationId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get a one-time token associated with your session.  Can be used for download items.
     * Get a one-time token.
     */
    getOTT({ organisationId, sessionId }: GetOTTRequest): Observable<string>
    getOTT({ organisationId, sessionId }: GetOTTRequest, opts?: OperationOpts): Observable<AjaxResponse<string>>
    getOTT({ organisationId, sessionId }: GetOTTRequest, opts?: OperationOpts): Observable<string | AjaxResponse<string>> {
        throwIfNullOrUndefined(organisationId, 'organisationId', 'getOTT');
        throwIfNullOrUndefined(sessionId, 'sessionId', 'getOTT');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<string>({
            url: '/api/auth/ott/{organisationId}'.replace('{organisationId}', encodeURI(organisationId)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Return all organisations that a user has access to (read-only or write).
     * Get a list of Organisations
     */
    getUserOrganisationList({ filter, sessionId }: GetUserOrganisationListRequest): Observable<Array<CMOrganisation>>
    getUserOrganisationList({ filter, sessionId }: GetUserOrganisationListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CMOrganisation>>>
    getUserOrganisationList({ filter, sessionId }: GetUserOrganisationListRequest, opts?: OperationOpts): Observable<Array<CMOrganisation> | AjaxResponse<Array<CMOrganisation>>> {
        throwIfNullOrUndefined(filter, 'filter', 'getUserOrganisationList');
        throwIfNullOrUndefined(sessionId, 'sessionId', 'getUserOrganisationList');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<Array<CMOrganisation>>({
            url: '/api/auth/user/organisations/{filter}'.replace('{filter}', encodeURI(filter)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Return a paginated, filtered list of users for a given organisation.
     * Get Users paginated
     */
    getUsersPaginated({ organisationId, page, pageSize, filter, sessionId }: GetUsersPaginatedRequest): Observable<CMUserList>
    getUsersPaginated({ organisationId, page, pageSize, filter, sessionId }: GetUsersPaginatedRequest, opts?: OperationOpts): Observable<AjaxResponse<CMUserList>>
    getUsersPaginated({ organisationId, page, pageSize, filter, sessionId }: GetUsersPaginatedRequest, opts?: OperationOpts): Observable<CMUserList | AjaxResponse<CMUserList>> {
        throwIfNullOrUndefined(organisationId, 'organisationId', 'getUsersPaginated');
        throwIfNullOrUndefined(page, 'page', 'getUsersPaginated');
        throwIfNullOrUndefined(pageSize, 'pageSize', 'getUsersPaginated');
        throwIfNullOrUndefined(filter, 'filter', 'getUsersPaginated');
        throwIfNullOrUndefined(sessionId, 'sessionId', 'getUsersPaginated');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<CMUserList>({
            url: '/api/auth/users-paginated/{organisationId}/{page}/{pageSize}/{filter}'.replace('{organisationId}', encodeURI(organisationId)).replace('{page}', encodeURI(page)).replace('{pageSize}', encodeURI(pageSize)).replace('{filter}', encodeURI(filter)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Return the information needed for the admin UX editing a group
     * Get Group edit information
     */
    groupEditInfo({ organisationId, sessionId, cMGroupEditInfo }: GroupEditInfoRequest): Observable<CMGroupList>
    groupEditInfo({ organisationId, sessionId, cMGroupEditInfo }: GroupEditInfoRequest, opts?: OperationOpts): Observable<AjaxResponse<CMGroupList>>
    groupEditInfo({ organisationId, sessionId, cMGroupEditInfo }: GroupEditInfoRequest, opts?: OperationOpts): Observable<CMGroupList | AjaxResponse<CMGroupList>> {
        throwIfNullOrUndefined(organisationId, 'organisationId', 'groupEditInfo');
        throwIfNullOrUndefined(sessionId, 'sessionId', 'groupEditInfo');
        throwIfNullOrUndefined(cMGroupEditInfo, 'cMGroupEditInfo', 'groupEditInfo');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<CMGroupList>({
            url: '/api/auth/group-edit-info/{organisationId}'.replace('{organisationId}', encodeURI(organisationId)),
            method: 'POST',
            headers,
            body: cMGroupEditInfo,
        }, opts?.responseOpts);
    };

    /**
     * Import users and groups.
     */
    importUsersAndGroups({ sessionId, cMImportUsers, aPIVersion }: ImportUsersAndGroupsRequest): Observable<JsonMessage>
    importUsersAndGroups({ sessionId, cMImportUsers, aPIVersion }: ImportUsersAndGroupsRequest, opts?: OperationOpts): Observable<AjaxResponse<JsonMessage>>
    importUsersAndGroups({ sessionId, cMImportUsers, aPIVersion }: ImportUsersAndGroupsRequest, opts?: OperationOpts): Observable<JsonMessage | AjaxResponse<JsonMessage>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'importUsersAndGroups');
        throwIfNullOrUndefined(cMImportUsers, 'cMImportUsers', 'importUsersAndGroups');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<JsonMessage>({
            url: '/api/auth/user/import',
            method: 'PUT',
            headers,
            body: cMImportUsers,
        }, opts?.responseOpts);
    };

    /**
     * Get Roles of logged in user for the logged in Organisation
     * Get users application roles
     */
    myRoles({ organisationId, sessionId }: MyRolesRequest): Observable<Array<string>>
    myRoles({ organisationId, sessionId }: MyRolesRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    myRoles({ organisationId, sessionId }: MyRolesRequest, opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        throwIfNullOrUndefined(organisationId, 'organisationId', 'myRoles');
        throwIfNullOrUndefined(sessionId, 'sessionId', 'myRoles');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<Array<string>>({
            url: '/api/auth/myroles/{organisationId}'.replace('{organisationId}', encodeURI(organisationId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Remove an existing user from an existing Organisation.
     * Remove User from Organisation
     */
    removeUserFromOrganisation({ userId, organisationId, sessionId }: RemoveUserFromOrganisationRequest): Observable<JsonMessage>
    removeUserFromOrganisation({ userId, organisationId, sessionId }: RemoveUserFromOrganisationRequest, opts?: OperationOpts): Observable<AjaxResponse<JsonMessage>>
    removeUserFromOrganisation({ userId, organisationId, sessionId }: RemoveUserFromOrganisationRequest, opts?: OperationOpts): Observable<JsonMessage | AjaxResponse<JsonMessage>> {
        throwIfNullOrUndefined(userId, 'userId', 'removeUserFromOrganisation');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'removeUserFromOrganisation');
        throwIfNullOrUndefined(sessionId, 'sessionId', 'removeUserFromOrganisation');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<JsonMessage>({
            url: '/api/auth/organisation/user/{userId}/{organisationId}'.replace('{userId}', encodeURI(userId)).replace('{organisationId}', encodeURI(organisationId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Reset Password
     * Perform a password-reset request.
     */
    resetPassword({ cMUserPasswordReset }: ResetPasswordRequest): Observable<JsonMessage>
    resetPassword({ cMUserPasswordReset }: ResetPasswordRequest, opts?: OperationOpts): Observable<AjaxResponse<JsonMessage>>
    resetPassword({ cMUserPasswordReset }: ResetPasswordRequest, opts?: OperationOpts): Observable<JsonMessage | AjaxResponse<JsonMessage>> {
        throwIfNullOrUndefined(cMUserPasswordReset, 'cMUserPasswordReset', 'resetPassword');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<JsonMessage>({
            url: '/api/auth/reset-password',
            method: 'POST',
            headers,
            body: cMUserPasswordReset,
        }, opts?.responseOpts);
    };

    /**
     * Start a password-reset request.
     * Password Reset Request
     */
    resetPasswordRequest({ cMPasswordResetRequest }: ResetPasswordRequestRequest): Observable<JsonMessage>
    resetPasswordRequest({ cMPasswordResetRequest }: ResetPasswordRequestRequest, opts?: OperationOpts): Observable<AjaxResponse<JsonMessage>>
    resetPasswordRequest({ cMPasswordResetRequest }: ResetPasswordRequestRequest, opts?: OperationOpts): Observable<JsonMessage | AjaxResponse<JsonMessage>> {
        throwIfNullOrUndefined(cMPasswordResetRequest, 'cMPasswordResetRequest', 'resetPasswordRequest');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<JsonMessage>({
            url: '/api/auth/reset-password-request',
            method: 'POST',
            headers,
            body: cMPasswordResetRequest,
        }, opts?.responseOpts);
    };

    /**
     * Save (update/create) a group.
     * Save Group
     */
    saveGroup({ sessionId, cMGroup }: SaveGroupRequest): Observable<JsonMessage>
    saveGroup({ sessionId, cMGroup }: SaveGroupRequest, opts?: OperationOpts): Observable<AjaxResponse<JsonMessage>>
    saveGroup({ sessionId, cMGroup }: SaveGroupRequest, opts?: OperationOpts): Observable<JsonMessage | AjaxResponse<JsonMessage>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'saveGroup');
        throwIfNullOrUndefined(cMGroup, 'cMGroup', 'saveGroup');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<JsonMessage>({
            url: '/api/auth/group',
            method: 'PUT',
            headers,
            body: cMGroup,
        }, opts?.responseOpts);
    };

    /**
     * Administrator Sign-in of an existing user using username/password.
     * Sign In
     */
    signIn({ cMSignInParameters }: SignInRequest): Observable<CMSessionVersion>
    signIn({ cMSignInParameters }: SignInRequest, opts?: OperationOpts): Observable<AjaxResponse<CMSessionVersion>>
    signIn({ cMSignInParameters }: SignInRequest, opts?: OperationOpts): Observable<CMSessionVersion | AjaxResponse<CMSessionVersion>> {
        throwIfNullOrUndefined(cMSignInParameters, 'cMSignInParameters', 'signIn');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<CMSessionVersion>({
            url: '/api/auth/sign-in',
            method: 'POST',
            headers,
            body: cMSignInParameters,
        }, opts?.responseOpts);
    };

    /**
     * Sign-in a user using an Msal JWT.
     * JWT MSal Sign In
     */
    signInAdminUsingJWTMsal({ jwt }: SignInAdminUsingJWTMsalRequest): Observable<SignInAdmin>
    signInAdminUsingJWTMsal({ jwt }: SignInAdminUsingJWTMsalRequest, opts?: OperationOpts): Observable<AjaxResponse<SignInAdmin>>
    signInAdminUsingJWTMsal({ jwt }: SignInAdminUsingJWTMsalRequest, opts?: OperationOpts): Observable<SignInAdmin | AjaxResponse<SignInAdmin>> {
        throwIfNullOrUndefined(jwt, 'jwt', 'signInAdminUsingJWTMsal');

        const headers: HttpHeaders = {
            ...(jwt != null ? { 'jwt': String(jwt) } : undefined),
        };

        return this.request<SignInAdmin>({
            url: '/api/auth/admin/authenticate/msal',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Sign-in a user using an existing session-id.
     * session-id Sign-in
     */
    signInAdminUsingSessionId({ sessionId }: SignInAdminUsingSessionIdRequest): Observable<SignInAdmin>
    signInAdminUsingSessionId({ sessionId }: SignInAdminUsingSessionIdRequest, opts?: OperationOpts): Observable<AjaxResponse<SignInAdmin>>
    signInAdminUsingSessionId({ sessionId }: SignInAdminUsingSessionIdRequest, opts?: OperationOpts): Observable<SignInAdmin | AjaxResponse<SignInAdmin>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'signInAdminUsingSessionId');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<SignInAdmin>({
            url: '/api/auth/admin/authenticate/session-id',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Sign-in a user using an Msal JWT.
     * JWT MSal Sign In
     */
    signInDmsUsingJWTMsal({ jwt, organisationId }: SignInDmsUsingJWTMsalRequest): Observable<SignInDmsCmd>
    signInDmsUsingJWTMsal({ jwt, organisationId }: SignInDmsUsingJWTMsalRequest, opts?: OperationOpts): Observable<AjaxResponse<SignInDmsCmd>>
    signInDmsUsingJWTMsal({ jwt, organisationId }: SignInDmsUsingJWTMsalRequest, opts?: OperationOpts): Observable<SignInDmsCmd | AjaxResponse<SignInDmsCmd>> {
        throwIfNullOrUndefined(jwt, 'jwt', 'signInDmsUsingJWTMsal');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'signInDmsUsingJWTMsal');

        const headers: HttpHeaders = {
            ...(jwt != null ? { 'jwt': String(jwt) } : undefined),
        };

        return this.request<SignInDmsCmd>({
            url: '/api/auth/dms/authenticate/msal/{organisationId}'.replace('{organisationId}', encodeURI(organisationId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Sign-in an Evolve user using an Msal JWT...
     * JWT MSal Sign In
     */
    signInEvolveUsingJWTMsal({ jwt, organisationId }: SignInEvolveUsingJWTMsalRequest): Observable<SignInDmsCmd>
    signInEvolveUsingJWTMsal({ jwt, organisationId }: SignInEvolveUsingJWTMsalRequest, opts?: OperationOpts): Observable<AjaxResponse<SignInDmsCmd>>
    signInEvolveUsingJWTMsal({ jwt, organisationId }: SignInEvolveUsingJWTMsalRequest, opts?: OperationOpts): Observable<SignInDmsCmd | AjaxResponse<SignInDmsCmd>> {
        throwIfNullOrUndefined(jwt, 'jwt', 'signInEvolveUsingJWTMsal');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'signInEvolveUsingJWTMsal');

        const headers: HttpHeaders = {
            ...(jwt != null ? { 'jwt': String(jwt) } : undefined),
        };

        return this.request<SignInDmsCmd>({
            url: '/api/auth/evolve/authenticate/msal/{organisationId}'.replace('{organisationId}', encodeURI(organisationId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Sign-in a user using an Msal JWT.
     * JWT MSal Sign In
     */
    signInSearchUsingJWTMsal({ jwt, organisationId }: SignInSearchUsingJWTMsalRequest): Observable<SignInCmd>
    signInSearchUsingJWTMsal({ jwt, organisationId }: SignInSearchUsingJWTMsalRequest, opts?: OperationOpts): Observable<AjaxResponse<SignInCmd>>
    signInSearchUsingJWTMsal({ jwt, organisationId }: SignInSearchUsingJWTMsalRequest, opts?: OperationOpts): Observable<SignInCmd | AjaxResponse<SignInCmd>> {
        throwIfNullOrUndefined(jwt, 'jwt', 'signInSearchUsingJWTMsal');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'signInSearchUsingJWTMsal');

        const headers: HttpHeaders = {
            ...(jwt != null ? { 'jwt': String(jwt) } : undefined),
        };

        return this.request<SignInCmd>({
            url: '/api/auth/search/authenticate/msal/{organisationId}'.replace('{organisationId}', encodeURI(organisationId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Sign-out any signed-in user (owner of the session object only).
     * Sign Out
     */
    signOut({ sessionId, aPIVersion }: SignOutRequest): Observable<JsonMessage>
    signOut({ sessionId, aPIVersion }: SignOutRequest, opts?: OperationOpts): Observable<AjaxResponse<JsonMessage>>
    signOut({ sessionId, aPIVersion }: SignOutRequest, opts?: OperationOpts): Observable<JsonMessage | AjaxResponse<JsonMessage>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'signOut');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<JsonMessage>({
            url: '/api/auth/sign-out',
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update or Create an organisation (save an organisation).
     * Save Organisation
     */
    updateOrganisation({ sessionId, cMOrganisation }: UpdateOrganisationRequest): Observable<CMOrganisation>
    updateOrganisation({ sessionId, cMOrganisation }: UpdateOrganisationRequest, opts?: OperationOpts): Observable<AjaxResponse<CMOrganisation>>
    updateOrganisation({ sessionId, cMOrganisation }: UpdateOrganisationRequest, opts?: OperationOpts): Observable<CMOrganisation | AjaxResponse<CMOrganisation>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'updateOrganisation');
        throwIfNullOrUndefined(cMOrganisation, 'cMOrganisation', 'updateOrganisation');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<CMOrganisation>({
            url: '/api/auth/organisation',
            method: 'PUT',
            headers,
            body: cMOrganisation,
        }, opts?.responseOpts);
    };

    /**
     * Update or Create a user (save a user).
     */
    updateUser({ organisationId, sessionId, cMUserWithExtras }: UpdateUserRequest): Observable<CMUserWithExtras>
    updateUser({ organisationId, sessionId, cMUserWithExtras }: UpdateUserRequest, opts?: OperationOpts): Observable<AjaxResponse<CMUserWithExtras>>
    updateUser({ organisationId, sessionId, cMUserWithExtras }: UpdateUserRequest, opts?: OperationOpts): Observable<CMUserWithExtras | AjaxResponse<CMUserWithExtras>> {
        throwIfNullOrUndefined(organisationId, 'organisationId', 'updateUser');
        throwIfNullOrUndefined(sessionId, 'sessionId', 'updateUser');
        throwIfNullOrUndefined(cMUserWithExtras, 'cMUserWithExtras', 'updateUser');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<CMUserWithExtras>({
            url: '/api/auth/user/{organisationId}'.replace('{organisationId}', encodeURI(organisationId)),
            method: 'PUT',
            headers,
            body: cMUserWithExtras,
        }, opts?.responseOpts);
    };

    /**
     * Get the version of SimSage Auth Services.
     * Get Version
     */
    version8(): Observable<SignInCmd>
    version8(opts?: OperationOpts): Observable<AjaxResponse<SignInCmd>>
    version8(opts?: OperationOpts): Observable<SignInCmd | AjaxResponse<SignInCmd>> {
        return this.request<SignInCmd>({
            url: '/api/auth/version',
            method: 'GET',
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum ImportUsersAndGroupsAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum SignOutAPIVersionEnum {
    _1 = '1'
}
