// tslint:disable
/**
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.13.31
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    CMAddFolder,
    CMAddSourceFolder,
    CMClientQuery,
    CMClientQueryResult,
    CMDUserDashboard,
    CMDocument,
    CMDocumentAudit,
    CMDocumentBookmark,
    CMDocumentFolder,
    CMDocumentHashTag,
    CMDocumentLock,
    CMDocumentNote,
    CMDocumentSubscription,
    CMSavedSearch,
    CMSubscriptions,
    CMUpdateACLs,
    CMUserNotification,
    DocumentBookmark,
    DocumentDeleted,
    JsonMessage,
} from '../models';

export interface AddFolderRequest {
    sessionId: string;
    cMAddFolder: CMAddFolder;
    aPIVersion?: AddFolderAPIVersionEnum;
}

export interface AddSourceFolderRequest {
    sessionId: string;
    cMAddSourceFolder: CMAddSourceFolder;
    aPIVersion?: AddSourceFolderAPIVersionEnum;
}

export interface DeleteAllNotesRequest {
    sessionId: string;
    organisationId: string;
    kbId: string;
    url: string;
    aPIVersion?: DeleteAllNotesAPIVersionEnum;
}

export interface DeleteBookmarkRequest {
    sessionId: string;
    organisationId: string;
    kbId: string;
    userId: string;
    url: string;
    aPIVersion?: DeleteBookmarkAPIVersionEnum;
}

export interface DeleteDocumentOrFolderRequest {
    sessionId: string;
    organisationId: string;
    kbId: string;
    isFolder: boolean;
    sourceId: number;
    url: string;
    folderId: string;
    aPIVersion?: DeleteDocumentOrFolderAPIVersionEnum;
}

export interface DeleteNoteRequest {
    sessionId: string;
    organisationId: string;
    kbId: string;
    url: string;
    noteId: number;
    aPIVersion?: DeleteNoteAPIVersionEnum;
}

export interface DeleteSourceFolderRequest {
    sessionId: string;
    organisationId: string;
    kbId: string;
    sourceId: number;
    aPIVersion?: DeleteSourceFolderAPIVersionEnum;
}

export interface DeleteSubscriptionRequest {
    sessionId: string;
    organisationId: string;
    kbId: string;
    userId: string;
    url: string;
    aPIVersion?: DeleteSubscriptionAPIVersionEnum;
}

export interface DeleteUserSearchRequest {
    sessionId: string;
    organisationId: string;
    kbId: string;
    userId: string;
    text: string;
    top: number;
    aPIVersion?: DeleteUserSearchAPIVersionEnum;
}

export interface Document1Request {
    sessionId: string;
    organisationId: string;
    kbId: string;
    urlId: number;
}

export interface DocumentBinaryRequest {
    sessionId: string;
    organisationId: string;
    kbId: string;
    url: string;
}

export interface DocumentVersionRequest {
    sessionId: string;
    organisationId: string;
    kbId: string;
    url: string;
    version: number;
}

export interface FilterFoldersRequest {
    sessionId: string;
    organisationId: string;
    kbId: string;
    text: string;
    aPIVersion?: FilterFoldersAPIVersionEnum;
}

export interface ForceReleaseLockRequest {
    sessionId: string;
    organisationId: string;
    kbId: string;
    userId: string;
    url: string;
    aPIVersion?: ForceReleaseLockAPIVersionEnum;
}

export interface GetBookmarkListRequest {
    organisationId: string;
    kbId: string;
    userId: string;
    sessionId: string;
    aPIVersion?: GetBookmarkListAPIVersionEnum;
}

export interface GetDeletedDocumentsRequest {
    sessionId: string;
    organisationId: string;
    kbId: string;
    filter: string;
    aPIVersion?: GetDeletedDocumentsAPIVersionEnum;
}

export interface GetDocumentAuditRequest {
    sessionId: string;
    organisationId: string;
    kbId: string;
    year: number;
    month: number;
    url: string;
    aPIVersion?: GetDocumentAuditAPIVersionEnum;
}

export interface GetFolderRequest {
    sessionId: string;
    organisationId: string;
    kbId: string;
    sourceId: number;
    folderId: string;
    prevUrl: string;
    pageSize: number;
    aPIVersion?: GetFolderAPIVersionEnum;
}

export interface GetFullAuditRequest {
    sessionId: string;
    organisationId: string;
    kbId: string;
    year: number;
    month: number;
    aPIVersion?: GetFullAuditAPIVersionEnum;
}

export interface GetLockedListRequest {
    organisationId: string;
    kbId: string;
    userId: string;
    sessionId: string;
    aPIVersion?: GetLockedListAPIVersionEnum;
}

export interface GetNoteListRequest {
    sessionId: string;
    organisationId: string;
    kbId: string;
    url: string;
    aPIVersion?: GetNoteListAPIVersionEnum;
}

export interface GetSavedSearchesRequest {
    sessionId: string;
    organisationId: string;
    kbId: string;
    userId: string;
    top: number;
    aPIVersion?: GetSavedSearchesAPIVersionEnum;
}

export interface GetSourceFolderRequest {
    organisationId: string;
    kbId: string;
    sourceId: number;
    sessionId: string;
    aPIVersion?: GetSourceFolderAPIVersionEnum;
}

export interface GetSubscriptionListRequest {
    organisationId: string;
    kbId: string;
    userId: string;
    sessionId: string;
    aPIVersion?: GetSubscriptionListAPIVersionEnum;
}

export interface GetUserDashboardRequest {
    organisationId: string;
    kbId: string;
    sessionId: string;
    aPIVersion?: GetUserDashboardAPIVersionEnum;
}

export interface GetUserNotificationsRequest {
    sessionId: string;
    organisationId: string;
    kbId: string;
    year: number;
    month: number;
    aPIVersion?: GetUserNotificationsAPIVersionEnum;
}

export interface LockDocumentRequest {
    sessionId: string;
    cMDocumentLock: CMDocumentLock;
    aPIVersion?: LockDocumentAPIVersionEnum;
}

export interface ReleaseLockRequest {
    sessionId: string;
    organisationId: string;
    kbId: string;
    userId: string;
    url: string;
    aPIVersion?: ReleaseLockAPIVersionEnum;
}

export interface RestfulDMSClientQueryRequest {
    sessionId: string;
    cMClientQuery: CMClientQuery;
}

export interface SaveBookmarkRequest {
    sessionId: string;
    cMDocumentBookmark: CMDocumentBookmark;
    aPIVersion?: SaveBookmarkAPIVersionEnum;
}

export interface SaveHashTagsRequest {
    sessionId: string;
    cMDocumentHashTag: CMDocumentHashTag;
    aPIVersion?: SaveHashTagsAPIVersionEnum;
}

export interface SaveNoteRequest {
    sessionId: string;
    cMDocumentNote: CMDocumentNote;
    aPIVersion?: SaveNoteAPIVersionEnum;
}

export interface SaveSearchRequest {
    sessionId: string;
    cMSavedSearch: CMSavedSearch;
    aPIVersion?: SaveSearchAPIVersionEnum;
}

export interface SaveSubscriptionRequest {
    sessionId: string;
    cMDocumentSubscription: CMDocumentSubscription;
    aPIVersion?: SaveSubscriptionAPIVersionEnum;
}

export interface UndeleteDocumentRequest {
    sessionId: string;
    organisationId: string;
    kbId: string;
    sourceId: number;
    url: string;
    filter: string;
    aPIVersion?: UndeleteDocumentAPIVersionEnum;
}

export interface UpdateACLsRequest {
    sessionId: string;
    cMUpdateACLs: CMUpdateACLs;
    aPIVersion?: UpdateACLsAPIVersionEnum;
}

export interface UploadDocumentRequest {
    sessionId: string;
    organisationId: string;
    kbId: string;
    sourceId: number;
    folderId: string;
    lastModified: string;
    file: Blob;
}

/**
 * no description
 */
export class DmsApi extends BaseAPI {

    /**
     * Add a new folder to the SimSage DMS.
     * Add a new folder
     */
    addFolder({ sessionId, cMAddFolder, aPIVersion }: AddFolderRequest): Observable<CMDocumentFolder>
    addFolder({ sessionId, cMAddFolder, aPIVersion }: AddFolderRequest, opts?: OperationOpts): Observable<AjaxResponse<CMDocumentFolder>>
    addFolder({ sessionId, cMAddFolder, aPIVersion }: AddFolderRequest, opts?: OperationOpts): Observable<CMDocumentFolder | AjaxResponse<CMDocumentFolder>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'addFolder');
        throwIfNullOrUndefined(cMAddFolder, 'cMAddFolder', 'addFolder');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<CMDocumentFolder>({
            url: '/api/dms/folder',
            method: 'POST',
            headers,
            body: cMAddFolder,
        }, opts?.responseOpts);
    };

    /**
     * Add a new top-level folder (source folder) to the SimSage DMS.
     * Add a new source-folder
     */
    addSourceFolder({ sessionId, cMAddSourceFolder, aPIVersion }: AddSourceFolderRequest): Observable<CMDocumentFolder>
    addSourceFolder({ sessionId, cMAddSourceFolder, aPIVersion }: AddSourceFolderRequest, opts?: OperationOpts): Observable<AjaxResponse<CMDocumentFolder>>
    addSourceFolder({ sessionId, cMAddSourceFolder, aPIVersion }: AddSourceFolderRequest, opts?: OperationOpts): Observable<CMDocumentFolder | AjaxResponse<CMDocumentFolder>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'addSourceFolder');
        throwIfNullOrUndefined(cMAddSourceFolder, 'cMAddSourceFolder', 'addSourceFolder');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<CMDocumentFolder>({
            url: '/api/dms/source',
            method: 'POST',
            headers,
            body: cMAddSourceFolder,
        }, opts?.responseOpts);
    };

    /**
     * delete all notes associated with a document
     * delete all Notes
     */
    deleteAllNotes({ sessionId, organisationId, kbId, url, aPIVersion }: DeleteAllNotesRequest): Observable<JsonMessage>
    deleteAllNotes({ sessionId, organisationId, kbId, url, aPIVersion }: DeleteAllNotesRequest, opts?: OperationOpts): Observable<AjaxResponse<JsonMessage>>
    deleteAllNotes({ sessionId, organisationId, kbId, url, aPIVersion }: DeleteAllNotesRequest, opts?: OperationOpts): Observable<JsonMessage | AjaxResponse<JsonMessage>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'deleteAllNotes');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'deleteAllNotes');
        throwIfNullOrUndefined(kbId, 'kbId', 'deleteAllNotes');
        throwIfNullOrUndefined(url, 'url', 'deleteAllNotes');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<JsonMessage>({
            url: '/api/dms/note/{organisationId}/{kbId}/{url}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{url}', encodeURI(url)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete a user\'s bookmark associated with a document
     * Delete a Bookmark
     */
    deleteBookmark({ sessionId, organisationId, kbId, userId, url, aPIVersion }: DeleteBookmarkRequest): Observable<Array<CMDocumentBookmark>>
    deleteBookmark({ sessionId, organisationId, kbId, userId, url, aPIVersion }: DeleteBookmarkRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CMDocumentBookmark>>>
    deleteBookmark({ sessionId, organisationId, kbId, userId, url, aPIVersion }: DeleteBookmarkRequest, opts?: OperationOpts): Observable<Array<CMDocumentBookmark> | AjaxResponse<Array<CMDocumentBookmark>>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'deleteBookmark');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'deleteBookmark');
        throwIfNullOrUndefined(kbId, 'kbId', 'deleteBookmark');
        throwIfNullOrUndefined(userId, 'userId', 'deleteBookmark');
        throwIfNullOrUndefined(url, 'url', 'deleteBookmark');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<Array<CMDocumentBookmark>>({
            url: '/api/dms/bookmark/{organisationId}/{kbId}/{userId}/{url}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{userId}', encodeURI(userId)).replace('{url}', encodeURI(url)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Mark a document/folder as deleted in the SimSage DMS.
     * Delete a document or a folder
     */
    deleteDocumentOrFolder({ sessionId, organisationId, kbId, isFolder, sourceId, url, folderId, aPIVersion }: DeleteDocumentOrFolderRequest): Observable<CMDocumentFolder>
    deleteDocumentOrFolder({ sessionId, organisationId, kbId, isFolder, sourceId, url, folderId, aPIVersion }: DeleteDocumentOrFolderRequest, opts?: OperationOpts): Observable<AjaxResponse<CMDocumentFolder>>
    deleteDocumentOrFolder({ sessionId, organisationId, kbId, isFolder, sourceId, url, folderId, aPIVersion }: DeleteDocumentOrFolderRequest, opts?: OperationOpts): Observable<CMDocumentFolder | AjaxResponse<CMDocumentFolder>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'deleteDocumentOrFolder');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'deleteDocumentOrFolder');
        throwIfNullOrUndefined(kbId, 'kbId', 'deleteDocumentOrFolder');
        throwIfNullOrUndefined(isFolder, 'isFolder', 'deleteDocumentOrFolder');
        throwIfNullOrUndefined(sourceId, 'sourceId', 'deleteDocumentOrFolder');
        throwIfNullOrUndefined(url, 'url', 'deleteDocumentOrFolder');
        throwIfNullOrUndefined(folderId, 'folderId', 'deleteDocumentOrFolder');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<CMDocumentFolder>({
            url: '/api/dms/document/delete/{organisationId}/{kbId}/{isFolder}/{sourceId}/{url}/{folderId}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{isFolder}', encodeURI(isFolder)).replace('{sourceId}', encodeURI(sourceId)).replace('{url}', encodeURI(url)).replace('{folderId}', encodeURI(folderId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete a note associated with a document
     * Delete a Note
     */
    deleteNote({ sessionId, organisationId, kbId, url, noteId, aPIVersion }: DeleteNoteRequest): Observable<Array<CMDocumentNote>>
    deleteNote({ sessionId, organisationId, kbId, url, noteId, aPIVersion }: DeleteNoteRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CMDocumentNote>>>
    deleteNote({ sessionId, organisationId, kbId, url, noteId, aPIVersion }: DeleteNoteRequest, opts?: OperationOpts): Observable<Array<CMDocumentNote> | AjaxResponse<Array<CMDocumentNote>>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'deleteNote');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'deleteNote');
        throwIfNullOrUndefined(kbId, 'kbId', 'deleteNote');
        throwIfNullOrUndefined(url, 'url', 'deleteNote');
        throwIfNullOrUndefined(noteId, 'noteId', 'deleteNote');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<Array<CMDocumentNote>>({
            url: '/api/dms/note/{organisationId}/{kbId}/{url}/{noteId}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{url}', encodeURI(url)).replace('{noteId}', encodeURI(noteId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Remove an existing top-level folder (source folder) from the SimSage DMS.
     * Remove source-folder
     */
    deleteSourceFolder({ sessionId, organisationId, kbId, sourceId, aPIVersion }: DeleteSourceFolderRequest): Observable<CMDocumentFolder>
    deleteSourceFolder({ sessionId, organisationId, kbId, sourceId, aPIVersion }: DeleteSourceFolderRequest, opts?: OperationOpts): Observable<AjaxResponse<CMDocumentFolder>>
    deleteSourceFolder({ sessionId, organisationId, kbId, sourceId, aPIVersion }: DeleteSourceFolderRequest, opts?: OperationOpts): Observable<CMDocumentFolder | AjaxResponse<CMDocumentFolder>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'deleteSourceFolder');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'deleteSourceFolder');
        throwIfNullOrUndefined(kbId, 'kbId', 'deleteSourceFolder');
        throwIfNullOrUndefined(sourceId, 'sourceId', 'deleteSourceFolder');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<CMDocumentFolder>({
            url: '/api/dms/source/{organisationId}/{kbId}/{sourceId}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{sourceId}', encodeURI(sourceId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete a user\'s subscription associated with a document, returns an updated subscription set.
     * Delete a Subscription
     */
    deleteSubscription({ sessionId, organisationId, kbId, userId, url, aPIVersion }: DeleteSubscriptionRequest): Observable<CMSubscriptions>
    deleteSubscription({ sessionId, organisationId, kbId, userId, url, aPIVersion }: DeleteSubscriptionRequest, opts?: OperationOpts): Observable<AjaxResponse<CMSubscriptions>>
    deleteSubscription({ sessionId, organisationId, kbId, userId, url, aPIVersion }: DeleteSubscriptionRequest, opts?: OperationOpts): Observable<CMSubscriptions | AjaxResponse<CMSubscriptions>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'deleteSubscription');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'deleteSubscription');
        throwIfNullOrUndefined(kbId, 'kbId', 'deleteSubscription');
        throwIfNullOrUndefined(userId, 'userId', 'deleteSubscription');
        throwIfNullOrUndefined(url, 'url', 'deleteSubscription');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<CMSubscriptions>({
            url: '/api/dms/subscription/{organisationId}/{kbId}/{userId}/{url}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{userId}', encodeURI(userId)).replace('{url}', encodeURI(url)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete a user\'s saved search
     * Delete a Saved Search
     */
    deleteUserSearch({ sessionId, organisationId, kbId, userId, text, top, aPIVersion }: DeleteUserSearchRequest): Observable<Array<CMSavedSearch>>
    deleteUserSearch({ sessionId, organisationId, kbId, userId, text, top, aPIVersion }: DeleteUserSearchRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CMSavedSearch>>>
    deleteUserSearch({ sessionId, organisationId, kbId, userId, text, top, aPIVersion }: DeleteUserSearchRequest, opts?: OperationOpts): Observable<Array<CMSavedSearch> | AjaxResponse<Array<CMSavedSearch>>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'deleteUserSearch');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'deleteUserSearch');
        throwIfNullOrUndefined(kbId, 'kbId', 'deleteUserSearch');
        throwIfNullOrUndefined(userId, 'userId', 'deleteUserSearch');
        throwIfNullOrUndefined(text, 'text', 'deleteUserSearch');
        throwIfNullOrUndefined(top, 'top', 'deleteUserSearch');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<Array<CMSavedSearch>>({
            url: '/api/dms/saved-search/{organisationId}/{kbId}/{userId}/{text}/{top}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{userId}', encodeURI(userId)).replace('{text}', encodeURI(text)).replace('{top}', encodeURI(top)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Return a document\'s details by url-id
     * Get Document
     */
    document1({ sessionId, organisationId, kbId, urlId }: Document1Request): Observable<CMDocument>
    document1({ sessionId, organisationId, kbId, urlId }: Document1Request, opts?: OperationOpts): Observable<AjaxResponse<CMDocument>>
    document1({ sessionId, organisationId, kbId, urlId }: Document1Request, opts?: OperationOpts): Observable<CMDocument | AjaxResponse<CMDocument>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'document1');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'document1');
        throwIfNullOrUndefined(kbId, 'kbId', 'document1');
        throwIfNullOrUndefined(urlId, 'urlId', 'document1');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<CMDocument>({
            url: '/api/dms/document/{organisationId}/{kbId}/{urlId}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{urlId}', encodeURI(urlId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get the original for a document if available by url (latest version)
     * Binary
     */
    documentBinary({ sessionId, organisationId, kbId, url }: DocumentBinaryRequest): Observable<string>
    documentBinary({ sessionId, organisationId, kbId, url }: DocumentBinaryRequest, opts?: OperationOpts): Observable<AjaxResponse<string>>
    documentBinary({ sessionId, organisationId, kbId, url }: DocumentBinaryRequest, opts?: OperationOpts): Observable<string | AjaxResponse<string>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'documentBinary');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'documentBinary');
        throwIfNullOrUndefined(kbId, 'kbId', 'documentBinary');
        throwIfNullOrUndefined(url, 'url', 'documentBinary');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<string>({
            url: '/api/dms/binary/latest/{organisationId}/{kbId}/{url}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{url}', encodeURI(url)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Return a document\'s binary by url and version
     * Get Binary Document
     */
    documentVersion({ sessionId, organisationId, kbId, url, version }: DocumentVersionRequest): Observable<string>
    documentVersion({ sessionId, organisationId, kbId, url, version }: DocumentVersionRequest, opts?: OperationOpts): Observable<AjaxResponse<string>>
    documentVersion({ sessionId, organisationId, kbId, url, version }: DocumentVersionRequest, opts?: OperationOpts): Observable<string | AjaxResponse<string>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'documentVersion');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'documentVersion');
        throwIfNullOrUndefined(kbId, 'kbId', 'documentVersion');
        throwIfNullOrUndefined(url, 'url', 'documentVersion');
        throwIfNullOrUndefined(version, 'version', 'documentVersion');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<string>({
            url: '/api/dms/binary/{organisationId}/{kbId}/{url}/{version}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{url}', encodeURI(url)).replace('{version}', encodeURI(version)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Filter a set of folders using Search
     * Filter Folders
     */
    filterFolders({ sessionId, organisationId, kbId, text, aPIVersion }: FilterFoldersRequest): Observable<CMDocumentFolder>
    filterFolders({ sessionId, organisationId, kbId, text, aPIVersion }: FilterFoldersRequest, opts?: OperationOpts): Observable<AjaxResponse<CMDocumentFolder>>
    filterFolders({ sessionId, organisationId, kbId, text, aPIVersion }: FilterFoldersRequest, opts?: OperationOpts): Observable<CMDocumentFolder | AjaxResponse<CMDocumentFolder>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'filterFolders');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'filterFolders');
        throwIfNullOrUndefined(kbId, 'kbId', 'filterFolders');
        throwIfNullOrUndefined(text, 'text', 'filterFolders');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<CMDocumentFolder>({
            url: '/api/dms/folder/filter/{organisationId}/{kbId}/{text}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{text}', encodeURI(text)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * A system administrator or manager can force-unlock a document.
     * Force-release a lock
     */
    forceReleaseLock({ sessionId, organisationId, kbId, userId, url, aPIVersion }: ForceReleaseLockRequest): Observable<JsonMessage>
    forceReleaseLock({ sessionId, organisationId, kbId, userId, url, aPIVersion }: ForceReleaseLockRequest, opts?: OperationOpts): Observable<AjaxResponse<JsonMessage>>
    forceReleaseLock({ sessionId, organisationId, kbId, userId, url, aPIVersion }: ForceReleaseLockRequest, opts?: OperationOpts): Observable<JsonMessage | AjaxResponse<JsonMessage>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'forceReleaseLock');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'forceReleaseLock');
        throwIfNullOrUndefined(kbId, 'kbId', 'forceReleaseLock');
        throwIfNullOrUndefined(userId, 'userId', 'forceReleaseLock');
        throwIfNullOrUndefined(url, 'url', 'forceReleaseLock');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<JsonMessage>({
            url: '/api/dms/lock/release/{organisationId}/{kbId}/{userId}/{url}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{userId}', encodeURI(userId)).replace('{url}', encodeURI(url)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Return a list of bookmarks for a given user
     * Get Bookmarks
     */
    getBookmarkList({ organisationId, kbId, userId, sessionId, aPIVersion }: GetBookmarkListRequest): Observable<Array<CMDocumentBookmark>>
    getBookmarkList({ organisationId, kbId, userId, sessionId, aPIVersion }: GetBookmarkListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CMDocumentBookmark>>>
    getBookmarkList({ organisationId, kbId, userId, sessionId, aPIVersion }: GetBookmarkListRequest, opts?: OperationOpts): Observable<Array<CMDocumentBookmark> | AjaxResponse<Array<CMDocumentBookmark>>> {
        throwIfNullOrUndefined(organisationId, 'organisationId', 'getBookmarkList');
        throwIfNullOrUndefined(kbId, 'kbId', 'getBookmarkList');
        throwIfNullOrUndefined(userId, 'userId', 'getBookmarkList');
        throwIfNullOrUndefined(sessionId, 'sessionId', 'getBookmarkList');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<Array<CMDocumentBookmark>>({
            url: '/api/dms/bookmark/{organisationId}/{kbId}/{userId}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{userId}', encodeURI(userId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Return a list of deleted document records for an administrator (all records) with an optional filter set.
     * Deleted records with optional filter
     */
    getDeletedDocuments({ sessionId, organisationId, kbId, filter, aPIVersion }: GetDeletedDocumentsRequest): Observable<Array<DocumentDeleted>>
    getDeletedDocuments({ sessionId, organisationId, kbId, filter, aPIVersion }: GetDeletedDocumentsRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<DocumentDeleted>>>
    getDeletedDocuments({ sessionId, organisationId, kbId, filter, aPIVersion }: GetDeletedDocumentsRequest, opts?: OperationOpts): Observable<Array<DocumentDeleted> | AjaxResponse<Array<DocumentDeleted>>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'getDeletedDocuments');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'getDeletedDocuments');
        throwIfNullOrUndefined(kbId, 'kbId', 'getDeletedDocuments');
        throwIfNullOrUndefined(filter, 'filter', 'getDeletedDocuments');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<Array<DocumentDeleted>>({
            url: '/api/dms/deleted/{organisationId}/{kbId}/{filter}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{filter}', encodeURI(filter)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Return document audit records for a user (filtered) or administrator (all records) for a given document / month
     * Audit records for a document for a month
     */
    getDocumentAudit({ sessionId, organisationId, kbId, year, month, url, aPIVersion }: GetDocumentAuditRequest): Observable<Array<CMDocumentAudit>>
    getDocumentAudit({ sessionId, organisationId, kbId, year, month, url, aPIVersion }: GetDocumentAuditRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CMDocumentAudit>>>
    getDocumentAudit({ sessionId, organisationId, kbId, year, month, url, aPIVersion }: GetDocumentAuditRequest, opts?: OperationOpts): Observable<Array<CMDocumentAudit> | AjaxResponse<Array<CMDocumentAudit>>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'getDocumentAudit');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'getDocumentAudit');
        throwIfNullOrUndefined(kbId, 'kbId', 'getDocumentAudit');
        throwIfNullOrUndefined(year, 'year', 'getDocumentAudit');
        throwIfNullOrUndefined(month, 'month', 'getDocumentAudit');
        throwIfNullOrUndefined(url, 'url', 'getDocumentAudit');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<Array<CMDocumentAudit>>({
            url: '/api/dms/audit/{organisationId}/{kbId}/{year}/{month}/{url}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{year}', encodeURI(year)).replace('{month}', encodeURI(month)).replace('{url}', encodeURI(url)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Return a folder\'s content
     * Get Folder Content
     */
    getFolder({ sessionId, organisationId, kbId, sourceId, folderId, prevUrl, pageSize, aPIVersion }: GetFolderRequest): Observable<CMDocumentFolder>
    getFolder({ sessionId, organisationId, kbId, sourceId, folderId, prevUrl, pageSize, aPIVersion }: GetFolderRequest, opts?: OperationOpts): Observable<AjaxResponse<CMDocumentFolder>>
    getFolder({ sessionId, organisationId, kbId, sourceId, folderId, prevUrl, pageSize, aPIVersion }: GetFolderRequest, opts?: OperationOpts): Observable<CMDocumentFolder | AjaxResponse<CMDocumentFolder>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'getFolder');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'getFolder');
        throwIfNullOrUndefined(kbId, 'kbId', 'getFolder');
        throwIfNullOrUndefined(sourceId, 'sourceId', 'getFolder');
        throwIfNullOrUndefined(folderId, 'folderId', 'getFolder');
        throwIfNullOrUndefined(prevUrl, 'prevUrl', 'getFolder');
        throwIfNullOrUndefined(pageSize, 'pageSize', 'getFolder');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<CMDocumentFolder>({
            url: '/api/dms/folder/{organisationId}/{kbId}/{sourceId}/{folderId}/{prevUrl}/{pageSize}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{sourceId}', encodeURI(sourceId)).replace('{folderId}', encodeURI(folderId)).replace('{prevUrl}', encodeURI(prevUrl)).replace('{pageSize}', encodeURI(pageSize)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Return document audit records for a user (filtered) or administrator (all records) for a given month
     * Audit records for a month
     */
    getFullAudit({ sessionId, organisationId, kbId, year, month, aPIVersion }: GetFullAuditRequest): Observable<Array<CMDocumentAudit>>
    getFullAudit({ sessionId, organisationId, kbId, year, month, aPIVersion }: GetFullAuditRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CMDocumentAudit>>>
    getFullAudit({ sessionId, organisationId, kbId, year, month, aPIVersion }: GetFullAuditRequest, opts?: OperationOpts): Observable<Array<CMDocumentAudit> | AjaxResponse<Array<CMDocumentAudit>>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'getFullAudit');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'getFullAudit');
        throwIfNullOrUndefined(kbId, 'kbId', 'getFullAudit');
        throwIfNullOrUndefined(year, 'year', 'getFullAudit');
        throwIfNullOrUndefined(month, 'month', 'getFullAudit');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<Array<CMDocumentAudit>>({
            url: '/api/dms/audit/{organisationId}/{kbId}/{year}/{month}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{year}', encodeURI(year)).replace('{month}', encodeURI(month)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Return a list of locked documents for a given user
     * Get locked documents for user
     */
    getLockedList({ organisationId, kbId, userId, sessionId, aPIVersion }: GetLockedListRequest): Observable<Array<CMDocument>>
    getLockedList({ organisationId, kbId, userId, sessionId, aPIVersion }: GetLockedListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CMDocument>>>
    getLockedList({ organisationId, kbId, userId, sessionId, aPIVersion }: GetLockedListRequest, opts?: OperationOpts): Observable<Array<CMDocument> | AjaxResponse<Array<CMDocument>>> {
        throwIfNullOrUndefined(organisationId, 'organisationId', 'getLockedList');
        throwIfNullOrUndefined(kbId, 'kbId', 'getLockedList');
        throwIfNullOrUndefined(userId, 'userId', 'getLockedList');
        throwIfNullOrUndefined(sessionId, 'sessionId', 'getLockedList');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<Array<CMDocument>>({
            url: '/api/dms/lock/{organisationId}/{kbId}/{userId}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{userId}', encodeURI(userId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Return a list of notes for a given url
     * Get Notes
     */
    getNoteList({ sessionId, organisationId, kbId, url, aPIVersion }: GetNoteListRequest): Observable<Array<CMDocumentNote>>
    getNoteList({ sessionId, organisationId, kbId, url, aPIVersion }: GetNoteListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CMDocumentNote>>>
    getNoteList({ sessionId, organisationId, kbId, url, aPIVersion }: GetNoteListRequest, opts?: OperationOpts): Observable<Array<CMDocumentNote> | AjaxResponse<Array<CMDocumentNote>>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'getNoteList');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'getNoteList');
        throwIfNullOrUndefined(kbId, 'kbId', 'getNoteList');
        throwIfNullOrUndefined(url, 'url', 'getNoteList');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<Array<CMDocumentNote>>({
            url: '/api/dms/note/{organisationId}/{kbId}/{url}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{url}', encodeURI(url)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Return a user\'s saved searches
     * User\'s saved searches
     */
    getSavedSearches({ sessionId, organisationId, kbId, userId, top, aPIVersion }: GetSavedSearchesRequest): Observable<Array<CMSavedSearch>>
    getSavedSearches({ sessionId, organisationId, kbId, userId, top, aPIVersion }: GetSavedSearchesRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CMSavedSearch>>>
    getSavedSearches({ sessionId, organisationId, kbId, userId, top, aPIVersion }: GetSavedSearchesRequest, opts?: OperationOpts): Observable<Array<CMSavedSearch> | AjaxResponse<Array<CMSavedSearch>>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'getSavedSearches');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'getSavedSearches');
        throwIfNullOrUndefined(kbId, 'kbId', 'getSavedSearches');
        throwIfNullOrUndefined(userId, 'userId', 'getSavedSearches');
        throwIfNullOrUndefined(top, 'top', 'getSavedSearches');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<Array<CMSavedSearch>>({
            url: '/api/dms/saved-searches/{organisationId}/{kbId}/{userId}/{top}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{userId}', encodeURI(userId)).replace('{top}', encodeURI(top)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Return the content of a top-level folder (source folder).
     * Get source-folder
     */
    getSourceFolder({ organisationId, kbId, sourceId, sessionId, aPIVersion }: GetSourceFolderRequest): Observable<CMDocumentFolder>
    getSourceFolder({ organisationId, kbId, sourceId, sessionId, aPIVersion }: GetSourceFolderRequest, opts?: OperationOpts): Observable<AjaxResponse<CMDocumentFolder>>
    getSourceFolder({ organisationId, kbId, sourceId, sessionId, aPIVersion }: GetSourceFolderRequest, opts?: OperationOpts): Observable<CMDocumentFolder | AjaxResponse<CMDocumentFolder>> {
        throwIfNullOrUndefined(organisationId, 'organisationId', 'getSourceFolder');
        throwIfNullOrUndefined(kbId, 'kbId', 'getSourceFolder');
        throwIfNullOrUndefined(sourceId, 'sourceId', 'getSourceFolder');
        throwIfNullOrUndefined(sessionId, 'sessionId', 'getSourceFolder');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<CMDocumentFolder>({
            url: '/api/dms/source/{organisationId}/{kbId}/{sourceId}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{sourceId}', encodeURI(sourceId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Return a subscriptions object for a given user
     * Get Subscriptions
     */
    getSubscriptionList({ organisationId, kbId, userId, sessionId, aPIVersion }: GetSubscriptionListRequest): Observable<CMSubscriptions>
    getSubscriptionList({ organisationId, kbId, userId, sessionId, aPIVersion }: GetSubscriptionListRequest, opts?: OperationOpts): Observable<AjaxResponse<CMSubscriptions>>
    getSubscriptionList({ organisationId, kbId, userId, sessionId, aPIVersion }: GetSubscriptionListRequest, opts?: OperationOpts): Observable<CMSubscriptions | AjaxResponse<CMSubscriptions>> {
        throwIfNullOrUndefined(organisationId, 'organisationId', 'getSubscriptionList');
        throwIfNullOrUndefined(kbId, 'kbId', 'getSubscriptionList');
        throwIfNullOrUndefined(userId, 'userId', 'getSubscriptionList');
        throwIfNullOrUndefined(sessionId, 'sessionId', 'getSubscriptionList');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<CMSubscriptions>({
            url: '/api/dms/subscriptions/{organisationId}/{kbId}/{userId}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{userId}', encodeURI(userId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Return a the user\'s DMS dashboard
     * User Dashboard
     */
    getUserDashboard({ organisationId, kbId, sessionId, aPIVersion }: GetUserDashboardRequest): Observable<CMDUserDashboard>
    getUserDashboard({ organisationId, kbId, sessionId, aPIVersion }: GetUserDashboardRequest, opts?: OperationOpts): Observable<AjaxResponse<CMDUserDashboard>>
    getUserDashboard({ organisationId, kbId, sessionId, aPIVersion }: GetUserDashboardRequest, opts?: OperationOpts): Observable<CMDUserDashboard | AjaxResponse<CMDUserDashboard>> {
        throwIfNullOrUndefined(organisationId, 'organisationId', 'getUserDashboard');
        throwIfNullOrUndefined(kbId, 'kbId', 'getUserDashboard');
        throwIfNullOrUndefined(sessionId, 'sessionId', 'getUserDashboard');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<CMDUserDashboard>({
            url: '/api/dms/dashboard/{organisationId}/{kbId}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Return all user notifications from the DMS for a given user by id.
     * Get User Notifications
     */
    getUserNotifications({ sessionId, organisationId, kbId, year, month, aPIVersion }: GetUserNotificationsRequest): Observable<Array<CMUserNotification>>
    getUserNotifications({ sessionId, organisationId, kbId, year, month, aPIVersion }: GetUserNotificationsRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CMUserNotification>>>
    getUserNotifications({ sessionId, organisationId, kbId, year, month, aPIVersion }: GetUserNotificationsRequest, opts?: OperationOpts): Observable<Array<CMUserNotification> | AjaxResponse<Array<CMUserNotification>>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'getUserNotifications');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'getUserNotifications');
        throwIfNullOrUndefined(kbId, 'kbId', 'getUserNotifications');
        throwIfNullOrUndefined(year, 'year', 'getUserNotifications');
        throwIfNullOrUndefined(month, 'month', 'getUserNotifications');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<Array<CMUserNotification>>({
            url: '/api/dms/notifications/{organisationId}/{kbId}/{year}/{month}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{year}', encodeURI(year)).replace('{month}', encodeURI(month)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Lock a document for a user.
     * Document Lock
     */
    lockDocument({ sessionId, cMDocumentLock, aPIVersion }: LockDocumentRequest): Observable<Array<CMDocument>>
    lockDocument({ sessionId, cMDocumentLock, aPIVersion }: LockDocumentRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CMDocument>>>
    lockDocument({ sessionId, cMDocumentLock, aPIVersion }: LockDocumentRequest, opts?: OperationOpts): Observable<Array<CMDocument> | AjaxResponse<Array<CMDocument>>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'lockDocument');
        throwIfNullOrUndefined(cMDocumentLock, 'cMDocumentLock', 'lockDocument');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<Array<CMDocument>>({
            url: '/api/dms/lock',
            method: 'POST',
            headers,
            body: cMDocumentLock,
        }, opts?.responseOpts);
    };

    /**
     * The originator of a lock releases a locked document.
     * Release a lock
     */
    releaseLock({ sessionId, organisationId, kbId, userId, url, aPIVersion }: ReleaseLockRequest): Observable<Array<CMDocument>>
    releaseLock({ sessionId, organisationId, kbId, userId, url, aPIVersion }: ReleaseLockRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CMDocument>>>
    releaseLock({ sessionId, organisationId, kbId, userId, url, aPIVersion }: ReleaseLockRequest, opts?: OperationOpts): Observable<Array<CMDocument> | AjaxResponse<Array<CMDocument>>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'releaseLock');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'releaseLock');
        throwIfNullOrUndefined(kbId, 'kbId', 'releaseLock');
        throwIfNullOrUndefined(userId, 'userId', 'releaseLock');
        throwIfNullOrUndefined(url, 'url', 'releaseLock');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<Array<CMDocument>>({
            url: '/api/dms/lock/{organisationId}/{kbId}/{userId}/{url}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{userId}', encodeURI(userId)).replace('{url}', encodeURI(url)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * a SimSage DMS client asks a question or performs a keyword-search.
     * DMS Client Query
     */
    restfulDMSClientQuery({ sessionId, cMClientQuery }: RestfulDMSClientQueryRequest): Observable<CMClientQueryResult>
    restfulDMSClientQuery({ sessionId, cMClientQuery }: RestfulDMSClientQueryRequest, opts?: OperationOpts): Observable<AjaxResponse<CMClientQueryResult>>
    restfulDMSClientQuery({ sessionId, cMClientQuery }: RestfulDMSClientQueryRequest, opts?: OperationOpts): Observable<CMClientQueryResult | AjaxResponse<CMClientQueryResult>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'restfulDMSClientQuery');
        throwIfNullOrUndefined(cMClientQuery, 'cMClientQuery', 'restfulDMSClientQuery');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<CMClientQueryResult>({
            url: '/api/dms/query',
            method: 'POST',
            headers,
            body: cMClientQuery,
        }, opts?.responseOpts);
    };

    /**
     * Save (create or update) a SimSage Document Bookmark.
     * Save Bookmark
     */
    saveBookmark({ sessionId, cMDocumentBookmark, aPIVersion }: SaveBookmarkRequest): Observable<Array<DocumentBookmark>>
    saveBookmark({ sessionId, cMDocumentBookmark, aPIVersion }: SaveBookmarkRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<DocumentBookmark>>>
    saveBookmark({ sessionId, cMDocumentBookmark, aPIVersion }: SaveBookmarkRequest, opts?: OperationOpts): Observable<Array<DocumentBookmark> | AjaxResponse<Array<DocumentBookmark>>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'saveBookmark');
        throwIfNullOrUndefined(cMDocumentBookmark, 'cMDocumentBookmark', 'saveBookmark');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<Array<DocumentBookmark>>({
            url: '/api/dms/bookmark',
            method: 'POST',
            headers,
            body: cMDocumentBookmark,
        }, opts?.responseOpts);
    };

    /**
     * Save (create / update / delete) a hashTag set for a document.
     * Save HashTag set for a document
     */
    saveHashTags({ sessionId, cMDocumentHashTag, aPIVersion }: SaveHashTagsRequest): Observable<JsonMessage>
    saveHashTags({ sessionId, cMDocumentHashTag, aPIVersion }: SaveHashTagsRequest, opts?: OperationOpts): Observable<AjaxResponse<JsonMessage>>
    saveHashTags({ sessionId, cMDocumentHashTag, aPIVersion }: SaveHashTagsRequest, opts?: OperationOpts): Observable<JsonMessage | AjaxResponse<JsonMessage>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'saveHashTags');
        throwIfNullOrUndefined(cMDocumentHashTag, 'cMDocumentHashTag', 'saveHashTags');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<JsonMessage>({
            url: '/api/dms/hash-tag',
            method: 'POST',
            headers,
            body: cMDocumentHashTag,
        }, opts?.responseOpts);
    };

    /**
     * Save (create or update) a SimSage Document Note.
     * Save Note
     */
    saveNote({ sessionId, cMDocumentNote, aPIVersion }: SaveNoteRequest): Observable<Array<CMDocumentNote>>
    saveNote({ sessionId, cMDocumentNote, aPIVersion }: SaveNoteRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CMDocumentNote>>>
    saveNote({ sessionId, cMDocumentNote, aPIVersion }: SaveNoteRequest, opts?: OperationOpts): Observable<Array<CMDocumentNote> | AjaxResponse<Array<CMDocumentNote>>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'saveNote');
        throwIfNullOrUndefined(cMDocumentNote, 'cMDocumentNote', 'saveNote');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<Array<CMDocumentNote>>({
            url: '/api/dms/note',
            method: 'POST',
            headers,
            body: cMDocumentNote,
        }, opts?.responseOpts);
    };

    /**
     * Save a user\'s search query.
     * Save Search
     */
    saveSearch({ sessionId, cMSavedSearch, aPIVersion }: SaveSearchRequest): Observable<Array<CMSavedSearch>>
    saveSearch({ sessionId, cMSavedSearch, aPIVersion }: SaveSearchRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CMSavedSearch>>>
    saveSearch({ sessionId, cMSavedSearch, aPIVersion }: SaveSearchRequest, opts?: OperationOpts): Observable<Array<CMSavedSearch> | AjaxResponse<Array<CMSavedSearch>>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'saveSearch');
        throwIfNullOrUndefined(cMSavedSearch, 'cMSavedSearch', 'saveSearch');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<Array<CMSavedSearch>>({
            url: '/api/dms/save-search',
            method: 'POST',
            headers,
            body: cMSavedSearch,
        }, opts?.responseOpts);
    };

    /**
     * Save (create or update) a SimSage Document subscription.  Returns a subscription object for this user.
     * Save Subscription
     */
    saveSubscription({ sessionId, cMDocumentSubscription, aPIVersion }: SaveSubscriptionRequest): Observable<CMSubscriptions>
    saveSubscription({ sessionId, cMDocumentSubscription, aPIVersion }: SaveSubscriptionRequest, opts?: OperationOpts): Observable<AjaxResponse<CMSubscriptions>>
    saveSubscription({ sessionId, cMDocumentSubscription, aPIVersion }: SaveSubscriptionRequest, opts?: OperationOpts): Observable<CMSubscriptions | AjaxResponse<CMSubscriptions>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'saveSubscription');
        throwIfNullOrUndefined(cMDocumentSubscription, 'cMDocumentSubscription', 'saveSubscription');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<CMSubscriptions>({
            url: '/api/dms/subscription',
            method: 'POST',
            headers,
            body: cMDocumentSubscription,
        }, opts?.responseOpts);
    };

    /**
     * Un-delete a previously deleted document and return a list of deleted document records for an administrator (all records).
     * un-delete a record
     */
    undeleteDocument({ sessionId, organisationId, kbId, sourceId, url, filter, aPIVersion }: UndeleteDocumentRequest): Observable<Array<DocumentDeleted>>
    undeleteDocument({ sessionId, organisationId, kbId, sourceId, url, filter, aPIVersion }: UndeleteDocumentRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<DocumentDeleted>>>
    undeleteDocument({ sessionId, organisationId, kbId, sourceId, url, filter, aPIVersion }: UndeleteDocumentRequest, opts?: OperationOpts): Observable<Array<DocumentDeleted> | AjaxResponse<Array<DocumentDeleted>>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'undeleteDocument');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'undeleteDocument');
        throwIfNullOrUndefined(kbId, 'kbId', 'undeleteDocument');
        throwIfNullOrUndefined(sourceId, 'sourceId', 'undeleteDocument');
        throwIfNullOrUndefined(url, 'url', 'undeleteDocument');
        throwIfNullOrUndefined(filter, 'filter', 'undeleteDocument');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<Array<DocumentDeleted>>({
            url: '/api/dms/un-delete/{organisationId}/{kbId}/{sourceId}/{url}/{filter}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{sourceId}', encodeURI(sourceId)).replace('{url}', encodeURI(url)).replace('{filter}', encodeURI(filter)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update the Access Control List of a SimSage DMS item (source, file, or folder).
     * Update an item\'s ACLs
     */
    updateACLs({ sessionId, cMUpdateACLs, aPIVersion }: UpdateACLsRequest): Observable<JsonMessage>
    updateACLs({ sessionId, cMUpdateACLs, aPIVersion }: UpdateACLsRequest, opts?: OperationOpts): Observable<AjaxResponse<JsonMessage>>
    updateACLs({ sessionId, cMUpdateACLs, aPIVersion }: UpdateACLsRequest, opts?: OperationOpts): Observable<JsonMessage | AjaxResponse<JsonMessage>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'updateACLs');
        throwIfNullOrUndefined(cMUpdateACLs, 'cMUpdateACLs', 'updateACLs');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<JsonMessage>({
            url: '/api/dms/acls',
            method: 'POST',
            headers,
            body: cMUpdateACLs,
        }, opts?.responseOpts);
    };

    /**
     * Upload a document into a DMS folder
     * Upload a Document
     */
    uploadDocument({ sessionId, organisationId, kbId, sourceId, folderId, lastModified, file }: UploadDocumentRequest): Observable<CMDocumentFolder>
    uploadDocument({ sessionId, organisationId, kbId, sourceId, folderId, lastModified, file }: UploadDocumentRequest, opts?: OperationOpts): Observable<AjaxResponse<CMDocumentFolder>>
    uploadDocument({ sessionId, organisationId, kbId, sourceId, folderId, lastModified, file }: UploadDocumentRequest, opts?: OperationOpts): Observable<CMDocumentFolder | AjaxResponse<CMDocumentFolder>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'uploadDocument');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'uploadDocument');
        throwIfNullOrUndefined(kbId, 'kbId', 'uploadDocument');
        throwIfNullOrUndefined(sourceId, 'sourceId', 'uploadDocument');
        throwIfNullOrUndefined(folderId, 'folderId', 'uploadDocument');
        throwIfNullOrUndefined(lastModified, 'lastModified', 'uploadDocument');
        throwIfNullOrUndefined(file, 'file', 'uploadDocument');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        const formData = new FormData();
        if (file !== undefined) { formData.append('file', file as any); }

        return this.request<CMDocumentFolder>({
            url: '/api/dms/upload/document/{organisationId}/{kbId}/{sourceId}/{folderId}/{lastModified}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{sourceId}', encodeURI(sourceId)).replace('{folderId}', encodeURI(folderId)).replace('{lastModified}', encodeURI(lastModified)),
            method: 'POST',
            headers,
            body: formData,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum AddFolderAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum AddSourceFolderAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum DeleteAllNotesAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum DeleteBookmarkAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum DeleteDocumentOrFolderAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum DeleteNoteAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum DeleteSourceFolderAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum DeleteSubscriptionAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum DeleteUserSearchAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum FilterFoldersAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum ForceReleaseLockAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum GetBookmarkListAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum GetDeletedDocumentsAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum GetDocumentAuditAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum GetFolderAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum GetFullAuditAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum GetLockedListAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum GetNoteListAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum GetSavedSearchesAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum GetSourceFolderAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum GetSubscriptionListAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum GetUserDashboardAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum GetUserNotificationsAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum LockDocumentAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum ReleaseLockAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum SaveBookmarkAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum SaveHashTagsAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum SaveNoteAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum SaveSearchAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum SaveSubscriptionAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum UndeleteDocumentAPIVersionEnum {
    _1 = '1'
}
/**
 * @export
 * @enum {string}
 */
export enum UpdateACLsAPIVersionEnum {
    _1 = '1'
}
