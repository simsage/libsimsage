// tslint:disable
/**
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.14.12
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    CMCommandQueueItem,
    CMLoggerEntry,
    CMReturnStatistics,
    CMVersion,
    JsonMessage,
    OptimizeIndexesGetReportCmd,
    OptimizeIndexesGetReportsCmd,
} from '../models';

export interface GetIndexOptimizationReportRequest {
    sessionId: string;
    organisationId: string;
    kbId: string;
    id: number;
}

export interface GetIndexOptimizationReportsRequest {
    sessionId: string;
    organisationId: string;
    kbId: string;
}

export interface GetStatsRequest {
    sessionId: string;
    organisationId: string;
    kbId: string;
    year: number;
    month: number;
    top: number;
    aPIVersion?: GetStatsAPIVersionEnum;
}

export interface SimSageStatusRequest {
    sessionId: string;
    organisationId: string;
}

export interface SystemLogsRequest {
    organisationId: string;
    service: string;
    numLines: number;
    sessionId: string;
}

/**
 * no description
 */
export class StatsApi extends BaseAPI {

    /**
     * return an optimization report
     * get an optimization report
     */
    getIndexOptimizationReport({ sessionId, organisationId, kbId, id }: GetIndexOptimizationReportRequest): Observable<Array<OptimizeIndexesGetReportCmd>>
    getIndexOptimizationReport({ sessionId, organisationId, kbId, id }: GetIndexOptimizationReportRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<OptimizeIndexesGetReportCmd>>>
    getIndexOptimizationReport({ sessionId, organisationId, kbId, id }: GetIndexOptimizationReportRequest, opts?: OperationOpts): Observable<Array<OptimizeIndexesGetReportCmd> | AjaxResponse<Array<OptimizeIndexesGetReportCmd>>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'getIndexOptimizationReport');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'getIndexOptimizationReport');
        throwIfNullOrUndefined(kbId, 'kbId', 'getIndexOptimizationReport');
        throwIfNullOrUndefined(id, 'id', 'getIndexOptimizationReport');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<Array<OptimizeIndexesGetReportCmd>>({
            url: '/api/stats/report/{organisationId}/{kbId}/{id}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * return a list of optimization reports
     * get optimization report list
     */
    getIndexOptimizationReports({ sessionId, organisationId, kbId }: GetIndexOptimizationReportsRequest): Observable<Array<OptimizeIndexesGetReportsCmd>>
    getIndexOptimizationReports({ sessionId, organisationId, kbId }: GetIndexOptimizationReportsRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<OptimizeIndexesGetReportsCmd>>>
    getIndexOptimizationReports({ sessionId, organisationId, kbId }: GetIndexOptimizationReportsRequest, opts?: OperationOpts): Observable<Array<OptimizeIndexesGetReportsCmd> | AjaxResponse<Array<OptimizeIndexesGetReportsCmd>>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'getIndexOptimizationReports');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'getIndexOptimizationReports');
        throwIfNullOrUndefined(kbId, 'kbId', 'getIndexOptimizationReports');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<Array<OptimizeIndexesGetReportsCmd>>({
            url: '/api/stats/reports/{organisationId}/{kbId}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get all statistics for a given month, including some global ones.
     * Get usage Statistics
     */
    getStats({ sessionId, organisationId, kbId, year, month, top, aPIVersion }: GetStatsRequest): Observable<CMReturnStatistics>
    getStats({ sessionId, organisationId, kbId, year, month, top, aPIVersion }: GetStatsRequest, opts?: OperationOpts): Observable<AjaxResponse<CMReturnStatistics>>
    getStats({ sessionId, organisationId, kbId, year, month, top, aPIVersion }: GetStatsRequest, opts?: OperationOpts): Observable<CMReturnStatistics | AjaxResponse<CMReturnStatistics>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'getStats');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'getStats');
        throwIfNullOrUndefined(kbId, 'kbId', 'getStats');
        throwIfNullOrUndefined(year, 'year', 'getStats');
        throwIfNullOrUndefined(month, 'month', 'getStats');
        throwIfNullOrUndefined(top, 'top', 'getStats');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
            ...(aPIVersion != null ? { 'API-Version': String(aPIVersion) } : undefined),
        };

        return this.request<CMReturnStatistics>({
            url: '/api/stats/stats/{organisationId}/{kbId}/{year}/{month}/{top}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{year}', encodeURI(year)).replace('{month}', encodeURI(month)).replace('{top}', encodeURI(top)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * return SimSage indexer and parser status
     * SimSage status
     */
    simSageStatus({ sessionId, organisationId }: SimSageStatusRequest): Observable<Array<CMCommandQueueItem>>
    simSageStatus({ sessionId, organisationId }: SimSageStatusRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CMCommandQueueItem>>>
    simSageStatus({ sessionId, organisationId }: SimSageStatusRequest, opts?: OperationOpts): Observable<Array<CMCommandQueueItem> | AjaxResponse<Array<CMCommandQueueItem>>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'simSageStatus');
        throwIfNullOrUndefined(organisationId, 'organisationId', 'simSageStatus');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<Array<CMCommandQueueItem>>({
            url: '/api/stats/status/{organisationId}'.replace('{organisationId}', encodeURI(organisationId)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * return SimSage System-logs
     * System Logs
     */
    systemLogs({ organisationId, service, numLines, sessionId }: SystemLogsRequest): Observable<Array<CMLoggerEntry>>
    systemLogs({ organisationId, service, numLines, sessionId }: SystemLogsRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CMLoggerEntry>>>
    systemLogs({ organisationId, service, numLines, sessionId }: SystemLogsRequest, opts?: OperationOpts): Observable<Array<CMLoggerEntry> | AjaxResponse<Array<CMLoggerEntry>>> {
        throwIfNullOrUndefined(organisationId, 'organisationId', 'systemLogs');
        throwIfNullOrUndefined(service, 'service', 'systemLogs');
        throwIfNullOrUndefined(numLines, 'numLines', 'systemLogs');
        throwIfNullOrUndefined(sessionId, 'sessionId', 'systemLogs');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<Array<CMLoggerEntry>>({
            url: '/api/stats/system-logs/{organisationId}/{service}/{numLines}'.replace('{organisationId}', encodeURI(organisationId)).replace('{service}', encodeURI(service)).replace('{numLines}', encodeURI(numLines)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get the version of SimSage Stats Services.
     * Version
     */
    version(): Observable<CMVersion>
    version(opts?: OperationOpts): Observable<AjaxResponse<CMVersion>>
    version(opts?: OperationOpts): Observable<CMVersion | AjaxResponse<CMVersion>> {
        return this.request<CMVersion>({
            url: '/api/stats/version',
            method: 'GET',
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum GetStatsAPIVersionEnum {
    _1 = '1'
}
