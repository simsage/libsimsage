/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 * Generated by: https://openapi-generator.tech
 */

/// CmUpdateAcls : the ACLs for the object



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CmUpdateAcls {
    /// the main organisation (its guid id) for this source/crawler
    #[serde(rename = "organisationId")]
    pub organisation_id: String,
    /// the knowledge-base id of this context item, a guid-string
    #[serde(rename = "kbId")]
    pub kb_id: String,
    /// the source-id of the owner of the url
    #[serde(rename = "sourceId")]
    pub source_id: i32,
    /// the parent id of the update to update
    #[serde(rename = "parentId")]
    pub parent_id: String,
    /// the id of the update to update
    #[serde(rename = "objectId")]
    pub object_id: String,
    /// the type of item to update, one of source, file or folder
    #[serde(rename = "itemType")]
    pub item_type: String,
    /// the initial ACLs for this source-folder.
    #[serde(rename = "acls")]
    pub acls: Vec<crate::models::CmDocumentAcl>,
    /// apply these ACLs to any children of this object?
    #[serde(rename = "applyToChildren")]
    pub apply_to_children: bool,
}

impl CmUpdateAcls {
    /// the ACLs for the object
    pub fn new(organisation_id: String, kb_id: String, source_id: i32, parent_id: String, object_id: String, item_type: String, acls: Vec<crate::models::CmDocumentAcl>, apply_to_children: bool) -> CmUpdateAcls {
        CmUpdateAcls {
            organisation_id,
            kb_id,
            source_id,
            parent_id,
            object_id,
            item_type,
            acls,
            apply_to_children,
        }
    }
}


