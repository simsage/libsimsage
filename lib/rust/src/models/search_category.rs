/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 * Generated by: https://openapi-generator.tech
 */

/// SearchCategory : Search categories / metadata searching



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SearchCategory {
    #[serde(rename = "scType")]
    pub sc_type: ScType,
    #[serde(rename = "categoryType")]
    pub category_type: String,
    #[serde(rename = "order")]
    pub order: i32,
    #[serde(rename = "sortDefault")]
    pub sort_default: String,
    #[serde(rename = "sortAscText")]
    pub sort_asc_text: String,
    #[serde(rename = "sortDescText")]
    pub sort_desc_text: String,
    #[serde(rename = "metadata")]
    pub metadata: String,
    #[serde(rename = "displayName")]
    pub display_name: String,
    #[serde(rename = "sort")]
    pub sort: bool,
    #[serde(rename = "minValue")]
    pub min_value: i64,
    #[serde(rename = "maxValue")]
    pub max_value: i64,
    #[serde(rename = "items")]
    pub items: Vec<crate::models::NameCounterLevel>,
}

impl SearchCategory {
    /// Search categories / metadata searching
    pub fn new(sc_type: ScType, category_type: String, order: i32, sort_default: String, sort_asc_text: String, sort_desc_text: String, metadata: String, display_name: String, sort: bool, min_value: i64, max_value: i64, items: Vec<crate::models::NameCounterLevel>) -> SearchCategory {
        SearchCategory {
            sc_type,
            category_type,
            order,
            sort_default,
            sort_asc_text,
            sort_desc_text,
            metadata,
            display_name,
            sort,
            min_value,
            max_value,
            items,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ScType {
    #[serde(rename = "SCT_PLAIN")]
    Plain,
    #[serde(rename = "SCT_TWO_LEVEL")]
    TwoLevel,
    #[serde(rename = "SCT_NUMBER")]
    Number,
}

impl Default for ScType {
    fn default() -> ScType {
        Self::Plain
    }
}

