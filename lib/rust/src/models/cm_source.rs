/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.13.31
 * Contact: info@simsage.co.uk
 * Generated by: https://openapi-generator.tech
 */

/// CmSource : A SimSage source object used for updating and creating SimSage crawlers/connections to external silos like Sharepoint, OneDrive, Exchange, DropBox, Box, iManage, and others.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CmSource {
    /// the source-id, primary key of the source
    #[serde(rename = "sourceId")]
    pub source_id: i32,
    /// the main organisation (its guid id) for this source/crawler
    #[serde(rename = "organisationId")]
    pub organisation_id: String,
    /// the knowledge-base id (its guid id) for this source/crawler
    #[serde(rename = "kbId")]
    pub kb_id: String,
    /// the system's node id of this source (what kubernetes-node to run on, starting with zero, set NODE_ID in env to manipulate this value).  Sources will only run on machines with a matching node-id
    #[serde(rename = "nodeId")]
    pub node_id: i32,
    /// the display-name (descriptive name) of this source.  The source's name must be unique within a knowledge-base.
    #[serde(rename = "name")]
    pub name: String,
    /// the type of this source
    #[serde(rename = "crawlerType")]
    pub crawler_type: String,
    /// the time-schedule of this crawler, when active and when not repeating in a weekly-per hour cycle in GMT time.  Empty string means not active at all
    #[serde(rename = "schedule")]
    pub schedule: String,
    /// Should this crawler remove files that are no longer visible after a crawl completes without errors?  Used for sources that cannot report on file/data removal.
    #[serde(rename = "deleteFiles")]
    pub delete_files: bool,
    /// Is the content of this crawler accessible anonymously (ie. no permissions/ACLs required).  Some crawlers like the web crawler always have this value as true.  NB.  Setting this flag to \"true\" will bypass any security on the source's own ACLs and make all its content available to everyone.
    #[serde(rename = "allowAnonymous")]
    pub allow_anonymous: bool,
    /// How much processing should SimSage give each file of this source.  As defined internally in ProcessingLevel.  level 1, CONVERT: convert all document binaries to text (creates metadata text).  level 2, PARSE: NLP process the files (creates sentences and tokens for all text).  level 3, INDEX: create inverted indexes for files (creates indexes).
    #[serde(rename = "processingLevel")]
    pub processing_level: String,
    /// Generate per-document image-preview information as well as full HTML previews if set to \"true\".
    #[serde(rename = "enablePreview")]
    pub enable_preview: bool,
    /// Any value greater than 0 will cause the crawler to sleep for as many milliseconds between file uploads.
    #[serde(rename = "filesPerSecond")]
    pub files_per_second: f32,
    /// A json string with specific values for this type of source.  Generated by the SimSage administrative system.
    #[serde(rename = "specificJson")]
    pub specific_json: String,
    /// a valid session-guid id.
    #[serde(rename = "sessionId")]
    pub session_id: String,
    /// Set a content limit for the maximum number of items to contain for this source.  A value of zero (0) indicates no limits.
    #[serde(rename = "maxItems")]
    pub max_items: i64,
    /// Set a Question and Answer content limit for the maximum number of deep-learning Q&A items this source can contain.  A value of zero (0) indicates no limits.
    #[serde(rename = "maxBotItems")]
    pub max_bot_items: i64,
    /// Does this source require custom render templates or use ordinary search-results?
    #[serde(rename = "customRender")]
    pub custom_render: bool,
    /// The associated Edge device for this source (or empty string if not associated with one)
    #[serde(rename = "edgeDeviceId")]
    pub edge_device_id: String,
    /// the default threshold for matching deep-learning vector matching results (value should be between 0.7 and 0.99)
    #[serde(rename = "qaMatchStrength")]
    pub qa_match_strength: f32,
    /// the default number of search results to return from the semantic-search system
    #[serde(rename = "numResults")]
    pub num_results: i32,
    /// the number of fragments to return per search-result from the semantic-search system.  Affects accuracy, a value of \"1\" will only look at the first match.  Higher values look for more matches inside a single document.  Too high a value will affect performance.  Default value \"3\".
    #[serde(rename = "numFragments")]
    pub num_fragments: i32,
    /// the number of errors from the last source-run
    #[serde(rename = "numErrors")]
    pub num_errors: i32,
    /// the number of errors allowed before failing the source and not force-removing any files at the end of a run through an external source.
    #[serde(rename = "errorThreshold")]
    pub error_threshold: i32,
    /// when the last run of this source started
    #[serde(rename = "startTime")]
    pub start_time: i64,
    /// when the last run of this source finished
    #[serde(rename = "endTime")]
    pub end_time: i64,
    /// A list for overwriting security permission for a source.  Can be empty.  Use this to override security on external systems.
    #[serde(rename = "acls")]
    pub acls: Vec<crate::models::CmDocumentAcl>,
    /// \"true\" if this source busy/active.
    #[serde(rename = "isCrawling")]
    pub is_crawling: bool,
    /// the number of documents seen by the crawler thus-far.
    #[serde(rename = "numCrawledDocuments")]
    pub num_crawled_documents: i32,
    /// the number of documents converted by SimSage thus-far.
    #[serde(rename = "numConvertedDocuments")]
    pub num_converted_documents: i32,
    /// the number of documents parsed by SimSage thus-far.
    #[serde(rename = "numParsedDocuments")]
    pub num_parsed_documents: i32,
    /// the number of documents indexed by SimSage thus-far.
    #[serde(rename = "numIndexedDocuments")]
    pub num_indexed_documents: i32,
    /// the number of finished (fully processed) by SimSage thus-far.
    #[serde(rename = "numFinishedDocuments")]
    pub num_finished_documents: i32,
    /// the number of errored documents by SimSage thus-far.
    #[serde(rename = "numErroredDocuments")]
    pub num_errored_documents: i32,
    /// the total number of documents for this source in SimSage.
    #[serde(rename = "numTotalDocuments")]
    pub num_total_documents: i32,
    /// the total number of documents for this source marked as errored in SimSage.
    #[serde(rename = "numTotalErroredDocuments")]
    pub num_total_errored_documents: i32,
    /// \"true\" if this source is to use the default (built-in) SimSage relationships.  All user-defined relationships and language-entities will be used regardless of the value of this flag.
    #[serde(rename = "useDefaultRelationships")]
    pub use_default_relationships: bool,
    /// \"true\" if this source is currently being optimized / processed by the index-optimizer.
    #[serde(rename = "isBusy")]
    pub is_busy: bool,
    /// Do we run the index-optimizer automatically after this source finishes crawling?
    #[serde(rename = "autoOptimize")]
    pub auto_optimize: bool,
    /// \"true\" if this source is to store all documents locally on the SimSage platform
    #[serde(rename = "storeBinary")]
    pub store_binary: bool,
    /// \"true\" if this source is to store all versions of documents locally on the SimSage platform
    #[serde(rename = "versioned")]
    pub versioned: bool,
    /// \"true\" if this source is to write any changes direct to Cassandra, otherwise this source will collect indexes on disk first (for initial loading)
    #[serde(rename = "writeToCassandra")]
    pub write_to_cassandra: bool,
    /// Json string defining any optional processors configured on the source
    #[serde(rename = "processorConfig")]
    pub processor_config: String,
    /// enable document similarity calculations.
    #[serde(rename = "enableDocumentSimilarity")]
    pub enable_document_similarity: bool,
    /// the document similarity threshold for grouping documents, a value between 0.75 and 1.0
    #[serde(rename = "documentSimilarityThreshold")]
    pub document_similarity_threshold: f32,
    /// is this crawler to be connected as an external source using our external crawler software?
    #[serde(rename = "isExternal")]
    pub is_external: bool,
    /// enable OCR processing for files in this source?
    #[serde(rename = "useOCR")]
    pub use_ocr: bool,
    /// enable Speech-to-text processing for files in this source?
    #[serde(rename = "useSTT")]
    pub use_stt: bool,
    /// A saved value indicating last crawler state
    #[serde(rename = "deltaIndicator")]
    pub delta_indicator: String,
    /// enabling sending of logs to SimSage for external crawlers
    #[serde(rename = "transmitExternalLogs")]
    pub transmit_external_logs: bool,
    #[serde(rename = "external", skip_serializing_if = "Option::is_none")]
    pub external: Option<bool>,
    #[serde(rename = "crawling", skip_serializing_if = "Option::is_none")]
    pub crawling: Option<bool>,
    #[serde(rename = "busy", skip_serializing_if = "Option::is_none")]
    pub busy: Option<bool>,
}

impl CmSource {
    /// A SimSage source object used for updating and creating SimSage crawlers/connections to external silos like Sharepoint, OneDrive, Exchange, DropBox, Box, iManage, and others.
    pub fn new(source_id: i32, organisation_id: String, kb_id: String, node_id: i32, name: String, crawler_type: String, schedule: String, delete_files: bool, allow_anonymous: bool, processing_level: String, enable_preview: bool, files_per_second: f32, specific_json: String, session_id: String, max_items: i64, max_bot_items: i64, custom_render: bool, edge_device_id: String, qa_match_strength: f32, num_results: i32, num_fragments: i32, num_errors: i32, error_threshold: i32, start_time: i64, end_time: i64, acls: Vec<crate::models::CmDocumentAcl>, is_crawling: bool, num_crawled_documents: i32, num_converted_documents: i32, num_parsed_documents: i32, num_indexed_documents: i32, num_finished_documents: i32, num_errored_documents: i32, num_total_documents: i32, num_total_errored_documents: i32, use_default_relationships: bool, is_busy: bool, auto_optimize: bool, store_binary: bool, versioned: bool, write_to_cassandra: bool, processor_config: String, enable_document_similarity: bool, document_similarity_threshold: f32, is_external: bool, use_ocr: bool, use_stt: bool, delta_indicator: String, transmit_external_logs: bool) -> CmSource {
        CmSource {
            source_id,
            organisation_id,
            kb_id,
            node_id,
            name,
            crawler_type,
            schedule,
            delete_files,
            allow_anonymous,
            processing_level,
            enable_preview,
            files_per_second,
            specific_json,
            session_id,
            max_items,
            max_bot_items,
            custom_render,
            edge_device_id,
            qa_match_strength,
            num_results,
            num_fragments,
            num_errors,
            error_threshold,
            start_time,
            end_time,
            acls,
            is_crawling,
            num_crawled_documents,
            num_converted_documents,
            num_parsed_documents,
            num_indexed_documents,
            num_finished_documents,
            num_errored_documents,
            num_total_documents,
            num_total_errored_documents,
            use_default_relationships,
            is_busy,
            auto_optimize,
            store_binary,
            versioned,
            write_to_cassandra,
            processor_config,
            enable_document_similarity,
            document_similarity_threshold,
            is_external,
            use_ocr,
            use_stt,
            delta_indicator,
            transmit_external_logs,
            external: None,
            crawling: None,
            busy: None,
        }
    }
}


