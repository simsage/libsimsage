/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GdprProject {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "createdBy")]
    pub created_by: String,
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: String,
    #[serde(rename = "created")]
    pub created: String,
    #[serde(rename = "lastModified")]
    pub last_modified: String,
    #[serde(rename = "lastResultUpdate", skip_serializing_if = "Option::is_none")]
    pub last_result_update: Option<String>,
    #[serde(rename = "projectType")]
    pub project_type: ProjectType,
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "searchDetails")]
    pub search_details: Box<crate::models::CmGdprSearchDetails>,
}

impl GdprProject {
    pub fn new(created_by: String, last_modified_by: String, created: String, last_modified: String, project_type: ProjectType, status: Status, search_details: crate::models::CmGdprSearchDetails) -> GdprProject {
        GdprProject {
            id: None,
            created_by,
            last_modified_by,
            created,
            last_modified,
            last_result_update: None,
            project_type,
            status,
            search_details: Box::new(search_details),
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProjectType {
    #[serde(rename = "FREESTYLE")]
    Freestyle,
    #[serde(rename = "RIGHT_TO_BE_FORGOTTEN_REQUEST")]
    RightToBeForgottenRequest,
    #[serde(rename = "DATA_ACCESS_REQUEST")]
    DataAccessRequest,
}

impl Default for ProjectType {
    fn default() -> ProjectType {
        Self::Freestyle
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "NEW")]
    New,
    #[serde(rename = "IN_PROGRESS")]
    InProgress,
    #[serde(rename = "COMPLETED")]
    Completed,
}

impl Default for Status {
    fn default() -> Status {
        Self::New
    }
}

