/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CmProjectDefinition {
    #[serde(rename = "projectId", skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(rename = "taskId", skip_serializing_if = "Option::is_none")]
    pub task_id: Option<String>,
    #[serde(rename = "organisationId")]
    pub organisation_id: String,
    #[serde(rename = "projectFrame")]
    pub project_frame: Box<crate::models::CmProjectFrame>,
    #[serde(rename = "keyedSearchTerms", skip_serializing_if = "Option::is_none")]
    pub keyed_search_terms: Option<Vec<crate::models::CmKeyedSearchTerm>>,
    #[serde(rename = "semanticTerms", skip_serializing_if = "Option::is_none")]
    pub semantic_terms: Option<Vec<crate::models::CmSemanticTerm>>,
    #[serde(rename = "filters")]
    pub filters: Box<crate::models::CmFilter>,
    #[serde(rename = "validationResult", skip_serializing_if = "Option::is_none")]
    pub validation_result: Option<::std::collections::HashMap<String, bool>>,
}

impl CmProjectDefinition {
    pub fn new(organisation_id: String, project_frame: crate::models::CmProjectFrame, filters: crate::models::CmFilter) -> CmProjectDefinition {
        CmProjectDefinition {
            project_id: None,
            task_id: None,
            organisation_id,
            project_frame: Box::new(project_frame),
            keyed_search_terms: None,
            semantic_terms: None,
            filters: Box::new(filters),
            validation_result: None,
        }
    }
}


