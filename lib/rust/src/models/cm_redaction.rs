/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CmRedaction {
    #[serde(rename = "redactionType")]
    pub redaction_type: RedactionType,
    #[serde(rename = "typeKey")]
    pub type_key: String,
    #[serde(rename = "value")]
    pub value: String,
    #[serde(rename = "page")]
    pub page: i32,
    #[serde(rename = "height")]
    pub height: f64,
    #[serde(rename = "left")]
    pub left: f64,
    #[serde(rename = "top")]
    pub top: f64,
    #[serde(rename = "width")]
    pub width: f64,
}

impl CmRedaction {
    pub fn new(redaction_type: RedactionType, type_key: String, value: String, page: i32, height: f64, left: f64, top: f64, width: f64) -> CmRedaction {
        CmRedaction {
            redaction_type,
            type_key,
            value,
            page,
            height,
            left,
            top,
            width,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RedactionType {
    #[serde(rename = "SEARCH")]
    Search,
    #[serde(rename = "SEMANTIC")]
    Semantic,
    #[serde(rename = "MANUAL")]
    Manual,
}

impl Default for RedactionType {
    fn default() -> RedactionType {
        Self::Search
    }
}

