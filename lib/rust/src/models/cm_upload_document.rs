/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.14.12
 * Contact: info@simsage.co.uk
 * Generated by: https://openapi-generator.tech
 */

/// CmUploadDocument : An external document representation object.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CmUploadDocument {
    /// the type of this class, just in case this object is encrypted
    #[serde(rename = "objectType")]
    pub object_type: String,
    /// the organisation (its guid id) this document should go into.
    #[serde(rename = "organisationId")]
    pub organisation_id: String,
    /// the knowledge-base (its guid id) this document should go into.
    #[serde(rename = "kbId")]
    pub kb_id: String,
    /// the security-id (a guid) of the knowledge-base.  This is effectively the shared secret between SimSage and the external-crawler system.
    #[serde(rename = "sid")]
    pub sid: String,
    /// the source-id of this crawler (ie. the crawler's id) this document came from.
    #[serde(rename = "sourceId")]
    pub source_id: i32,
    /// A unique URL for this document.
    #[serde(rename = "url")]
    pub url: String,
    /// The mime-type of this document, must be a known-datatype to SimSage.
    #[serde(rename = "mimeType")]
    pub mime_type: String,
    /// The Pronom Unique ID for this document.
    #[serde(rename = "puid")]
    pub puid: String,
    /// A list of security permission for this document.  Can be empty (ie. no security applied).
    #[serde(rename = "acls")]
    pub acls: String,
    /// The title of this document, can be empty.
    #[serde(rename = "title")]
    pub title: String,
    /// The author of this document, can be empty.
    #[serde(rename = "author")]
    pub author: String,
    /// A unique hash-string identifying the change state of this document.  This can be any hash-function you choose.  SimSage uses the value to see if the content has changed since last.
    #[serde(rename = "changeHash")]
    pub change_hash: String,
    /// A unique hash-string identifying the contents this document.  This can be any hash-function you choose.  SimSage uses this value for exact duplicate detection.
    #[serde(rename = "contentHash")]
    pub content_hash: String,
    /// the base64 encoded content of this document.  Must be prefixed with ';base64,', can be empty indicating the content wasn't valid.
    #[serde(rename = "data")]
    pub data: String,
    /// the binary-size of the document in bytes if data is not set.
    #[serde(rename = "binarySize")]
    pub binary_size: i32,
    /// the text content of the asset (if set).
    #[serde(rename = "text")]
    pub text: String,
    /// a unix-timestamp of the creation date-time of this document
    #[serde(rename = "created")]
    pub created: i64,
    /// a unix-timestamp of the last-modified date-time of this document
    #[serde(rename = "lastModified")]
    pub last_modified: i64,
    /// a series of name values for other metadata values found in the container of this document
    #[serde(rename = "metadata")]
    pub metadata: ::std::collections::HashMap<String, String>,
    /// A list of special SimSage metadata categories for matching this document with.  Can be empty.
    #[serde(rename = "categories")]
    pub categories: Vec<crate::models::MdMetadataMapping>,
    /// The size of this document (the original) in bytes
    #[serde(rename = "size")]
    pub size: i64,
    /// A render template for this document.  This is only appropriate for Database and RESTful type sources.
    #[serde(rename = "template")]
    pub template: String,
    /// Do we need to add transport encryption
    #[serde(rename = "encrypted")]
    pub encrypted: bool,
    /// The seed used if encrypted
    #[serde(rename = "seed")]
    pub seed: i32,
    /// the id (a unix timestamp) of the current 'go through the source once'.  This is a unique per-run identifier.
    #[serde(rename = "runId")]
    pub run_id: i64,
}

impl CmUploadDocument {
    /// An external document representation object.
    pub fn new(object_type: String, organisation_id: String, kb_id: String, sid: String, source_id: i32, url: String, mime_type: String, puid: String, acls: String, title: String, author: String, change_hash: String, content_hash: String, data: String, binary_size: i32, text: String, created: i64, last_modified: i64, metadata: ::std::collections::HashMap<String, String>, categories: Vec<crate::models::MdMetadataMapping>, size: i64, template: String, encrypted: bool, seed: i32, run_id: i64) -> CmUploadDocument {
        CmUploadDocument {
            object_type,
            organisation_id,
            kb_id,
            sid,
            source_id,
            url,
            mime_type,
            puid,
            acls,
            title,
            author,
            change_hash,
            content_hash,
            data,
            binary_size,
            text,
            created,
            last_modified,
            metadata,
            categories,
            size,
            template,
            encrypted,
            seed,
            run_id,
        }
    }
}


