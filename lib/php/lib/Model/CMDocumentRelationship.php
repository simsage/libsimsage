<?php
/**
 * CMDocumentRelationship
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.14.12
 * Contact: info@simsage.co.uk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CMDocumentRelationship Class Doc Comment
 *
 * @category Class
 * @description A document that related to this document in some fashion (parent or child)
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CMDocumentRelationship implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CMDocumentRelationship';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'url_id' => 'int',
        'is_child' => 'bool',
        'related_url_id' => 'int',
        'related_url' => 'string',
        'web_url' => 'string',
        'title' => 'string',
        'binary_size' => 'int',
        'document_type' => 'string',
        'created' => 'int',
        'last_modified' => 'int',
        'child' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'url_id' => 'int32',
        'is_child' => null,
        'related_url_id' => 'int32',
        'related_url' => null,
        'web_url' => null,
        'title' => null,
        'binary_size' => 'int64',
        'document_type' => null,
        'created' => 'int64',
        'last_modified' => 'int64',
        'child' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'url_id' => false,
		'is_child' => false,
		'related_url_id' => false,
		'related_url' => false,
		'web_url' => false,
		'title' => false,
		'binary_size' => false,
		'document_type' => false,
		'created' => false,
		'last_modified' => false,
		'child' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url_id' => 'urlId',
        'is_child' => 'isChild',
        'related_url_id' => 'relatedUrlId',
        'related_url' => 'relatedUrl',
        'web_url' => 'webUrl',
        'title' => 'title',
        'binary_size' => 'binarySize',
        'document_type' => 'documentType',
        'created' => 'created',
        'last_modified' => 'lastModified',
        'child' => 'child'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url_id' => 'setUrlId',
        'is_child' => 'setIsChild',
        'related_url_id' => 'setRelatedUrlId',
        'related_url' => 'setRelatedUrl',
        'web_url' => 'setWebUrl',
        'title' => 'setTitle',
        'binary_size' => 'setBinarySize',
        'document_type' => 'setDocumentType',
        'created' => 'setCreated',
        'last_modified' => 'setLastModified',
        'child' => 'setChild'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url_id' => 'getUrlId',
        'is_child' => 'getIsChild',
        'related_url_id' => 'getRelatedUrlId',
        'related_url' => 'getRelatedUrl',
        'web_url' => 'getWebUrl',
        'title' => 'getTitle',
        'binary_size' => 'getBinarySize',
        'document_type' => 'getDocumentType',
        'created' => 'getCreated',
        'last_modified' => 'getLastModified',
        'child' => 'getChild'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('url_id', $data ?? [], null);
        $this->setIfExists('is_child', $data ?? [], null);
        $this->setIfExists('related_url_id', $data ?? [], null);
        $this->setIfExists('related_url', $data ?? [], null);
        $this->setIfExists('web_url', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('binary_size', $data ?? [], null);
        $this->setIfExists('document_type', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('last_modified', $data ?? [], null);
        $this->setIfExists('child', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['url_id'] === null) {
            $invalidProperties[] = "'url_id' can't be null";
        }
        if ($this->container['is_child'] === null) {
            $invalidProperties[] = "'is_child' can't be null";
        }
        if ($this->container['related_url_id'] === null) {
            $invalidProperties[] = "'related_url_id' can't be null";
        }
        if ($this->container['related_url'] === null) {
            $invalidProperties[] = "'related_url' can't be null";
        }
        if ($this->container['web_url'] === null) {
            $invalidProperties[] = "'web_url' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['binary_size'] === null) {
            $invalidProperties[] = "'binary_size' can't be null";
        }
        if ($this->container['document_type'] === null) {
            $invalidProperties[] = "'document_type' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['last_modified'] === null) {
            $invalidProperties[] = "'last_modified' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url_id
     *
     * @return int
     */
    public function getUrlId()
    {
        return $this->container['url_id'];
    }

    /**
     * Sets url_id
     *
     * @param int $url_id the url-id of this document
     *
     * @return self
     */
    public function setUrlId($url_id)
    {
        if (is_null($url_id)) {
            throw new \InvalidArgumentException('non-nullable url_id cannot be null');
        }
        $this->container['url_id'] = $url_id;

        return $this;
    }

    /**
     * Gets is_child
     *
     * @return bool
     */
    public function getIsChild()
    {
        return $this->container['is_child'];
    }

    /**
     * Sets is_child
     *
     * @param bool $is_child if true, this is a child relationship, otherwise a parent relationship
     *
     * @return self
     */
    public function setIsChild($is_child)
    {
        if (is_null($is_child)) {
            throw new \InvalidArgumentException('non-nullable is_child cannot be null');
        }
        $this->container['is_child'] = $is_child;

        return $this;
    }

    /**
     * Gets related_url_id
     *
     * @return int
     */
    public function getRelatedUrlId()
    {
        return $this->container['related_url_id'];
    }

    /**
     * Sets related_url_id
     *
     * @param int $related_url_id the related document's id
     *
     * @return self
     */
    public function setRelatedUrlId($related_url_id)
    {
        if (is_null($related_url_id)) {
            throw new \InvalidArgumentException('non-nullable related_url_id cannot be null');
        }
        $this->container['related_url_id'] = $related_url_id;

        return $this;
    }

    /**
     * Gets related_url
     *
     * @return string
     */
    public function getRelatedUrl()
    {
        return $this->container['related_url'];
    }

    /**
     * Sets related_url
     *
     * @param string $related_url the url of the related document
     *
     * @return self
     */
    public function setRelatedUrl($related_url)
    {
        if (is_null($related_url)) {
            throw new \InvalidArgumentException('non-nullable related_url cannot be null');
        }
        $this->container['related_url'] = $related_url;

        return $this;
    }

    /**
     * Gets web_url
     *
     * @return string
     */
    public function getWebUrl()
    {
        return $this->container['web_url'];
    }

    /**
     * Sets web_url
     *
     * @param string $web_url the web-url (if set) if there is a web-link for this document
     *
     * @return self
     */
    public function setWebUrl($web_url)
    {
        if (is_null($web_url)) {
            throw new \InvalidArgumentException('non-nullable web_url cannot be null');
        }
        $this->container['web_url'] = $web_url;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title the title of the related document for display
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets binary_size
     *
     * @return int
     */
    public function getBinarySize()
    {
        return $this->container['binary_size'];
    }

    /**
     * Sets binary_size
     *
     * @param int $binary_size size in bytes of the related document
     *
     * @return self
     */
    public function setBinarySize($binary_size)
    {
        if (is_null($binary_size)) {
            throw new \InvalidArgumentException('non-nullable binary_size cannot be null');
        }
        $this->container['binary_size'] = $binary_size;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string $document_type the type of the related document
     *
     * @return self
     */
    public function setDocumentType($document_type)
    {
        if (is_null($document_type)) {
            throw new \InvalidArgumentException('non-nullable document_type cannot be null');
        }
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets created
     *
     * @return int
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param int $created The unix creation date-time of the related item
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets last_modified
     *
     * @return int
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     *
     * @param int $last_modified The unix last-modified date-time of the related item
     *
     * @return self
     */
    public function setLastModified($last_modified)
    {
        if (is_null($last_modified)) {
            throw new \InvalidArgumentException('non-nullable last_modified cannot be null');
        }
        $this->container['last_modified'] = $last_modified;

        return $this;
    }

    /**
     * Gets child
     *
     * @return bool|null
     */
    public function getChild()
    {
        return $this->container['child'];
    }

    /**
     * Sets child
     *
     * @param bool|null $child child
     *
     * @return self
     */
    public function setChild($child)
    {
        if (is_null($child)) {
            throw new \InvalidArgumentException('non-nullable child cannot be null');
        }
        $this->container['child'] = $child;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


