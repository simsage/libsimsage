<?php
/**
 * CMTaskInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.13.31
 * Contact: info@simsage.co.uk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CMTaskInfo Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CMTaskInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CMTaskInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'task_id' => 'string',
        'project_id' => 'string',
        'organisation_id' => 'string',
        'source_kb_id' => 'string',
        'crawler_kb_id' => 'string',
        'project_type' => 'string',
        'project_title' => 'string',
        'project_narrative' => 'string',
        'slice_id' => 'string',
        'process_id' => 'string',
        'process_name' => 'string',
        'task_type' => 'string',
        'task_name' => 'string',
        'date_created' => '\DateTime',
        'date_completed' => '\DateTime',
        'potential_users' => 'string',
        'excluded_users' => 'string',
        'potential_groups' => 'string',
        'assigned_user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'task_id' => null,
        'project_id' => null,
        'organisation_id' => null,
        'source_kb_id' => null,
        'crawler_kb_id' => null,
        'project_type' => null,
        'project_title' => null,
        'project_narrative' => null,
        'slice_id' => null,
        'process_id' => null,
        'process_name' => null,
        'task_type' => null,
        'task_name' => null,
        'date_created' => 'date-time',
        'date_completed' => 'date-time',
        'potential_users' => null,
        'excluded_users' => null,
        'potential_groups' => null,
        'assigned_user' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'task_id' => false,
		'project_id' => false,
		'organisation_id' => false,
		'source_kb_id' => false,
		'crawler_kb_id' => false,
		'project_type' => false,
		'project_title' => false,
		'project_narrative' => false,
		'slice_id' => false,
		'process_id' => false,
		'process_name' => false,
		'task_type' => false,
		'task_name' => false,
		'date_created' => false,
		'date_completed' => false,
		'potential_users' => false,
		'excluded_users' => false,
		'potential_groups' => false,
		'assigned_user' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'task_id' => 'taskId',
        'project_id' => 'projectId',
        'organisation_id' => 'organisationId',
        'source_kb_id' => 'sourceKbId',
        'crawler_kb_id' => 'crawlerKbId',
        'project_type' => 'projectType',
        'project_title' => 'projectTitle',
        'project_narrative' => 'projectNarrative',
        'slice_id' => 'sliceId',
        'process_id' => 'processId',
        'process_name' => 'processName',
        'task_type' => 'taskType',
        'task_name' => 'taskName',
        'date_created' => 'dateCreated',
        'date_completed' => 'dateCompleted',
        'potential_users' => 'potentialUsers',
        'excluded_users' => 'excludedUsers',
        'potential_groups' => 'potentialGroups',
        'assigned_user' => 'assignedUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'task_id' => 'setTaskId',
        'project_id' => 'setProjectId',
        'organisation_id' => 'setOrganisationId',
        'source_kb_id' => 'setSourceKbId',
        'crawler_kb_id' => 'setCrawlerKbId',
        'project_type' => 'setProjectType',
        'project_title' => 'setProjectTitle',
        'project_narrative' => 'setProjectNarrative',
        'slice_id' => 'setSliceId',
        'process_id' => 'setProcessId',
        'process_name' => 'setProcessName',
        'task_type' => 'setTaskType',
        'task_name' => 'setTaskName',
        'date_created' => 'setDateCreated',
        'date_completed' => 'setDateCompleted',
        'potential_users' => 'setPotentialUsers',
        'excluded_users' => 'setExcludedUsers',
        'potential_groups' => 'setPotentialGroups',
        'assigned_user' => 'setAssignedUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'task_id' => 'getTaskId',
        'project_id' => 'getProjectId',
        'organisation_id' => 'getOrganisationId',
        'source_kb_id' => 'getSourceKbId',
        'crawler_kb_id' => 'getCrawlerKbId',
        'project_type' => 'getProjectType',
        'project_title' => 'getProjectTitle',
        'project_narrative' => 'getProjectNarrative',
        'slice_id' => 'getSliceId',
        'process_id' => 'getProcessId',
        'process_name' => 'getProcessName',
        'task_type' => 'getTaskType',
        'task_name' => 'getTaskName',
        'date_created' => 'getDateCreated',
        'date_completed' => 'getDateCompleted',
        'potential_users' => 'getPotentialUsers',
        'excluded_users' => 'getExcludedUsers',
        'potential_groups' => 'getPotentialGroups',
        'assigned_user' => 'getAssignedUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('task_id', $data ?? [], null);
        $this->setIfExists('project_id', $data ?? [], null);
        $this->setIfExists('organisation_id', $data ?? [], null);
        $this->setIfExists('source_kb_id', $data ?? [], null);
        $this->setIfExists('crawler_kb_id', $data ?? [], null);
        $this->setIfExists('project_type', $data ?? [], null);
        $this->setIfExists('project_title', $data ?? [], null);
        $this->setIfExists('project_narrative', $data ?? [], null);
        $this->setIfExists('slice_id', $data ?? [], null);
        $this->setIfExists('process_id', $data ?? [], null);
        $this->setIfExists('process_name', $data ?? [], null);
        $this->setIfExists('task_type', $data ?? [], null);
        $this->setIfExists('task_name', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('date_completed', $data ?? [], null);
        $this->setIfExists('potential_users', $data ?? [], null);
        $this->setIfExists('excluded_users', $data ?? [], null);
        $this->setIfExists('potential_groups', $data ?? [], null);
        $this->setIfExists('assigned_user', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['task_id'] === null) {
            $invalidProperties[] = "'task_id' can't be null";
        }
        if ($this->container['project_id'] === null) {
            $invalidProperties[] = "'project_id' can't be null";
        }
        if ($this->container['organisation_id'] === null) {
            $invalidProperties[] = "'organisation_id' can't be null";
        }
        if ($this->container['source_kb_id'] === null) {
            $invalidProperties[] = "'source_kb_id' can't be null";
        }
        if ($this->container['project_type'] === null) {
            $invalidProperties[] = "'project_type' can't be null";
        }
        if ($this->container['project_title'] === null) {
            $invalidProperties[] = "'project_title' can't be null";
        }
        if ($this->container['project_narrative'] === null) {
            $invalidProperties[] = "'project_narrative' can't be null";
        }
        if ($this->container['process_id'] === null) {
            $invalidProperties[] = "'process_id' can't be null";
        }
        if ($this->container['process_name'] === null) {
            $invalidProperties[] = "'process_name' can't be null";
        }
        if ($this->container['task_type'] === null) {
            $invalidProperties[] = "'task_type' can't be null";
        }
        if ($this->container['task_name'] === null) {
            $invalidProperties[] = "'task_name' can't be null";
        }
        if ($this->container['date_created'] === null) {
            $invalidProperties[] = "'date_created' can't be null";
        }
        if ($this->container['potential_users'] === null) {
            $invalidProperties[] = "'potential_users' can't be null";
        }
        if ($this->container['excluded_users'] === null) {
            $invalidProperties[] = "'excluded_users' can't be null";
        }
        if ($this->container['potential_groups'] === null) {
            $invalidProperties[] = "'potential_groups' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets task_id
     *
     * @return string
     */
    public function getTaskId()
    {
        return $this->container['task_id'];
    }

    /**
     * Sets task_id
     *
     * @param string $task_id task_id
     *
     * @return self
     */
    public function setTaskId($task_id)
    {
        if (is_null($task_id)) {
            throw new \InvalidArgumentException('non-nullable task_id cannot be null');
        }
        $this->container['task_id'] = $task_id;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string $project_id project_id
     *
     * @return self
     */
    public function setProjectId($project_id)
    {
        if (is_null($project_id)) {
            throw new \InvalidArgumentException('non-nullable project_id cannot be null');
        }
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets organisation_id
     *
     * @return string
     */
    public function getOrganisationId()
    {
        return $this->container['organisation_id'];
    }

    /**
     * Sets organisation_id
     *
     * @param string $organisation_id organisation_id
     *
     * @return self
     */
    public function setOrganisationId($organisation_id)
    {
        if (is_null($organisation_id)) {
            throw new \InvalidArgumentException('non-nullable organisation_id cannot be null');
        }
        $this->container['organisation_id'] = $organisation_id;

        return $this;
    }

    /**
     * Gets source_kb_id
     *
     * @return string
     */
    public function getSourceKbId()
    {
        return $this->container['source_kb_id'];
    }

    /**
     * Sets source_kb_id
     *
     * @param string $source_kb_id source_kb_id
     *
     * @return self
     */
    public function setSourceKbId($source_kb_id)
    {
        if (is_null($source_kb_id)) {
            throw new \InvalidArgumentException('non-nullable source_kb_id cannot be null');
        }
        $this->container['source_kb_id'] = $source_kb_id;

        return $this;
    }

    /**
     * Gets crawler_kb_id
     *
     * @return string|null
     */
    public function getCrawlerKbId()
    {
        return $this->container['crawler_kb_id'];
    }

    /**
     * Sets crawler_kb_id
     *
     * @param string|null $crawler_kb_id crawler_kb_id
     *
     * @return self
     */
    public function setCrawlerKbId($crawler_kb_id)
    {
        if (is_null($crawler_kb_id)) {
            throw new \InvalidArgumentException('non-nullable crawler_kb_id cannot be null');
        }
        $this->container['crawler_kb_id'] = $crawler_kb_id;

        return $this;
    }

    /**
     * Gets project_type
     *
     * @return string
     */
    public function getProjectType()
    {
        return $this->container['project_type'];
    }

    /**
     * Sets project_type
     *
     * @param string $project_type project_type
     *
     * @return self
     */
    public function setProjectType($project_type)
    {
        if (is_null($project_type)) {
            throw new \InvalidArgumentException('non-nullable project_type cannot be null');
        }
        $this->container['project_type'] = $project_type;

        return $this;
    }

    /**
     * Gets project_title
     *
     * @return string
     */
    public function getProjectTitle()
    {
        return $this->container['project_title'];
    }

    /**
     * Sets project_title
     *
     * @param string $project_title project_title
     *
     * @return self
     */
    public function setProjectTitle($project_title)
    {
        if (is_null($project_title)) {
            throw new \InvalidArgumentException('non-nullable project_title cannot be null');
        }
        $this->container['project_title'] = $project_title;

        return $this;
    }

    /**
     * Gets project_narrative
     *
     * @return string
     */
    public function getProjectNarrative()
    {
        return $this->container['project_narrative'];
    }

    /**
     * Sets project_narrative
     *
     * @param string $project_narrative project_narrative
     *
     * @return self
     */
    public function setProjectNarrative($project_narrative)
    {
        if (is_null($project_narrative)) {
            throw new \InvalidArgumentException('non-nullable project_narrative cannot be null');
        }
        $this->container['project_narrative'] = $project_narrative;

        return $this;
    }

    /**
     * Gets slice_id
     *
     * @return string|null
     */
    public function getSliceId()
    {
        return $this->container['slice_id'];
    }

    /**
     * Sets slice_id
     *
     * @param string|null $slice_id slice_id
     *
     * @return self
     */
    public function setSliceId($slice_id)
    {
        if (is_null($slice_id)) {
            throw new \InvalidArgumentException('non-nullable slice_id cannot be null');
        }
        $this->container['slice_id'] = $slice_id;

        return $this;
    }

    /**
     * Gets process_id
     *
     * @return string
     */
    public function getProcessId()
    {
        return $this->container['process_id'];
    }

    /**
     * Sets process_id
     *
     * @param string $process_id process_id
     *
     * @return self
     */
    public function setProcessId($process_id)
    {
        if (is_null($process_id)) {
            throw new \InvalidArgumentException('non-nullable process_id cannot be null');
        }
        $this->container['process_id'] = $process_id;

        return $this;
    }

    /**
     * Gets process_name
     *
     * @return string
     */
    public function getProcessName()
    {
        return $this->container['process_name'];
    }

    /**
     * Sets process_name
     *
     * @param string $process_name process_name
     *
     * @return self
     */
    public function setProcessName($process_name)
    {
        if (is_null($process_name)) {
            throw new \InvalidArgumentException('non-nullable process_name cannot be null');
        }
        $this->container['process_name'] = $process_name;

        return $this;
    }

    /**
     * Gets task_type
     *
     * @return string
     */
    public function getTaskType()
    {
        return $this->container['task_type'];
    }

    /**
     * Sets task_type
     *
     * @param string $task_type task_type
     *
     * @return self
     */
    public function setTaskType($task_type)
    {
        if (is_null($task_type)) {
            throw new \InvalidArgumentException('non-nullable task_type cannot be null');
        }
        $this->container['task_type'] = $task_type;

        return $this;
    }

    /**
     * Gets task_name
     *
     * @return string
     */
    public function getTaskName()
    {
        return $this->container['task_name'];
    }

    /**
     * Sets task_name
     *
     * @param string $task_name task_name
     *
     * @return self
     */
    public function setTaskName($task_name)
    {
        if (is_null($task_name)) {
            throw new \InvalidArgumentException('non-nullable task_name cannot be null');
        }
        $this->container['task_name'] = $task_name;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_completed
     *
     * @return \DateTime|null
     */
    public function getDateCompleted()
    {
        return $this->container['date_completed'];
    }

    /**
     * Sets date_completed
     *
     * @param \DateTime|null $date_completed date_completed
     *
     * @return self
     */
    public function setDateCompleted($date_completed)
    {
        if (is_null($date_completed)) {
            throw new \InvalidArgumentException('non-nullable date_completed cannot be null');
        }
        $this->container['date_completed'] = $date_completed;

        return $this;
    }

    /**
     * Gets potential_users
     *
     * @return string
     */
    public function getPotentialUsers()
    {
        return $this->container['potential_users'];
    }

    /**
     * Sets potential_users
     *
     * @param string $potential_users potential_users
     *
     * @return self
     */
    public function setPotentialUsers($potential_users)
    {
        if (is_null($potential_users)) {
            throw new \InvalidArgumentException('non-nullable potential_users cannot be null');
        }
        $this->container['potential_users'] = $potential_users;

        return $this;
    }

    /**
     * Gets excluded_users
     *
     * @return string
     */
    public function getExcludedUsers()
    {
        return $this->container['excluded_users'];
    }

    /**
     * Sets excluded_users
     *
     * @param string $excluded_users excluded_users
     *
     * @return self
     */
    public function setExcludedUsers($excluded_users)
    {
        if (is_null($excluded_users)) {
            throw new \InvalidArgumentException('non-nullable excluded_users cannot be null');
        }
        $this->container['excluded_users'] = $excluded_users;

        return $this;
    }

    /**
     * Gets potential_groups
     *
     * @return string
     */
    public function getPotentialGroups()
    {
        return $this->container['potential_groups'];
    }

    /**
     * Sets potential_groups
     *
     * @param string $potential_groups potential_groups
     *
     * @return self
     */
    public function setPotentialGroups($potential_groups)
    {
        if (is_null($potential_groups)) {
            throw new \InvalidArgumentException('non-nullable potential_groups cannot be null');
        }
        $this->container['potential_groups'] = $potential_groups;

        return $this;
    }

    /**
     * Gets assigned_user
     *
     * @return string|null
     */
    public function getAssignedUser()
    {
        return $this->container['assigned_user'];
    }

    /**
     * Sets assigned_user
     *
     * @param string|null $assigned_user assigned_user
     *
     * @return self
     */
    public function setAssignedUser($assigned_user)
    {
        if (is_null($assigned_user)) {
            throw new \InvalidArgumentException('non-nullable assigned_user cannot be null');
        }
        $this->container['assigned_user'] = $assigned_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


