<?php
/**
 * CMLocatedRedaction
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.14.12
 * Contact: info@simsage.co.uk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CMLocatedRedaction Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CMLocatedRedaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CMLocatedRedaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'project_id' => 'string',
        'slice_id' => 'string',
        'document_key' => 'string',
        'redaction_type' => 'string',
        'query_id' => 'int',
        'word' => 'string',
        'redaction_key' => 'string',
        'is_redacted' => 'bool',
        'page' => 'int',
        'left' => 'float',
        'bottom' => 'float',
        'width' => 'float',
        'height' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'project_id' => null,
        'slice_id' => null,
        'document_key' => null,
        'redaction_type' => null,
        'query_id' => 'int32',
        'word' => null,
        'redaction_key' => null,
        'is_redacted' => null,
        'page' => 'int32',
        'left' => 'float',
        'bottom' => 'float',
        'width' => 'float',
        'height' => 'float'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'project_id' => false,
		'slice_id' => false,
		'document_key' => false,
		'redaction_type' => false,
		'query_id' => false,
		'word' => false,
		'redaction_key' => false,
		'is_redacted' => false,
		'page' => false,
		'left' => false,
		'bottom' => false,
		'width' => false,
		'height' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'project_id' => 'projectId',
        'slice_id' => 'sliceId',
        'document_key' => 'documentKey',
        'redaction_type' => 'redactionType',
        'query_id' => 'queryId',
        'word' => 'word',
        'redaction_key' => 'redactionKey',
        'is_redacted' => 'isRedacted',
        'page' => 'page',
        'left' => 'left',
        'bottom' => 'bottom',
        'width' => 'width',
        'height' => 'height'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'project_id' => 'setProjectId',
        'slice_id' => 'setSliceId',
        'document_key' => 'setDocumentKey',
        'redaction_type' => 'setRedactionType',
        'query_id' => 'setQueryId',
        'word' => 'setWord',
        'redaction_key' => 'setRedactionKey',
        'is_redacted' => 'setIsRedacted',
        'page' => 'setPage',
        'left' => 'setLeft',
        'bottom' => 'setBottom',
        'width' => 'setWidth',
        'height' => 'setHeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'project_id' => 'getProjectId',
        'slice_id' => 'getSliceId',
        'document_key' => 'getDocumentKey',
        'redaction_type' => 'getRedactionType',
        'query_id' => 'getQueryId',
        'word' => 'getWord',
        'redaction_key' => 'getRedactionKey',
        'is_redacted' => 'getIsRedacted',
        'page' => 'getPage',
        'left' => 'getLeft',
        'bottom' => 'getBottom',
        'width' => 'getWidth',
        'height' => 'getHeight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('project_id', $data ?? [], null);
        $this->setIfExists('slice_id', $data ?? [], null);
        $this->setIfExists('document_key', $data ?? [], null);
        $this->setIfExists('redaction_type', $data ?? [], null);
        $this->setIfExists('query_id', $data ?? [], null);
        $this->setIfExists('word', $data ?? [], null);
        $this->setIfExists('redaction_key', $data ?? [], null);
        $this->setIfExists('is_redacted', $data ?? [], null);
        $this->setIfExists('page', $data ?? [], null);
        $this->setIfExists('left', $data ?? [], null);
        $this->setIfExists('bottom', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['project_id'] === null) {
            $invalidProperties[] = "'project_id' can't be null";
        }
        if ($this->container['slice_id'] === null) {
            $invalidProperties[] = "'slice_id' can't be null";
        }
        if ($this->container['document_key'] === null) {
            $invalidProperties[] = "'document_key' can't be null";
        }
        if ($this->container['redaction_type'] === null) {
            $invalidProperties[] = "'redaction_type' can't be null";
        }
        if ($this->container['is_redacted'] === null) {
            $invalidProperties[] = "'is_redacted' can't be null";
        }
        if ($this->container['page'] === null) {
            $invalidProperties[] = "'page' can't be null";
        }
        if ($this->container['left'] === null) {
            $invalidProperties[] = "'left' can't be null";
        }
        if ($this->container['bottom'] === null) {
            $invalidProperties[] = "'bottom' can't be null";
        }
        if ($this->container['width'] === null) {
            $invalidProperties[] = "'width' can't be null";
        }
        if ($this->container['height'] === null) {
            $invalidProperties[] = "'height' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets project_id
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string $project_id project_id
     *
     * @return self
     */
    public function setProjectId($project_id)
    {
        if (is_null($project_id)) {
            throw new \InvalidArgumentException('non-nullable project_id cannot be null');
        }
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets slice_id
     *
     * @return string
     */
    public function getSliceId()
    {
        return $this->container['slice_id'];
    }

    /**
     * Sets slice_id
     *
     * @param string $slice_id slice_id
     *
     * @return self
     */
    public function setSliceId($slice_id)
    {
        if (is_null($slice_id)) {
            throw new \InvalidArgumentException('non-nullable slice_id cannot be null');
        }
        $this->container['slice_id'] = $slice_id;

        return $this;
    }

    /**
     * Gets document_key
     *
     * @return string
     */
    public function getDocumentKey()
    {
        return $this->container['document_key'];
    }

    /**
     * Sets document_key
     *
     * @param string $document_key document_key
     *
     * @return self
     */
    public function setDocumentKey($document_key)
    {
        if (is_null($document_key)) {
            throw new \InvalidArgumentException('non-nullable document_key cannot be null');
        }
        $this->container['document_key'] = $document_key;

        return $this;
    }

    /**
     * Gets redaction_type
     *
     * @return string
     */
    public function getRedactionType()
    {
        return $this->container['redaction_type'];
    }

    /**
     * Sets redaction_type
     *
     * @param string $redaction_type redaction_type
     *
     * @return self
     */
    public function setRedactionType($redaction_type)
    {
        if (is_null($redaction_type)) {
            throw new \InvalidArgumentException('non-nullable redaction_type cannot be null');
        }
        $this->container['redaction_type'] = $redaction_type;

        return $this;
    }

    /**
     * Gets query_id
     *
     * @return int|null
     */
    public function getQueryId()
    {
        return $this->container['query_id'];
    }

    /**
     * Sets query_id
     *
     * @param int|null $query_id query_id
     *
     * @return self
     */
    public function setQueryId($query_id)
    {
        if (is_null($query_id)) {
            throw new \InvalidArgumentException('non-nullable query_id cannot be null');
        }
        $this->container['query_id'] = $query_id;

        return $this;
    }

    /**
     * Gets word
     *
     * @return string|null
     */
    public function getWord()
    {
        return $this->container['word'];
    }

    /**
     * Sets word
     *
     * @param string|null $word word
     *
     * @return self
     */
    public function setWord($word)
    {
        if (is_null($word)) {
            throw new \InvalidArgumentException('non-nullable word cannot be null');
        }
        $this->container['word'] = $word;

        return $this;
    }

    /**
     * Gets redaction_key
     *
     * @return string|null
     */
    public function getRedactionKey()
    {
        return $this->container['redaction_key'];
    }

    /**
     * Sets redaction_key
     *
     * @param string|null $redaction_key redaction_key
     *
     * @return self
     */
    public function setRedactionKey($redaction_key)
    {
        if (is_null($redaction_key)) {
            throw new \InvalidArgumentException('non-nullable redaction_key cannot be null');
        }
        $this->container['redaction_key'] = $redaction_key;

        return $this;
    }

    /**
     * Gets is_redacted
     *
     * @return bool
     */
    public function getIsRedacted()
    {
        return $this->container['is_redacted'];
    }

    /**
     * Sets is_redacted
     *
     * @param bool $is_redacted is_redacted
     *
     * @return self
     */
    public function setIsRedacted($is_redacted)
    {
        if (is_null($is_redacted)) {
            throw new \InvalidArgumentException('non-nullable is_redacted cannot be null');
        }
        $this->container['is_redacted'] = $is_redacted;

        return $this;
    }

    /**
     * Gets page
     *
     * @return int
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param int $page page
     *
     * @return self
     */
    public function setPage($page)
    {
        if (is_null($page)) {
            throw new \InvalidArgumentException('non-nullable page cannot be null');
        }
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets left
     *
     * @return float
     */
    public function getLeft()
    {
        return $this->container['left'];
    }

    /**
     * Sets left
     *
     * @param float $left left
     *
     * @return self
     */
    public function setLeft($left)
    {
        if (is_null($left)) {
            throw new \InvalidArgumentException('non-nullable left cannot be null');
        }
        $this->container['left'] = $left;

        return $this;
    }

    /**
     * Gets bottom
     *
     * @return float
     */
    public function getBottom()
    {
        return $this->container['bottom'];
    }

    /**
     * Sets bottom
     *
     * @param float $bottom bottom
     *
     * @return self
     */
    public function setBottom($bottom)
    {
        if (is_null($bottom)) {
            throw new \InvalidArgumentException('non-nullable bottom cannot be null');
        }
        $this->container['bottom'] = $bottom;

        return $this;
    }

    /**
     * Gets width
     *
     * @return float
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param float $width width
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            throw new \InvalidArgumentException('non-nullable width cannot be null');
        }
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return float
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param float $height height
     *
     * @return self
     */
    public function setHeight($height)
    {
        if (is_null($height)) {
            throw new \InvalidArgumentException('non-nullable height cannot be null');
        }
        $this->container['height'] = $height;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


