<?php
/**
 * MDCategory
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MDCategory Class Doc Comment
 *
 * @category Class
 * @description A SimSage category is a metadata description in SimSage.  This object represents a single piece of categorical data that is uploaded to SimSage from external sources as part of a CMDocumentUpload request.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MDCategory implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MDCategory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'key' => 'string',
        'display' => 'string',
        'metadata' => 'string',
        'string_value_list' => 'string',
        'number_value_list' => 'string',
        'sort' => 'bool',
        'order' => 'int',
        'sort_default' => 'string',
        'sort_asc_text' => 'string',
        'sort_desc_text' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'key' => null,
        'display' => null,
        'metadata' => null,
        'string_value_list' => null,
        'number_value_list' => null,
        'sort' => null,
        'order' => 'int32',
        'sort_default' => null,
        'sort_asc_text' => null,
        'sort_desc_text' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'key' => false,
		'display' => false,
		'metadata' => false,
		'string_value_list' => false,
		'number_value_list' => false,
		'sort' => false,
		'order' => false,
		'sort_default' => false,
		'sort_asc_text' => false,
		'sort_desc_text' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key' => 'key',
        'display' => 'display',
        'metadata' => 'metadata',
        'string_value_list' => 'stringValueList',
        'number_value_list' => 'numberValueList',
        'sort' => 'sort',
        'order' => 'order',
        'sort_default' => 'sortDefault',
        'sort_asc_text' => 'sortAscText',
        'sort_desc_text' => 'sortDescText'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key' => 'setKey',
        'display' => 'setDisplay',
        'metadata' => 'setMetadata',
        'string_value_list' => 'setStringValueList',
        'number_value_list' => 'setNumberValueList',
        'sort' => 'setSort',
        'order' => 'setOrder',
        'sort_default' => 'setSortDefault',
        'sort_asc_text' => 'setSortAscText',
        'sort_desc_text' => 'setSortDescText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key' => 'getKey',
        'display' => 'getDisplay',
        'metadata' => 'getMetadata',
        'string_value_list' => 'getStringValueList',
        'number_value_list' => 'getNumberValueList',
        'sort' => 'getSort',
        'order' => 'getOrder',
        'sort_default' => 'getSortDefault',
        'sort_asc_text' => 'getSortAscText',
        'sort_desc_text' => 'getSortDescText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('key', $data ?? [], null);
        $this->setIfExists('display', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('string_value_list', $data ?? [], null);
        $this->setIfExists('number_value_list', $data ?? [], null);
        $this->setIfExists('sort', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('sort_default', $data ?? [], null);
        $this->setIfExists('sort_asc_text', $data ?? [], null);
        $this->setIfExists('sort_desc_text', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['key'] === null) {
            $invalidProperties[] = "'key' can't be null";
        }
        if ($this->container['display'] === null) {
            $invalidProperties[] = "'display' can't be null";
        }
        if ($this->container['metadata'] === null) {
            $invalidProperties[] = "'metadata' can't be null";
        }
        if ($this->container['string_value_list'] === null) {
            $invalidProperties[] = "'string_value_list' can't be null";
        }
        if ($this->container['number_value_list'] === null) {
            $invalidProperties[] = "'number_value_list' can't be null";
        }
        if ($this->container['sort'] === null) {
            $invalidProperties[] = "'sort' can't be null";
        }
        if ($this->container['order'] === null) {
            $invalidProperties[] = "'order' can't be null";
        }
        if ($this->container['sort_default'] === null) {
            $invalidProperties[] = "'sort_default' can't be null";
        }
        if ($this->container['sort_asc_text'] === null) {
            $invalidProperties[] = "'sort_asc_text' can't be null";
        }
        if ($this->container['sort_desc_text'] === null) {
            $invalidProperties[] = "'sort_desc_text' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets key
     *
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string $key The SimSage type of category
     *
     * @return self
     */
    public function setKey($key)
    {
        if (is_null($key)) {
            throw new \InvalidArgumentException('non-nullable key cannot be null');
        }
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets display
     *
     * @return string
     */
    public function getDisplay()
    {
        return $this->container['display'];
    }

    /**
     * Sets display
     *
     * @param string $display A friendly display name for any UI component rendering this component
     *
     * @return self
     */
    public function setDisplay($display)
    {
        if (is_null($display)) {
            throw new \InvalidArgumentException('non-nullable display cannot be null');
        }
        $this->container['display'] = $display;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string $metadata The metadata-name inside SimSage for this item.  Only a..z A..Z 0..9 and - are allowed as characters in this string.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets string_value_list
     *
     * @return string
     */
    public function getStringValueList()
    {
        return $this->container['string_value_list'];
    }

    /**
     * Sets string_value_list
     *
     * @param string $string_value_list A list of string values (if string based) for this metadata category item.  These are the values this document \"belongs to\"
     *
     * @return self
     */
    public function setStringValueList($string_value_list)
    {
        if (is_null($string_value_list)) {
            throw new \InvalidArgumentException('non-nullable string_value_list cannot be null');
        }
        $this->container['string_value_list'] = $string_value_list;

        return $this;
    }

    /**
     * Gets number_value_list
     *
     * @return string
     */
    public function getNumberValueList()
    {
        return $this->container['number_value_list'];
    }

    /**
     * Sets number_value_list
     *
     * @param string $number_value_list Alternatively, a list of numeric values (if number based) for this metadata category item.  These are the values this document \"belongs to\"
     *
     * @return self
     */
    public function setNumberValueList($number_value_list)
    {
        if (is_null($number_value_list)) {
            throw new \InvalidArgumentException('non-nullable number_value_list cannot be null');
        }
        $this->container['number_value_list'] = $number_value_list;

        return $this;
    }

    /**
     * Gets sort
     *
     * @return bool
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     *
     * @param bool $sort Is this category to be sort-able in the UI?
     *
     * @return self
     */
    public function setSort($sort)
    {
        if (is_null($sort)) {
            throw new \InvalidArgumentException('non-nullable sort cannot be null');
        }
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int $order What order does this item have in the UI display?
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets sort_default
     *
     * @return string
     */
    public function getSortDefault()
    {
        return $this->container['sort_default'];
    }

    /**
     * Sets sort_default
     *
     * @param string $sort_default Is this item THE default sort item in the UI, and if so, is it ascending (asc) or descending (desc).  Not the default sort if empty.
     *
     * @return self
     */
    public function setSortDefault($sort_default)
    {
        if (is_null($sort_default)) {
            throw new \InvalidArgumentException('non-nullable sort_default cannot be null');
        }
        $this->container['sort_default'] = $sort_default;

        return $this;
    }

    /**
     * Gets sort_asc_text
     *
     * @return string
     */
    public function getSortAscText()
    {
        return $this->container['sort_asc_text'];
    }

    /**
     * Sets sort_asc_text
     *
     * @param string $sort_asc_text If sortable, what label should the UI display for ascending sort?
     *
     * @return self
     */
    public function setSortAscText($sort_asc_text)
    {
        if (is_null($sort_asc_text)) {
            throw new \InvalidArgumentException('non-nullable sort_asc_text cannot be null');
        }
        $this->container['sort_asc_text'] = $sort_asc_text;

        return $this;
    }

    /**
     * Gets sort_desc_text
     *
     * @return string
     */
    public function getSortDescText()
    {
        return $this->container['sort_desc_text'];
    }

    /**
     * Sets sort_desc_text
     *
     * @param string $sort_desc_text If sortable, what label should the UI display for descending sort?
     *
     * @return self
     */
    public function setSortDescText($sort_desc_text)
    {
        if (is_null($sort_desc_text)) {
            throw new \InvalidArgumentException('non-nullable sort_desc_text cannot be null');
        }
        $this->container['sort_desc_text'] = $sort_desc_text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


