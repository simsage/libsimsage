<?php
/**
 * CMReturnStatistics
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.13.31
 * Contact: info@simsage.co.uk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CMReturnStatistics Class Doc Comment
 *
 * @category Class
 * @description This object is used to requests a set of specific and general statistics.  The general statistics have no time associated with them (eg. file-type frequencies).  The other statistics are month based and include system-query-access by day of the month, and query-word frequencies.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CMReturnStatistics implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CMReturnStatistics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'organisation_id' => 'string',
        'kb_id' => 'string',
        'year' => 'int',
        'month' => 'int',
        'access_frequency' => 'int',
        'query_word_frequency' => 'array<string,int>',
        'general_statistics' => 'array<string,int>',
        'file_type_statistics' => 'array<string,int>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'organisation_id' => null,
        'kb_id' => null,
        'year' => 'int32',
        'month' => 'int32',
        'access_frequency' => 'int32',
        'query_word_frequency' => 'int32',
        'general_statistics' => 'int64',
        'file_type_statistics' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'organisation_id' => false,
		'kb_id' => false,
		'year' => false,
		'month' => false,
		'access_frequency' => false,
		'query_word_frequency' => false,
		'general_statistics' => false,
		'file_type_statistics' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'organisation_id' => 'organisationId',
        'kb_id' => 'kbId',
        'year' => 'year',
        'month' => 'month',
        'access_frequency' => 'accessFrequency',
        'query_word_frequency' => 'queryWordFrequency',
        'general_statistics' => 'generalStatistics',
        'file_type_statistics' => 'fileTypeStatistics'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'organisation_id' => 'setOrganisationId',
        'kb_id' => 'setKbId',
        'year' => 'setYear',
        'month' => 'setMonth',
        'access_frequency' => 'setAccessFrequency',
        'query_word_frequency' => 'setQueryWordFrequency',
        'general_statistics' => 'setGeneralStatistics',
        'file_type_statistics' => 'setFileTypeStatistics'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'organisation_id' => 'getOrganisationId',
        'kb_id' => 'getKbId',
        'year' => 'getYear',
        'month' => 'getMonth',
        'access_frequency' => 'getAccessFrequency',
        'query_word_frequency' => 'getQueryWordFrequency',
        'general_statistics' => 'getGeneralStatistics',
        'file_type_statistics' => 'getFileTypeStatistics'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('organisation_id', $data ?? [], null);
        $this->setIfExists('kb_id', $data ?? [], null);
        $this->setIfExists('year', $data ?? [], null);
        $this->setIfExists('month', $data ?? [], null);
        $this->setIfExists('access_frequency', $data ?? [], null);
        $this->setIfExists('query_word_frequency', $data ?? [], null);
        $this->setIfExists('general_statistics', $data ?? [], null);
        $this->setIfExists('file_type_statistics', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['organisation_id'] === null) {
            $invalidProperties[] = "'organisation_id' can't be null";
        }
        if ($this->container['kb_id'] === null) {
            $invalidProperties[] = "'kb_id' can't be null";
        }
        if ($this->container['year'] === null) {
            $invalidProperties[] = "'year' can't be null";
        }
        if ($this->container['month'] === null) {
            $invalidProperties[] = "'month' can't be null";
        }
        if ($this->container['access_frequency'] === null) {
            $invalidProperties[] = "'access_frequency' can't be null";
        }
        if ($this->container['query_word_frequency'] === null) {
            $invalidProperties[] = "'query_word_frequency' can't be null";
        }
        if ($this->container['general_statistics'] === null) {
            $invalidProperties[] = "'general_statistics' can't be null";
        }
        if ($this->container['file_type_statistics'] === null) {
            $invalidProperties[] = "'file_type_statistics' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets organisation_id
     *
     * @return string
     */
    public function getOrganisationId()
    {
        return $this->container['organisation_id'];
    }

    /**
     * Sets organisation_id
     *
     * @param string $organisation_id the organisation (its guid id)
     *
     * @return self
     */
    public function setOrganisationId($organisation_id)
    {
        if (is_null($organisation_id)) {
            throw new \InvalidArgumentException('non-nullable organisation_id cannot be null');
        }
        $this->container['organisation_id'] = $organisation_id;

        return $this;
    }

    /**
     * Gets kb_id
     *
     * @return string
     */
    public function getKbId()
    {
        return $this->container['kb_id'];
    }

    /**
     * Sets kb_id
     *
     * @param string $kb_id the knowledge-base id (its guid id)
     *
     * @return self
     */
    public function setKbId($kb_id)
    {
        if (is_null($kb_id)) {
            throw new \InvalidArgumentException('non-nullable kb_id cannot be null');
        }
        $this->container['kb_id'] = $kb_id;

        return $this;
    }

    /**
     * Gets year
     *
     * @return int
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param int $year the year of the request
     *
     * @return self
     */
    public function setYear($year)
    {
        if (is_null($year)) {
            throw new \InvalidArgumentException('non-nullable year cannot be null');
        }
        $this->container['year'] = $year;

        return $this;
    }

    /**
     * Gets month
     *
     * @return int
     */
    public function getMonth()
    {
        return $this->container['month'];
    }

    /**
     * Sets month
     *
     * @param int $month the month of the request
     *
     * @return self
     */
    public function setMonth($month)
    {
        if (is_null($month)) {
            throw new \InvalidArgumentException('non-nullable month cannot be null');
        }
        $this->container['month'] = $month;

        return $this;
    }

    /**
     * Gets access_frequency
     *
     * @return int
     */
    public function getAccessFrequency()
    {
        return $this->container['access_frequency'];
    }

    /**
     * Sets access_frequency
     *
     * @param int $access_frequency A list of 31 values, one for each day of the month indicating the number of unique access for each day of the month.
     *
     * @return self
     */
    public function setAccessFrequency($access_frequency)
    {
        if (is_null($access_frequency)) {
            throw new \InvalidArgumentException('non-nullable access_frequency cannot be null');
        }
        $this->container['access_frequency'] = $access_frequency;

        return $this;
    }

    /**
     * Gets query_word_frequency
     *
     * @return array<string,int>
     */
    public function getQueryWordFrequency()
    {
        return $this->container['query_word_frequency'];
    }

    /**
     * Sets query_word_frequency
     *
     * @param array<string,int> $query_word_frequency The top list of queries (the strings) and their frequencies
     *
     * @return self
     */
    public function setQueryWordFrequency($query_word_frequency)
    {
        if (is_null($query_word_frequency)) {
            throw new \InvalidArgumentException('non-nullable query_word_frequency cannot be null');
        }
        $this->container['query_word_frequency'] = $query_word_frequency;

        return $this;
    }

    /**
     * Gets general_statistics
     *
     * @return array<string,int>
     */
    public function getGeneralStatistics()
    {
        return $this->container['general_statistics'];
    }

    /**
     * Sets general_statistics
     *
     * @param array<string,int> $general_statistics Some more general statistics (eg. number of documents) and their frequencies
     *
     * @return self
     */
    public function setGeneralStatistics($general_statistics)
    {
        if (is_null($general_statistics)) {
            throw new \InvalidArgumentException('non-nullable general_statistics cannot be null');
        }
        $this->container['general_statistics'] = $general_statistics;

        return $this;
    }

    /**
     * Gets file_type_statistics
     *
     * @return array<string,int>
     */
    public function getFileTypeStatistics()
    {
        return $this->container['file_type_statistics'];
    }

    /**
     * Sets file_type_statistics
     *
     * @param array<string,int> $file_type_statistics The breakdown of file-types (by file extension) and their frequencies
     *
     * @return self
     */
    public function setFileTypeStatistics($file_type_statistics)
    {
        if (is_null($file_type_statistics)) {
            throw new \InvalidArgumentException('non-nullable file_type_statistics cannot be null');
        }
        $this->container['file_type_statistics'] = $file_type_statistics;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


