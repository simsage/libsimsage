<?php
/**
 * CMClientQuery
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.14.12
 * Contact: info@simsage.co.uk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CMClientQuery Class Doc Comment
 *
 * @category Class
 * @description a client query object
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CMClientQuery implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CMClientQuery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'organisation_id' => 'string',
        'kb_list' => 'string[]',
        'client_id' => 'string',
        'semantic_search' => 'bool',
        'qna_query' => 'bool',
        'query' => 'string',
        'filter' => 'string',
        'num_results' => 'int',
        'score_threshold' => 'float',
        'page' => 'int',
        'page_size' => 'int',
        'fragment_count' => 'int',
        'max_word_distance' => 'int',
        'source_id' => 'string',
        'shard_size_list' => 'int[]',
        'spelling_suggest' => 'bool',
        'group_similar_documents' => 'bool',
        'sort_by_age' => 'bool',
        'use_question_answering_ai' => 'bool',
        'word_syn_set' => 'array<string,int>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'organisation_id' => null,
        'kb_list' => null,
        'client_id' => null,
        'semantic_search' => null,
        'qna_query' => null,
        'query' => null,
        'filter' => null,
        'num_results' => 'int32',
        'score_threshold' => 'float',
        'page' => 'int32',
        'page_size' => 'int32',
        'fragment_count' => 'int32',
        'max_word_distance' => 'int32',
        'source_id' => null,
        'shard_size_list' => 'int32',
        'spelling_suggest' => null,
        'group_similar_documents' => null,
        'sort_by_age' => null,
        'use_question_answering_ai' => null,
        'word_syn_set' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'organisation_id' => false,
		'kb_list' => false,
		'client_id' => false,
		'semantic_search' => false,
		'qna_query' => false,
		'query' => false,
		'filter' => false,
		'num_results' => false,
		'score_threshold' => false,
		'page' => false,
		'page_size' => false,
		'fragment_count' => false,
		'max_word_distance' => false,
		'source_id' => false,
		'shard_size_list' => false,
		'spelling_suggest' => false,
		'group_similar_documents' => false,
		'sort_by_age' => false,
		'use_question_answering_ai' => false,
		'word_syn_set' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'organisation_id' => 'organisationId',
        'kb_list' => 'kbList',
        'client_id' => 'clientId',
        'semantic_search' => 'semanticSearch',
        'qna_query' => 'qnaQuery',
        'query' => 'query',
        'filter' => 'filter',
        'num_results' => 'numResults',
        'score_threshold' => 'scoreThreshold',
        'page' => 'page',
        'page_size' => 'pageSize',
        'fragment_count' => 'fragmentCount',
        'max_word_distance' => 'maxWordDistance',
        'source_id' => 'sourceId',
        'shard_size_list' => 'shardSizeList',
        'spelling_suggest' => 'spellingSuggest',
        'group_similar_documents' => 'groupSimilarDocuments',
        'sort_by_age' => 'sortByAge',
        'use_question_answering_ai' => 'useQuestionAnsweringAi',
        'word_syn_set' => 'wordSynSet'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'organisation_id' => 'setOrganisationId',
        'kb_list' => 'setKbList',
        'client_id' => 'setClientId',
        'semantic_search' => 'setSemanticSearch',
        'qna_query' => 'setQnaQuery',
        'query' => 'setQuery',
        'filter' => 'setFilter',
        'num_results' => 'setNumResults',
        'score_threshold' => 'setScoreThreshold',
        'page' => 'setPage',
        'page_size' => 'setPageSize',
        'fragment_count' => 'setFragmentCount',
        'max_word_distance' => 'setMaxWordDistance',
        'source_id' => 'setSourceId',
        'shard_size_list' => 'setShardSizeList',
        'spelling_suggest' => 'setSpellingSuggest',
        'group_similar_documents' => 'setGroupSimilarDocuments',
        'sort_by_age' => 'setSortByAge',
        'use_question_answering_ai' => 'setUseQuestionAnsweringAi',
        'word_syn_set' => 'setWordSynSet'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'organisation_id' => 'getOrganisationId',
        'kb_list' => 'getKbList',
        'client_id' => 'getClientId',
        'semantic_search' => 'getSemanticSearch',
        'qna_query' => 'getQnaQuery',
        'query' => 'getQuery',
        'filter' => 'getFilter',
        'num_results' => 'getNumResults',
        'score_threshold' => 'getScoreThreshold',
        'page' => 'getPage',
        'page_size' => 'getPageSize',
        'fragment_count' => 'getFragmentCount',
        'max_word_distance' => 'getMaxWordDistance',
        'source_id' => 'getSourceId',
        'shard_size_list' => 'getShardSizeList',
        'spelling_suggest' => 'getSpellingSuggest',
        'group_similar_documents' => 'getGroupSimilarDocuments',
        'sort_by_age' => 'getSortByAge',
        'use_question_answering_ai' => 'getUseQuestionAnsweringAi',
        'word_syn_set' => 'getWordSynSet'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('organisation_id', $data ?? [], null);
        $this->setIfExists('kb_list', $data ?? [], null);
        $this->setIfExists('client_id', $data ?? [], null);
        $this->setIfExists('semantic_search', $data ?? [], null);
        $this->setIfExists('qna_query', $data ?? [], null);
        $this->setIfExists('query', $data ?? [], null);
        $this->setIfExists('filter', $data ?? [], null);
        $this->setIfExists('num_results', $data ?? [], null);
        $this->setIfExists('score_threshold', $data ?? [], null);
        $this->setIfExists('page', $data ?? [], null);
        $this->setIfExists('page_size', $data ?? [], null);
        $this->setIfExists('fragment_count', $data ?? [], null);
        $this->setIfExists('max_word_distance', $data ?? [], null);
        $this->setIfExists('source_id', $data ?? [], null);
        $this->setIfExists('shard_size_list', $data ?? [], null);
        $this->setIfExists('spelling_suggest', $data ?? [], null);
        $this->setIfExists('group_similar_documents', $data ?? [], null);
        $this->setIfExists('sort_by_age', $data ?? [], null);
        $this->setIfExists('use_question_answering_ai', $data ?? [], null);
        $this->setIfExists('word_syn_set', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['organisation_id'] === null) {
            $invalidProperties[] = "'organisation_id' can't be null";
        }
        if ($this->container['kb_list'] === null) {
            $invalidProperties[] = "'kb_list' can't be null";
        }
        if ($this->container['client_id'] === null) {
            $invalidProperties[] = "'client_id' can't be null";
        }
        if ($this->container['semantic_search'] === null) {
            $invalidProperties[] = "'semantic_search' can't be null";
        }
        if ($this->container['qna_query'] === null) {
            $invalidProperties[] = "'qna_query' can't be null";
        }
        if ($this->container['query'] === null) {
            $invalidProperties[] = "'query' can't be null";
        }
        if ($this->container['filter'] === null) {
            $invalidProperties[] = "'filter' can't be null";
        }
        if ($this->container['num_results'] === null) {
            $invalidProperties[] = "'num_results' can't be null";
        }
        if ($this->container['score_threshold'] === null) {
            $invalidProperties[] = "'score_threshold' can't be null";
        }
        if ($this->container['page'] === null) {
            $invalidProperties[] = "'page' can't be null";
        }
        if ($this->container['page_size'] === null) {
            $invalidProperties[] = "'page_size' can't be null";
        }
        if ($this->container['fragment_count'] === null) {
            $invalidProperties[] = "'fragment_count' can't be null";
        }
        if ($this->container['max_word_distance'] === null) {
            $invalidProperties[] = "'max_word_distance' can't be null";
        }
        if ($this->container['source_id'] === null) {
            $invalidProperties[] = "'source_id' can't be null";
        }
        if ($this->container['shard_size_list'] === null) {
            $invalidProperties[] = "'shard_size_list' can't be null";
        }
        if ($this->container['spelling_suggest'] === null) {
            $invalidProperties[] = "'spelling_suggest' can't be null";
        }
        if ($this->container['group_similar_documents'] === null) {
            $invalidProperties[] = "'group_similar_documents' can't be null";
        }
        if ($this->container['sort_by_age'] === null) {
            $invalidProperties[] = "'sort_by_age' can't be null";
        }
        if ($this->container['use_question_answering_ai'] === null) {
            $invalidProperties[] = "'use_question_answering_ai' can't be null";
        }
        if ($this->container['word_syn_set'] === null) {
            $invalidProperties[] = "'word_syn_set' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets organisation_id
     *
     * @return string
     */
    public function getOrganisationId()
    {
        return $this->container['organisation_id'];
    }

    /**
     * Sets organisation_id
     *
     * @param string $organisation_id the organisation (its guid id).
     *
     * @return self
     */
    public function setOrganisationId($organisation_id)
    {
        if (is_null($organisation_id)) {
            throw new \InvalidArgumentException('non-nullable organisation_id cannot be null');
        }
        $this->container['organisation_id'] = $organisation_id;

        return $this;
    }

    /**
     * Gets kb_list
     *
     * @return string[]
     */
    public function getKbList()
    {
        return $this->container['kb_list'];
    }

    /**
     * Sets kb_list
     *
     * @param string[] $kb_list a list of knowledge-base id's (guids) to use
     *
     * @return self
     */
    public function setKbList($kb_list)
    {
        if (is_null($kb_list)) {
            throw new \InvalidArgumentException('non-nullable kb_list cannot be null');
        }
        $this->container['kb_list'] = $kb_list;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id the client's id (a unique guid for keeping state against clients)
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        if (is_null($client_id)) {
            throw new \InvalidArgumentException('non-nullable client_id cannot be null');
        }
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets semantic_search
     *
     * @return bool
     */
    public function getSemanticSearch()
    {
        return $this->container['semantic_search'];
    }

    /**
     * Sets semantic_search
     *
     * @param bool $semantic_search should we perform a semantic-search?
     *
     * @return self
     */
    public function setSemanticSearch($semantic_search)
    {
        if (is_null($semantic_search)) {
            throw new \InvalidArgumentException('non-nullable semantic_search cannot be null');
        }
        $this->container['semantic_search'] = $semantic_search;

        return $this;
    }

    /**
     * Gets qna_query
     *
     * @return bool
     */
    public function getQnaQuery()
    {
        return $this->container['qna_query'];
    }

    /**
     * Sets qna_query
     *
     * @param bool $qna_query should we perform a Q&A search?
     *
     * @return self
     */
    public function setQnaQuery($qna_query)
    {
        if (is_null($qna_query)) {
            throw new \InvalidArgumentException('non-nullable qna_query cannot be null');
        }
        $this->container['qna_query'] = $qna_query;

        return $this;
    }

    /**
     * Gets query
     *
     * @return string
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * Sets query
     *
     * @param string $query the user's search query
     *
     * @return self
     */
    public function setQuery($query)
    {
        if (is_null($query)) {
            throw new \InvalidArgumentException('non-nullable query cannot be null');
        }
        $this->container['query'] = $query;

        return $this;
    }

    /**
     * Gets filter
     *
     * @return string
     */
    public function getFilter()
    {
        return $this->container['filter'];
    }

    /**
     * Sets filter
     *
     * @param string $filter a filter expression generated by the UX
     *
     * @return self
     */
    public function setFilter($filter)
    {
        if (is_null($filter)) {
            throw new \InvalidArgumentException('non-nullable filter cannot be null');
        }
        $this->container['filter'] = $filter;

        return $this;
    }

    /**
     * Gets num_results
     *
     * @return int
     */
    public function getNumResults()
    {
        return $this->container['num_results'];
    }

    /**
     * Sets num_results
     *
     * @param int $num_results the number of results to return for the Q&A system (recommend 1, which returns the 'best match' only)
     *
     * @return self
     */
    public function setNumResults($num_results)
    {
        if (is_null($num_results)) {
            throw new \InvalidArgumentException('non-nullable num_results cannot be null');
        }
        $this->container['num_results'] = $num_results;

        return $this;
    }

    /**
     * Gets score_threshold
     *
     * @return float
     */
    public function getScoreThreshold()
    {
        return $this->container['score_threshold'];
    }

    /**
     * Sets score_threshold
     *
     * @param float $score_threshold A threshold for answer rejection, recommend a value of around 81.25% (0.8125).  This value is between 0.0 and 1.0.  If this value is too low, you'll get bad answers, and if this value is too high you will only get exact matches.
     *
     * @return self
     */
    public function setScoreThreshold($score_threshold)
    {
        if (is_null($score_threshold)) {
            throw new \InvalidArgumentException('non-nullable score_threshold cannot be null');
        }
        $this->container['score_threshold'] = $score_threshold;

        return $this;
    }

    /**
     * Gets page
     *
     * @return int
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param int $page search engine pagination, the offset page starting at 0
     *
     * @return self
     */
    public function setPage($page)
    {
        if (is_null($page)) {
            throw new \InvalidArgumentException('non-nullable page cannot be null');
        }
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size search engine pagination, the number of results per page
     *
     * @return self
     */
    public function setPageSize($page_size)
    {
        if (is_null($page_size)) {
            throw new \InvalidArgumentException('non-nullable page_size cannot be null');
        }
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets fragment_count
     *
     * @return int
     */
    public function getFragmentCount()
    {
        return $this->container['fragment_count'];
    }

    /**
     * Sets fragment_count
     *
     * @param int $fragment_count search engine pagination, the number of sentences matching per document (aka. document-sentence fragments)
     *
     * @return self
     */
    public function setFragmentCount($fragment_count)
    {
        if (is_null($fragment_count)) {
            throw new \InvalidArgumentException('non-nullable fragment_count cannot be null');
        }
        $this->container['fragment_count'] = $fragment_count;

        return $this;
    }

    /**
     * Gets max_word_distance
     *
     * @return int
     */
    public function getMaxWordDistance()
    {
        return $this->container['max_word_distance'];
    }

    /**
     * Sets max_word_distance
     *
     * @param int $max_word_distance how far apart words are allowed to be before they stop matching.  A value of zero (0) allows any distance within the document and is akin to a document level keyword search.
     *
     * @return self
     */
    public function setMaxWordDistance($max_word_distance)
    {
        if (is_null($max_word_distance)) {
            throw new \InvalidArgumentException('non-nullable max_word_distance cannot be null');
        }
        $this->container['max_word_distance'] = $max_word_distance;

        return $this;
    }

    /**
     * Gets source_id
     *
     * @return string
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param string $source_id The id of source (an integer) to filter results for.  You can only filter on one source per knowledge-base.  Leaving this value zero (0) indicates all sources should be searched.
     *
     * @return self
     */
    public function setSourceId($source_id)
    {
        if (is_null($source_id)) {
            throw new \InvalidArgumentException('non-nullable source_id cannot be null');
        }
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets shard_size_list
     *
     * @return int[]
     */
    public function getShardSizeList()
    {
        return $this->container['shard_size_list'];
    }

    /**
     * Sets shard_size_list
     *
     * @param int[] $shard_size_list Index sharding values.  These are used by the internal engine to determine the status of results across different shards in SimSage.  Leave this value alone.  It is set by SimSage.  Pass it back to SimSage as you got it if you're paginating the same query.
     *
     * @return self
     */
    public function setShardSizeList($shard_size_list)
    {
        if (is_null($shard_size_list)) {
            throw new \InvalidArgumentException('non-nullable shard_size_list cannot be null');
        }
        $this->container['shard_size_list'] = $shard_size_list;

        return $this;
    }

    /**
     * Gets spelling_suggest
     *
     * @return bool
     */
    public function getSpellingSuggest()
    {
        return $this->container['spelling_suggest'];
    }

    /**
     * Sets spelling_suggest
     *
     * @param bool $spelling_suggest should the search-engine return spelling-suggestions for items not understood?
     *
     * @return self
     */
    public function setSpellingSuggest($spelling_suggest)
    {
        if (is_null($spelling_suggest)) {
            throw new \InvalidArgumentException('non-nullable spelling_suggest cannot be null');
        }
        $this->container['spelling_suggest'] = $spelling_suggest;

        return $this;
    }

    /**
     * Gets group_similar_documents
     *
     * @return bool
     */
    public function getGroupSimilarDocuments()
    {
        return $this->container['group_similar_documents'];
    }

    /**
     * Sets group_similar_documents
     *
     * @param bool $group_similar_documents should the search-engine group similar documents together
     *
     * @return self
     */
    public function setGroupSimilarDocuments($group_similar_documents)
    {
        if (is_null($group_similar_documents)) {
            throw new \InvalidArgumentException('non-nullable group_similar_documents cannot be null');
        }
        $this->container['group_similar_documents'] = $group_similar_documents;

        return $this;
    }

    /**
     * Gets sort_by_age
     *
     * @return bool
     */
    public function getSortByAge()
    {
        return $this->container['sort_by_age'];
    }

    /**
     * Sets sort_by_age
     *
     * @param bool $sort_by_age should the search-engine sort results by age
     *
     * @return self
     */
    public function setSortByAge($sort_by_age)
    {
        if (is_null($sort_by_age)) {
            throw new \InvalidArgumentException('non-nullable sort_by_age cannot be null');
        }
        $this->container['sort_by_age'] = $sort_by_age;

        return $this;
    }

    /**
     * Gets use_question_answering_ai
     *
     * @return bool
     */
    public function getUseQuestionAnsweringAi()
    {
        return $this->container['use_question_answering_ai'];
    }

    /**
     * Sets use_question_answering_ai
     *
     * @param bool $use_question_answering_ai use ChatGPT or equivalent to answer queries
     *
     * @return self
     */
    public function setUseQuestionAnsweringAi($use_question_answering_ai)
    {
        if (is_null($use_question_answering_ai)) {
            throw new \InvalidArgumentException('non-nullable use_question_answering_ai cannot be null');
        }
        $this->container['use_question_answering_ai'] = $use_question_answering_ai;

        return $this;
    }

    /**
     * Gets word_syn_set
     *
     * @return array<string,int>
     */
    public function getWordSynSet()
    {
        return $this->container['word_syn_set'];
    }

    /**
     * Sets word_syn_set
     *
     * @param array<string,int> $word_syn_set selected syn-sets for words
     *
     * @return self
     */
    public function setWordSynSet($word_syn_set)
    {
        if (is_null($word_syn_set)) {
            throw new \InvalidArgumentException('non-nullable word_syn_set cannot be null');
        }
        $this->container['word_syn_set'] = $word_syn_set;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


