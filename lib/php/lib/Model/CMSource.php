<?php
/**
 * CMSource
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.13.31
 * Contact: info@simsage.co.uk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CMSource Class Doc Comment
 *
 * @category Class
 * @description A SimSage source object used for updating and creating SimSage crawlers/connections to external silos like Sharepoint, OneDrive, Exchange, DropBox, Box, iManage, and others.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CMSource implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CMSource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'source_id' => 'int',
        'organisation_id' => 'string',
        'kb_id' => 'string',
        'node_id' => 'int',
        'name' => 'string',
        'crawler_type' => 'string',
        'schedule' => 'string',
        'delete_files' => 'bool',
        'allow_anonymous' => 'bool',
        'processing_level' => 'string',
        'enable_preview' => 'bool',
        'files_per_second' => 'float',
        'specific_json' => 'string',
        'session_id' => 'string',
        'max_items' => 'int',
        'max_bot_items' => 'int',
        'custom_render' => 'bool',
        'edge_device_id' => 'string',
        'qa_match_strength' => 'float',
        'num_results' => 'int',
        'num_fragments' => 'int',
        'num_errors' => 'int',
        'error_threshold' => 'int',
        'start_time' => 'int',
        'end_time' => 'int',
        'acls' => '\OpenAPI\Client\Model\CMDocumentAcl[]',
        'is_crawling' => 'bool',
        'num_crawled_documents' => 'int',
        'num_converted_documents' => 'int',
        'num_parsed_documents' => 'int',
        'num_indexed_documents' => 'int',
        'num_finished_documents' => 'int',
        'num_errored_documents' => 'int',
        'num_total_documents' => 'int',
        'num_total_errored_documents' => 'int',
        'use_default_relationships' => 'bool',
        'is_busy' => 'bool',
        'auto_optimize' => 'bool',
        'store_binary' => 'bool',
        'versioned' => 'bool',
        'write_to_cassandra' => 'bool',
        'processor_config' => 'string',
        'enable_document_similarity' => 'bool',
        'document_similarity_threshold' => 'float',
        'is_external' => 'bool',
        'use_ocr' => 'bool',
        'use_stt' => 'bool',
        'delta_indicator' => 'string',
        'transmit_external_logs' => 'bool',
        'external' => 'bool',
        'crawling' => 'bool',
        'busy' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'source_id' => 'int32',
        'organisation_id' => null,
        'kb_id' => null,
        'node_id' => 'int32',
        'name' => null,
        'crawler_type' => null,
        'schedule' => null,
        'delete_files' => null,
        'allow_anonymous' => null,
        'processing_level' => null,
        'enable_preview' => null,
        'files_per_second' => 'float',
        'specific_json' => null,
        'session_id' => null,
        'max_items' => 'int64',
        'max_bot_items' => 'int64',
        'custom_render' => null,
        'edge_device_id' => null,
        'qa_match_strength' => 'float',
        'num_results' => 'int32',
        'num_fragments' => 'int32',
        'num_errors' => 'int32',
        'error_threshold' => 'int32',
        'start_time' => 'int64',
        'end_time' => 'int64',
        'acls' => null,
        'is_crawling' => null,
        'num_crawled_documents' => 'int32',
        'num_converted_documents' => 'int32',
        'num_parsed_documents' => 'int32',
        'num_indexed_documents' => 'int32',
        'num_finished_documents' => 'int32',
        'num_errored_documents' => 'int32',
        'num_total_documents' => 'int32',
        'num_total_errored_documents' => 'int32',
        'use_default_relationships' => null,
        'is_busy' => null,
        'auto_optimize' => null,
        'store_binary' => null,
        'versioned' => null,
        'write_to_cassandra' => null,
        'processor_config' => null,
        'enable_document_similarity' => null,
        'document_similarity_threshold' => 'float',
        'is_external' => null,
        'use_ocr' => null,
        'use_stt' => null,
        'delta_indicator' => null,
        'transmit_external_logs' => null,
        'external' => null,
        'crawling' => null,
        'busy' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'source_id' => false,
		'organisation_id' => false,
		'kb_id' => false,
		'node_id' => false,
		'name' => false,
		'crawler_type' => false,
		'schedule' => false,
		'delete_files' => false,
		'allow_anonymous' => false,
		'processing_level' => false,
		'enable_preview' => false,
		'files_per_second' => false,
		'specific_json' => false,
		'session_id' => false,
		'max_items' => false,
		'max_bot_items' => false,
		'custom_render' => false,
		'edge_device_id' => false,
		'qa_match_strength' => false,
		'num_results' => false,
		'num_fragments' => false,
		'num_errors' => false,
		'error_threshold' => false,
		'start_time' => false,
		'end_time' => false,
		'acls' => false,
		'is_crawling' => false,
		'num_crawled_documents' => false,
		'num_converted_documents' => false,
		'num_parsed_documents' => false,
		'num_indexed_documents' => false,
		'num_finished_documents' => false,
		'num_errored_documents' => false,
		'num_total_documents' => false,
		'num_total_errored_documents' => false,
		'use_default_relationships' => false,
		'is_busy' => false,
		'auto_optimize' => false,
		'store_binary' => false,
		'versioned' => false,
		'write_to_cassandra' => false,
		'processor_config' => false,
		'enable_document_similarity' => false,
		'document_similarity_threshold' => false,
		'is_external' => false,
		'use_ocr' => false,
		'use_stt' => false,
		'delta_indicator' => false,
		'transmit_external_logs' => false,
		'external' => false,
		'crawling' => false,
		'busy' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'source_id' => 'sourceId',
        'organisation_id' => 'organisationId',
        'kb_id' => 'kbId',
        'node_id' => 'nodeId',
        'name' => 'name',
        'crawler_type' => 'crawlerType',
        'schedule' => 'schedule',
        'delete_files' => 'deleteFiles',
        'allow_anonymous' => 'allowAnonymous',
        'processing_level' => 'processingLevel',
        'enable_preview' => 'enablePreview',
        'files_per_second' => 'filesPerSecond',
        'specific_json' => 'specificJson',
        'session_id' => 'sessionId',
        'max_items' => 'maxItems',
        'max_bot_items' => 'maxBotItems',
        'custom_render' => 'customRender',
        'edge_device_id' => 'edgeDeviceId',
        'qa_match_strength' => 'qaMatchStrength',
        'num_results' => 'numResults',
        'num_fragments' => 'numFragments',
        'num_errors' => 'numErrors',
        'error_threshold' => 'errorThreshold',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'acls' => 'acls',
        'is_crawling' => 'isCrawling',
        'num_crawled_documents' => 'numCrawledDocuments',
        'num_converted_documents' => 'numConvertedDocuments',
        'num_parsed_documents' => 'numParsedDocuments',
        'num_indexed_documents' => 'numIndexedDocuments',
        'num_finished_documents' => 'numFinishedDocuments',
        'num_errored_documents' => 'numErroredDocuments',
        'num_total_documents' => 'numTotalDocuments',
        'num_total_errored_documents' => 'numTotalErroredDocuments',
        'use_default_relationships' => 'useDefaultRelationships',
        'is_busy' => 'isBusy',
        'auto_optimize' => 'autoOptimize',
        'store_binary' => 'storeBinary',
        'versioned' => 'versioned',
        'write_to_cassandra' => 'writeToCassandra',
        'processor_config' => 'processorConfig',
        'enable_document_similarity' => 'enableDocumentSimilarity',
        'document_similarity_threshold' => 'documentSimilarityThreshold',
        'is_external' => 'isExternal',
        'use_ocr' => 'useOCR',
        'use_stt' => 'useSTT',
        'delta_indicator' => 'deltaIndicator',
        'transmit_external_logs' => 'transmitExternalLogs',
        'external' => 'external',
        'crawling' => 'crawling',
        'busy' => 'busy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'source_id' => 'setSourceId',
        'organisation_id' => 'setOrganisationId',
        'kb_id' => 'setKbId',
        'node_id' => 'setNodeId',
        'name' => 'setName',
        'crawler_type' => 'setCrawlerType',
        'schedule' => 'setSchedule',
        'delete_files' => 'setDeleteFiles',
        'allow_anonymous' => 'setAllowAnonymous',
        'processing_level' => 'setProcessingLevel',
        'enable_preview' => 'setEnablePreview',
        'files_per_second' => 'setFilesPerSecond',
        'specific_json' => 'setSpecificJson',
        'session_id' => 'setSessionId',
        'max_items' => 'setMaxItems',
        'max_bot_items' => 'setMaxBotItems',
        'custom_render' => 'setCustomRender',
        'edge_device_id' => 'setEdgeDeviceId',
        'qa_match_strength' => 'setQaMatchStrength',
        'num_results' => 'setNumResults',
        'num_fragments' => 'setNumFragments',
        'num_errors' => 'setNumErrors',
        'error_threshold' => 'setErrorThreshold',
        'start_time' => 'setStartTime',
        'end_time' => 'setEndTime',
        'acls' => 'setAcls',
        'is_crawling' => 'setIsCrawling',
        'num_crawled_documents' => 'setNumCrawledDocuments',
        'num_converted_documents' => 'setNumConvertedDocuments',
        'num_parsed_documents' => 'setNumParsedDocuments',
        'num_indexed_documents' => 'setNumIndexedDocuments',
        'num_finished_documents' => 'setNumFinishedDocuments',
        'num_errored_documents' => 'setNumErroredDocuments',
        'num_total_documents' => 'setNumTotalDocuments',
        'num_total_errored_documents' => 'setNumTotalErroredDocuments',
        'use_default_relationships' => 'setUseDefaultRelationships',
        'is_busy' => 'setIsBusy',
        'auto_optimize' => 'setAutoOptimize',
        'store_binary' => 'setStoreBinary',
        'versioned' => 'setVersioned',
        'write_to_cassandra' => 'setWriteToCassandra',
        'processor_config' => 'setProcessorConfig',
        'enable_document_similarity' => 'setEnableDocumentSimilarity',
        'document_similarity_threshold' => 'setDocumentSimilarityThreshold',
        'is_external' => 'setIsExternal',
        'use_ocr' => 'setUseOcr',
        'use_stt' => 'setUseStt',
        'delta_indicator' => 'setDeltaIndicator',
        'transmit_external_logs' => 'setTransmitExternalLogs',
        'external' => 'setExternal',
        'crawling' => 'setCrawling',
        'busy' => 'setBusy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'source_id' => 'getSourceId',
        'organisation_id' => 'getOrganisationId',
        'kb_id' => 'getKbId',
        'node_id' => 'getNodeId',
        'name' => 'getName',
        'crawler_type' => 'getCrawlerType',
        'schedule' => 'getSchedule',
        'delete_files' => 'getDeleteFiles',
        'allow_anonymous' => 'getAllowAnonymous',
        'processing_level' => 'getProcessingLevel',
        'enable_preview' => 'getEnablePreview',
        'files_per_second' => 'getFilesPerSecond',
        'specific_json' => 'getSpecificJson',
        'session_id' => 'getSessionId',
        'max_items' => 'getMaxItems',
        'max_bot_items' => 'getMaxBotItems',
        'custom_render' => 'getCustomRender',
        'edge_device_id' => 'getEdgeDeviceId',
        'qa_match_strength' => 'getQaMatchStrength',
        'num_results' => 'getNumResults',
        'num_fragments' => 'getNumFragments',
        'num_errors' => 'getNumErrors',
        'error_threshold' => 'getErrorThreshold',
        'start_time' => 'getStartTime',
        'end_time' => 'getEndTime',
        'acls' => 'getAcls',
        'is_crawling' => 'getIsCrawling',
        'num_crawled_documents' => 'getNumCrawledDocuments',
        'num_converted_documents' => 'getNumConvertedDocuments',
        'num_parsed_documents' => 'getNumParsedDocuments',
        'num_indexed_documents' => 'getNumIndexedDocuments',
        'num_finished_documents' => 'getNumFinishedDocuments',
        'num_errored_documents' => 'getNumErroredDocuments',
        'num_total_documents' => 'getNumTotalDocuments',
        'num_total_errored_documents' => 'getNumTotalErroredDocuments',
        'use_default_relationships' => 'getUseDefaultRelationships',
        'is_busy' => 'getIsBusy',
        'auto_optimize' => 'getAutoOptimize',
        'store_binary' => 'getStoreBinary',
        'versioned' => 'getVersioned',
        'write_to_cassandra' => 'getWriteToCassandra',
        'processor_config' => 'getProcessorConfig',
        'enable_document_similarity' => 'getEnableDocumentSimilarity',
        'document_similarity_threshold' => 'getDocumentSimilarityThreshold',
        'is_external' => 'getIsExternal',
        'use_ocr' => 'getUseOcr',
        'use_stt' => 'getUseStt',
        'delta_indicator' => 'getDeltaIndicator',
        'transmit_external_logs' => 'getTransmitExternalLogs',
        'external' => 'getExternal',
        'crawling' => 'getCrawling',
        'busy' => 'getBusy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('source_id', $data ?? [], null);
        $this->setIfExists('organisation_id', $data ?? [], null);
        $this->setIfExists('kb_id', $data ?? [], null);
        $this->setIfExists('node_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('crawler_type', $data ?? [], null);
        $this->setIfExists('schedule', $data ?? [], null);
        $this->setIfExists('delete_files', $data ?? [], null);
        $this->setIfExists('allow_anonymous', $data ?? [], null);
        $this->setIfExists('processing_level', $data ?? [], null);
        $this->setIfExists('enable_preview', $data ?? [], null);
        $this->setIfExists('files_per_second', $data ?? [], null);
        $this->setIfExists('specific_json', $data ?? [], null);
        $this->setIfExists('session_id', $data ?? [], null);
        $this->setIfExists('max_items', $data ?? [], null);
        $this->setIfExists('max_bot_items', $data ?? [], null);
        $this->setIfExists('custom_render', $data ?? [], null);
        $this->setIfExists('edge_device_id', $data ?? [], null);
        $this->setIfExists('qa_match_strength', $data ?? [], null);
        $this->setIfExists('num_results', $data ?? [], null);
        $this->setIfExists('num_fragments', $data ?? [], null);
        $this->setIfExists('num_errors', $data ?? [], null);
        $this->setIfExists('error_threshold', $data ?? [], null);
        $this->setIfExists('start_time', $data ?? [], null);
        $this->setIfExists('end_time', $data ?? [], null);
        $this->setIfExists('acls', $data ?? [], null);
        $this->setIfExists('is_crawling', $data ?? [], null);
        $this->setIfExists('num_crawled_documents', $data ?? [], null);
        $this->setIfExists('num_converted_documents', $data ?? [], null);
        $this->setIfExists('num_parsed_documents', $data ?? [], null);
        $this->setIfExists('num_indexed_documents', $data ?? [], null);
        $this->setIfExists('num_finished_documents', $data ?? [], null);
        $this->setIfExists('num_errored_documents', $data ?? [], null);
        $this->setIfExists('num_total_documents', $data ?? [], null);
        $this->setIfExists('num_total_errored_documents', $data ?? [], null);
        $this->setIfExists('use_default_relationships', $data ?? [], null);
        $this->setIfExists('is_busy', $data ?? [], null);
        $this->setIfExists('auto_optimize', $data ?? [], null);
        $this->setIfExists('store_binary', $data ?? [], null);
        $this->setIfExists('versioned', $data ?? [], null);
        $this->setIfExists('write_to_cassandra', $data ?? [], null);
        $this->setIfExists('processor_config', $data ?? [], null);
        $this->setIfExists('enable_document_similarity', $data ?? [], null);
        $this->setIfExists('document_similarity_threshold', $data ?? [], null);
        $this->setIfExists('is_external', $data ?? [], null);
        $this->setIfExists('use_ocr', $data ?? [], null);
        $this->setIfExists('use_stt', $data ?? [], null);
        $this->setIfExists('delta_indicator', $data ?? [], null);
        $this->setIfExists('transmit_external_logs', $data ?? [], null);
        $this->setIfExists('external', $data ?? [], null);
        $this->setIfExists('crawling', $data ?? [], null);
        $this->setIfExists('busy', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['source_id'] === null) {
            $invalidProperties[] = "'source_id' can't be null";
        }
        if ($this->container['organisation_id'] === null) {
            $invalidProperties[] = "'organisation_id' can't be null";
        }
        if ($this->container['kb_id'] === null) {
            $invalidProperties[] = "'kb_id' can't be null";
        }
        if ($this->container['node_id'] === null) {
            $invalidProperties[] = "'node_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['crawler_type'] === null) {
            $invalidProperties[] = "'crawler_type' can't be null";
        }
        if ($this->container['schedule'] === null) {
            $invalidProperties[] = "'schedule' can't be null";
        }
        if ($this->container['delete_files'] === null) {
            $invalidProperties[] = "'delete_files' can't be null";
        }
        if ($this->container['allow_anonymous'] === null) {
            $invalidProperties[] = "'allow_anonymous' can't be null";
        }
        if ($this->container['processing_level'] === null) {
            $invalidProperties[] = "'processing_level' can't be null";
        }
        if ($this->container['enable_preview'] === null) {
            $invalidProperties[] = "'enable_preview' can't be null";
        }
        if ($this->container['files_per_second'] === null) {
            $invalidProperties[] = "'files_per_second' can't be null";
        }
        if ($this->container['specific_json'] === null) {
            $invalidProperties[] = "'specific_json' can't be null";
        }
        if ($this->container['session_id'] === null) {
            $invalidProperties[] = "'session_id' can't be null";
        }
        if ($this->container['max_items'] === null) {
            $invalidProperties[] = "'max_items' can't be null";
        }
        if ($this->container['max_bot_items'] === null) {
            $invalidProperties[] = "'max_bot_items' can't be null";
        }
        if ($this->container['custom_render'] === null) {
            $invalidProperties[] = "'custom_render' can't be null";
        }
        if ($this->container['edge_device_id'] === null) {
            $invalidProperties[] = "'edge_device_id' can't be null";
        }
        if ($this->container['qa_match_strength'] === null) {
            $invalidProperties[] = "'qa_match_strength' can't be null";
        }
        if ($this->container['num_results'] === null) {
            $invalidProperties[] = "'num_results' can't be null";
        }
        if ($this->container['num_fragments'] === null) {
            $invalidProperties[] = "'num_fragments' can't be null";
        }
        if ($this->container['num_errors'] === null) {
            $invalidProperties[] = "'num_errors' can't be null";
        }
        if ($this->container['error_threshold'] === null) {
            $invalidProperties[] = "'error_threshold' can't be null";
        }
        if ($this->container['start_time'] === null) {
            $invalidProperties[] = "'start_time' can't be null";
        }
        if ($this->container['end_time'] === null) {
            $invalidProperties[] = "'end_time' can't be null";
        }
        if ($this->container['acls'] === null) {
            $invalidProperties[] = "'acls' can't be null";
        }
        if ($this->container['is_crawling'] === null) {
            $invalidProperties[] = "'is_crawling' can't be null";
        }
        if ($this->container['num_crawled_documents'] === null) {
            $invalidProperties[] = "'num_crawled_documents' can't be null";
        }
        if ($this->container['num_converted_documents'] === null) {
            $invalidProperties[] = "'num_converted_documents' can't be null";
        }
        if ($this->container['num_parsed_documents'] === null) {
            $invalidProperties[] = "'num_parsed_documents' can't be null";
        }
        if ($this->container['num_indexed_documents'] === null) {
            $invalidProperties[] = "'num_indexed_documents' can't be null";
        }
        if ($this->container['num_finished_documents'] === null) {
            $invalidProperties[] = "'num_finished_documents' can't be null";
        }
        if ($this->container['num_errored_documents'] === null) {
            $invalidProperties[] = "'num_errored_documents' can't be null";
        }
        if ($this->container['num_total_documents'] === null) {
            $invalidProperties[] = "'num_total_documents' can't be null";
        }
        if ($this->container['num_total_errored_documents'] === null) {
            $invalidProperties[] = "'num_total_errored_documents' can't be null";
        }
        if ($this->container['use_default_relationships'] === null) {
            $invalidProperties[] = "'use_default_relationships' can't be null";
        }
        if ($this->container['is_busy'] === null) {
            $invalidProperties[] = "'is_busy' can't be null";
        }
        if ($this->container['auto_optimize'] === null) {
            $invalidProperties[] = "'auto_optimize' can't be null";
        }
        if ($this->container['store_binary'] === null) {
            $invalidProperties[] = "'store_binary' can't be null";
        }
        if ($this->container['versioned'] === null) {
            $invalidProperties[] = "'versioned' can't be null";
        }
        if ($this->container['write_to_cassandra'] === null) {
            $invalidProperties[] = "'write_to_cassandra' can't be null";
        }
        if ($this->container['processor_config'] === null) {
            $invalidProperties[] = "'processor_config' can't be null";
        }
        if ($this->container['enable_document_similarity'] === null) {
            $invalidProperties[] = "'enable_document_similarity' can't be null";
        }
        if ($this->container['document_similarity_threshold'] === null) {
            $invalidProperties[] = "'document_similarity_threshold' can't be null";
        }
        if ($this->container['is_external'] === null) {
            $invalidProperties[] = "'is_external' can't be null";
        }
        if ($this->container['use_ocr'] === null) {
            $invalidProperties[] = "'use_ocr' can't be null";
        }
        if ($this->container['use_stt'] === null) {
            $invalidProperties[] = "'use_stt' can't be null";
        }
        if ($this->container['delta_indicator'] === null) {
            $invalidProperties[] = "'delta_indicator' can't be null";
        }
        if ($this->container['transmit_external_logs'] === null) {
            $invalidProperties[] = "'transmit_external_logs' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets source_id
     *
     * @return int
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param int $source_id the source-id, primary key of the source
     *
     * @return self
     */
    public function setSourceId($source_id)
    {
        if (is_null($source_id)) {
            throw new \InvalidArgumentException('non-nullable source_id cannot be null');
        }
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets organisation_id
     *
     * @return string
     */
    public function getOrganisationId()
    {
        return $this->container['organisation_id'];
    }

    /**
     * Sets organisation_id
     *
     * @param string $organisation_id the main organisation (its guid id) for this source/crawler
     *
     * @return self
     */
    public function setOrganisationId($organisation_id)
    {
        if (is_null($organisation_id)) {
            throw new \InvalidArgumentException('non-nullable organisation_id cannot be null');
        }
        $this->container['organisation_id'] = $organisation_id;

        return $this;
    }

    /**
     * Gets kb_id
     *
     * @return string
     */
    public function getKbId()
    {
        return $this->container['kb_id'];
    }

    /**
     * Sets kb_id
     *
     * @param string $kb_id the knowledge-base id (its guid id) for this source/crawler
     *
     * @return self
     */
    public function setKbId($kb_id)
    {
        if (is_null($kb_id)) {
            throw new \InvalidArgumentException('non-nullable kb_id cannot be null');
        }
        $this->container['kb_id'] = $kb_id;

        return $this;
    }

    /**
     * Gets node_id
     *
     * @return int
     */
    public function getNodeId()
    {
        return $this->container['node_id'];
    }

    /**
     * Sets node_id
     *
     * @param int $node_id the system's node id of this source (what kubernetes-node to run on, starting with zero, set NODE_ID in env to manipulate this value).  Sources will only run on machines with a matching node-id
     *
     * @return self
     */
    public function setNodeId($node_id)
    {
        if (is_null($node_id)) {
            throw new \InvalidArgumentException('non-nullable node_id cannot be null');
        }
        $this->container['node_id'] = $node_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name the display-name (descriptive name) of this source.  The source's name must be unique within a knowledge-base.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets crawler_type
     *
     * @return string
     */
    public function getCrawlerType()
    {
        return $this->container['crawler_type'];
    }

    /**
     * Sets crawler_type
     *
     * @param string $crawler_type the type of this source
     *
     * @return self
     */
    public function setCrawlerType($crawler_type)
    {
        if (is_null($crawler_type)) {
            throw new \InvalidArgumentException('non-nullable crawler_type cannot be null');
        }
        $this->container['crawler_type'] = $crawler_type;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return string
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param string $schedule the time-schedule of this crawler, when active and when not repeating in a weekly-per hour cycle in GMT time.  Empty string means not active at all
     *
     * @return self
     */
    public function setSchedule($schedule)
    {
        if (is_null($schedule)) {
            throw new \InvalidArgumentException('non-nullable schedule cannot be null');
        }
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets delete_files
     *
     * @return bool
     */
    public function getDeleteFiles()
    {
        return $this->container['delete_files'];
    }

    /**
     * Sets delete_files
     *
     * @param bool $delete_files Should this crawler remove files that are no longer visible after a crawl completes without errors?  Used for sources that cannot report on file/data removal.
     *
     * @return self
     */
    public function setDeleteFiles($delete_files)
    {
        if (is_null($delete_files)) {
            throw new \InvalidArgumentException('non-nullable delete_files cannot be null');
        }
        $this->container['delete_files'] = $delete_files;

        return $this;
    }

    /**
     * Gets allow_anonymous
     *
     * @return bool
     */
    public function getAllowAnonymous()
    {
        return $this->container['allow_anonymous'];
    }

    /**
     * Sets allow_anonymous
     *
     * @param bool $allow_anonymous Is the content of this crawler accessible anonymously (ie. no permissions/ACLs required).  Some crawlers like the web crawler always have this value as true.  NB.  Setting this flag to \"true\" will bypass any security on the source's own ACLs and make all its content available to everyone.
     *
     * @return self
     */
    public function setAllowAnonymous($allow_anonymous)
    {
        if (is_null($allow_anonymous)) {
            throw new \InvalidArgumentException('non-nullable allow_anonymous cannot be null');
        }
        $this->container['allow_anonymous'] = $allow_anonymous;

        return $this;
    }

    /**
     * Gets processing_level
     *
     * @return string
     */
    public function getProcessingLevel()
    {
        return $this->container['processing_level'];
    }

    /**
     * Sets processing_level
     *
     * @param string $processing_level How much processing should SimSage give each file of this source.  As defined internally in ProcessingLevel.  level 1, CONVERT: convert all document binaries to text (creates metadata text).  level 2, PARSE: NLP process the files (creates sentences and tokens for all text).  level 3, INDEX: create inverted indexes for files (creates indexes).
     *
     * @return self
     */
    public function setProcessingLevel($processing_level)
    {
        if (is_null($processing_level)) {
            throw new \InvalidArgumentException('non-nullable processing_level cannot be null');
        }
        $this->container['processing_level'] = $processing_level;

        return $this;
    }

    /**
     * Gets enable_preview
     *
     * @return bool
     */
    public function getEnablePreview()
    {
        return $this->container['enable_preview'];
    }

    /**
     * Sets enable_preview
     *
     * @param bool $enable_preview Generate per-document image-preview information as well as full HTML previews if set to \"true\".
     *
     * @return self
     */
    public function setEnablePreview($enable_preview)
    {
        if (is_null($enable_preview)) {
            throw new \InvalidArgumentException('non-nullable enable_preview cannot be null');
        }
        $this->container['enable_preview'] = $enable_preview;

        return $this;
    }

    /**
     * Gets files_per_second
     *
     * @return float
     */
    public function getFilesPerSecond()
    {
        return $this->container['files_per_second'];
    }

    /**
     * Sets files_per_second
     *
     * @param float $files_per_second Any value greater than 0 will cause the crawler to sleep for as many milliseconds between file uploads.
     *
     * @return self
     */
    public function setFilesPerSecond($files_per_second)
    {
        if (is_null($files_per_second)) {
            throw new \InvalidArgumentException('non-nullable files_per_second cannot be null');
        }
        $this->container['files_per_second'] = $files_per_second;

        return $this;
    }

    /**
     * Gets specific_json
     *
     * @return string
     */
    public function getSpecificJson()
    {
        return $this->container['specific_json'];
    }

    /**
     * Sets specific_json
     *
     * @param string $specific_json A json string with specific values for this type of source.  Generated by the SimSage administrative system.
     *
     * @return self
     */
    public function setSpecificJson($specific_json)
    {
        if (is_null($specific_json)) {
            throw new \InvalidArgumentException('non-nullable specific_json cannot be null');
        }
        $this->container['specific_json'] = $specific_json;

        return $this;
    }

    /**
     * Gets session_id
     *
     * @return string
     */
    public function getSessionId()
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param string $session_id a valid session-guid id.
     *
     * @return self
     */
    public function setSessionId($session_id)
    {
        if (is_null($session_id)) {
            throw new \InvalidArgumentException('non-nullable session_id cannot be null');
        }
        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets max_items
     *
     * @return int
     */
    public function getMaxItems()
    {
        return $this->container['max_items'];
    }

    /**
     * Sets max_items
     *
     * @param int $max_items Set a content limit for the maximum number of items to contain for this source.  A value of zero (0) indicates no limits.
     *
     * @return self
     */
    public function setMaxItems($max_items)
    {
        if (is_null($max_items)) {
            throw new \InvalidArgumentException('non-nullable max_items cannot be null');
        }
        $this->container['max_items'] = $max_items;

        return $this;
    }

    /**
     * Gets max_bot_items
     *
     * @return int
     */
    public function getMaxBotItems()
    {
        return $this->container['max_bot_items'];
    }

    /**
     * Sets max_bot_items
     *
     * @param int $max_bot_items Set a Question and Answer content limit for the maximum number of deep-learning Q&A items this source can contain.  A value of zero (0) indicates no limits.
     *
     * @return self
     */
    public function setMaxBotItems($max_bot_items)
    {
        if (is_null($max_bot_items)) {
            throw new \InvalidArgumentException('non-nullable max_bot_items cannot be null');
        }
        $this->container['max_bot_items'] = $max_bot_items;

        return $this;
    }

    /**
     * Gets custom_render
     *
     * @return bool
     */
    public function getCustomRender()
    {
        return $this->container['custom_render'];
    }

    /**
     * Sets custom_render
     *
     * @param bool $custom_render Does this source require custom render templates or use ordinary search-results?
     *
     * @return self
     */
    public function setCustomRender($custom_render)
    {
        if (is_null($custom_render)) {
            throw new \InvalidArgumentException('non-nullable custom_render cannot be null');
        }
        $this->container['custom_render'] = $custom_render;

        return $this;
    }

    /**
     * Gets edge_device_id
     *
     * @return string
     */
    public function getEdgeDeviceId()
    {
        return $this->container['edge_device_id'];
    }

    /**
     * Sets edge_device_id
     *
     * @param string $edge_device_id The associated Edge device for this source (or empty string if not associated with one)
     *
     * @return self
     */
    public function setEdgeDeviceId($edge_device_id)
    {
        if (is_null($edge_device_id)) {
            throw new \InvalidArgumentException('non-nullable edge_device_id cannot be null');
        }
        $this->container['edge_device_id'] = $edge_device_id;

        return $this;
    }

    /**
     * Gets qa_match_strength
     *
     * @return float
     */
    public function getQaMatchStrength()
    {
        return $this->container['qa_match_strength'];
    }

    /**
     * Sets qa_match_strength
     *
     * @param float $qa_match_strength the default threshold for matching deep-learning vector matching results (value should be between 0.7 and 0.99)
     *
     * @return self
     */
    public function setQaMatchStrength($qa_match_strength)
    {
        if (is_null($qa_match_strength)) {
            throw new \InvalidArgumentException('non-nullable qa_match_strength cannot be null');
        }
        $this->container['qa_match_strength'] = $qa_match_strength;

        return $this;
    }

    /**
     * Gets num_results
     *
     * @return int
     */
    public function getNumResults()
    {
        return $this->container['num_results'];
    }

    /**
     * Sets num_results
     *
     * @param int $num_results the default number of search results to return from the semantic-search system
     *
     * @return self
     */
    public function setNumResults($num_results)
    {
        if (is_null($num_results)) {
            throw new \InvalidArgumentException('non-nullable num_results cannot be null');
        }
        $this->container['num_results'] = $num_results;

        return $this;
    }

    /**
     * Gets num_fragments
     *
     * @return int
     */
    public function getNumFragments()
    {
        return $this->container['num_fragments'];
    }

    /**
     * Sets num_fragments
     *
     * @param int $num_fragments the number of fragments to return per search-result from the semantic-search system.  Affects accuracy, a value of \"1\" will only look at the first match.  Higher values look for more matches inside a single document.  Too high a value will affect performance.  Default value \"3\".
     *
     * @return self
     */
    public function setNumFragments($num_fragments)
    {
        if (is_null($num_fragments)) {
            throw new \InvalidArgumentException('non-nullable num_fragments cannot be null');
        }
        $this->container['num_fragments'] = $num_fragments;

        return $this;
    }

    /**
     * Gets num_errors
     *
     * @return int
     */
    public function getNumErrors()
    {
        return $this->container['num_errors'];
    }

    /**
     * Sets num_errors
     *
     * @param int $num_errors the number of errors from the last source-run
     *
     * @return self
     */
    public function setNumErrors($num_errors)
    {
        if (is_null($num_errors)) {
            throw new \InvalidArgumentException('non-nullable num_errors cannot be null');
        }
        $this->container['num_errors'] = $num_errors;

        return $this;
    }

    /**
     * Gets error_threshold
     *
     * @return int
     */
    public function getErrorThreshold()
    {
        return $this->container['error_threshold'];
    }

    /**
     * Sets error_threshold
     *
     * @param int $error_threshold the number of errors allowed before failing the source and not force-removing any files at the end of a run through an external source.
     *
     * @return self
     */
    public function setErrorThreshold($error_threshold)
    {
        if (is_null($error_threshold)) {
            throw new \InvalidArgumentException('non-nullable error_threshold cannot be null');
        }
        $this->container['error_threshold'] = $error_threshold;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return int
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param int $start_time when the last run of this source started
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        if (is_null($start_time)) {
            throw new \InvalidArgumentException('non-nullable start_time cannot be null');
        }
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return int
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param int $end_time when the last run of this source finished
     *
     * @return self
     */
    public function setEndTime($end_time)
    {
        if (is_null($end_time)) {
            throw new \InvalidArgumentException('non-nullable end_time cannot be null');
        }
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets acls
     *
     * @return \OpenAPI\Client\Model\CMDocumentAcl[]
     */
    public function getAcls()
    {
        return $this->container['acls'];
    }

    /**
     * Sets acls
     *
     * @param \OpenAPI\Client\Model\CMDocumentAcl[] $acls A list for overwriting security permission for a source.  Can be empty.  Use this to override security on external systems.
     *
     * @return self
     */
    public function setAcls($acls)
    {
        if (is_null($acls)) {
            throw new \InvalidArgumentException('non-nullable acls cannot be null');
        }
        $this->container['acls'] = $acls;

        return $this;
    }

    /**
     * Gets is_crawling
     *
     * @return bool
     */
    public function getIsCrawling()
    {
        return $this->container['is_crawling'];
    }

    /**
     * Sets is_crawling
     *
     * @param bool $is_crawling \"true\" if this source busy/active.
     *
     * @return self
     */
    public function setIsCrawling($is_crawling)
    {
        if (is_null($is_crawling)) {
            throw new \InvalidArgumentException('non-nullable is_crawling cannot be null');
        }
        $this->container['is_crawling'] = $is_crawling;

        return $this;
    }

    /**
     * Gets num_crawled_documents
     *
     * @return int
     */
    public function getNumCrawledDocuments()
    {
        return $this->container['num_crawled_documents'];
    }

    /**
     * Sets num_crawled_documents
     *
     * @param int $num_crawled_documents the number of documents seen by the crawler thus-far.
     *
     * @return self
     */
    public function setNumCrawledDocuments($num_crawled_documents)
    {
        if (is_null($num_crawled_documents)) {
            throw new \InvalidArgumentException('non-nullable num_crawled_documents cannot be null');
        }
        $this->container['num_crawled_documents'] = $num_crawled_documents;

        return $this;
    }

    /**
     * Gets num_converted_documents
     *
     * @return int
     */
    public function getNumConvertedDocuments()
    {
        return $this->container['num_converted_documents'];
    }

    /**
     * Sets num_converted_documents
     *
     * @param int $num_converted_documents the number of documents converted by SimSage thus-far.
     *
     * @return self
     */
    public function setNumConvertedDocuments($num_converted_documents)
    {
        if (is_null($num_converted_documents)) {
            throw new \InvalidArgumentException('non-nullable num_converted_documents cannot be null');
        }
        $this->container['num_converted_documents'] = $num_converted_documents;

        return $this;
    }

    /**
     * Gets num_parsed_documents
     *
     * @return int
     */
    public function getNumParsedDocuments()
    {
        return $this->container['num_parsed_documents'];
    }

    /**
     * Sets num_parsed_documents
     *
     * @param int $num_parsed_documents the number of documents parsed by SimSage thus-far.
     *
     * @return self
     */
    public function setNumParsedDocuments($num_parsed_documents)
    {
        if (is_null($num_parsed_documents)) {
            throw new \InvalidArgumentException('non-nullable num_parsed_documents cannot be null');
        }
        $this->container['num_parsed_documents'] = $num_parsed_documents;

        return $this;
    }

    /**
     * Gets num_indexed_documents
     *
     * @return int
     */
    public function getNumIndexedDocuments()
    {
        return $this->container['num_indexed_documents'];
    }

    /**
     * Sets num_indexed_documents
     *
     * @param int $num_indexed_documents the number of documents indexed by SimSage thus-far.
     *
     * @return self
     */
    public function setNumIndexedDocuments($num_indexed_documents)
    {
        if (is_null($num_indexed_documents)) {
            throw new \InvalidArgumentException('non-nullable num_indexed_documents cannot be null');
        }
        $this->container['num_indexed_documents'] = $num_indexed_documents;

        return $this;
    }

    /**
     * Gets num_finished_documents
     *
     * @return int
     */
    public function getNumFinishedDocuments()
    {
        return $this->container['num_finished_documents'];
    }

    /**
     * Sets num_finished_documents
     *
     * @param int $num_finished_documents the number of finished (fully processed) by SimSage thus-far.
     *
     * @return self
     */
    public function setNumFinishedDocuments($num_finished_documents)
    {
        if (is_null($num_finished_documents)) {
            throw new \InvalidArgumentException('non-nullable num_finished_documents cannot be null');
        }
        $this->container['num_finished_documents'] = $num_finished_documents;

        return $this;
    }

    /**
     * Gets num_errored_documents
     *
     * @return int
     */
    public function getNumErroredDocuments()
    {
        return $this->container['num_errored_documents'];
    }

    /**
     * Sets num_errored_documents
     *
     * @param int $num_errored_documents the number of errored documents by SimSage thus-far.
     *
     * @return self
     */
    public function setNumErroredDocuments($num_errored_documents)
    {
        if (is_null($num_errored_documents)) {
            throw new \InvalidArgumentException('non-nullable num_errored_documents cannot be null');
        }
        $this->container['num_errored_documents'] = $num_errored_documents;

        return $this;
    }

    /**
     * Gets num_total_documents
     *
     * @return int
     */
    public function getNumTotalDocuments()
    {
        return $this->container['num_total_documents'];
    }

    /**
     * Sets num_total_documents
     *
     * @param int $num_total_documents the total number of documents for this source in SimSage.
     *
     * @return self
     */
    public function setNumTotalDocuments($num_total_documents)
    {
        if (is_null($num_total_documents)) {
            throw new \InvalidArgumentException('non-nullable num_total_documents cannot be null');
        }
        $this->container['num_total_documents'] = $num_total_documents;

        return $this;
    }

    /**
     * Gets num_total_errored_documents
     *
     * @return int
     */
    public function getNumTotalErroredDocuments()
    {
        return $this->container['num_total_errored_documents'];
    }

    /**
     * Sets num_total_errored_documents
     *
     * @param int $num_total_errored_documents the total number of documents for this source marked as errored in SimSage.
     *
     * @return self
     */
    public function setNumTotalErroredDocuments($num_total_errored_documents)
    {
        if (is_null($num_total_errored_documents)) {
            throw new \InvalidArgumentException('non-nullable num_total_errored_documents cannot be null');
        }
        $this->container['num_total_errored_documents'] = $num_total_errored_documents;

        return $this;
    }

    /**
     * Gets use_default_relationships
     *
     * @return bool
     */
    public function getUseDefaultRelationships()
    {
        return $this->container['use_default_relationships'];
    }

    /**
     * Sets use_default_relationships
     *
     * @param bool $use_default_relationships \"true\" if this source is to use the default (built-in) SimSage relationships.  All user-defined relationships and language-entities will be used regardless of the value of this flag.
     *
     * @return self
     */
    public function setUseDefaultRelationships($use_default_relationships)
    {
        if (is_null($use_default_relationships)) {
            throw new \InvalidArgumentException('non-nullable use_default_relationships cannot be null');
        }
        $this->container['use_default_relationships'] = $use_default_relationships;

        return $this;
    }

    /**
     * Gets is_busy
     *
     * @return bool
     */
    public function getIsBusy()
    {
        return $this->container['is_busy'];
    }

    /**
     * Sets is_busy
     *
     * @param bool $is_busy \"true\" if this source is currently being optimized / processed by the index-optimizer.
     *
     * @return self
     */
    public function setIsBusy($is_busy)
    {
        if (is_null($is_busy)) {
            throw new \InvalidArgumentException('non-nullable is_busy cannot be null');
        }
        $this->container['is_busy'] = $is_busy;

        return $this;
    }

    /**
     * Gets auto_optimize
     *
     * @return bool
     */
    public function getAutoOptimize()
    {
        return $this->container['auto_optimize'];
    }

    /**
     * Sets auto_optimize
     *
     * @param bool $auto_optimize Do we run the index-optimizer automatically after this source finishes crawling?
     *
     * @return self
     */
    public function setAutoOptimize($auto_optimize)
    {
        if (is_null($auto_optimize)) {
            throw new \InvalidArgumentException('non-nullable auto_optimize cannot be null');
        }
        $this->container['auto_optimize'] = $auto_optimize;

        return $this;
    }

    /**
     * Gets store_binary
     *
     * @return bool
     */
    public function getStoreBinary()
    {
        return $this->container['store_binary'];
    }

    /**
     * Sets store_binary
     *
     * @param bool $store_binary \"true\" if this source is to store all documents locally on the SimSage platform
     *
     * @return self
     */
    public function setStoreBinary($store_binary)
    {
        if (is_null($store_binary)) {
            throw new \InvalidArgumentException('non-nullable store_binary cannot be null');
        }
        $this->container['store_binary'] = $store_binary;

        return $this;
    }

    /**
     * Gets versioned
     *
     * @return bool
     */
    public function getVersioned()
    {
        return $this->container['versioned'];
    }

    /**
     * Sets versioned
     *
     * @param bool $versioned \"true\" if this source is to store all versions of documents locally on the SimSage platform
     *
     * @return self
     */
    public function setVersioned($versioned)
    {
        if (is_null($versioned)) {
            throw new \InvalidArgumentException('non-nullable versioned cannot be null');
        }
        $this->container['versioned'] = $versioned;

        return $this;
    }

    /**
     * Gets write_to_cassandra
     *
     * @return bool
     */
    public function getWriteToCassandra()
    {
        return $this->container['write_to_cassandra'];
    }

    /**
     * Sets write_to_cassandra
     *
     * @param bool $write_to_cassandra \"true\" if this source is to write any changes direct to Cassandra, otherwise this source will collect indexes on disk first (for initial loading)
     *
     * @return self
     */
    public function setWriteToCassandra($write_to_cassandra)
    {
        if (is_null($write_to_cassandra)) {
            throw new \InvalidArgumentException('non-nullable write_to_cassandra cannot be null');
        }
        $this->container['write_to_cassandra'] = $write_to_cassandra;

        return $this;
    }

    /**
     * Gets processor_config
     *
     * @return string
     */
    public function getProcessorConfig()
    {
        return $this->container['processor_config'];
    }

    /**
     * Sets processor_config
     *
     * @param string $processor_config Json string defining any optional processors configured on the source
     *
     * @return self
     */
    public function setProcessorConfig($processor_config)
    {
        if (is_null($processor_config)) {
            throw new \InvalidArgumentException('non-nullable processor_config cannot be null');
        }
        $this->container['processor_config'] = $processor_config;

        return $this;
    }

    /**
     * Gets enable_document_similarity
     *
     * @return bool
     */
    public function getEnableDocumentSimilarity()
    {
        return $this->container['enable_document_similarity'];
    }

    /**
     * Sets enable_document_similarity
     *
     * @param bool $enable_document_similarity enable document similarity calculations.
     *
     * @return self
     */
    public function setEnableDocumentSimilarity($enable_document_similarity)
    {
        if (is_null($enable_document_similarity)) {
            throw new \InvalidArgumentException('non-nullable enable_document_similarity cannot be null');
        }
        $this->container['enable_document_similarity'] = $enable_document_similarity;

        return $this;
    }

    /**
     * Gets document_similarity_threshold
     *
     * @return float
     */
    public function getDocumentSimilarityThreshold()
    {
        return $this->container['document_similarity_threshold'];
    }

    /**
     * Sets document_similarity_threshold
     *
     * @param float $document_similarity_threshold the document similarity threshold for grouping documents, a value between 0.75 and 1.0
     *
     * @return self
     */
    public function setDocumentSimilarityThreshold($document_similarity_threshold)
    {
        if (is_null($document_similarity_threshold)) {
            throw new \InvalidArgumentException('non-nullable document_similarity_threshold cannot be null');
        }
        $this->container['document_similarity_threshold'] = $document_similarity_threshold;

        return $this;
    }

    /**
     * Gets is_external
     *
     * @return bool
     */
    public function getIsExternal()
    {
        return $this->container['is_external'];
    }

    /**
     * Sets is_external
     *
     * @param bool $is_external is this crawler to be connected as an external source using our external crawler software?
     *
     * @return self
     */
    public function setIsExternal($is_external)
    {
        if (is_null($is_external)) {
            throw new \InvalidArgumentException('non-nullable is_external cannot be null');
        }
        $this->container['is_external'] = $is_external;

        return $this;
    }

    /**
     * Gets use_ocr
     *
     * @return bool
     */
    public function getUseOcr()
    {
        return $this->container['use_ocr'];
    }

    /**
     * Sets use_ocr
     *
     * @param bool $use_ocr enable OCR processing for files in this source?
     *
     * @return self
     */
    public function setUseOcr($use_ocr)
    {
        if (is_null($use_ocr)) {
            throw new \InvalidArgumentException('non-nullable use_ocr cannot be null');
        }
        $this->container['use_ocr'] = $use_ocr;

        return $this;
    }

    /**
     * Gets use_stt
     *
     * @return bool
     */
    public function getUseStt()
    {
        return $this->container['use_stt'];
    }

    /**
     * Sets use_stt
     *
     * @param bool $use_stt enable Speech-to-text processing for files in this source?
     *
     * @return self
     */
    public function setUseStt($use_stt)
    {
        if (is_null($use_stt)) {
            throw new \InvalidArgumentException('non-nullable use_stt cannot be null');
        }
        $this->container['use_stt'] = $use_stt;

        return $this;
    }

    /**
     * Gets delta_indicator
     *
     * @return string
     */
    public function getDeltaIndicator()
    {
        return $this->container['delta_indicator'];
    }

    /**
     * Sets delta_indicator
     *
     * @param string $delta_indicator A saved value indicating last crawler state
     *
     * @return self
     */
    public function setDeltaIndicator($delta_indicator)
    {
        if (is_null($delta_indicator)) {
            throw new \InvalidArgumentException('non-nullable delta_indicator cannot be null');
        }
        $this->container['delta_indicator'] = $delta_indicator;

        return $this;
    }

    /**
     * Gets transmit_external_logs
     *
     * @return bool
     */
    public function getTransmitExternalLogs()
    {
        return $this->container['transmit_external_logs'];
    }

    /**
     * Sets transmit_external_logs
     *
     * @param bool $transmit_external_logs enabling sending of logs to SimSage for external crawlers
     *
     * @return self
     */
    public function setTransmitExternalLogs($transmit_external_logs)
    {
        if (is_null($transmit_external_logs)) {
            throw new \InvalidArgumentException('non-nullable transmit_external_logs cannot be null');
        }
        $this->container['transmit_external_logs'] = $transmit_external_logs;

        return $this;
    }

    /**
     * Gets external
     *
     * @return bool|null
     */
    public function getExternal()
    {
        return $this->container['external'];
    }

    /**
     * Sets external
     *
     * @param bool|null $external external
     *
     * @return self
     */
    public function setExternal($external)
    {
        if (is_null($external)) {
            throw new \InvalidArgumentException('non-nullable external cannot be null');
        }
        $this->container['external'] = $external;

        return $this;
    }

    /**
     * Gets crawling
     *
     * @return bool|null
     */
    public function getCrawling()
    {
        return $this->container['crawling'];
    }

    /**
     * Sets crawling
     *
     * @param bool|null $crawling crawling
     *
     * @return self
     */
    public function setCrawling($crawling)
    {
        if (is_null($crawling)) {
            throw new \InvalidArgumentException('non-nullable crawling cannot be null');
        }
        $this->container['crawling'] = $crawling;

        return $this;
    }

    /**
     * Gets busy
     *
     * @return bool|null
     */
    public function getBusy()
    {
        return $this->container['busy'];
    }

    /**
     * Sets busy
     *
     * @param bool|null $busy busy
     *
     * @return self
     */
    public function setBusy($busy)
    {
        if (is_null($busy)) {
            throw new \InvalidArgumentException('non-nullable busy cannot be null');
        }
        $this->container['busy'] = $busy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


