<?php
/**
 * CMSearchResult
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.13.31
 * Contact: info@simsage.co.uk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CMSearchResult Class Doc Comment
 *
 * @category Class
 * @description A single search result from the Semantic Search engine.  This presents a hit inside a SimSage document.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CMSearchResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CMSearchResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'kb_id' => 'string',
        'url' => 'string',
        'url_id' => 'int',
        'source_id' => 'int',
        'title' => 'string',
        'author' => 'string',
        'text_list' => 'string[]',
        'text_index' => 'int',
        'score' => 'float',
        'sort_desc' => 'bool',
        'qna_result' => 'bool',
        'first_sentence' => 'int',
        'created' => 'int',
        'uploaded' => 'int',
        'last_modified' => 'int',
        'document_type' => 'string',
        'num_sentences' => 'int',
        'num_words' => 'int',
        'num_relationships' => 'int',
        'binary_size' => 'int',
        'text_size' => 'int',
        'file_type' => 'string',
        'crawled' => 'int',
        'converted' => 'int',
        'parsed' => 'int',
        'indexed' => 'int',
        'previewed' => 'int',
        'similar_document_list' => '\OpenAPI\Client\Model\CMSimilarDocument[]',
        'related_list' => '\OpenAPI\Client\Model\CMDocumentRelationship[]',
        'metadata' => 'array<string,string>',
        'filename' => 'string',
        'folder_id' => 'string',
        'render_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'kb_id' => null,
        'url' => null,
        'url_id' => 'int32',
        'source_id' => 'int32',
        'title' => null,
        'author' => null,
        'text_list' => null,
        'text_index' => 'int32',
        'score' => 'float',
        'sort_desc' => null,
        'qna_result' => null,
        'first_sentence' => 'int32',
        'created' => 'int64',
        'uploaded' => 'int64',
        'last_modified' => 'int64',
        'document_type' => null,
        'num_sentences' => 'int32',
        'num_words' => 'int32',
        'num_relationships' => 'int32',
        'binary_size' => 'int64',
        'text_size' => 'int32',
        'file_type' => null,
        'crawled' => 'int64',
        'converted' => 'int64',
        'parsed' => 'int64',
        'indexed' => 'int64',
        'previewed' => 'int64',
        'similar_document_list' => null,
        'related_list' => null,
        'metadata' => null,
        'filename' => null,
        'folder_id' => null,
        'render_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'kb_id' => false,
		'url' => false,
		'url_id' => false,
		'source_id' => false,
		'title' => false,
		'author' => false,
		'text_list' => false,
		'text_index' => false,
		'score' => false,
		'sort_desc' => false,
		'qna_result' => false,
		'first_sentence' => false,
		'created' => false,
		'uploaded' => false,
		'last_modified' => false,
		'document_type' => false,
		'num_sentences' => false,
		'num_words' => false,
		'num_relationships' => false,
		'binary_size' => false,
		'text_size' => false,
		'file_type' => false,
		'crawled' => false,
		'converted' => false,
		'parsed' => false,
		'indexed' => false,
		'previewed' => false,
		'similar_document_list' => false,
		'related_list' => false,
		'metadata' => false,
		'filename' => false,
		'folder_id' => false,
		'render_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'kb_id' => 'kbId',
        'url' => 'url',
        'url_id' => 'urlId',
        'source_id' => 'sourceId',
        'title' => 'title',
        'author' => 'author',
        'text_list' => 'textList',
        'text_index' => 'textIndex',
        'score' => 'score',
        'sort_desc' => 'sortDesc',
        'qna_result' => 'qnaResult',
        'first_sentence' => 'firstSentence',
        'created' => 'created',
        'uploaded' => 'uploaded',
        'last_modified' => 'lastModified',
        'document_type' => 'documentType',
        'num_sentences' => 'numSentences',
        'num_words' => 'numWords',
        'num_relationships' => 'numRelationships',
        'binary_size' => 'binarySize',
        'text_size' => 'textSize',
        'file_type' => 'fileType',
        'crawled' => 'crawled',
        'converted' => 'converted',
        'parsed' => 'parsed',
        'indexed' => 'indexed',
        'previewed' => 'previewed',
        'similar_document_list' => 'similarDocumentList',
        'related_list' => 'relatedList',
        'metadata' => 'metadata',
        'filename' => 'filename',
        'folder_id' => 'folderId',
        'render_type' => 'renderType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'kb_id' => 'setKbId',
        'url' => 'setUrl',
        'url_id' => 'setUrlId',
        'source_id' => 'setSourceId',
        'title' => 'setTitle',
        'author' => 'setAuthor',
        'text_list' => 'setTextList',
        'text_index' => 'setTextIndex',
        'score' => 'setScore',
        'sort_desc' => 'setSortDesc',
        'qna_result' => 'setQnaResult',
        'first_sentence' => 'setFirstSentence',
        'created' => 'setCreated',
        'uploaded' => 'setUploaded',
        'last_modified' => 'setLastModified',
        'document_type' => 'setDocumentType',
        'num_sentences' => 'setNumSentences',
        'num_words' => 'setNumWords',
        'num_relationships' => 'setNumRelationships',
        'binary_size' => 'setBinarySize',
        'text_size' => 'setTextSize',
        'file_type' => 'setFileType',
        'crawled' => 'setCrawled',
        'converted' => 'setConverted',
        'parsed' => 'setParsed',
        'indexed' => 'setIndexed',
        'previewed' => 'setPreviewed',
        'similar_document_list' => 'setSimilarDocumentList',
        'related_list' => 'setRelatedList',
        'metadata' => 'setMetadata',
        'filename' => 'setFilename',
        'folder_id' => 'setFolderId',
        'render_type' => 'setRenderType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'kb_id' => 'getKbId',
        'url' => 'getUrl',
        'url_id' => 'getUrlId',
        'source_id' => 'getSourceId',
        'title' => 'getTitle',
        'author' => 'getAuthor',
        'text_list' => 'getTextList',
        'text_index' => 'getTextIndex',
        'score' => 'getScore',
        'sort_desc' => 'getSortDesc',
        'qna_result' => 'getQnaResult',
        'first_sentence' => 'getFirstSentence',
        'created' => 'getCreated',
        'uploaded' => 'getUploaded',
        'last_modified' => 'getLastModified',
        'document_type' => 'getDocumentType',
        'num_sentences' => 'getNumSentences',
        'num_words' => 'getNumWords',
        'num_relationships' => 'getNumRelationships',
        'binary_size' => 'getBinarySize',
        'text_size' => 'getTextSize',
        'file_type' => 'getFileType',
        'crawled' => 'getCrawled',
        'converted' => 'getConverted',
        'parsed' => 'getParsed',
        'indexed' => 'getIndexed',
        'previewed' => 'getPreviewed',
        'similar_document_list' => 'getSimilarDocumentList',
        'related_list' => 'getRelatedList',
        'metadata' => 'getMetadata',
        'filename' => 'getFilename',
        'folder_id' => 'getFolderId',
        'render_type' => 'getRenderType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('kb_id', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('url_id', $data ?? [], null);
        $this->setIfExists('source_id', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('author', $data ?? [], null);
        $this->setIfExists('text_list', $data ?? [], null);
        $this->setIfExists('text_index', $data ?? [], null);
        $this->setIfExists('score', $data ?? [], null);
        $this->setIfExists('sort_desc', $data ?? [], null);
        $this->setIfExists('qna_result', $data ?? [], null);
        $this->setIfExists('first_sentence', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('uploaded', $data ?? [], null);
        $this->setIfExists('last_modified', $data ?? [], null);
        $this->setIfExists('document_type', $data ?? [], null);
        $this->setIfExists('num_sentences', $data ?? [], null);
        $this->setIfExists('num_words', $data ?? [], null);
        $this->setIfExists('num_relationships', $data ?? [], null);
        $this->setIfExists('binary_size', $data ?? [], null);
        $this->setIfExists('text_size', $data ?? [], null);
        $this->setIfExists('file_type', $data ?? [], null);
        $this->setIfExists('crawled', $data ?? [], null);
        $this->setIfExists('converted', $data ?? [], null);
        $this->setIfExists('parsed', $data ?? [], null);
        $this->setIfExists('indexed', $data ?? [], null);
        $this->setIfExists('previewed', $data ?? [], null);
        $this->setIfExists('similar_document_list', $data ?? [], null);
        $this->setIfExists('related_list', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('filename', $data ?? [], null);
        $this->setIfExists('folder_id', $data ?? [], null);
        $this->setIfExists('render_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['kb_id'] === null) {
            $invalidProperties[] = "'kb_id' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['url_id'] === null) {
            $invalidProperties[] = "'url_id' can't be null";
        }
        if ($this->container['source_id'] === null) {
            $invalidProperties[] = "'source_id' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['author'] === null) {
            $invalidProperties[] = "'author' can't be null";
        }
        if ($this->container['text_list'] === null) {
            $invalidProperties[] = "'text_list' can't be null";
        }
        if ($this->container['text_index'] === null) {
            $invalidProperties[] = "'text_index' can't be null";
        }
        if ($this->container['score'] === null) {
            $invalidProperties[] = "'score' can't be null";
        }
        if ($this->container['sort_desc'] === null) {
            $invalidProperties[] = "'sort_desc' can't be null";
        }
        if ($this->container['qna_result'] === null) {
            $invalidProperties[] = "'qna_result' can't be null";
        }
        if ($this->container['first_sentence'] === null) {
            $invalidProperties[] = "'first_sentence' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['uploaded'] === null) {
            $invalidProperties[] = "'uploaded' can't be null";
        }
        if ($this->container['last_modified'] === null) {
            $invalidProperties[] = "'last_modified' can't be null";
        }
        if ($this->container['document_type'] === null) {
            $invalidProperties[] = "'document_type' can't be null";
        }
        if ($this->container['num_sentences'] === null) {
            $invalidProperties[] = "'num_sentences' can't be null";
        }
        if ($this->container['num_words'] === null) {
            $invalidProperties[] = "'num_words' can't be null";
        }
        if ($this->container['num_relationships'] === null) {
            $invalidProperties[] = "'num_relationships' can't be null";
        }
        if ($this->container['binary_size'] === null) {
            $invalidProperties[] = "'binary_size' can't be null";
        }
        if ($this->container['text_size'] === null) {
            $invalidProperties[] = "'text_size' can't be null";
        }
        if ($this->container['file_type'] === null) {
            $invalidProperties[] = "'file_type' can't be null";
        }
        if ($this->container['crawled'] === null) {
            $invalidProperties[] = "'crawled' can't be null";
        }
        if ($this->container['converted'] === null) {
            $invalidProperties[] = "'converted' can't be null";
        }
        if ($this->container['parsed'] === null) {
            $invalidProperties[] = "'parsed' can't be null";
        }
        if ($this->container['indexed'] === null) {
            $invalidProperties[] = "'indexed' can't be null";
        }
        if ($this->container['previewed'] === null) {
            $invalidProperties[] = "'previewed' can't be null";
        }
        if ($this->container['similar_document_list'] === null) {
            $invalidProperties[] = "'similar_document_list' can't be null";
        }
        if ($this->container['related_list'] === null) {
            $invalidProperties[] = "'related_list' can't be null";
        }
        if ($this->container['metadata'] === null) {
            $invalidProperties[] = "'metadata' can't be null";
        }
        if ($this->container['filename'] === null) {
            $invalidProperties[] = "'filename' can't be null";
        }
        if ($this->container['folder_id'] === null) {
            $invalidProperties[] = "'folder_id' can't be null";
        }
        if ($this->container['render_type'] === null) {
            $invalidProperties[] = "'render_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets kb_id
     *
     * @return string
     */
    public function getKbId()
    {
        return $this->container['kb_id'];
    }

    /**
     * Sets kb_id
     *
     * @param string $kb_id the knowledge-base id (its guid id)
     *
     * @return self
     */
    public function setKbId($kb_id)
    {
        if (is_null($kb_id)) {
            throw new \InvalidArgumentException('non-nullable kb_id cannot be null');
        }
        $this->container['kb_id'] = $kb_id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url the url of the document that matched
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets url_id
     *
     * @return int
     */
    public function getUrlId()
    {
        return $this->container['url_id'];
    }

    /**
     * Sets url_id
     *
     * @param int $url_id the internal SimSage id for this url (unique only within a knowledge-base)
     *
     * @return self
     */
    public function setUrlId($url_id)
    {
        if (is_null($url_id)) {
            throw new \InvalidArgumentException('non-nullable url_id cannot be null');
        }
        $this->container['url_id'] = $url_id;

        return $this;
    }

    /**
     * Gets source_id
     *
     * @return int
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param int $source_id the source-id of this result (ie. the source's id)
     *
     * @return self
     */
    public function setSourceId($source_id)
    {
        if (is_null($source_id)) {
            throw new \InvalidArgumentException('non-nullable source_id cannot be null');
        }
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title the title of this document/record (can be empty)
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets author
     *
     * @return string
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param string $author the author of this document/record (can be empty)
     *
     * @return self
     */
    public function setAuthor($author)
    {
        if (is_null($author)) {
            throw new \InvalidArgumentException('non-nullable author cannot be null');
        }
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets text_list
     *
     * @return string[]
     */
    public function getTextList()
    {
        return $this->container['text_list'];
    }

    /**
     * Sets text_list
     *
     * @param string[] $text_list A list of matching fragments in this document, with highlight markers.
     *
     * @return self
     */
    public function setTextList($text_list)
    {
        if (is_null($text_list)) {
            throw new \InvalidArgumentException('non-nullable text_list cannot be null');
        }
        $this->container['text_list'] = $text_list;

        return $this;
    }

    /**
     * Gets text_index
     *
     * @return int
     */
    public function getTextIndex()
    {
        return $this->container['text_index'];
    }

    /**
     * Sets text_index
     *
     * @param int $text_index in case of multiple matches in textList, the best match index of these items starting at zero (0)
     *
     * @return self
     */
    public function setTextIndex($text_index)
    {
        if (is_null($text_index)) {
            throw new \InvalidArgumentException('non-nullable text_index cannot be null');
        }
        $this->container['text_index'] = $text_index;

        return $this;
    }

    /**
     * Gets score
     *
     * @return float
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param float $score the relative score of this match, the bigger, the better
     *
     * @return self
     */
    public function setScore($score)
    {
        if (is_null($score)) {
            throw new \InvalidArgumentException('non-nullable score cannot be null');
        }
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets sort_desc
     *
     * @return bool
     */
    public function getSortDesc()
    {
        return $this->container['sort_desc'];
    }

    /**
     * Sets sort_desc
     *
     * @param bool $sort_desc was this document along with any others sorted ascending or descending?
     *
     * @return self
     */
    public function setSortDesc($sort_desc)
    {
        if (is_null($sort_desc)) {
            throw new \InvalidArgumentException('non-nullable sort_desc cannot be null');
        }
        $this->container['sort_desc'] = $sort_desc;

        return $this;
    }

    /**
     * Gets qna_result
     *
     * @return bool
     */
    public function getQnaResult()
    {
        return $this->container['qna_result'];
    }

    /**
     * Sets qna_result
     *
     * @param bool $qna_result is this item a Q&A result or a search result?
     *
     * @return self
     */
    public function setQnaResult($qna_result)
    {
        if (is_null($qna_result)) {
            throw new \InvalidArgumentException('non-nullable qna_result cannot be null');
        }
        $this->container['qna_result'] = $qna_result;

        return $this;
    }

    /**
     * Gets first_sentence
     *
     * @return int
     */
    public function getFirstSentence()
    {
        return $this->container['first_sentence'];
    }

    /**
     * Sets first_sentence
     *
     * @param int $first_sentence the id of the first sentence in this result
     *
     * @return self
     */
    public function setFirstSentence($first_sentence)
    {
        if (is_null($first_sentence)) {
            throw new \InvalidArgumentException('non-nullable first_sentence cannot be null');
        }
        $this->container['first_sentence'] = $first_sentence;

        return $this;
    }

    /**
     * Gets created
     *
     * @return int
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param int $created document creation date-time as a unix date-time
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets uploaded
     *
     * @return int
     */
    public function getUploaded()
    {
        return $this->container['uploaded'];
    }

    /**
     * Sets uploaded
     *
     * @param int $uploaded document uploaded to SimSage date-time as a unix date-time
     *
     * @return self
     */
    public function setUploaded($uploaded)
    {
        if (is_null($uploaded)) {
            throw new \InvalidArgumentException('non-nullable uploaded cannot be null');
        }
        $this->container['uploaded'] = $uploaded;

        return $this;
    }

    /**
     * Gets last_modified
     *
     * @return int
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     *
     * @param int $last_modified document last-modified date-time as a unix date-time
     *
     * @return self
     */
    public function setLastModified($last_modified)
    {
        if (is_null($last_modified)) {
            throw new \InvalidArgumentException('non-nullable last_modified cannot be null');
        }
        $this->container['last_modified'] = $last_modified;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string $document_type the type of this document/record as a three or four letter file extension
     *
     * @return self
     */
    public function setDocumentType($document_type)
    {
        if (is_null($document_type)) {
            throw new \InvalidArgumentException('non-nullable document_type cannot be null');
        }
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets num_sentences
     *
     * @return int
     */
    public function getNumSentences()
    {
        return $this->container['num_sentences'];
    }

    /**
     * Sets num_sentences
     *
     * @param int $num_sentences the total number of sentences in the body of this document
     *
     * @return self
     */
    public function setNumSentences($num_sentences)
    {
        if (is_null($num_sentences)) {
            throw new \InvalidArgumentException('non-nullable num_sentences cannot be null');
        }
        $this->container['num_sentences'] = $num_sentences;

        return $this;
    }

    /**
     * Gets num_words
     *
     * @return int
     */
    public function getNumWords()
    {
        return $this->container['num_words'];
    }

    /**
     * Sets num_words
     *
     * @param int $num_words the total number of words and tokens (eg. '.') in the body of this document
     *
     * @return self
     */
    public function setNumWords($num_words)
    {
        if (is_null($num_words)) {
            throw new \InvalidArgumentException('non-nullable num_words cannot be null');
        }
        $this->container['num_words'] = $num_words;

        return $this;
    }

    /**
     * Gets num_relationships
     *
     * @return int
     */
    public function getNumRelationships()
    {
        return $this->container['num_relationships'];
    }

    /**
     * Sets num_relationships
     *
     * @param int $num_relationships the total number of relationships expanded from the words in this document
     *
     * @return self
     */
    public function setNumRelationships($num_relationships)
    {
        if (is_null($num_relationships)) {
            throw new \InvalidArgumentException('non-nullable num_relationships cannot be null');
        }
        $this->container['num_relationships'] = $num_relationships;

        return $this;
    }

    /**
     * Gets binary_size
     *
     * @return int
     */
    public function getBinarySize()
    {
        return $this->container['binary_size'];
    }

    /**
     * Sets binary_size
     *
     * @param int $binary_size the binary-size of the original document in bytes
     *
     * @return self
     */
    public function setBinarySize($binary_size)
    {
        if (is_null($binary_size)) {
            throw new \InvalidArgumentException('non-nullable binary_size cannot be null');
        }
        $this->container['binary_size'] = $binary_size;

        return $this;
    }

    /**
     * Gets text_size
     *
     * @return int
     */
    public function getTextSize()
    {
        return $this->container['text_size'];
    }

    /**
     * Sets text_size
     *
     * @param int $text_size the text-size of the original document in number of characters
     *
     * @return self
     */
    public function setTextSize($text_size)
    {
        if (is_null($text_size)) {
            throw new \InvalidArgumentException('non-nullable text_size cannot be null');
        }
        $this->container['text_size'] = $text_size;

        return $this;
    }

    /**
     * Gets file_type
     *
     * @return string
     */
    public function getFileType()
    {
        return $this->container['file_type'];
    }

    /**
     * Sets file_type
     *
     * @param string $file_type the DROID file-type of this document/record (can be empty)
     *
     * @return self
     */
    public function setFileType($file_type)
    {
        if (is_null($file_type)) {
            throw new \InvalidArgumentException('non-nullable file_type cannot be null');
        }
        $this->container['file_type'] = $file_type;

        return $this;
    }

    /**
     * Gets crawled
     *
     * @return int
     */
    public function getCrawled()
    {
        return $this->container['crawled'];
    }

    /**
     * Sets crawled
     *
     * @param int $crawled document crawled (ie. picked up by SimSage) date-time as a unix date-time
     *
     * @return self
     */
    public function setCrawled($crawled)
    {
        if (is_null($crawled)) {
            throw new \InvalidArgumentException('non-nullable crawled cannot be null');
        }
        $this->container['crawled'] = $crawled;

        return $this;
    }

    /**
     * Gets converted
     *
     * @return int
     */
    public function getConverted()
    {
        return $this->container['converted'];
    }

    /**
     * Sets converted
     *
     * @param int $converted document conversion (ie. turned into text by SimSage) date-time as a unix date-time
     *
     * @return self
     */
    public function setConverted($converted)
    {
        if (is_null($converted)) {
            throw new \InvalidArgumentException('non-nullable converted cannot be null');
        }
        $this->container['converted'] = $converted;

        return $this;
    }

    /**
     * Gets parsed
     *
     * @return int
     */
    public function getParsed()
    {
        return $this->container['parsed'];
    }

    /**
     * Sets parsed
     *
     * @param int $parsed document parsed (ie. language analyzed by SimSage) date-time as a unix date-time
     *
     * @return self
     */
    public function setParsed($parsed)
    {
        if (is_null($parsed)) {
            throw new \InvalidArgumentException('non-nullable parsed cannot be null');
        }
        $this->container['parsed'] = $parsed;

        return $this;
    }

    /**
     * Gets indexed
     *
     * @return int
     */
    public function getIndexed()
    {
        return $this->container['indexed'];
    }

    /**
     * Sets indexed
     *
     * @param int $indexed document indexed (ie. creation of inverted indices by SimSage) date-time as a unix date-time
     *
     * @return self
     */
    public function setIndexed($indexed)
    {
        if (is_null($indexed)) {
            throw new \InvalidArgumentException('non-nullable indexed cannot be null');
        }
        $this->container['indexed'] = $indexed;

        return $this;
    }

    /**
     * Gets previewed
     *
     * @return int
     */
    public function getPreviewed()
    {
        return $this->container['previewed'];
    }

    /**
     * Sets previewed
     *
     * @param int $previewed document preview generated (ie. creation of thumb-nail images for this document by SimSage) date-time as a unix date-time
     *
     * @return self
     */
    public function setPreviewed($previewed)
    {
        if (is_null($previewed)) {
            throw new \InvalidArgumentException('non-nullable previewed cannot be null');
        }
        $this->container['previewed'] = $previewed;

        return $this;
    }

    /**
     * Gets similar_document_list
     *
     * @return \OpenAPI\Client\Model\CMSimilarDocument[]
     */
    public function getSimilarDocumentList()
    {
        return $this->container['similar_document_list'];
    }

    /**
     * Sets similar_document_list
     *
     * @param \OpenAPI\Client\Model\CMSimilarDocument[] $similar_document_list A list of similar documents matched by this query.
     *
     * @return self
     */
    public function setSimilarDocumentList($similar_document_list)
    {
        if (is_null($similar_document_list)) {
            throw new \InvalidArgumentException('non-nullable similar_document_list cannot be null');
        }
        $this->container['similar_document_list'] = $similar_document_list;

        return $this;
    }

    /**
     * Gets related_list
     *
     * @return \OpenAPI\Client\Model\CMDocumentRelationship[]
     */
    public function getRelatedList()
    {
        return $this->container['related_list'];
    }

    /**
     * Sets related_list
     *
     * @param \OpenAPI\Client\Model\CMDocumentRelationship[] $related_list A list of similar documents matched by this query.
     *
     * @return self
     */
    public function setRelatedList($related_list)
    {
        if (is_null($related_list)) {
            throw new \InvalidArgumentException('non-nullable related_list cannot be null');
        }
        $this->container['related_list'] = $related_list;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,string>
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,string> $metadata A set of name-values of metadata associated with this document
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets filename
     *
     * @return string
     */
    public function getFilename()
    {
        return $this->container['filename'];
    }

    /**
     * Sets filename
     *
     * @param string $filename the filename of this document in the DMS system
     *
     * @return self
     */
    public function setFilename($filename)
    {
        if (is_null($filename)) {
            throw new \InvalidArgumentException('non-nullable filename cannot be null');
        }
        $this->container['filename'] = $filename;

        return $this;
    }

    /**
     * Gets folder_id
     *
     * @return string
     */
    public function getFolderId()
    {
        return $this->container['folder_id'];
    }

    /**
     * Sets folder_id
     *
     * @param string $folder_id the folderId of this item in the DMS system
     *
     * @return self
     */
    public function setFolderId($folder_id)
    {
        if (is_null($folder_id)) {
            throw new \InvalidArgumentException('non-nullable folder_id cannot be null');
        }
        $this->container['folder_id'] = $folder_id;

        return $this;
    }

    /**
     * Gets render_type
     *
     * @return string
     */
    public function getRenderType()
    {
        return $this->container['render_type'];
    }

    /**
     * Sets render_type
     *
     * @param string $render_type how should this item be rendered? (default \"rt search\")
     *
     * @return self
     */
    public function setRenderType($render_type)
    {
        if (is_null($render_type)) {
            throw new \InvalidArgumentException('non-nullable render_type cannot be null');
        }
        $this->container['render_type'] = $render_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


