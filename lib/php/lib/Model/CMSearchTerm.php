<?php
/**
 * CMSearchTerm
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.14.12
 * Contact: info@simsage.co.uk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CMSearchTerm Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CMSearchTerm implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CMSearchTerm';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'key' => 'string',
        'caption' => 'string',
        'search_usage' => 'string',
        'redaction_usage' => 'string',
        'default_value' => 'string',
        'sub_terms' => '\OpenAPI\Client\Model\CMSubTerm[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'key' => null,
        'caption' => null,
        'search_usage' => null,
        'redaction_usage' => null,
        'default_value' => null,
        'sub_terms' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'key' => false,
		'caption' => false,
		'search_usage' => false,
		'redaction_usage' => false,
		'default_value' => false,
		'sub_terms' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key' => 'key',
        'caption' => 'caption',
        'search_usage' => 'searchUsage',
        'redaction_usage' => 'redactionUsage',
        'default_value' => 'defaultValue',
        'sub_terms' => 'subTerms'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key' => 'setKey',
        'caption' => 'setCaption',
        'search_usage' => 'setSearchUsage',
        'redaction_usage' => 'setRedactionUsage',
        'default_value' => 'setDefaultValue',
        'sub_terms' => 'setSubTerms'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key' => 'getKey',
        'caption' => 'getCaption',
        'search_usage' => 'getSearchUsage',
        'redaction_usage' => 'getRedactionUsage',
        'default_value' => 'getDefaultValue',
        'sub_terms' => 'getSubTerms'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SEARCH_USAGE_REQUIRED = 'REQUIRED';
    public const SEARCH_USAGE_NOT_AVAILABLE = 'NOT_AVAILABLE';
    public const SEARCH_USAGE_DEFAULT_ON = 'DEFAULT_ON';
    public const SEARCH_USAGE_DEFAULT_OFF = 'DEFAULT_OFF';
    public const REDACTION_USAGE_REQUIRED = 'REQUIRED';
    public const REDACTION_USAGE_NOT_AVAILABLE = 'NOT_AVAILABLE';
    public const REDACTION_USAGE_DEFAULT_ON = 'DEFAULT_ON';
    public const REDACTION_USAGE_DEFAULT_OFF = 'DEFAULT_OFF';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSearchUsageAllowableValues()
    {
        return [
            self::SEARCH_USAGE_REQUIRED,
            self::SEARCH_USAGE_NOT_AVAILABLE,
            self::SEARCH_USAGE_DEFAULT_ON,
            self::SEARCH_USAGE_DEFAULT_OFF,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRedactionUsageAllowableValues()
    {
        return [
            self::REDACTION_USAGE_REQUIRED,
            self::REDACTION_USAGE_NOT_AVAILABLE,
            self::REDACTION_USAGE_DEFAULT_ON,
            self::REDACTION_USAGE_DEFAULT_OFF,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('key', $data ?? [], null);
        $this->setIfExists('caption', $data ?? [], null);
        $this->setIfExists('search_usage', $data ?? [], null);
        $this->setIfExists('redaction_usage', $data ?? [], null);
        $this->setIfExists('default_value', $data ?? [], null);
        $this->setIfExists('sub_terms', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['key'] === null) {
            $invalidProperties[] = "'key' can't be null";
        }
        if ($this->container['caption'] === null) {
            $invalidProperties[] = "'caption' can't be null";
        }
        if ($this->container['search_usage'] === null) {
            $invalidProperties[] = "'search_usage' can't be null";
        }
        $allowedValues = $this->getSearchUsageAllowableValues();
        if (!is_null($this->container['search_usage']) && !in_array($this->container['search_usage'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'search_usage', must be one of '%s'",
                $this->container['search_usage'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['redaction_usage'] === null) {
            $invalidProperties[] = "'redaction_usage' can't be null";
        }
        $allowedValues = $this->getRedactionUsageAllowableValues();
        if (!is_null($this->container['redaction_usage']) && !in_array($this->container['redaction_usage'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'redaction_usage', must be one of '%s'",
                $this->container['redaction_usage'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['default_value'] === null) {
            $invalidProperties[] = "'default_value' can't be null";
        }
        if ($this->container['sub_terms'] === null) {
            $invalidProperties[] = "'sub_terms' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets key
     *
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string $key key
     *
     * @return self
     */
    public function setKey($key)
    {
        if (is_null($key)) {
            throw new \InvalidArgumentException('non-nullable key cannot be null');
        }
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets caption
     *
     * @return string
     */
    public function getCaption()
    {
        return $this->container['caption'];
    }

    /**
     * Sets caption
     *
     * @param string $caption caption
     *
     * @return self
     */
    public function setCaption($caption)
    {
        if (is_null($caption)) {
            throw new \InvalidArgumentException('non-nullable caption cannot be null');
        }
        $this->container['caption'] = $caption;

        return $this;
    }

    /**
     * Gets search_usage
     *
     * @return string
     */
    public function getSearchUsage()
    {
        return $this->container['search_usage'];
    }

    /**
     * Sets search_usage
     *
     * @param string $search_usage search_usage
     *
     * @return self
     */
    public function setSearchUsage($search_usage)
    {
        if (is_null($search_usage)) {
            throw new \InvalidArgumentException('non-nullable search_usage cannot be null');
        }
        $allowedValues = $this->getSearchUsageAllowableValues();
        if (!in_array($search_usage, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'search_usage', must be one of '%s'",
                    $search_usage,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['search_usage'] = $search_usage;

        return $this;
    }

    /**
     * Gets redaction_usage
     *
     * @return string
     */
    public function getRedactionUsage()
    {
        return $this->container['redaction_usage'];
    }

    /**
     * Sets redaction_usage
     *
     * @param string $redaction_usage redaction_usage
     *
     * @return self
     */
    public function setRedactionUsage($redaction_usage)
    {
        if (is_null($redaction_usage)) {
            throw new \InvalidArgumentException('non-nullable redaction_usage cannot be null');
        }
        $allowedValues = $this->getRedactionUsageAllowableValues();
        if (!in_array($redaction_usage, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'redaction_usage', must be one of '%s'",
                    $redaction_usage,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['redaction_usage'] = $redaction_usage;

        return $this;
    }

    /**
     * Gets default_value
     *
     * @return string
     */
    public function getDefaultValue()
    {
        return $this->container['default_value'];
    }

    /**
     * Sets default_value
     *
     * @param string $default_value default_value
     *
     * @return self
     */
    public function setDefaultValue($default_value)
    {
        if (is_null($default_value)) {
            throw new \InvalidArgumentException('non-nullable default_value cannot be null');
        }
        $this->container['default_value'] = $default_value;

        return $this;
    }

    /**
     * Gets sub_terms
     *
     * @return \OpenAPI\Client\Model\CMSubTerm[]
     */
    public function getSubTerms()
    {
        return $this->container['sub_terms'];
    }

    /**
     * Sets sub_terms
     *
     * @param \OpenAPI\Client\Model\CMSubTerm[] $sub_terms sub_terms
     *
     * @return self
     */
    public function setSubTerms($sub_terms)
    {
        if (is_null($sub_terms)) {
            throw new \InvalidArgumentException('non-nullable sub_terms cannot be null');
        }
        $this->container['sub_terms'] = $sub_terms;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


