<?php
/**
 * DataprojectApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * DataprojectApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DataprojectApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addComment' => [
            'application/json',
        ],
        'allTasks' => [
            'application/json',
        ],
        'changeTaskPhase' => [
            'application/json',
        ],
        'claimDocument' => [
            'application/json',
        ],
        'crawlerStatus' => [
            'application/json',
        ],
        'documentsByTokens' => [
            'application/json',
        ],
        'filteredComments' => [
            'application/json',
        ],
        'getDocumentRedactionInfo' => [
            'application/json',
        ],
        'getProjectDefinition' => [
            'application/json',
        ],
        'getProjectReview' => [
            'application/json',
        ],
        'getProjectSlice' => [
            'application/json',
        ],
        'getSearchResultSummary' => [
            'application/json',
        ],
        'getSearchResultSummaryForReview' => [
            'application/json',
        ],
        'nextDocument' => [
            'application/json',
        ],
        'pdfBinary' => [
            'application/json',
        ],
        'projectTypes' => [
            'application/json',
        ],
        'reassignSliceDocument' => [
            'application/json',
        ],
        'redactedDocument' => [
            'application/json',
        ],
        'removeSliceDocument' => [
            'application/json',
        ],
        'resetEvolve' => [
            'application/json',
        ],
        'saveProjectDefinition' => [
            'application/json',
        ],
        'setSliceConfig' => [
            'application/json',
        ],
        'slicedDocuments' => [
            'application/json',
        ],
        'startProject' => [
            'application/json',
        ],
        'updateDocumentStatus' => [
            'application/json',
        ],
        'updateRedactions' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addComment
     *
     * Create Comment
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMNewComment $cm_new_comment cm_new_comment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addComment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|string
     */
    public function addComment($session_id, $cm_new_comment, string $contentType = self::contentTypes['addComment'][0])
    {
        list($response) = $this->addCommentWithHttpInfo($session_id, $cm_new_comment, $contentType);
        return $response;
    }

    /**
     * Operation addCommentWithHttpInfo
     *
     * Create Comment
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMNewComment $cm_new_comment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addComment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function addCommentWithHttpInfo($session_id, $cm_new_comment, string $contentType = self::contentTypes['addComment'][0])
    {
        $request = $this->addCommentRequest($session_id, $cm_new_comment, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addCommentAsync
     *
     * Create Comment
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMNewComment $cm_new_comment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCommentAsync($session_id, $cm_new_comment, string $contentType = self::contentTypes['addComment'][0])
    {
        return $this->addCommentAsyncWithHttpInfo($session_id, $cm_new_comment, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addCommentAsyncWithHttpInfo
     *
     * Create Comment
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMNewComment $cm_new_comment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCommentAsyncWithHttpInfo($session_id, $cm_new_comment, string $contentType = self::contentTypes['addComment'][0])
    {
        $returnType = 'string';
        $request = $this->addCommentRequest($session_id, $cm_new_comment, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addComment'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMNewComment $cm_new_comment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addCommentRequest($session_id, $cm_new_comment, string $contentType = self::contentTypes['addComment'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling addComment'
            );
        }

        // verify the required parameter 'cm_new_comment' is set
        if ($cm_new_comment === null || (is_array($cm_new_comment) && count($cm_new_comment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_new_comment when calling addComment'
            );
        }


        $resourcePath = '/api/dataproject/comment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_new_comment)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_new_comment));
            } else {
                $httpBody = $cm_new_comment;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation allTasks
     *
     * get Running Projects
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMQueueFilter $cm_queue_filter cm_queue_filter (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['allTasks'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\CMPagedQueueItems
     */
    public function allTasks($session_id, $cm_queue_filter, string $contentType = self::contentTypes['allTasks'][0])
    {
        list($response) = $this->allTasksWithHttpInfo($session_id, $cm_queue_filter, $contentType);
        return $response;
    }

    /**
     * Operation allTasksWithHttpInfo
     *
     * get Running Projects
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMQueueFilter $cm_queue_filter (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['allTasks'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\CMPagedQueueItems, HTTP status code, HTTP response headers (array of strings)
     */
    public function allTasksWithHttpInfo($session_id, $cm_queue_filter, string $contentType = self::contentTypes['allTasks'][0])
    {
        $request = $this->allTasksRequest($session_id, $cm_queue_filter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\CMPagedQueueItems' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMPagedQueueItems' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMPagedQueueItems', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMPagedQueueItems';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMPagedQueueItems',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation allTasksAsync
     *
     * get Running Projects
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMQueueFilter $cm_queue_filter (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['allTasks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function allTasksAsync($session_id, $cm_queue_filter, string $contentType = self::contentTypes['allTasks'][0])
    {
        return $this->allTasksAsyncWithHttpInfo($session_id, $cm_queue_filter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation allTasksAsyncWithHttpInfo
     *
     * get Running Projects
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMQueueFilter $cm_queue_filter (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['allTasks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function allTasksAsyncWithHttpInfo($session_id, $cm_queue_filter, string $contentType = self::contentTypes['allTasks'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMPagedQueueItems';
        $request = $this->allTasksRequest($session_id, $cm_queue_filter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'allTasks'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMQueueFilter $cm_queue_filter (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['allTasks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function allTasksRequest($session_id, $cm_queue_filter, string $contentType = self::contentTypes['allTasks'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling allTasks'
            );
        }

        // verify the required parameter 'cm_queue_filter' is set
        if ($cm_queue_filter === null || (is_array($cm_queue_filter) && count($cm_queue_filter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_queue_filter when calling allTasks'
            );
        }


        $resourcePath = '/api/dataproject/runningprojects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_queue_filter)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_queue_filter));
            } else {
                $httpBody = $cm_queue_filter;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation changeTaskPhase
     *
     * Change Task Phase
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMChangeTaskPhase $cm_change_task_phase cm_change_task_phase (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changeTaskPhase'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|\OpenAPI\Client\Model\JsonMessage
     */
    public function changeTaskPhase($session_id, $cm_change_task_phase, string $contentType = self::contentTypes['changeTaskPhase'][0])
    {
        list($response) = $this->changeTaskPhaseWithHttpInfo($session_id, $cm_change_task_phase, $contentType);
        return $response;
    }

    /**
     * Operation changeTaskPhaseWithHttpInfo
     *
     * Change Task Phase
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMChangeTaskPhase $cm_change_task_phase (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changeTaskPhase'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function changeTaskPhaseWithHttpInfo($session_id, $cm_change_task_phase, string $contentType = self::contentTypes['changeTaskPhase'][0])
    {
        $request = $this->changeTaskPhaseRequest($session_id, $cm_change_task_phase, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation changeTaskPhaseAsync
     *
     * Change Task Phase
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMChangeTaskPhase $cm_change_task_phase (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changeTaskPhase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changeTaskPhaseAsync($session_id, $cm_change_task_phase, string $contentType = self::contentTypes['changeTaskPhase'][0])
    {
        return $this->changeTaskPhaseAsyncWithHttpInfo($session_id, $cm_change_task_phase, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation changeTaskPhaseAsyncWithHttpInfo
     *
     * Change Task Phase
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMChangeTaskPhase $cm_change_task_phase (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changeTaskPhase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changeTaskPhaseAsyncWithHttpInfo($session_id, $cm_change_task_phase, string $contentType = self::contentTypes['changeTaskPhase'][0])
    {
        $returnType = 'string';
        $request = $this->changeTaskPhaseRequest($session_id, $cm_change_task_phase, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'changeTaskPhase'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMChangeTaskPhase $cm_change_task_phase (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changeTaskPhase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function changeTaskPhaseRequest($session_id, $cm_change_task_phase, string $contentType = self::contentTypes['changeTaskPhase'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling changeTaskPhase'
            );
        }

        // verify the required parameter 'cm_change_task_phase' is set
        if ($cm_change_task_phase === null || (is_array($cm_change_task_phase) && count($cm_change_task_phase) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_change_task_phase when calling changeTaskPhase'
            );
        }


        $resourcePath = '/api/dataproject/changetaskphase';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_change_task_phase)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_change_task_phase));
            } else {
                $httpBody = $cm_change_task_phase;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation claimDocument
     *
     * Claim sliced document
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMClaimDocument $cm_claim_document cm_claim_document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['claimDocument'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\ReturnedDocument
     */
    public function claimDocument($session_id, $cm_claim_document, string $contentType = self::contentTypes['claimDocument'][0])
    {
        list($response) = $this->claimDocumentWithHttpInfo($session_id, $cm_claim_document, $contentType);
        return $response;
    }

    /**
     * Operation claimDocumentWithHttpInfo
     *
     * Claim sliced document
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMClaimDocument $cm_claim_document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['claimDocument'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\ReturnedDocument, HTTP status code, HTTP response headers (array of strings)
     */
    public function claimDocumentWithHttpInfo($session_id, $cm_claim_document, string $contentType = self::contentTypes['claimDocument'][0])
    {
        $request = $this->claimDocumentRequest($session_id, $cm_claim_document, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\ReturnedDocument' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ReturnedDocument' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ReturnedDocument', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ReturnedDocument';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ReturnedDocument',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation claimDocumentAsync
     *
     * Claim sliced document
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMClaimDocument $cm_claim_document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['claimDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function claimDocumentAsync($session_id, $cm_claim_document, string $contentType = self::contentTypes['claimDocument'][0])
    {
        return $this->claimDocumentAsyncWithHttpInfo($session_id, $cm_claim_document, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation claimDocumentAsyncWithHttpInfo
     *
     * Claim sliced document
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMClaimDocument $cm_claim_document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['claimDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function claimDocumentAsyncWithHttpInfo($session_id, $cm_claim_document, string $contentType = self::contentTypes['claimDocument'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ReturnedDocument';
        $request = $this->claimDocumentRequest($session_id, $cm_claim_document, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'claimDocument'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMClaimDocument $cm_claim_document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['claimDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function claimDocumentRequest($session_id, $cm_claim_document, string $contentType = self::contentTypes['claimDocument'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling claimDocument'
            );
        }

        // verify the required parameter 'cm_claim_document' is set
        if ($cm_claim_document === null || (is_array($cm_claim_document) && count($cm_claim_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_claim_document when calling claimDocument'
            );
        }


        $resourcePath = '/api/dataproject/claimdocument';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_claim_document)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_claim_document));
            } else {
                $httpBody = $cm_claim_document;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation crawlerStatus
     *
     * get Crawler Status
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $task_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerStatus'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CMCrawlerStatusTask|\OpenAPI\Client\Model\JsonMessage
     */
    public function crawlerStatus($organisation_id, $task_id, $session_id, string $contentType = self::contentTypes['crawlerStatus'][0])
    {
        list($response) = $this->crawlerStatusWithHttpInfo($organisation_id, $task_id, $session_id, $contentType);
        return $response;
    }

    /**
     * Operation crawlerStatusWithHttpInfo
     *
     * get Crawler Status
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $task_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerStatus'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CMCrawlerStatusTask|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function crawlerStatusWithHttpInfo($organisation_id, $task_id, $session_id, string $contentType = self::contentTypes['crawlerStatus'][0])
    {
        $request = $this->crawlerStatusRequest($organisation_id, $task_id, $session_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CMCrawlerStatusTask' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMCrawlerStatusTask' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMCrawlerStatusTask', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMCrawlerStatusTask';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMCrawlerStatusTask',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation crawlerStatusAsync
     *
     * get Crawler Status
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $task_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function crawlerStatusAsync($organisation_id, $task_id, $session_id, string $contentType = self::contentTypes['crawlerStatus'][0])
    {
        return $this->crawlerStatusAsyncWithHttpInfo($organisation_id, $task_id, $session_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation crawlerStatusAsyncWithHttpInfo
     *
     * get Crawler Status
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $task_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function crawlerStatusAsyncWithHttpInfo($organisation_id, $task_id, $session_id, string $contentType = self::contentTypes['crawlerStatus'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMCrawlerStatusTask';
        $request = $this->crawlerStatusRequest($organisation_id, $task_id, $session_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'crawlerStatus'
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $task_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function crawlerStatusRequest($organisation_id, $task_id, $session_id, string $contentType = self::contentTypes['crawlerStatus'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling crawlerStatus'
            );
        }

        // verify the required parameter 'task_id' is set
        if ($task_id === null || (is_array($task_id) && count($task_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_id when calling crawlerStatus'
            );
        }

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling crawlerStatus'
            );
        }


        $resourcePath = '/api/dataproject/crawlerstatus/{organisationId}/{taskId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskId' . '}',
                ObjectSerializer::toPathValue($task_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentsByTokens
     *
     * Returns document list for tokens
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMDocumentsByToken $cm_documents_by_token cm_documents_by_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentsByTokens'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CMPagedProjectDocuments|\OpenAPI\Client\Model\JsonMessage
     */
    public function documentsByTokens($session_id, $cm_documents_by_token, string $contentType = self::contentTypes['documentsByTokens'][0])
    {
        list($response) = $this->documentsByTokensWithHttpInfo($session_id, $cm_documents_by_token, $contentType);
        return $response;
    }

    /**
     * Operation documentsByTokensWithHttpInfo
     *
     * Returns document list for tokens
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMDocumentsByToken $cm_documents_by_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentsByTokens'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CMPagedProjectDocuments|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentsByTokensWithHttpInfo($session_id, $cm_documents_by_token, string $contentType = self::contentTypes['documentsByTokens'][0])
    {
        $request = $this->documentsByTokensRequest($session_id, $cm_documents_by_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CMPagedProjectDocuments' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMPagedProjectDocuments' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMPagedProjectDocuments', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMPagedProjectDocuments';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMPagedProjectDocuments',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation documentsByTokensAsync
     *
     * Returns document list for tokens
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMDocumentsByToken $cm_documents_by_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentsByTokens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentsByTokensAsync($session_id, $cm_documents_by_token, string $contentType = self::contentTypes['documentsByTokens'][0])
    {
        return $this->documentsByTokensAsyncWithHttpInfo($session_id, $cm_documents_by_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentsByTokensAsyncWithHttpInfo
     *
     * Returns document list for tokens
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMDocumentsByToken $cm_documents_by_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentsByTokens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentsByTokensAsyncWithHttpInfo($session_id, $cm_documents_by_token, string $contentType = self::contentTypes['documentsByTokens'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMPagedProjectDocuments';
        $request = $this->documentsByTokensRequest($session_id, $cm_documents_by_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentsByTokens'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMDocumentsByToken $cm_documents_by_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentsByTokens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function documentsByTokensRequest($session_id, $cm_documents_by_token, string $contentType = self::contentTypes['documentsByTokens'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling documentsByTokens'
            );
        }

        // verify the required parameter 'cm_documents_by_token' is set
        if ($cm_documents_by_token === null || (is_array($cm_documents_by_token) && count($cm_documents_by_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_documents_by_token when calling documentsByTokens'
            );
        }


        $resourcePath = '/api/dataproject/documentsbytokens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_documents_by_token)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_documents_by_token));
            } else {
                $httpBody = $cm_documents_by_token;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation filteredComments
     *
     * Retrieve Comments
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMCommentFilter $cm_comment_filter cm_comment_filter (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filteredComments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\CMRecordedComment[]
     */
    public function filteredComments($session_id, $cm_comment_filter, string $contentType = self::contentTypes['filteredComments'][0])
    {
        list($response) = $this->filteredCommentsWithHttpInfo($session_id, $cm_comment_filter, $contentType);
        return $response;
    }

    /**
     * Operation filteredCommentsWithHttpInfo
     *
     * Retrieve Comments
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMCommentFilter $cm_comment_filter (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filteredComments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\CMRecordedComment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function filteredCommentsWithHttpInfo($session_id, $cm_comment_filter, string $contentType = self::contentTypes['filteredComments'][0])
    {
        $request = $this->filteredCommentsRequest($session_id, $cm_comment_filter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\CMRecordedComment[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMRecordedComment[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMRecordedComment[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMRecordedComment[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMRecordedComment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation filteredCommentsAsync
     *
     * Retrieve Comments
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMCommentFilter $cm_comment_filter (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filteredComments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filteredCommentsAsync($session_id, $cm_comment_filter, string $contentType = self::contentTypes['filteredComments'][0])
    {
        return $this->filteredCommentsAsyncWithHttpInfo($session_id, $cm_comment_filter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation filteredCommentsAsyncWithHttpInfo
     *
     * Retrieve Comments
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMCommentFilter $cm_comment_filter (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filteredComments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filteredCommentsAsyncWithHttpInfo($session_id, $cm_comment_filter, string $contentType = self::contentTypes['filteredComments'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMRecordedComment[]';
        $request = $this->filteredCommentsRequest($session_id, $cm_comment_filter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'filteredComments'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMCommentFilter $cm_comment_filter (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filteredComments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function filteredCommentsRequest($session_id, $cm_comment_filter, string $contentType = self::contentTypes['filteredComments'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling filteredComments'
            );
        }

        // verify the required parameter 'cm_comment_filter' is set
        if ($cm_comment_filter === null || (is_array($cm_comment_filter) && count($cm_comment_filter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_comment_filter when calling filteredComments'
            );
        }


        $resourcePath = '/api/dataproject/filteredcomments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_comment_filter)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_comment_filter));
            } else {
                $httpBody = $cm_comment_filter;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDocumentRedactionInfo
     *
     * Get Document Redaction info
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $slice_id the id of the slice (required)
     * @param  string $document_key the document key of the document to be redacted (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentRedactionInfo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LocatedRedaction[]|\OpenAPI\Client\Model\JsonMessage
     */
    public function getDocumentRedactionInfo($organisation_id, $slice_id, $document_key, $session_id, string $contentType = self::contentTypes['getDocumentRedactionInfo'][0])
    {
        list($response) = $this->getDocumentRedactionInfoWithHttpInfo($organisation_id, $slice_id, $document_key, $session_id, $contentType);
        return $response;
    }

    /**
     * Operation getDocumentRedactionInfoWithHttpInfo
     *
     * Get Document Redaction info
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $slice_id the id of the slice (required)
     * @param  string $document_key the document key of the document to be redacted (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentRedactionInfo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LocatedRedaction[]|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDocumentRedactionInfoWithHttpInfo($organisation_id, $slice_id, $document_key, $session_id, string $contentType = self::contentTypes['getDocumentRedactionInfo'][0])
    {
        $request = $this->getDocumentRedactionInfoRequest($organisation_id, $slice_id, $document_key, $session_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\LocatedRedaction[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LocatedRedaction[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LocatedRedaction[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LocatedRedaction[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LocatedRedaction[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDocumentRedactionInfoAsync
     *
     * Get Document Redaction info
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $slice_id the id of the slice (required)
     * @param  string $document_key the document key of the document to be redacted (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentRedactionInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocumentRedactionInfoAsync($organisation_id, $slice_id, $document_key, $session_id, string $contentType = self::contentTypes['getDocumentRedactionInfo'][0])
    {
        return $this->getDocumentRedactionInfoAsyncWithHttpInfo($organisation_id, $slice_id, $document_key, $session_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDocumentRedactionInfoAsyncWithHttpInfo
     *
     * Get Document Redaction info
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $slice_id the id of the slice (required)
     * @param  string $document_key the document key of the document to be redacted (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentRedactionInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocumentRedactionInfoAsyncWithHttpInfo($organisation_id, $slice_id, $document_key, $session_id, string $contentType = self::contentTypes['getDocumentRedactionInfo'][0])
    {
        $returnType = '\OpenAPI\Client\Model\LocatedRedaction[]';
        $request = $this->getDocumentRedactionInfoRequest($organisation_id, $slice_id, $document_key, $session_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDocumentRedactionInfo'
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $slice_id the id of the slice (required)
     * @param  string $document_key the document key of the document to be redacted (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentRedactionInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDocumentRedactionInfoRequest($organisation_id, $slice_id, $document_key, $session_id, string $contentType = self::contentTypes['getDocumentRedactionInfo'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling getDocumentRedactionInfo'
            );
        }

        // verify the required parameter 'slice_id' is set
        if ($slice_id === null || (is_array($slice_id) && count($slice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $slice_id when calling getDocumentRedactionInfo'
            );
        }

        // verify the required parameter 'document_key' is set
        if ($document_key === null || (is_array($document_key) && count($document_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_key when calling getDocumentRedactionInfo'
            );
        }

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling getDocumentRedactionInfo'
            );
        }


        $resourcePath = '/api/dataproject/docredactioninfo/{organisationId}/{sliceId}/{documentKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($slice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sliceId' . '}',
                ObjectSerializer::toPathValue($slice_id),
                $resourcePath
            );
        }
        // path params
        if ($document_key !== null) {
            $resourcePath = str_replace(
                '{' . 'documentKey' . '}',
                ObjectSerializer::toPathValue($document_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProjectDefinition
     *
     * get Project Definition
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $task_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectDefinition'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\CMProjectDefinitionTask
     */
    public function getProjectDefinition($organisation_id, $task_id, $session_id, string $contentType = self::contentTypes['getProjectDefinition'][0])
    {
        list($response) = $this->getProjectDefinitionWithHttpInfo($organisation_id, $task_id, $session_id, $contentType);
        return $response;
    }

    /**
     * Operation getProjectDefinitionWithHttpInfo
     *
     * get Project Definition
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $task_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectDefinition'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\CMProjectDefinitionTask, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectDefinitionWithHttpInfo($organisation_id, $task_id, $session_id, string $contentType = self::contentTypes['getProjectDefinition'][0])
    {
        $request = $this->getProjectDefinitionRequest($organisation_id, $task_id, $session_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\CMProjectDefinitionTask' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMProjectDefinitionTask' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMProjectDefinitionTask', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMProjectDefinitionTask';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMProjectDefinitionTask',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProjectDefinitionAsync
     *
     * get Project Definition
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $task_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectDefinitionAsync($organisation_id, $task_id, $session_id, string $contentType = self::contentTypes['getProjectDefinition'][0])
    {
        return $this->getProjectDefinitionAsyncWithHttpInfo($organisation_id, $task_id, $session_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProjectDefinitionAsyncWithHttpInfo
     *
     * get Project Definition
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $task_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectDefinitionAsyncWithHttpInfo($organisation_id, $task_id, $session_id, string $contentType = self::contentTypes['getProjectDefinition'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMProjectDefinitionTask';
        $request = $this->getProjectDefinitionRequest($organisation_id, $task_id, $session_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProjectDefinition'
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $task_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProjectDefinitionRequest($organisation_id, $task_id, $session_id, string $contentType = self::contentTypes['getProjectDefinition'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling getProjectDefinition'
            );
        }

        // verify the required parameter 'task_id' is set
        if ($task_id === null || (is_array($task_id) && count($task_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_id when calling getProjectDefinition'
            );
        }

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling getProjectDefinition'
            );
        }


        $resourcePath = '/api/dataproject/projectdefinition/{organisationId}/{taskId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskId' . '}',
                ObjectSerializer::toPathValue($task_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProjectReview
     *
     * get Project Definition
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $project_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectReview'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CMProjectReview|\OpenAPI\Client\Model\JsonMessage
     */
    public function getProjectReview($organisation_id, $project_id, $session_id, string $contentType = self::contentTypes['getProjectReview'][0])
    {
        list($response) = $this->getProjectReviewWithHttpInfo($organisation_id, $project_id, $session_id, $contentType);
        return $response;
    }

    /**
     * Operation getProjectReviewWithHttpInfo
     *
     * get Project Definition
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $project_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectReview'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CMProjectReview|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectReviewWithHttpInfo($organisation_id, $project_id, $session_id, string $contentType = self::contentTypes['getProjectReview'][0])
    {
        $request = $this->getProjectReviewRequest($organisation_id, $project_id, $session_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CMProjectReview' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMProjectReview' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMProjectReview', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMProjectReview';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMProjectReview',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProjectReviewAsync
     *
     * get Project Definition
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $project_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectReview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectReviewAsync($organisation_id, $project_id, $session_id, string $contentType = self::contentTypes['getProjectReview'][0])
    {
        return $this->getProjectReviewAsyncWithHttpInfo($organisation_id, $project_id, $session_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProjectReviewAsyncWithHttpInfo
     *
     * get Project Definition
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $project_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectReview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectReviewAsyncWithHttpInfo($organisation_id, $project_id, $session_id, string $contentType = self::contentTypes['getProjectReview'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMProjectReview';
        $request = $this->getProjectReviewRequest($organisation_id, $project_id, $session_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProjectReview'
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $project_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectReview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProjectReviewRequest($organisation_id, $project_id, $session_id, string $contentType = self::contentTypes['getProjectReview'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling getProjectReview'
            );
        }

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling getProjectReview'
            );
        }

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling getProjectReview'
            );
        }


        $resourcePath = '/api/dataproject/projectreview/{organisationId}/{projectId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProjectSlice
     *
     * get project slice
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $task_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectSlice'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CMProjectSliceTask[]|\OpenAPI\Client\Model\JsonMessage
     */
    public function getProjectSlice($organisation_id, $task_id, $session_id, string $contentType = self::contentTypes['getProjectSlice'][0])
    {
        list($response) = $this->getProjectSliceWithHttpInfo($organisation_id, $task_id, $session_id, $contentType);
        return $response;
    }

    /**
     * Operation getProjectSliceWithHttpInfo
     *
     * get project slice
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $task_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectSlice'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CMProjectSliceTask[]|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectSliceWithHttpInfo($organisation_id, $task_id, $session_id, string $contentType = self::contentTypes['getProjectSlice'][0])
    {
        $request = $this->getProjectSliceRequest($organisation_id, $task_id, $session_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CMProjectSliceTask[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMProjectSliceTask[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMProjectSliceTask[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMProjectSliceTask[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMProjectSliceTask[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProjectSliceAsync
     *
     * get project slice
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $task_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectSlice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectSliceAsync($organisation_id, $task_id, $session_id, string $contentType = self::contentTypes['getProjectSlice'][0])
    {
        return $this->getProjectSliceAsyncWithHttpInfo($organisation_id, $task_id, $session_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProjectSliceAsyncWithHttpInfo
     *
     * get project slice
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $task_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectSlice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectSliceAsyncWithHttpInfo($organisation_id, $task_id, $session_id, string $contentType = self::contentTypes['getProjectSlice'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMProjectSliceTask[]';
        $request = $this->getProjectSliceRequest($organisation_id, $task_id, $session_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProjectSlice'
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $task_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectSlice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProjectSliceRequest($organisation_id, $task_id, $session_id, string $contentType = self::contentTypes['getProjectSlice'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling getProjectSlice'
            );
        }

        // verify the required parameter 'task_id' is set
        if ($task_id === null || (is_array($task_id) && count($task_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_id when calling getProjectSlice'
            );
        }

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling getProjectSlice'
            );
        }


        $resourcePath = '/api/dataproject/projectslice/{organisationId}/{taskId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskId' . '}',
                ObjectSerializer::toPathValue($task_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSearchResultSummary
     *
     * get Search Result Summary
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $task_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchResultSummary'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\CMSearchResultSummaryTask
     */
    public function getSearchResultSummary($organisation_id, $task_id, $session_id, string $contentType = self::contentTypes['getSearchResultSummary'][0])
    {
        list($response) = $this->getSearchResultSummaryWithHttpInfo($organisation_id, $task_id, $session_id, $contentType);
        return $response;
    }

    /**
     * Operation getSearchResultSummaryWithHttpInfo
     *
     * get Search Result Summary
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $task_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchResultSummary'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\CMSearchResultSummaryTask, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSearchResultSummaryWithHttpInfo($organisation_id, $task_id, $session_id, string $contentType = self::contentTypes['getSearchResultSummary'][0])
    {
        $request = $this->getSearchResultSummaryRequest($organisation_id, $task_id, $session_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\CMSearchResultSummaryTask' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMSearchResultSummaryTask' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMSearchResultSummaryTask', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMSearchResultSummaryTask';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMSearchResultSummaryTask',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSearchResultSummaryAsync
     *
     * get Search Result Summary
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $task_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchResultSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSearchResultSummaryAsync($organisation_id, $task_id, $session_id, string $contentType = self::contentTypes['getSearchResultSummary'][0])
    {
        return $this->getSearchResultSummaryAsyncWithHttpInfo($organisation_id, $task_id, $session_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSearchResultSummaryAsyncWithHttpInfo
     *
     * get Search Result Summary
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $task_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchResultSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSearchResultSummaryAsyncWithHttpInfo($organisation_id, $task_id, $session_id, string $contentType = self::contentTypes['getSearchResultSummary'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMSearchResultSummaryTask';
        $request = $this->getSearchResultSummaryRequest($organisation_id, $task_id, $session_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSearchResultSummary'
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $task_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchResultSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSearchResultSummaryRequest($organisation_id, $task_id, $session_id, string $contentType = self::contentTypes['getSearchResultSummary'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling getSearchResultSummary'
            );
        }

        // verify the required parameter 'task_id' is set
        if ($task_id === null || (is_array($task_id) && count($task_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_id when calling getSearchResultSummary'
            );
        }

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling getSearchResultSummary'
            );
        }


        $resourcePath = '/api/dataproject/searchresult/{organisationId}/{taskId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskId' . '}',
                ObjectSerializer::toPathValue($task_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSearchResultSummaryForReview
     *
     * get Search Result Summary
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $project_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchResultSummaryForReview'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CMSearchResultSummary|\OpenAPI\Client\Model\JsonMessage
     */
    public function getSearchResultSummaryForReview($organisation_id, $project_id, $session_id, string $contentType = self::contentTypes['getSearchResultSummaryForReview'][0])
    {
        list($response) = $this->getSearchResultSummaryForReviewWithHttpInfo($organisation_id, $project_id, $session_id, $contentType);
        return $response;
    }

    /**
     * Operation getSearchResultSummaryForReviewWithHttpInfo
     *
     * get Search Result Summary
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $project_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchResultSummaryForReview'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CMSearchResultSummary|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSearchResultSummaryForReviewWithHttpInfo($organisation_id, $project_id, $session_id, string $contentType = self::contentTypes['getSearchResultSummaryForReview'][0])
    {
        $request = $this->getSearchResultSummaryForReviewRequest($organisation_id, $project_id, $session_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CMSearchResultSummary' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMSearchResultSummary' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMSearchResultSummary', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMSearchResultSummary';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMSearchResultSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSearchResultSummaryForReviewAsync
     *
     * get Search Result Summary
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $project_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchResultSummaryForReview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSearchResultSummaryForReviewAsync($organisation_id, $project_id, $session_id, string $contentType = self::contentTypes['getSearchResultSummaryForReview'][0])
    {
        return $this->getSearchResultSummaryForReviewAsyncWithHttpInfo($organisation_id, $project_id, $session_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSearchResultSummaryForReviewAsyncWithHttpInfo
     *
     * get Search Result Summary
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $project_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchResultSummaryForReview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSearchResultSummaryForReviewAsyncWithHttpInfo($organisation_id, $project_id, $session_id, string $contentType = self::contentTypes['getSearchResultSummaryForReview'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMSearchResultSummary';
        $request = $this->getSearchResultSummaryForReviewRequest($organisation_id, $project_id, $session_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSearchResultSummaryForReview'
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $project_id the id of the task (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchResultSummaryForReview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSearchResultSummaryForReviewRequest($organisation_id, $project_id, $session_id, string $contentType = self::contentTypes['getSearchResultSummaryForReview'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling getSearchResultSummaryForReview'
            );
        }

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling getSearchResultSummaryForReview'
            );
        }

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling getSearchResultSummaryForReview'
            );
        }


        $resourcePath = '/api/dataproject/searchresultreview/{organisationId}/{projectId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation nextDocument
     *
     * Document list for given slice and filters
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMNextDocument $cm_next_document cm_next_document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['nextDocument'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CMSlicedDocumentListAndTotals|\OpenAPI\Client\Model\JsonMessage
     */
    public function nextDocument($session_id, $cm_next_document, string $contentType = self::contentTypes['nextDocument'][0])
    {
        list($response) = $this->nextDocumentWithHttpInfo($session_id, $cm_next_document, $contentType);
        return $response;
    }

    /**
     * Operation nextDocumentWithHttpInfo
     *
     * Document list for given slice and filters
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMNextDocument $cm_next_document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['nextDocument'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CMSlicedDocumentListAndTotals|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function nextDocumentWithHttpInfo($session_id, $cm_next_document, string $contentType = self::contentTypes['nextDocument'][0])
    {
        $request = $this->nextDocumentRequest($session_id, $cm_next_document, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CMSlicedDocumentListAndTotals' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMSlicedDocumentListAndTotals' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMSlicedDocumentListAndTotals', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMSlicedDocumentListAndTotals';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMSlicedDocumentListAndTotals',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation nextDocumentAsync
     *
     * Document list for given slice and filters
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMNextDocument $cm_next_document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['nextDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function nextDocumentAsync($session_id, $cm_next_document, string $contentType = self::contentTypes['nextDocument'][0])
    {
        return $this->nextDocumentAsyncWithHttpInfo($session_id, $cm_next_document, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation nextDocumentAsyncWithHttpInfo
     *
     * Document list for given slice and filters
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMNextDocument $cm_next_document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['nextDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function nextDocumentAsyncWithHttpInfo($session_id, $cm_next_document, string $contentType = self::contentTypes['nextDocument'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMSlicedDocumentListAndTotals';
        $request = $this->nextDocumentRequest($session_id, $cm_next_document, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'nextDocument'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMNextDocument $cm_next_document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['nextDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function nextDocumentRequest($session_id, $cm_next_document, string $contentType = self::contentTypes['nextDocument'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling nextDocument'
            );
        }

        // verify the required parameter 'cm_next_document' is set
        if ($cm_next_document === null || (is_array($cm_next_document) && count($cm_next_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_next_document when calling nextDocument'
            );
        }


        $resourcePath = '/api/dataproject/nextdocument';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_next_document)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_next_document));
            } else {
                $httpBody = $cm_next_document;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pdfBinary
     *
     * Binary
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $url a base64 encoded url (required)
     * @param  string $session_id a valid SimSage Session id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pdfBinary'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function pdfBinary($organisation_id, $kb_id, $url, $session_id = null, string $contentType = self::contentTypes['pdfBinary'][0])
    {
        list($response) = $this->pdfBinaryWithHttpInfo($organisation_id, $kb_id, $url, $session_id, $contentType);
        return $response;
    }

    /**
     * Operation pdfBinaryWithHttpInfo
     *
     * Binary
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $url a base64 encoded url (required)
     * @param  string $session_id a valid SimSage Session id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pdfBinary'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function pdfBinaryWithHttpInfo($organisation_id, $kb_id, $url, $session_id = null, string $contentType = self::contentTypes['pdfBinary'][0])
    {
        $request = $this->pdfBinaryRequest($organisation_id, $kb_id, $url, $session_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pdfBinaryAsync
     *
     * Binary
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $url a base64 encoded url (required)
     * @param  string $session_id a valid SimSage Session id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pdfBinary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pdfBinaryAsync($organisation_id, $kb_id, $url, $session_id = null, string $contentType = self::contentTypes['pdfBinary'][0])
    {
        return $this->pdfBinaryAsyncWithHttpInfo($organisation_id, $kb_id, $url, $session_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pdfBinaryAsyncWithHttpInfo
     *
     * Binary
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $url a base64 encoded url (required)
     * @param  string $session_id a valid SimSage Session id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pdfBinary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pdfBinaryAsyncWithHttpInfo($organisation_id, $kb_id, $url, $session_id = null, string $contentType = self::contentTypes['pdfBinary'][0])
    {
        $returnType = 'object';
        $request = $this->pdfBinaryRequest($organisation_id, $kb_id, $url, $session_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pdfBinary'
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $url a base64 encoded url (required)
     * @param  string $session_id a valid SimSage Session id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pdfBinary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pdfBinaryRequest($organisation_id, $kb_id, $url, $session_id = null, string $contentType = self::contentTypes['pdfBinary'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling pdfBinary'
            );
        }

        // verify the required parameter 'kb_id' is set
        if ($kb_id === null || (is_array($kb_id) && count($kb_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kb_id when calling pdfBinary'
            );
        }

        // verify the required parameter 'url' is set
        if ($url === null || (is_array($url) && count($url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling pdfBinary'
            );
        }



        $resourcePath = '/api/dataproject/pdf/latest/{organisationId}/{kbId}/{url}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($kb_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kbId' . '}',
                ObjectSerializer::toPathValue($kb_id),
                $resourcePath
            );
        }
        // path params
        if ($url !== null) {
            $resourcePath = str_replace(
                '{' . 'url' . '}',
                ObjectSerializer::toPathValue($url),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectTypes
     *
     * get Project Types
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectTypes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CMProjectInfo[]|\OpenAPI\Client\Model\JsonMessage
     */
    public function projectTypes($organisation_id, $session_id, string $contentType = self::contentTypes['projectTypes'][0])
    {
        list($response) = $this->projectTypesWithHttpInfo($organisation_id, $session_id, $contentType);
        return $response;
    }

    /**
     * Operation projectTypesWithHttpInfo
     *
     * get Project Types
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectTypes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CMProjectInfo[]|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectTypesWithHttpInfo($organisation_id, $session_id, string $contentType = self::contentTypes['projectTypes'][0])
    {
        $request = $this->projectTypesRequest($organisation_id, $session_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CMProjectInfo[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMProjectInfo[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMProjectInfo[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMProjectInfo[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMProjectInfo[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectTypesAsync
     *
     * get Project Types
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectTypesAsync($organisation_id, $session_id, string $contentType = self::contentTypes['projectTypes'][0])
    {
        return $this->projectTypesAsyncWithHttpInfo($organisation_id, $session_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectTypesAsyncWithHttpInfo
     *
     * get Project Types
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectTypesAsyncWithHttpInfo($organisation_id, $session_id, string $contentType = self::contentTypes['projectTypes'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMProjectInfo[]';
        $request = $this->projectTypesRequest($organisation_id, $session_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectTypes'
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectTypesRequest($organisation_id, $session_id, string $contentType = self::contentTypes['projectTypes'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling projectTypes'
            );
        }

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling projectTypes'
            );
        }


        $resourcePath = '/api/dataproject/projects/{organisationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reassignSliceDocument
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMReassignSliceDocument $cm_reassign_slice_document cm_reassign_slice_document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reassignSliceDocument'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function reassignSliceDocument($session_id, $cm_reassign_slice_document, string $contentType = self::contentTypes['reassignSliceDocument'][0])
    {
        list($response) = $this->reassignSliceDocumentWithHttpInfo($session_id, $cm_reassign_slice_document, $contentType);
        return $response;
    }

    /**
     * Operation reassignSliceDocumentWithHttpInfo
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMReassignSliceDocument $cm_reassign_slice_document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reassignSliceDocument'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function reassignSliceDocumentWithHttpInfo($session_id, $cm_reassign_slice_document, string $contentType = self::contentTypes['reassignSliceDocument'][0])
    {
        $request = $this->reassignSliceDocumentRequest($session_id, $cm_reassign_slice_document, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reassignSliceDocumentAsync
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMReassignSliceDocument $cm_reassign_slice_document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reassignSliceDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reassignSliceDocumentAsync($session_id, $cm_reassign_slice_document, string $contentType = self::contentTypes['reassignSliceDocument'][0])
    {
        return $this->reassignSliceDocumentAsyncWithHttpInfo($session_id, $cm_reassign_slice_document, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reassignSliceDocumentAsyncWithHttpInfo
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMReassignSliceDocument $cm_reassign_slice_document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reassignSliceDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reassignSliceDocumentAsyncWithHttpInfo($session_id, $cm_reassign_slice_document, string $contentType = self::contentTypes['reassignSliceDocument'][0])
    {
        $returnType = 'object';
        $request = $this->reassignSliceDocumentRequest($session_id, $cm_reassign_slice_document, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reassignSliceDocument'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMReassignSliceDocument $cm_reassign_slice_document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reassignSliceDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reassignSliceDocumentRequest($session_id, $cm_reassign_slice_document, string $contentType = self::contentTypes['reassignSliceDocument'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling reassignSliceDocument'
            );
        }

        // verify the required parameter 'cm_reassign_slice_document' is set
        if ($cm_reassign_slice_document === null || (is_array($cm_reassign_slice_document) && count($cm_reassign_slice_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_reassign_slice_document when calling reassignSliceDocument'
            );
        }


        $resourcePath = '/api/dataproject/reassignslicedoc';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_reassign_slice_document)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_reassign_slice_document));
            } else {
                $httpBody = $cm_reassign_slice_document;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation redactedDocument
     *
     * Get Redacted Document
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMRedactionDetails $cm_redaction_details cm_redaction_details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redactedDocument'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\ReturnedDocument
     */
    public function redactedDocument($session_id, $cm_redaction_details, string $contentType = self::contentTypes['redactedDocument'][0])
    {
        list($response) = $this->redactedDocumentWithHttpInfo($session_id, $cm_redaction_details, $contentType);
        return $response;
    }

    /**
     * Operation redactedDocumentWithHttpInfo
     *
     * Get Redacted Document
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMRedactionDetails $cm_redaction_details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redactedDocument'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\ReturnedDocument, HTTP status code, HTTP response headers (array of strings)
     */
    public function redactedDocumentWithHttpInfo($session_id, $cm_redaction_details, string $contentType = self::contentTypes['redactedDocument'][0])
    {
        $request = $this->redactedDocumentRequest($session_id, $cm_redaction_details, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\ReturnedDocument' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ReturnedDocument' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ReturnedDocument', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ReturnedDocument';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ReturnedDocument',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation redactedDocumentAsync
     *
     * Get Redacted Document
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMRedactionDetails $cm_redaction_details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redactedDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function redactedDocumentAsync($session_id, $cm_redaction_details, string $contentType = self::contentTypes['redactedDocument'][0])
    {
        return $this->redactedDocumentAsyncWithHttpInfo($session_id, $cm_redaction_details, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation redactedDocumentAsyncWithHttpInfo
     *
     * Get Redacted Document
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMRedactionDetails $cm_redaction_details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redactedDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function redactedDocumentAsyncWithHttpInfo($session_id, $cm_redaction_details, string $contentType = self::contentTypes['redactedDocument'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ReturnedDocument';
        $request = $this->redactedDocumentRequest($session_id, $cm_redaction_details, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'redactedDocument'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMRedactionDetails $cm_redaction_details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redactedDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function redactedDocumentRequest($session_id, $cm_redaction_details, string $contentType = self::contentTypes['redactedDocument'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling redactedDocument'
            );
        }

        // verify the required parameter 'cm_redaction_details' is set
        if ($cm_redaction_details === null || (is_array($cm_redaction_details) && count($cm_redaction_details) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_redaction_details when calling redactedDocument'
            );
        }


        $resourcePath = '/api/dataproject/redacteddocument';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_redaction_details)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_redaction_details));
            } else {
                $httpBody = $cm_redaction_details;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeSliceDocument
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMRemoveSliceDocument $cm_remove_slice_document cm_remove_slice_document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSliceDocument'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function removeSliceDocument($session_id, $cm_remove_slice_document, string $contentType = self::contentTypes['removeSliceDocument'][0])
    {
        list($response) = $this->removeSliceDocumentWithHttpInfo($session_id, $cm_remove_slice_document, $contentType);
        return $response;
    }

    /**
     * Operation removeSliceDocumentWithHttpInfo
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMRemoveSliceDocument $cm_remove_slice_document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSliceDocument'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeSliceDocumentWithHttpInfo($session_id, $cm_remove_slice_document, string $contentType = self::contentTypes['removeSliceDocument'][0])
    {
        $request = $this->removeSliceDocumentRequest($session_id, $cm_remove_slice_document, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeSliceDocumentAsync
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMRemoveSliceDocument $cm_remove_slice_document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSliceDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeSliceDocumentAsync($session_id, $cm_remove_slice_document, string $contentType = self::contentTypes['removeSliceDocument'][0])
    {
        return $this->removeSliceDocumentAsyncWithHttpInfo($session_id, $cm_remove_slice_document, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeSliceDocumentAsyncWithHttpInfo
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMRemoveSliceDocument $cm_remove_slice_document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSliceDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeSliceDocumentAsyncWithHttpInfo($session_id, $cm_remove_slice_document, string $contentType = self::contentTypes['removeSliceDocument'][0])
    {
        $returnType = 'object';
        $request = $this->removeSliceDocumentRequest($session_id, $cm_remove_slice_document, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeSliceDocument'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMRemoveSliceDocument $cm_remove_slice_document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSliceDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeSliceDocumentRequest($session_id, $cm_remove_slice_document, string $contentType = self::contentTypes['removeSliceDocument'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling removeSliceDocument'
            );
        }

        // verify the required parameter 'cm_remove_slice_document' is set
        if ($cm_remove_slice_document === null || (is_array($cm_remove_slice_document) && count($cm_remove_slice_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_remove_slice_document when calling removeSliceDocument'
            );
        }


        $resourcePath = '/api/dataproject/removeslicedoc';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_remove_slice_document)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_remove_slice_document));
            } else {
                $httpBody = $cm_remove_slice_document;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resetEvolve
     *
     * Reset Evolve Application
     *
     * @param  string $organisation_id a valid SimSage Organisation id. (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetEvolve'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|string
     */
    public function resetEvolve($organisation_id, $session_id, string $contentType = self::contentTypes['resetEvolve'][0])
    {
        list($response) = $this->resetEvolveWithHttpInfo($organisation_id, $session_id, $contentType);
        return $response;
    }

    /**
     * Operation resetEvolveWithHttpInfo
     *
     * Reset Evolve Application
     *
     * @param  string $organisation_id a valid SimSage Organisation id. (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetEvolve'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function resetEvolveWithHttpInfo($organisation_id, $session_id, string $contentType = self::contentTypes['resetEvolve'][0])
    {
        $request = $this->resetEvolveRequest($organisation_id, $session_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation resetEvolveAsync
     *
     * Reset Evolve Application
     *
     * @param  string $organisation_id a valid SimSage Organisation id. (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetEvolve'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetEvolveAsync($organisation_id, $session_id, string $contentType = self::contentTypes['resetEvolve'][0])
    {
        return $this->resetEvolveAsyncWithHttpInfo($organisation_id, $session_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resetEvolveAsyncWithHttpInfo
     *
     * Reset Evolve Application
     *
     * @param  string $organisation_id a valid SimSage Organisation id. (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetEvolve'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetEvolveAsyncWithHttpInfo($organisation_id, $session_id, string $contentType = self::contentTypes['resetEvolve'][0])
    {
        $returnType = 'string';
        $request = $this->resetEvolveRequest($organisation_id, $session_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resetEvolve'
     *
     * @param  string $organisation_id a valid SimSage Organisation id. (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetEvolve'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function resetEvolveRequest($organisation_id, $session_id, string $contentType = self::contentTypes['resetEvolve'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling resetEvolve'
            );
        }

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling resetEvolve'
            );
        }


        $resourcePath = '/api/dataproject/reset/{organisationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($organisation_id !== null) {
            $headerParams['organisation-id'] = ObjectSerializer::toHeaderValue($organisation_id);
        }
        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation saveProjectDefinition
     *
     * Inserts/Updates a project definition
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMProjectDefinition $cm_project_definition cm_project_definition (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveProjectDefinition'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CMCreatedProject|\OpenAPI\Client\Model\JsonMessage
     */
    public function saveProjectDefinition($session_id, $cm_project_definition, string $contentType = self::contentTypes['saveProjectDefinition'][0])
    {
        list($response) = $this->saveProjectDefinitionWithHttpInfo($session_id, $cm_project_definition, $contentType);
        return $response;
    }

    /**
     * Operation saveProjectDefinitionWithHttpInfo
     *
     * Inserts/Updates a project definition
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMProjectDefinition $cm_project_definition (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveProjectDefinition'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CMCreatedProject|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function saveProjectDefinitionWithHttpInfo($session_id, $cm_project_definition, string $contentType = self::contentTypes['saveProjectDefinition'][0])
    {
        $request = $this->saveProjectDefinitionRequest($session_id, $cm_project_definition, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CMCreatedProject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMCreatedProject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMCreatedProject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMCreatedProject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMCreatedProject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation saveProjectDefinitionAsync
     *
     * Inserts/Updates a project definition
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMProjectDefinition $cm_project_definition (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveProjectDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saveProjectDefinitionAsync($session_id, $cm_project_definition, string $contentType = self::contentTypes['saveProjectDefinition'][0])
    {
        return $this->saveProjectDefinitionAsyncWithHttpInfo($session_id, $cm_project_definition, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation saveProjectDefinitionAsyncWithHttpInfo
     *
     * Inserts/Updates a project definition
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMProjectDefinition $cm_project_definition (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveProjectDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saveProjectDefinitionAsyncWithHttpInfo($session_id, $cm_project_definition, string $contentType = self::contentTypes['saveProjectDefinition'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMCreatedProject';
        $request = $this->saveProjectDefinitionRequest($session_id, $cm_project_definition, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'saveProjectDefinition'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMProjectDefinition $cm_project_definition (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveProjectDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function saveProjectDefinitionRequest($session_id, $cm_project_definition, string $contentType = self::contentTypes['saveProjectDefinition'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling saveProjectDefinition'
            );
        }

        // verify the required parameter 'cm_project_definition' is set
        if ($cm_project_definition === null || (is_array($cm_project_definition) && count($cm_project_definition) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_project_definition when calling saveProjectDefinition'
            );
        }


        $resourcePath = '/api/dataproject/saveprojectdefinition';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_project_definition)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_project_definition));
            } else {
                $httpBody = $cm_project_definition;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setSliceConfig
     *
     * Set Slice configuration
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMSetSliceDefinitions $cm_set_slice_definitions cm_set_slice_definitions (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setSliceConfig'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|\OpenAPI\Client\Model\JsonMessage
     */
    public function setSliceConfig($session_id, $cm_set_slice_definitions, string $contentType = self::contentTypes['setSliceConfig'][0])
    {
        list($response) = $this->setSliceConfigWithHttpInfo($session_id, $cm_set_slice_definitions, $contentType);
        return $response;
    }

    /**
     * Operation setSliceConfigWithHttpInfo
     *
     * Set Slice configuration
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMSetSliceDefinitions $cm_set_slice_definitions (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setSliceConfig'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function setSliceConfigWithHttpInfo($session_id, $cm_set_slice_definitions, string $contentType = self::contentTypes['setSliceConfig'][0])
    {
        $request = $this->setSliceConfigRequest($session_id, $cm_set_slice_definitions, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setSliceConfigAsync
     *
     * Set Slice configuration
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMSetSliceDefinitions $cm_set_slice_definitions (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setSliceConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setSliceConfigAsync($session_id, $cm_set_slice_definitions, string $contentType = self::contentTypes['setSliceConfig'][0])
    {
        return $this->setSliceConfigAsyncWithHttpInfo($session_id, $cm_set_slice_definitions, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setSliceConfigAsyncWithHttpInfo
     *
     * Set Slice configuration
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMSetSliceDefinitions $cm_set_slice_definitions (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setSliceConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setSliceConfigAsyncWithHttpInfo($session_id, $cm_set_slice_definitions, string $contentType = self::contentTypes['setSliceConfig'][0])
    {
        $returnType = 'string';
        $request = $this->setSliceConfigRequest($session_id, $cm_set_slice_definitions, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setSliceConfig'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMSetSliceDefinitions $cm_set_slice_definitions (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setSliceConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setSliceConfigRequest($session_id, $cm_set_slice_definitions, string $contentType = self::contentTypes['setSliceConfig'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling setSliceConfig'
            );
        }

        // verify the required parameter 'cm_set_slice_definitions' is set
        if ($cm_set_slice_definitions === null || (is_array($cm_set_slice_definitions) && count($cm_set_slice_definitions) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_set_slice_definitions when calling setSliceConfig'
            );
        }


        $resourcePath = '/api/dataproject/setsliceconfig';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_set_slice_definitions)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_set_slice_definitions));
            } else {
                $httpBody = $cm_set_slice_definitions;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation slicedDocuments
     *
     * Document list for given slice and filters
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMSlicedDocumentRequest $cm_sliced_document_request cm_sliced_document_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['slicedDocuments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CMSlicedDocumentListAndTotals|\OpenAPI\Client\Model\JsonMessage
     */
    public function slicedDocuments($session_id, $cm_sliced_document_request, string $contentType = self::contentTypes['slicedDocuments'][0])
    {
        list($response) = $this->slicedDocumentsWithHttpInfo($session_id, $cm_sliced_document_request, $contentType);
        return $response;
    }

    /**
     * Operation slicedDocumentsWithHttpInfo
     *
     * Document list for given slice and filters
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMSlicedDocumentRequest $cm_sliced_document_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['slicedDocuments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CMSlicedDocumentListAndTotals|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function slicedDocumentsWithHttpInfo($session_id, $cm_sliced_document_request, string $contentType = self::contentTypes['slicedDocuments'][0])
    {
        $request = $this->slicedDocumentsRequest($session_id, $cm_sliced_document_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CMSlicedDocumentListAndTotals' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMSlicedDocumentListAndTotals' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMSlicedDocumentListAndTotals', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMSlicedDocumentListAndTotals';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMSlicedDocumentListAndTotals',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation slicedDocumentsAsync
     *
     * Document list for given slice and filters
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMSlicedDocumentRequest $cm_sliced_document_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['slicedDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function slicedDocumentsAsync($session_id, $cm_sliced_document_request, string $contentType = self::contentTypes['slicedDocuments'][0])
    {
        return $this->slicedDocumentsAsyncWithHttpInfo($session_id, $cm_sliced_document_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation slicedDocumentsAsyncWithHttpInfo
     *
     * Document list for given slice and filters
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMSlicedDocumentRequest $cm_sliced_document_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['slicedDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function slicedDocumentsAsyncWithHttpInfo($session_id, $cm_sliced_document_request, string $contentType = self::contentTypes['slicedDocuments'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMSlicedDocumentListAndTotals';
        $request = $this->slicedDocumentsRequest($session_id, $cm_sliced_document_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'slicedDocuments'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMSlicedDocumentRequest $cm_sliced_document_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['slicedDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function slicedDocumentsRequest($session_id, $cm_sliced_document_request, string $contentType = self::contentTypes['slicedDocuments'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling slicedDocuments'
            );
        }

        // verify the required parameter 'cm_sliced_document_request' is set
        if ($cm_sliced_document_request === null || (is_array($cm_sliced_document_request) && count($cm_sliced_document_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_sliced_document_request when calling slicedDocuments'
            );
        }


        $resourcePath = '/api/dataproject/sliceddocuments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_sliced_document_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_sliced_document_request));
            } else {
                $httpBody = $cm_sliced_document_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation startProject
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMStartProject $cm_start_project cm_start_project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startProject'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function startProject($session_id, $cm_start_project, string $contentType = self::contentTypes['startProject'][0])
    {
        list($response) = $this->startProjectWithHttpInfo($session_id, $cm_start_project, $contentType);
        return $response;
    }

    /**
     * Operation startProjectWithHttpInfo
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMStartProject $cm_start_project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startProject'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function startProjectWithHttpInfo($session_id, $cm_start_project, string $contentType = self::contentTypes['startProject'][0])
    {
        $request = $this->startProjectRequest($session_id, $cm_start_project, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation startProjectAsync
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMStartProject $cm_start_project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startProjectAsync($session_id, $cm_start_project, string $contentType = self::contentTypes['startProject'][0])
    {
        return $this->startProjectAsyncWithHttpInfo($session_id, $cm_start_project, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startProjectAsyncWithHttpInfo
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMStartProject $cm_start_project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startProjectAsyncWithHttpInfo($session_id, $cm_start_project, string $contentType = self::contentTypes['startProject'][0])
    {
        $returnType = 'object';
        $request = $this->startProjectRequest($session_id, $cm_start_project, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'startProject'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMStartProject $cm_start_project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function startProjectRequest($session_id, $cm_start_project, string $contentType = self::contentTypes['startProject'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling startProject'
            );
        }

        // verify the required parameter 'cm_start_project' is set
        if ($cm_start_project === null || (is_array($cm_start_project) && count($cm_start_project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_start_project when calling startProject'
            );
        }


        $resourcePath = '/api/dataproject/startproject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_start_project)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_start_project));
            } else {
                $httpBody = $cm_start_project;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDocumentStatus
     *
     * Update document status
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMUpdateDocumentStatus $cm_update_document_status cm_update_document_status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDocumentStatus'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|string
     */
    public function updateDocumentStatus($session_id, $cm_update_document_status, string $contentType = self::contentTypes['updateDocumentStatus'][0])
    {
        list($response) = $this->updateDocumentStatusWithHttpInfo($session_id, $cm_update_document_status, $contentType);
        return $response;
    }

    /**
     * Operation updateDocumentStatusWithHttpInfo
     *
     * Update document status
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMUpdateDocumentStatus $cm_update_document_status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDocumentStatus'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDocumentStatusWithHttpInfo($session_id, $cm_update_document_status, string $contentType = self::contentTypes['updateDocumentStatus'][0])
    {
        $request = $this->updateDocumentStatusRequest($session_id, $cm_update_document_status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDocumentStatusAsync
     *
     * Update document status
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMUpdateDocumentStatus $cm_update_document_status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDocumentStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDocumentStatusAsync($session_id, $cm_update_document_status, string $contentType = self::contentTypes['updateDocumentStatus'][0])
    {
        return $this->updateDocumentStatusAsyncWithHttpInfo($session_id, $cm_update_document_status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDocumentStatusAsyncWithHttpInfo
     *
     * Update document status
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMUpdateDocumentStatus $cm_update_document_status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDocumentStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDocumentStatusAsyncWithHttpInfo($session_id, $cm_update_document_status, string $contentType = self::contentTypes['updateDocumentStatus'][0])
    {
        $returnType = 'string';
        $request = $this->updateDocumentStatusRequest($session_id, $cm_update_document_status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDocumentStatus'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMUpdateDocumentStatus $cm_update_document_status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDocumentStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateDocumentStatusRequest($session_id, $cm_update_document_status, string $contentType = self::contentTypes['updateDocumentStatus'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling updateDocumentStatus'
            );
        }

        // verify the required parameter 'cm_update_document_status' is set
        if ($cm_update_document_status === null || (is_array($cm_update_document_status) && count($cm_update_document_status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_update_document_status when calling updateDocumentStatus'
            );
        }


        $resourcePath = '/api/dataproject/updatedocstatus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_update_document_status)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_update_document_status));
            } else {
                $httpBody = $cm_update_document_status;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateRedactions
     *
     * Update document redactions
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMUpdateRedactions $cm_update_redactions cm_update_redactions (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRedactions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|string
     */
    public function updateRedactions($session_id, $cm_update_redactions, string $contentType = self::contentTypes['updateRedactions'][0])
    {
        list($response) = $this->updateRedactionsWithHttpInfo($session_id, $cm_update_redactions, $contentType);
        return $response;
    }

    /**
     * Operation updateRedactionsWithHttpInfo
     *
     * Update document redactions
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMUpdateRedactions $cm_update_redactions (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRedactions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRedactionsWithHttpInfo($session_id, $cm_update_redactions, string $contentType = self::contentTypes['updateRedactions'][0])
    {
        $request = $this->updateRedactionsRequest($session_id, $cm_update_redactions, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateRedactionsAsync
     *
     * Update document redactions
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMUpdateRedactions $cm_update_redactions (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRedactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRedactionsAsync($session_id, $cm_update_redactions, string $contentType = self::contentTypes['updateRedactions'][0])
    {
        return $this->updateRedactionsAsyncWithHttpInfo($session_id, $cm_update_redactions, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateRedactionsAsyncWithHttpInfo
     *
     * Update document redactions
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMUpdateRedactions $cm_update_redactions (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRedactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRedactionsAsyncWithHttpInfo($session_id, $cm_update_redactions, string $contentType = self::contentTypes['updateRedactions'][0])
    {
        $returnType = 'string';
        $request = $this->updateRedactionsRequest($session_id, $cm_update_redactions, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateRedactions'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMUpdateRedactions $cm_update_redactions (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRedactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateRedactionsRequest($session_id, $cm_update_redactions, string $contentType = self::contentTypes['updateRedactions'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling updateRedactions'
            );
        }

        // verify the required parameter 'cm_update_redactions' is set
        if ($cm_update_redactions === null || (is_array($cm_update_redactions) && count($cm_update_redactions) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_update_redactions when calling updateRedactions'
            );
        }


        $resourcePath = '/api/dataproject/updateredactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_update_redactions)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_update_redactions));
            } else {
                $httpBody = $cm_update_redactions;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
