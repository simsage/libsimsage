<?php
/**
 * DocumentApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * DocumentApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DocumentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'document' => [
            'application/json',
        ],
        'getParquetFile' => [
            'application/json',
        ],
        'getParquetList' => [
            'application/json',
        ],
        'getSpreadsheet' => [
            'application/json',
        ],
        'getStats1' => [
            'application/json',
        ],
        'inventorizeDocuments' => [
            'application/json',
        ],
        'inventorizeIndexes' => [
            'application/json',
        ],
        'preview' => [
            'application/json',
        ],
        'previewHtml' => [
            'application/json',
        ],
        'queryFocussedSummarization' => [
            'application/json',
        ],
        'removeDocument' => [
            'application/json',
        ],
        'removeParquetFile' => [
            'application/json',
        ],
        'summarizeDocument' => [
            'application/json',
        ],
        'version4' => [
            'application/json',
        ],
        'zipSource' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation document
     *
     * get Document
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $url the document&#39;s url, base64 encoded, a unique id identifying a document. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['document'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CMDocument|\OpenAPI\Client\Model\JsonMessage
     */
    public function document($session_id, $organisation_id, $kb_id, $url, string $contentType = self::contentTypes['document'][0])
    {
        list($response) = $this->documentWithHttpInfo($session_id, $organisation_id, $kb_id, $url, $contentType);
        return $response;
    }

    /**
     * Operation documentWithHttpInfo
     *
     * get Document
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $url the document&#39;s url, base64 encoded, a unique id identifying a document. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['document'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CMDocument|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentWithHttpInfo($session_id, $organisation_id, $kb_id, $url, string $contentType = self::contentTypes['document'][0])
    {
        $request = $this->documentRequest($session_id, $organisation_id, $kb_id, $url, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CMDocument' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMDocument' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMDocument', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMDocument';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMDocument',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation documentAsync
     *
     * get Document
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $url the document&#39;s url, base64 encoded, a unique id identifying a document. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['document'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentAsync($session_id, $organisation_id, $kb_id, $url, string $contentType = self::contentTypes['document'][0])
    {
        return $this->documentAsyncWithHttpInfo($session_id, $organisation_id, $kb_id, $url, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentAsyncWithHttpInfo
     *
     * get Document
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $url the document&#39;s url, base64 encoded, a unique id identifying a document. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['document'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentAsyncWithHttpInfo($session_id, $organisation_id, $kb_id, $url, string $contentType = self::contentTypes['document'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMDocument';
        $request = $this->documentRequest($session_id, $organisation_id, $kb_id, $url, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'document'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $url the document&#39;s url, base64 encoded, a unique id identifying a document. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['document'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function documentRequest($session_id, $organisation_id, $kb_id, $url, string $contentType = self::contentTypes['document'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling document'
            );
        }

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling document'
            );
        }

        // verify the required parameter 'kb_id' is set
        if ($kb_id === null || (is_array($kb_id) && count($kb_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kb_id when calling document'
            );
        }

        // verify the required parameter 'url' is set
        if ($url === null || (is_array($url) && count($url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling document'
            );
        }


        $resourcePath = '/api/document/document/{organisationId}/{kbId}/{url}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($kb_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kbId' . '}',
                ObjectSerializer::toPathValue($kb_id),
                $resourcePath
            );
        }
        // path params
        if ($url !== null) {
            $resourcePath = str_replace(
                '{' . 'url' . '}',
                ObjectSerializer::toPathValue($url),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getParquetFile
     *
     * Download Parquet File
     *
     * @param  string $ott a one-time token for downloading data. (required)
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $date_time a unix date-time specifying the exact snapshot to download (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getParquetFile'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|string
     */
    public function getParquetFile($ott, $organisation_id, $kb_id, $date_time, string $contentType = self::contentTypes['getParquetFile'][0])
    {
        list($response) = $this->getParquetFileWithHttpInfo($ott, $organisation_id, $kb_id, $date_time, $contentType);
        return $response;
    }

    /**
     * Operation getParquetFileWithHttpInfo
     *
     * Download Parquet File
     *
     * @param  string $ott a one-time token for downloading data. (required)
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $date_time a unix date-time specifying the exact snapshot to download (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getParquetFile'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getParquetFileWithHttpInfo($ott, $organisation_id, $kb_id, $date_time, string $contentType = self::contentTypes['getParquetFile'][0])
    {
        $request = $this->getParquetFileRequest($ott, $organisation_id, $kb_id, $date_time, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getParquetFileAsync
     *
     * Download Parquet File
     *
     * @param  string $ott a one-time token for downloading data. (required)
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $date_time a unix date-time specifying the exact snapshot to download (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getParquetFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParquetFileAsync($ott, $organisation_id, $kb_id, $date_time, string $contentType = self::contentTypes['getParquetFile'][0])
    {
        return $this->getParquetFileAsyncWithHttpInfo($ott, $organisation_id, $kb_id, $date_time, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getParquetFileAsyncWithHttpInfo
     *
     * Download Parquet File
     *
     * @param  string $ott a one-time token for downloading data. (required)
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $date_time a unix date-time specifying the exact snapshot to download (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getParquetFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParquetFileAsyncWithHttpInfo($ott, $organisation_id, $kb_id, $date_time, string $contentType = self::contentTypes['getParquetFile'][0])
    {
        $returnType = 'string';
        $request = $this->getParquetFileRequest($ott, $organisation_id, $kb_id, $date_time, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getParquetFile'
     *
     * @param  string $ott a one-time token for downloading data. (required)
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $date_time a unix date-time specifying the exact snapshot to download (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getParquetFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getParquetFileRequest($ott, $organisation_id, $kb_id, $date_time, string $contentType = self::contentTypes['getParquetFile'][0])
    {

        // verify the required parameter 'ott' is set
        if ($ott === null || (is_array($ott) && count($ott) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ott when calling getParquetFile'
            );
        }

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling getParquetFile'
            );
        }

        // verify the required parameter 'kb_id' is set
        if ($kb_id === null || (is_array($kb_id) && count($kb_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kb_id when calling getParquetFile'
            );
        }

        // verify the required parameter 'date_time' is set
        if ($date_time === null || (is_array($date_time) && count($date_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_time when calling getParquetFile'
            );
        }


        $resourcePath = '/api/document/parquet/{organisationId}/{kbId}/{dateTime}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ott,
            'ott', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($kb_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kbId' . '}',
                ObjectSerializer::toPathValue($kb_id),
                $resourcePath
            );
        }
        // path params
        if ($date_time !== null) {
            $resourcePath = str_replace(
                '{' . 'dateTime' . '}',
                ObjectSerializer::toPathValue($date_time),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/octet-stream', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getParquetList
     *
     * Parquet available time list
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $page pagination control, the page index (required)
     * @param  int $page_size pagination control, the size of a page (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getParquetList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CMParquetTimeList|\OpenAPI\Client\Model\JsonMessage
     */
    public function getParquetList($organisation_id, $kb_id, $page, $page_size, $session_id, $api_version = null, string $contentType = self::contentTypes['getParquetList'][0])
    {
        list($response) = $this->getParquetListWithHttpInfo($organisation_id, $kb_id, $page, $page_size, $session_id, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation getParquetListWithHttpInfo
     *
     * Parquet available time list
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $page pagination control, the page index (required)
     * @param  int $page_size pagination control, the size of a page (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getParquetList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CMParquetTimeList|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getParquetListWithHttpInfo($organisation_id, $kb_id, $page, $page_size, $session_id, $api_version = null, string $contentType = self::contentTypes['getParquetList'][0])
    {
        $request = $this->getParquetListRequest($organisation_id, $kb_id, $page, $page_size, $session_id, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CMParquetTimeList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMParquetTimeList' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMParquetTimeList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMParquetTimeList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMParquetTimeList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getParquetListAsync
     *
     * Parquet available time list
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $page pagination control, the page index (required)
     * @param  int $page_size pagination control, the size of a page (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getParquetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParquetListAsync($organisation_id, $kb_id, $page, $page_size, $session_id, $api_version = null, string $contentType = self::contentTypes['getParquetList'][0])
    {
        return $this->getParquetListAsyncWithHttpInfo($organisation_id, $kb_id, $page, $page_size, $session_id, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getParquetListAsyncWithHttpInfo
     *
     * Parquet available time list
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $page pagination control, the page index (required)
     * @param  int $page_size pagination control, the size of a page (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getParquetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParquetListAsyncWithHttpInfo($organisation_id, $kb_id, $page, $page_size, $session_id, $api_version = null, string $contentType = self::contentTypes['getParquetList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMParquetTimeList';
        $request = $this->getParquetListRequest($organisation_id, $kb_id, $page, $page_size, $session_id, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getParquetList'
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $page pagination control, the page index (required)
     * @param  int $page_size pagination control, the size of a page (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getParquetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getParquetListRequest($organisation_id, $kb_id, $page, $page_size, $session_id, $api_version = null, string $contentType = self::contentTypes['getParquetList'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling getParquetList'
            );
        }

        // verify the required parameter 'kb_id' is set
        if ($kb_id === null || (is_array($kb_id) && count($kb_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kb_id when calling getParquetList'
            );
        }

        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling getParquetList'
            );
        }

        // verify the required parameter 'page_size' is set
        if ($page_size === null || (is_array($page_size) && count($page_size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_size when calling getParquetList'
            );
        }

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling getParquetList'
            );
        }



        $resourcePath = '/api/document/parquets/{organisationId}/{kbId}/{page}/{pageSize}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($kb_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kbId' . '}',
                ObjectSerializer::toPathValue($kb_id),
                $resourcePath
            );
        }
        // path params
        if ($page !== null) {
            $resourcePath = str_replace(
                '{' . 'page' . '}',
                ObjectSerializer::toPathValue($page),
                $resourcePath
            );
        }
        // path params
        if ($page_size !== null) {
            $resourcePath = str_replace(
                '{' . 'pageSize' . '}',
                ObjectSerializer::toPathValue($page_size),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSpreadsheet
     *
     * Inventory breakdown Spreadsheet
     *
     * @param  string $ott a one-time token for downloading data. (required)
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $date_time a unix date-time specifying the exact snapshot to download (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpreadsheet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|\OpenAPI\Client\Model\JsonMessage
     */
    public function getSpreadsheet($ott, $organisation_id, $kb_id, $date_time, string $contentType = self::contentTypes['getSpreadsheet'][0])
    {
        list($response) = $this->getSpreadsheetWithHttpInfo($ott, $organisation_id, $kb_id, $date_time, $contentType);
        return $response;
    }

    /**
     * Operation getSpreadsheetWithHttpInfo
     *
     * Inventory breakdown Spreadsheet
     *
     * @param  string $ott a one-time token for downloading data. (required)
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $date_time a unix date-time specifying the exact snapshot to download (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpreadsheet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSpreadsheetWithHttpInfo($ott, $organisation_id, $kb_id, $date_time, string $contentType = self::contentTypes['getSpreadsheet'][0])
    {
        $request = $this->getSpreadsheetRequest($ott, $organisation_id, $kb_id, $date_time, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSpreadsheetAsync
     *
     * Inventory breakdown Spreadsheet
     *
     * @param  string $ott a one-time token for downloading data. (required)
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $date_time a unix date-time specifying the exact snapshot to download (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpreadsheet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSpreadsheetAsync($ott, $organisation_id, $kb_id, $date_time, string $contentType = self::contentTypes['getSpreadsheet'][0])
    {
        return $this->getSpreadsheetAsyncWithHttpInfo($ott, $organisation_id, $kb_id, $date_time, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSpreadsheetAsyncWithHttpInfo
     *
     * Inventory breakdown Spreadsheet
     *
     * @param  string $ott a one-time token for downloading data. (required)
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $date_time a unix date-time specifying the exact snapshot to download (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpreadsheet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSpreadsheetAsyncWithHttpInfo($ott, $organisation_id, $kb_id, $date_time, string $contentType = self::contentTypes['getSpreadsheet'][0])
    {
        $returnType = 'string';
        $request = $this->getSpreadsheetRequest($ott, $organisation_id, $kb_id, $date_time, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSpreadsheet'
     *
     * @param  string $ott a one-time token for downloading data. (required)
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $date_time a unix date-time specifying the exact snapshot to download (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpreadsheet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSpreadsheetRequest($ott, $organisation_id, $kb_id, $date_time, string $contentType = self::contentTypes['getSpreadsheet'][0])
    {

        // verify the required parameter 'ott' is set
        if ($ott === null || (is_array($ott) && count($ott) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ott when calling getSpreadsheet'
            );
        }

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling getSpreadsheet'
            );
        }

        // verify the required parameter 'kb_id' is set
        if ($kb_id === null || (is_array($kb_id) && count($kb_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kb_id when calling getSpreadsheet'
            );
        }

        // verify the required parameter 'date_time' is set
        if ($date_time === null || (is_array($date_time) && count($date_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_time when calling getSpreadsheet'
            );
        }


        $resourcePath = '/api/document/spreadsheet/{organisationId}/{kbId}/{dateTime}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ott,
            'ott', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($kb_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kbId' . '}',
                ObjectSerializer::toPathValue($kb_id),
                $resourcePath
            );
        }
        // path params
        if ($date_time !== null) {
            $resourcePath = str_replace(
                '{' . 'dateTime' . '}',
                ObjectSerializer::toPathValue($date_time),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStats1
     *
     * Document Frequency Statistics
     *
     * @param  string $ott a one-time token for downloading data. (required)
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $date_time a unix date-time specifying the exact snapshot to download (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStats1'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CMDocumentTypeFrequency[]|\OpenAPI\Client\Model\JsonMessage
     */
    public function getStats1($ott, $organisation_id, $kb_id, $date_time, string $contentType = self::contentTypes['getStats1'][0])
    {
        list($response) = $this->getStats1WithHttpInfo($ott, $organisation_id, $kb_id, $date_time, $contentType);
        return $response;
    }

    /**
     * Operation getStats1WithHttpInfo
     *
     * Document Frequency Statistics
     *
     * @param  string $ott a one-time token for downloading data. (required)
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $date_time a unix date-time specifying the exact snapshot to download (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStats1'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CMDocumentTypeFrequency[]|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStats1WithHttpInfo($ott, $organisation_id, $kb_id, $date_time, string $contentType = self::contentTypes['getStats1'][0])
    {
        $request = $this->getStats1Request($ott, $organisation_id, $kb_id, $date_time, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CMDocumentTypeFrequency[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMDocumentTypeFrequency[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMDocumentTypeFrequency[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMDocumentTypeFrequency[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMDocumentTypeFrequency[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStats1Async
     *
     * Document Frequency Statistics
     *
     * @param  string $ott a one-time token for downloading data. (required)
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $date_time a unix date-time specifying the exact snapshot to download (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStats1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStats1Async($ott, $organisation_id, $kb_id, $date_time, string $contentType = self::contentTypes['getStats1'][0])
    {
        return $this->getStats1AsyncWithHttpInfo($ott, $organisation_id, $kb_id, $date_time, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStats1AsyncWithHttpInfo
     *
     * Document Frequency Statistics
     *
     * @param  string $ott a one-time token for downloading data. (required)
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $date_time a unix date-time specifying the exact snapshot to download (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStats1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStats1AsyncWithHttpInfo($ott, $organisation_id, $kb_id, $date_time, string $contentType = self::contentTypes['getStats1'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMDocumentTypeFrequency[]';
        $request = $this->getStats1Request($ott, $organisation_id, $kb_id, $date_time, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStats1'
     *
     * @param  string $ott a one-time token for downloading data. (required)
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $date_time a unix date-time specifying the exact snapshot to download (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStats1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStats1Request($ott, $organisation_id, $kb_id, $date_time, string $contentType = self::contentTypes['getStats1'][0])
    {

        // verify the required parameter 'ott' is set
        if ($ott === null || (is_array($ott) && count($ott) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ott when calling getStats1'
            );
        }

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling getStats1'
            );
        }

        // verify the required parameter 'kb_id' is set
        if ($kb_id === null || (is_array($kb_id) && count($kb_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kb_id when calling getStats1'
            );
        }

        // verify the required parameter 'date_time' is set
        if ($date_time === null || (is_array($date_time) && count($date_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_time when calling getStats1'
            );
        }


        $resourcePath = '/api/document/stats/frequencies/{organisationId}/{kbId}/{dateTime}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ott,
            'ott', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($kb_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kbId' . '}',
                ObjectSerializer::toPathValue($kb_id),
                $resourcePath
            );
        }
        // path params
        if ($date_time !== null) {
            $resourcePath = str_replace(
                '{' . 'dateTime' . '}',
                ObjectSerializer::toPathValue($date_time),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inventorizeDocuments
     *
     * Document Inventory
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMInventorizeParameters $cm_inventorize_parameters cm_inventorize_parameters (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inventorizeDocuments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage
     */
    public function inventorizeDocuments($session_id, $cm_inventorize_parameters, $api_version = null, string $contentType = self::contentTypes['inventorizeDocuments'][0])
    {
        list($response) = $this->inventorizeDocumentsWithHttpInfo($session_id, $cm_inventorize_parameters, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation inventorizeDocumentsWithHttpInfo
     *
     * Document Inventory
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMInventorizeParameters $cm_inventorize_parameters (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inventorizeDocuments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function inventorizeDocumentsWithHttpInfo($session_id, $cm_inventorize_parameters, $api_version = null, string $contentType = self::contentTypes['inventorizeDocuments'][0])
    {
        $request = $this->inventorizeDocumentsRequest($session_id, $cm_inventorize_parameters, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JsonMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inventorizeDocumentsAsync
     *
     * Document Inventory
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMInventorizeParameters $cm_inventorize_parameters (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inventorizeDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inventorizeDocumentsAsync($session_id, $cm_inventorize_parameters, $api_version = null, string $contentType = self::contentTypes['inventorizeDocuments'][0])
    {
        return $this->inventorizeDocumentsAsyncWithHttpInfo($session_id, $cm_inventorize_parameters, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inventorizeDocumentsAsyncWithHttpInfo
     *
     * Document Inventory
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMInventorizeParameters $cm_inventorize_parameters (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inventorizeDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inventorizeDocumentsAsyncWithHttpInfo($session_id, $cm_inventorize_parameters, $api_version = null, string $contentType = self::contentTypes['inventorizeDocuments'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonMessage';
        $request = $this->inventorizeDocumentsRequest($session_id, $cm_inventorize_parameters, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inventorizeDocuments'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMInventorizeParameters $cm_inventorize_parameters (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inventorizeDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function inventorizeDocumentsRequest($session_id, $cm_inventorize_parameters, $api_version = null, string $contentType = self::contentTypes['inventorizeDocuments'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling inventorizeDocuments'
            );
        }

        // verify the required parameter 'cm_inventorize_parameters' is set
        if ($cm_inventorize_parameters === null || (is_array($cm_inventorize_parameters) && count($cm_inventorize_parameters) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_inventorize_parameters when calling inventorizeDocuments'
            );
        }



        $resourcePath = '/api/document/inventorize';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_inventorize_parameters)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_inventorize_parameters));
            } else {
                $httpBody = $cm_inventorize_parameters;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inventorizeIndexes
     *
     * Index Inventory
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMInventorizeParameters $cm_inventorize_parameters cm_inventorize_parameters (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inventorizeIndexes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage
     */
    public function inventorizeIndexes($session_id, $cm_inventorize_parameters, $api_version = null, string $contentType = self::contentTypes['inventorizeIndexes'][0])
    {
        list($response) = $this->inventorizeIndexesWithHttpInfo($session_id, $cm_inventorize_parameters, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation inventorizeIndexesWithHttpInfo
     *
     * Index Inventory
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMInventorizeParameters $cm_inventorize_parameters (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inventorizeIndexes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function inventorizeIndexesWithHttpInfo($session_id, $cm_inventorize_parameters, $api_version = null, string $contentType = self::contentTypes['inventorizeIndexes'][0])
    {
        $request = $this->inventorizeIndexesRequest($session_id, $cm_inventorize_parameters, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JsonMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inventorizeIndexesAsync
     *
     * Index Inventory
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMInventorizeParameters $cm_inventorize_parameters (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inventorizeIndexes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inventorizeIndexesAsync($session_id, $cm_inventorize_parameters, $api_version = null, string $contentType = self::contentTypes['inventorizeIndexes'][0])
    {
        return $this->inventorizeIndexesAsyncWithHttpInfo($session_id, $cm_inventorize_parameters, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inventorizeIndexesAsyncWithHttpInfo
     *
     * Index Inventory
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMInventorizeParameters $cm_inventorize_parameters (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inventorizeIndexes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inventorizeIndexesAsyncWithHttpInfo($session_id, $cm_inventorize_parameters, $api_version = null, string $contentType = self::contentTypes['inventorizeIndexes'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonMessage';
        $request = $this->inventorizeIndexesRequest($session_id, $cm_inventorize_parameters, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inventorizeIndexes'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMInventorizeParameters $cm_inventorize_parameters (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inventorizeIndexes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function inventorizeIndexesRequest($session_id, $cm_inventorize_parameters, $api_version = null, string $contentType = self::contentTypes['inventorizeIndexes'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling inventorizeIndexes'
            );
        }

        // verify the required parameter 'cm_inventorize_parameters' is set
        if ($cm_inventorize_parameters === null || (is_array($cm_inventorize_parameters) && count($cm_inventorize_parameters) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_inventorize_parameters when calling inventorizeIndexes'
            );
        }



        $resourcePath = '/api/document/inventorize-indexes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_inventorize_parameters)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_inventorize_parameters));
            } else {
                $httpBody = $cm_inventorize_parameters;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation preview
     *
     * get Preview
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $client_id the client-id, a persistent id identifying the remote client making this request. (required)
     * @param  string $session_id the session-id, the security required for making this request. (required)
     * @param  int $url_id the SimSage id for this url (required)
     * @param  int $page what page to render (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['preview'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|\OpenAPI\Client\Model\JsonMessage
     */
    public function preview($organisation_id, $kb_id, $client_id, $session_id, $url_id, $page, string $contentType = self::contentTypes['preview'][0])
    {
        list($response) = $this->previewWithHttpInfo($organisation_id, $kb_id, $client_id, $session_id, $url_id, $page, $contentType);
        return $response;
    }

    /**
     * Operation previewWithHttpInfo
     *
     * get Preview
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $client_id the client-id, a persistent id identifying the remote client making this request. (required)
     * @param  string $session_id the session-id, the security required for making this request. (required)
     * @param  int $url_id the SimSage id for this url (required)
     * @param  int $page what page to render (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['preview'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function previewWithHttpInfo($organisation_id, $kb_id, $client_id, $session_id, $url_id, $page, string $contentType = self::contentTypes['preview'][0])
    {
        $request = $this->previewRequest($organisation_id, $kb_id, $client_id, $session_id, $url_id, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation previewAsync
     *
     * get Preview
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $client_id the client-id, a persistent id identifying the remote client making this request. (required)
     * @param  string $session_id the session-id, the security required for making this request. (required)
     * @param  int $url_id the SimSage id for this url (required)
     * @param  int $page what page to render (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['preview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function previewAsync($organisation_id, $kb_id, $client_id, $session_id, $url_id, $page, string $contentType = self::contentTypes['preview'][0])
    {
        return $this->previewAsyncWithHttpInfo($organisation_id, $kb_id, $client_id, $session_id, $url_id, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation previewAsyncWithHttpInfo
     *
     * get Preview
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $client_id the client-id, a persistent id identifying the remote client making this request. (required)
     * @param  string $session_id the session-id, the security required for making this request. (required)
     * @param  int $url_id the SimSage id for this url (required)
     * @param  int $page what page to render (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['preview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function previewAsyncWithHttpInfo($organisation_id, $kb_id, $client_id, $session_id, $url_id, $page, string $contentType = self::contentTypes['preview'][0])
    {
        $returnType = 'string';
        $request = $this->previewRequest($organisation_id, $kb_id, $client_id, $session_id, $url_id, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'preview'
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $client_id the client-id, a persistent id identifying the remote client making this request. (required)
     * @param  string $session_id the session-id, the security required for making this request. (required)
     * @param  int $url_id the SimSage id for this url (required)
     * @param  int $page what page to render (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['preview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function previewRequest($organisation_id, $kb_id, $client_id, $session_id, $url_id, $page, string $contentType = self::contentTypes['preview'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling preview'
            );
        }

        // verify the required parameter 'kb_id' is set
        if ($kb_id === null || (is_array($kb_id) && count($kb_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kb_id when calling preview'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling preview'
            );
        }

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling preview'
            );
        }

        // verify the required parameter 'url_id' is set
        if ($url_id === null || (is_array($url_id) && count($url_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url_id when calling preview'
            );
        }

        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling preview'
            );
        }


        $resourcePath = '/api/document/preview/{organisationId}/{kbId}/{clientId}/{sessionId}/{urlId}/{page}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($kb_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kbId' . '}',
                ObjectSerializer::toPathValue($kb_id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($session_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sessionId' . '}',
                ObjectSerializer::toPathValue($session_id),
                $resourcePath
            );
        }
        // path params
        if ($url_id !== null) {
            $resourcePath = str_replace(
                '{' . 'urlId' . '}',
                ObjectSerializer::toPathValue($url_id),
                $resourcePath
            );
        }
        // path params
        if ($page !== null) {
            $resourcePath = str_replace(
                '{' . 'page' . '}',
                ObjectSerializer::toPathValue($page),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['image/jpeg', 'image/svg+xml', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation previewHtml
     *
     * Preview HTML
     *
     * @param  string $session_id a valid session-guid id or a anonymous user-id. (required)
     * @param  \OpenAPI\Client\Model\CMGetHtml $cm_get_html cm_get_html (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['previewHtml'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CMGetHtml|\OpenAPI\Client\Model\JsonMessage
     */
    public function previewHtml($session_id, $cm_get_html, string $contentType = self::contentTypes['previewHtml'][0])
    {
        list($response) = $this->previewHtmlWithHttpInfo($session_id, $cm_get_html, $contentType);
        return $response;
    }

    /**
     * Operation previewHtmlWithHttpInfo
     *
     * Preview HTML
     *
     * @param  string $session_id a valid session-guid id or a anonymous user-id. (required)
     * @param  \OpenAPI\Client\Model\CMGetHtml $cm_get_html (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['previewHtml'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CMGetHtml|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function previewHtmlWithHttpInfo($session_id, $cm_get_html, string $contentType = self::contentTypes['previewHtml'][0])
    {
        $request = $this->previewHtmlRequest($session_id, $cm_get_html, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CMGetHtml' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMGetHtml' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMGetHtml', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMGetHtml';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMGetHtml',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation previewHtmlAsync
     *
     * Preview HTML
     *
     * @param  string $session_id a valid session-guid id or a anonymous user-id. (required)
     * @param  \OpenAPI\Client\Model\CMGetHtml $cm_get_html (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['previewHtml'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function previewHtmlAsync($session_id, $cm_get_html, string $contentType = self::contentTypes['previewHtml'][0])
    {
        return $this->previewHtmlAsyncWithHttpInfo($session_id, $cm_get_html, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation previewHtmlAsyncWithHttpInfo
     *
     * Preview HTML
     *
     * @param  string $session_id a valid session-guid id or a anonymous user-id. (required)
     * @param  \OpenAPI\Client\Model\CMGetHtml $cm_get_html (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['previewHtml'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function previewHtmlAsyncWithHttpInfo($session_id, $cm_get_html, string $contentType = self::contentTypes['previewHtml'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMGetHtml';
        $request = $this->previewHtmlRequest($session_id, $cm_get_html, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'previewHtml'
     *
     * @param  string $session_id a valid session-guid id or a anonymous user-id. (required)
     * @param  \OpenAPI\Client\Model\CMGetHtml $cm_get_html (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['previewHtml'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function previewHtmlRequest($session_id, $cm_get_html, string $contentType = self::contentTypes['previewHtml'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling previewHtml'
            );
        }

        // verify the required parameter 'cm_get_html' is set
        if ($cm_get_html === null || (is_array($cm_get_html) && count($cm_get_html) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_get_html when calling previewHtml'
            );
        }


        $resourcePath = '/api/document/preview/html';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_get_html)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_get_html));
            } else {
                $httpBody = $cm_get_html;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryFocussedSummarization
     *
     * Summarize Documents for Query
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMQueryFocussedSummarizationRequest $cm_query_focussed_summarization_request cm_query_focussed_summarization_request (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryFocussedSummarization'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\CMQueryFocussedSummarization
     */
    public function queryFocussedSummarization($session_id, $cm_query_focussed_summarization_request, $api_version = null, string $contentType = self::contentTypes['queryFocussedSummarization'][0])
    {
        list($response) = $this->queryFocussedSummarizationWithHttpInfo($session_id, $cm_query_focussed_summarization_request, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation queryFocussedSummarizationWithHttpInfo
     *
     * Summarize Documents for Query
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMQueryFocussedSummarizationRequest $cm_query_focussed_summarization_request (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryFocussedSummarization'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\CMQueryFocussedSummarization, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryFocussedSummarizationWithHttpInfo($session_id, $cm_query_focussed_summarization_request, $api_version = null, string $contentType = self::contentTypes['queryFocussedSummarization'][0])
    {
        $request = $this->queryFocussedSummarizationRequest($session_id, $cm_query_focussed_summarization_request, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\CMQueryFocussedSummarization' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMQueryFocussedSummarization' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMQueryFocussedSummarization', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMQueryFocussedSummarization';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMQueryFocussedSummarization',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryFocussedSummarizationAsync
     *
     * Summarize Documents for Query
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMQueryFocussedSummarizationRequest $cm_query_focussed_summarization_request (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryFocussedSummarization'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryFocussedSummarizationAsync($session_id, $cm_query_focussed_summarization_request, $api_version = null, string $contentType = self::contentTypes['queryFocussedSummarization'][0])
    {
        return $this->queryFocussedSummarizationAsyncWithHttpInfo($session_id, $cm_query_focussed_summarization_request, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryFocussedSummarizationAsyncWithHttpInfo
     *
     * Summarize Documents for Query
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMQueryFocussedSummarizationRequest $cm_query_focussed_summarization_request (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryFocussedSummarization'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryFocussedSummarizationAsyncWithHttpInfo($session_id, $cm_query_focussed_summarization_request, $api_version = null, string $contentType = self::contentTypes['queryFocussedSummarization'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMQueryFocussedSummarization';
        $request = $this->queryFocussedSummarizationRequest($session_id, $cm_query_focussed_summarization_request, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryFocussedSummarization'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMQueryFocussedSummarizationRequest $cm_query_focussed_summarization_request (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryFocussedSummarization'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function queryFocussedSummarizationRequest($session_id, $cm_query_focussed_summarization_request, $api_version = null, string $contentType = self::contentTypes['queryFocussedSummarization'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling queryFocussedSummarization'
            );
        }

        // verify the required parameter 'cm_query_focussed_summarization_request' is set
        if ($cm_query_focussed_summarization_request === null || (is_array($cm_query_focussed_summarization_request) && count($cm_query_focussed_summarization_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_query_focussed_summarization_request when calling queryFocussedSummarization'
            );
        }



        $resourcePath = '/api/document/qfs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_query_focussed_summarization_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_query_focussed_summarization_request));
            } else {
                $httpBody = $cm_query_focussed_summarization_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeDocument
     *
     * Remove Document
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $url the base-64 encoded (no-prefix) url of the document (required)
     * @param  int $source_id the source-id of the crawler this document belongs to (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeDocument'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage
     */
    public function removeDocument($organisation_id, $kb_id, $url, $source_id, $session_id, $api_version = null, string $contentType = self::contentTypes['removeDocument'][0])
    {
        list($response) = $this->removeDocumentWithHttpInfo($organisation_id, $kb_id, $url, $source_id, $session_id, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation removeDocumentWithHttpInfo
     *
     * Remove Document
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $url the base-64 encoded (no-prefix) url of the document (required)
     * @param  int $source_id the source-id of the crawler this document belongs to (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeDocument'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeDocumentWithHttpInfo($organisation_id, $kb_id, $url, $source_id, $session_id, $api_version = null, string $contentType = self::contentTypes['removeDocument'][0])
    {
        $request = $this->removeDocumentRequest($organisation_id, $kb_id, $url, $source_id, $session_id, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JsonMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeDocumentAsync
     *
     * Remove Document
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $url the base-64 encoded (no-prefix) url of the document (required)
     * @param  int $source_id the source-id of the crawler this document belongs to (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeDocumentAsync($organisation_id, $kb_id, $url, $source_id, $session_id, $api_version = null, string $contentType = self::contentTypes['removeDocument'][0])
    {
        return $this->removeDocumentAsyncWithHttpInfo($organisation_id, $kb_id, $url, $source_id, $session_id, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeDocumentAsyncWithHttpInfo
     *
     * Remove Document
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $url the base-64 encoded (no-prefix) url of the document (required)
     * @param  int $source_id the source-id of the crawler this document belongs to (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeDocumentAsyncWithHttpInfo($organisation_id, $kb_id, $url, $source_id, $session_id, $api_version = null, string $contentType = self::contentTypes['removeDocument'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonMessage';
        $request = $this->removeDocumentRequest($organisation_id, $kb_id, $url, $source_id, $session_id, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeDocument'
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $url the base-64 encoded (no-prefix) url of the document (required)
     * @param  int $source_id the source-id of the crawler this document belongs to (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeDocumentRequest($organisation_id, $kb_id, $url, $source_id, $session_id, $api_version = null, string $contentType = self::contentTypes['removeDocument'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling removeDocument'
            );
        }

        // verify the required parameter 'kb_id' is set
        if ($kb_id === null || (is_array($kb_id) && count($kb_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kb_id when calling removeDocument'
            );
        }

        // verify the required parameter 'url' is set
        if ($url === null || (is_array($url) && count($url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling removeDocument'
            );
        }

        // verify the required parameter 'source_id' is set
        if ($source_id === null || (is_array($source_id) && count($source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_id when calling removeDocument'
            );
        }

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling removeDocument'
            );
        }



        $resourcePath = '/api/document/document/{organisationId}/{kbId}/{url}/{sourceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($kb_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kbId' . '}',
                ObjectSerializer::toPathValue($kb_id),
                $resourcePath
            );
        }
        // path params
        if ($url !== null) {
            $resourcePath = str_replace(
                '{' . 'url' . '}',
                ObjectSerializer::toPathValue($url),
                $resourcePath
            );
        }
        // path params
        if ($source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sourceId' . '}',
                ObjectSerializer::toPathValue($source_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeParquetFile
     *
     * Delete Parquet File
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $date_time a unix date-time specifying the exact snapshot to remove (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeParquetFile'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage[]
     */
    public function removeParquetFile($organisation_id, $kb_id, $date_time, $session_id, $api_version = null, string $contentType = self::contentTypes['removeParquetFile'][0])
    {
        list($response) = $this->removeParquetFileWithHttpInfo($organisation_id, $kb_id, $date_time, $session_id, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation removeParquetFileWithHttpInfo
     *
     * Delete Parquet File
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $date_time a unix date-time specifying the exact snapshot to remove (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeParquetFile'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage[], HTTP status code, HTTP response headers (array of strings)
     */
    public function removeParquetFileWithHttpInfo($organisation_id, $kb_id, $date_time, $session_id, $api_version = null, string $contentType = self::contentTypes['removeParquetFile'][0])
    {
        $request = $this->removeParquetFileRequest($organisation_id, $kb_id, $date_time, $session_id, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\JsonMessage[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JsonMessage[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeParquetFileAsync
     *
     * Delete Parquet File
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $date_time a unix date-time specifying the exact snapshot to remove (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeParquetFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeParquetFileAsync($organisation_id, $kb_id, $date_time, $session_id, $api_version = null, string $contentType = self::contentTypes['removeParquetFile'][0])
    {
        return $this->removeParquetFileAsyncWithHttpInfo($organisation_id, $kb_id, $date_time, $session_id, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeParquetFileAsyncWithHttpInfo
     *
     * Delete Parquet File
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $date_time a unix date-time specifying the exact snapshot to remove (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeParquetFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeParquetFileAsyncWithHttpInfo($organisation_id, $kb_id, $date_time, $session_id, $api_version = null, string $contentType = self::contentTypes['removeParquetFile'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonMessage[]';
        $request = $this->removeParquetFileRequest($organisation_id, $kb_id, $date_time, $session_id, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeParquetFile'
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $date_time a unix date-time specifying the exact snapshot to remove (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeParquetFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeParquetFileRequest($organisation_id, $kb_id, $date_time, $session_id, $api_version = null, string $contentType = self::contentTypes['removeParquetFile'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling removeParquetFile'
            );
        }

        // verify the required parameter 'kb_id' is set
        if ($kb_id === null || (is_array($kb_id) && count($kb_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kb_id when calling removeParquetFile'
            );
        }

        // verify the required parameter 'date_time' is set
        if ($date_time === null || (is_array($date_time) && count($date_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_time when calling removeParquetFile'
            );
        }

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling removeParquetFile'
            );
        }



        $resourcePath = '/api/document/parquet/{organisationId}/{kbId}/{dateTime}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($kb_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kbId' . '}',
                ObjectSerializer::toPathValue($kb_id),
                $resourcePath
            );
        }
        // path params
        if ($date_time !== null) {
            $resourcePath = str_replace(
                '{' . 'dateTime' . '}',
                ObjectSerializer::toPathValue($date_time),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation summarizeDocument
     *
     * Summarize a document
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMSingleDocumentSummaryRequest $cm_single_document_summary_request cm_single_document_summary_request (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['summarizeDocument'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CMSingleDocumentSummary|\OpenAPI\Client\Model\JsonMessage
     */
    public function summarizeDocument($session_id, $cm_single_document_summary_request, $api_version = null, string $contentType = self::contentTypes['summarizeDocument'][0])
    {
        list($response) = $this->summarizeDocumentWithHttpInfo($session_id, $cm_single_document_summary_request, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation summarizeDocumentWithHttpInfo
     *
     * Summarize a document
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMSingleDocumentSummaryRequest $cm_single_document_summary_request (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['summarizeDocument'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CMSingleDocumentSummary|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function summarizeDocumentWithHttpInfo($session_id, $cm_single_document_summary_request, $api_version = null, string $contentType = self::contentTypes['summarizeDocument'][0])
    {
        $request = $this->summarizeDocumentRequest($session_id, $cm_single_document_summary_request, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CMSingleDocumentSummary' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMSingleDocumentSummary' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMSingleDocumentSummary', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMSingleDocumentSummary';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMSingleDocumentSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation summarizeDocumentAsync
     *
     * Summarize a document
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMSingleDocumentSummaryRequest $cm_single_document_summary_request (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['summarizeDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function summarizeDocumentAsync($session_id, $cm_single_document_summary_request, $api_version = null, string $contentType = self::contentTypes['summarizeDocument'][0])
    {
        return $this->summarizeDocumentAsyncWithHttpInfo($session_id, $cm_single_document_summary_request, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation summarizeDocumentAsyncWithHttpInfo
     *
     * Summarize a document
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMSingleDocumentSummaryRequest $cm_single_document_summary_request (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['summarizeDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function summarizeDocumentAsyncWithHttpInfo($session_id, $cm_single_document_summary_request, $api_version = null, string $contentType = self::contentTypes['summarizeDocument'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMSingleDocumentSummary';
        $request = $this->summarizeDocumentRequest($session_id, $cm_single_document_summary_request, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'summarizeDocument'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMSingleDocumentSummaryRequest $cm_single_document_summary_request (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['summarizeDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function summarizeDocumentRequest($session_id, $cm_single_document_summary_request, $api_version = null, string $contentType = self::contentTypes['summarizeDocument'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling summarizeDocument'
            );
        }

        // verify the required parameter 'cm_single_document_summary_request' is set
        if ($cm_single_document_summary_request === null || (is_array($cm_single_document_summary_request) && count($cm_single_document_summary_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_single_document_summary_request when calling summarizeDocument'
            );
        }



        $resourcePath = '/api/document/summarize/document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_single_document_summary_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_single_document_summary_request));
            } else {
                $httpBody = $cm_single_document_summary_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation version4
     *
     * Version
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['version4'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\CMVersion
     */
    public function version4(string $contentType = self::contentTypes['version4'][0])
    {
        list($response) = $this->version4WithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation version4WithHttpInfo
     *
     * Version
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['version4'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\CMVersion, HTTP status code, HTTP response headers (array of strings)
     */
    public function version4WithHttpInfo(string $contentType = self::contentTypes['version4'][0])
    {
        $request = $this->version4Request($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\CMVersion' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMVersion' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMVersion', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMVersion';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMVersion',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation version4Async
     *
     * Version
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['version4'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function version4Async(string $contentType = self::contentTypes['version4'][0])
    {
        return $this->version4AsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation version4AsyncWithHttpInfo
     *
     * Version
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['version4'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function version4AsyncWithHttpInfo(string $contentType = self::contentTypes['version4'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMVersion';
        $request = $this->version4Request($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'version4'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['version4'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function version4Request(string $contentType = self::contentTypes['version4'][0])
    {


        $resourcePath = '/api/document/version';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation zipSource
     *
     * Zip source documents
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMZipSource $cm_zip_source cm_zip_source (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['zipSource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage
     */
    public function zipSource($session_id, $cm_zip_source, $api_version = null, string $contentType = self::contentTypes['zipSource'][0])
    {
        list($response) = $this->zipSourceWithHttpInfo($session_id, $cm_zip_source, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation zipSourceWithHttpInfo
     *
     * Zip source documents
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMZipSource $cm_zip_source (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['zipSource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function zipSourceWithHttpInfo($session_id, $cm_zip_source, $api_version = null, string $contentType = self::contentTypes['zipSource'][0])
    {
        $request = $this->zipSourceRequest($session_id, $cm_zip_source, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JsonMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zipSourceAsync
     *
     * Zip source documents
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMZipSource $cm_zip_source (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['zipSource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function zipSourceAsync($session_id, $cm_zip_source, $api_version = null, string $contentType = self::contentTypes['zipSource'][0])
    {
        return $this->zipSourceAsyncWithHttpInfo($session_id, $cm_zip_source, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zipSourceAsyncWithHttpInfo
     *
     * Zip source documents
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMZipSource $cm_zip_source (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['zipSource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function zipSourceAsyncWithHttpInfo($session_id, $cm_zip_source, $api_version = null, string $contentType = self::contentTypes['zipSource'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonMessage';
        $request = $this->zipSourceRequest($session_id, $cm_zip_source, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'zipSource'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMZipSource $cm_zip_source (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['zipSource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function zipSourceRequest($session_id, $cm_zip_source, $api_version = null, string $contentType = self::contentTypes['zipSource'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling zipSource'
            );
        }

        // verify the required parameter 'cm_zip_source' is set
        if ($cm_zip_source === null || (is_array($cm_zip_source) && count($cm_zip_source) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_zip_source when calling zipSource'
            );
        }



        $resourcePath = '/api/document/zip/source';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_zip_source)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_zip_source));
            } else {
                $httpBody = $cm_zip_source;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
