<?php
/**
 * KnowledgebaseApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.14.12
 * Contact: info@simsage.co.uk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * KnowledgebaseApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class KnowledgebaseApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'exportKnowledgeBase' => [
            'application/json',
        ],
        'getKnowledgeBase' => [
            'application/json',
        ],
        'getKnowledgeBases' => [
            'application/json',
        ],
        'getSearchInfo' => [
            'application/json',
        ],
        'getSearchInfo2' => [
            'application/json',
        ],
        'removeKnowledgeBase' => [
            'application/json',
        ],
        'updateKnowledgeBase' => [
            'application/json',
        ],
        'version3' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation exportKnowledgeBase
     *
     * export Knowledge-base
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMKnowledgeBaseExport $cm_knowledge_base_export cm_knowledge_base_export (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportKnowledgeBase'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage
     */
    public function exportKnowledgeBase($session_id, $cm_knowledge_base_export, $api_version = null, string $contentType = self::contentTypes['exportKnowledgeBase'][0])
    {
        list($response) = $this->exportKnowledgeBaseWithHttpInfo($session_id, $cm_knowledge_base_export, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation exportKnowledgeBaseWithHttpInfo
     *
     * export Knowledge-base
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMKnowledgeBaseExport $cm_knowledge_base_export (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportKnowledgeBase'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportKnowledgeBaseWithHttpInfo($session_id, $cm_knowledge_base_export, $api_version = null, string $contentType = self::contentTypes['exportKnowledgeBase'][0])
    {
        $request = $this->exportKnowledgeBaseRequest($session_id, $cm_knowledge_base_export, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JsonMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportKnowledgeBaseAsync
     *
     * export Knowledge-base
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMKnowledgeBaseExport $cm_knowledge_base_export (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportKnowledgeBase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportKnowledgeBaseAsync($session_id, $cm_knowledge_base_export, $api_version = null, string $contentType = self::contentTypes['exportKnowledgeBase'][0])
    {
        return $this->exportKnowledgeBaseAsyncWithHttpInfo($session_id, $cm_knowledge_base_export, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportKnowledgeBaseAsyncWithHttpInfo
     *
     * export Knowledge-base
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMKnowledgeBaseExport $cm_knowledge_base_export (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportKnowledgeBase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportKnowledgeBaseAsyncWithHttpInfo($session_id, $cm_knowledge_base_export, $api_version = null, string $contentType = self::contentTypes['exportKnowledgeBase'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonMessage';
        $request = $this->exportKnowledgeBaseRequest($session_id, $cm_knowledge_base_export, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportKnowledgeBase'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMKnowledgeBaseExport $cm_knowledge_base_export (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportKnowledgeBase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function exportKnowledgeBaseRequest($session_id, $cm_knowledge_base_export, $api_version = null, string $contentType = self::contentTypes['exportKnowledgeBase'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling exportKnowledgeBase'
            );
        }

        // verify the required parameter 'cm_knowledge_base_export' is set
        if ($cm_knowledge_base_export === null || (is_array($cm_knowledge_base_export) && count($cm_knowledge_base_export) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_knowledge_base_export when calling exportKnowledgeBase'
            );
        }



        $resourcePath = '/api/knowledgebase/export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_knowledge_base_export)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_knowledge_base_export));
            } else {
                $httpBody = $cm_knowledge_base_export;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getKnowledgeBase
     *
     * Get Knowledge-base
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base to get (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKnowledgeBase'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CMKnowledgeBase|\OpenAPI\Client\Model\JsonMessage
     */
    public function getKnowledgeBase($organisation_id, $kb_id, $session_id, $api_version = null, string $contentType = self::contentTypes['getKnowledgeBase'][0])
    {
        list($response) = $this->getKnowledgeBaseWithHttpInfo($organisation_id, $kb_id, $session_id, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation getKnowledgeBaseWithHttpInfo
     *
     * Get Knowledge-base
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base to get (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKnowledgeBase'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CMKnowledgeBase|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getKnowledgeBaseWithHttpInfo($organisation_id, $kb_id, $session_id, $api_version = null, string $contentType = self::contentTypes['getKnowledgeBase'][0])
    {
        $request = $this->getKnowledgeBaseRequest($organisation_id, $kb_id, $session_id, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CMKnowledgeBase' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMKnowledgeBase' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMKnowledgeBase', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMKnowledgeBase';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMKnowledgeBase',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getKnowledgeBaseAsync
     *
     * Get Knowledge-base
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base to get (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKnowledgeBase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getKnowledgeBaseAsync($organisation_id, $kb_id, $session_id, $api_version = null, string $contentType = self::contentTypes['getKnowledgeBase'][0])
    {
        return $this->getKnowledgeBaseAsyncWithHttpInfo($organisation_id, $kb_id, $session_id, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getKnowledgeBaseAsyncWithHttpInfo
     *
     * Get Knowledge-base
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base to get (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKnowledgeBase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getKnowledgeBaseAsyncWithHttpInfo($organisation_id, $kb_id, $session_id, $api_version = null, string $contentType = self::contentTypes['getKnowledgeBase'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMKnowledgeBase';
        $request = $this->getKnowledgeBaseRequest($organisation_id, $kb_id, $session_id, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getKnowledgeBase'
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base to get (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKnowledgeBase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getKnowledgeBaseRequest($organisation_id, $kb_id, $session_id, $api_version = null, string $contentType = self::contentTypes['getKnowledgeBase'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling getKnowledgeBase'
            );
        }

        // verify the required parameter 'kb_id' is set
        if ($kb_id === null || (is_array($kb_id) && count($kb_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kb_id when calling getKnowledgeBase'
            );
        }

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling getKnowledgeBase'
            );
        }



        $resourcePath = '/api/knowledgebase/{organisationId}/{kbId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($kb_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kbId' . '}',
                ObjectSerializer::toPathValue($kb_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getKnowledgeBases
     *
     * Get Knowledge-bases
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKnowledgeBases'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CMKnowledgeBase[]|\OpenAPI\Client\Model\JsonMessage
     */
    public function getKnowledgeBases($organisation_id, $session_id, string $contentType = self::contentTypes['getKnowledgeBases'][0])
    {
        list($response) = $this->getKnowledgeBasesWithHttpInfo($organisation_id, $session_id, $contentType);
        return $response;
    }

    /**
     * Operation getKnowledgeBasesWithHttpInfo
     *
     * Get Knowledge-bases
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKnowledgeBases'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CMKnowledgeBase[]|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getKnowledgeBasesWithHttpInfo($organisation_id, $session_id, string $contentType = self::contentTypes['getKnowledgeBases'][0])
    {
        $request = $this->getKnowledgeBasesRequest($organisation_id, $session_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CMKnowledgeBase[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMKnowledgeBase[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMKnowledgeBase[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMKnowledgeBase[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMKnowledgeBase[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getKnowledgeBasesAsync
     *
     * Get Knowledge-bases
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKnowledgeBases'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getKnowledgeBasesAsync($organisation_id, $session_id, string $contentType = self::contentTypes['getKnowledgeBases'][0])
    {
        return $this->getKnowledgeBasesAsyncWithHttpInfo($organisation_id, $session_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getKnowledgeBasesAsyncWithHttpInfo
     *
     * Get Knowledge-bases
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKnowledgeBases'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getKnowledgeBasesAsyncWithHttpInfo($organisation_id, $session_id, string $contentType = self::contentTypes['getKnowledgeBases'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMKnowledgeBase[]';
        $request = $this->getKnowledgeBasesRequest($organisation_id, $session_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getKnowledgeBases'
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKnowledgeBases'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getKnowledgeBasesRequest($organisation_id, $session_id, string $contentType = self::contentTypes['getKnowledgeBases'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling getKnowledgeBases'
            );
        }

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling getKnowledgeBases'
            );
        }


        $resourcePath = '/api/knowledgebase/{organisationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSearchInfo
     *
     * Search Info
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $client_id the client&#39;s id (its guid id), pre-register this client as a known client. (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchInfo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CMInfo|\OpenAPI\Client\Model\JsonMessage
     */
    public function getSearchInfo($organisation_id, $client_id, $api_version = null, string $contentType = self::contentTypes['getSearchInfo'][0])
    {
        list($response) = $this->getSearchInfoWithHttpInfo($organisation_id, $client_id, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation getSearchInfoWithHttpInfo
     *
     * Search Info
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $client_id the client&#39;s id (its guid id), pre-register this client as a known client. (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchInfo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CMInfo|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSearchInfoWithHttpInfo($organisation_id, $client_id, $api_version = null, string $contentType = self::contentTypes['getSearchInfo'][0])
    {
        $request = $this->getSearchInfoRequest($organisation_id, $client_id, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CMInfo' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMInfo' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMInfo', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMInfo';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSearchInfoAsync
     *
     * Search Info
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $client_id the client&#39;s id (its guid id), pre-register this client as a known client. (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSearchInfoAsync($organisation_id, $client_id, $api_version = null, string $contentType = self::contentTypes['getSearchInfo'][0])
    {
        return $this->getSearchInfoAsyncWithHttpInfo($organisation_id, $client_id, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSearchInfoAsyncWithHttpInfo
     *
     * Search Info
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $client_id the client&#39;s id (its guid id), pre-register this client as a known client. (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSearchInfoAsyncWithHttpInfo($organisation_id, $client_id, $api_version = null, string $contentType = self::contentTypes['getSearchInfo'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMInfo';
        $request = $this->getSearchInfoRequest($organisation_id, $client_id, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSearchInfo'
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $client_id the client&#39;s id (its guid id), pre-register this client as a known client. (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSearchInfoRequest($organisation_id, $client_id, $api_version = null, string $contentType = self::contentTypes['getSearchInfo'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling getSearchInfo'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling getSearchInfo'
            );
        }



        $resourcePath = '/api/knowledgebase/search/info/{organisationId}/{clientId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSearchInfo2
     *
     * Search Info [deprecated]
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchInfo2'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CMInfo|\OpenAPI\Client\Model\JsonMessage
     */
    public function getSearchInfo2($organisation_id, $api_version = null, string $contentType = self::contentTypes['getSearchInfo2'][0])
    {
        list($response) = $this->getSearchInfo2WithHttpInfo($organisation_id, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation getSearchInfo2WithHttpInfo
     *
     * Search Info [deprecated]
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchInfo2'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CMInfo|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSearchInfo2WithHttpInfo($organisation_id, $api_version = null, string $contentType = self::contentTypes['getSearchInfo2'][0])
    {
        $request = $this->getSearchInfo2Request($organisation_id, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CMInfo' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMInfo' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMInfo', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMInfo';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSearchInfo2Async
     *
     * Search Info [deprecated]
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchInfo2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSearchInfo2Async($organisation_id, $api_version = null, string $contentType = self::contentTypes['getSearchInfo2'][0])
    {
        return $this->getSearchInfo2AsyncWithHttpInfo($organisation_id, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSearchInfo2AsyncWithHttpInfo
     *
     * Search Info [deprecated]
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchInfo2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSearchInfo2AsyncWithHttpInfo($organisation_id, $api_version = null, string $contentType = self::contentTypes['getSearchInfo2'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMInfo';
        $request = $this->getSearchInfo2Request($organisation_id, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSearchInfo2'
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchInfo2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSearchInfo2Request($organisation_id, $api_version = null, string $contentType = self::contentTypes['getSearchInfo2'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling getSearchInfo2'
            );
        }



        $resourcePath = '/api/knowledgebase/search/info/{organisationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeKnowledgeBase
     *
     * Delete Knowledge-base
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base to delete/remove (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeKnowledgeBase'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage
     */
    public function removeKnowledgeBase($organisation_id, $kb_id, $session_id, $api_version = null, string $contentType = self::contentTypes['removeKnowledgeBase'][0])
    {
        list($response) = $this->removeKnowledgeBaseWithHttpInfo($organisation_id, $kb_id, $session_id, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation removeKnowledgeBaseWithHttpInfo
     *
     * Delete Knowledge-base
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base to delete/remove (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeKnowledgeBase'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeKnowledgeBaseWithHttpInfo($organisation_id, $kb_id, $session_id, $api_version = null, string $contentType = self::contentTypes['removeKnowledgeBase'][0])
    {
        $request = $this->removeKnowledgeBaseRequest($organisation_id, $kb_id, $session_id, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JsonMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeKnowledgeBaseAsync
     *
     * Delete Knowledge-base
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base to delete/remove (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeKnowledgeBase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeKnowledgeBaseAsync($organisation_id, $kb_id, $session_id, $api_version = null, string $contentType = self::contentTypes['removeKnowledgeBase'][0])
    {
        return $this->removeKnowledgeBaseAsyncWithHttpInfo($organisation_id, $kb_id, $session_id, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeKnowledgeBaseAsyncWithHttpInfo
     *
     * Delete Knowledge-base
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base to delete/remove (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeKnowledgeBase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeKnowledgeBaseAsyncWithHttpInfo($organisation_id, $kb_id, $session_id, $api_version = null, string $contentType = self::contentTypes['removeKnowledgeBase'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonMessage';
        $request = $this->removeKnowledgeBaseRequest($organisation_id, $kb_id, $session_id, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeKnowledgeBase'
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base to delete/remove (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeKnowledgeBase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeKnowledgeBaseRequest($organisation_id, $kb_id, $session_id, $api_version = null, string $contentType = self::contentTypes['removeKnowledgeBase'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling removeKnowledgeBase'
            );
        }

        // verify the required parameter 'kb_id' is set
        if ($kb_id === null || (is_array($kb_id) && count($kb_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kb_id when calling removeKnowledgeBase'
            );
        }

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling removeKnowledgeBase'
            );
        }



        $resourcePath = '/api/knowledgebase/{organisationId}/{kbId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($kb_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kbId' . '}',
                ObjectSerializer::toPathValue($kb_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateKnowledgeBase
     *
     * Save Knowledge-base
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMKnowledgeBase $cm_knowledge_base cm_knowledge_base (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateKnowledgeBase'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\KnowledgeBase|\OpenAPI\Client\Model\JsonMessage
     */
    public function updateKnowledgeBase($session_id, $cm_knowledge_base, $api_version = null, string $contentType = self::contentTypes['updateKnowledgeBase'][0])
    {
        list($response) = $this->updateKnowledgeBaseWithHttpInfo($session_id, $cm_knowledge_base, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation updateKnowledgeBaseWithHttpInfo
     *
     * Save Knowledge-base
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMKnowledgeBase $cm_knowledge_base (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateKnowledgeBase'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\KnowledgeBase|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateKnowledgeBaseWithHttpInfo($session_id, $cm_knowledge_base, $api_version = null, string $contentType = self::contentTypes['updateKnowledgeBase'][0])
    {
        $request = $this->updateKnowledgeBaseRequest($session_id, $cm_knowledge_base, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\KnowledgeBase' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\KnowledgeBase' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\KnowledgeBase', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\KnowledgeBase';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\KnowledgeBase',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateKnowledgeBaseAsync
     *
     * Save Knowledge-base
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMKnowledgeBase $cm_knowledge_base (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateKnowledgeBase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateKnowledgeBaseAsync($session_id, $cm_knowledge_base, $api_version = null, string $contentType = self::contentTypes['updateKnowledgeBase'][0])
    {
        return $this->updateKnowledgeBaseAsyncWithHttpInfo($session_id, $cm_knowledge_base, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateKnowledgeBaseAsyncWithHttpInfo
     *
     * Save Knowledge-base
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMKnowledgeBase $cm_knowledge_base (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateKnowledgeBase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateKnowledgeBaseAsyncWithHttpInfo($session_id, $cm_knowledge_base, $api_version = null, string $contentType = self::contentTypes['updateKnowledgeBase'][0])
    {
        $returnType = '\OpenAPI\Client\Model\KnowledgeBase';
        $request = $this->updateKnowledgeBaseRequest($session_id, $cm_knowledge_base, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateKnowledgeBase'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMKnowledgeBase $cm_knowledge_base (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateKnowledgeBase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateKnowledgeBaseRequest($session_id, $cm_knowledge_base, $api_version = null, string $contentType = self::contentTypes['updateKnowledgeBase'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling updateKnowledgeBase'
            );
        }

        // verify the required parameter 'cm_knowledge_base' is set
        if ($cm_knowledge_base === null || (is_array($cm_knowledge_base) && count($cm_knowledge_base) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_knowledge_base when calling updateKnowledgeBase'
            );
        }



        $resourcePath = '/api/knowledgebase/save';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_knowledge_base)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_knowledge_base));
            } else {
                $httpBody = $cm_knowledge_base;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation version3
     *
     * Version
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['version3'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\CMVersion
     */
    public function version3(string $contentType = self::contentTypes['version3'][0])
    {
        list($response) = $this->version3WithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation version3WithHttpInfo
     *
     * Version
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['version3'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\CMVersion, HTTP status code, HTTP response headers (array of strings)
     */
    public function version3WithHttpInfo(string $contentType = self::contentTypes['version3'][0])
    {
        $request = $this->version3Request($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\CMVersion' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMVersion' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMVersion', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMVersion';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMVersion',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation version3Async
     *
     * Version
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['version3'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function version3Async(string $contentType = self::contentTypes['version3'][0])
    {
        return $this->version3AsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation version3AsyncWithHttpInfo
     *
     * Version
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['version3'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function version3AsyncWithHttpInfo(string $contentType = self::contentTypes['version3'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMVersion';
        $request = $this->version3Request($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'version3'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['version3'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function version3Request(string $contentType = self::contentTypes['version3'][0])
    {


        $resourcePath = '/api/knowledgebase/version';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
