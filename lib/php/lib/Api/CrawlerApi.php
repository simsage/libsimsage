<?php
/**
 * CrawlerApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.13.31
 * Contact: info@simsage.co.uk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * CrawlerApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CrawlerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'crawlerDeleteFolder' => [
            'application/json',
        ],
        'crawlerDeleteUrl' => [
            'application/json',
        ],
        'crawlerExternalDocumentDelete' => [
            'application/json',
        ],
        'crawlerExternalDocumentFailed' => [
            'application/json',
        ],
        'crawlerExternalDocumentUpload' => [
            'application/json',
        ],
        'crawlerExternalImageUpload' => [
            'application/json',
        ],
        'crawlerRenameFolder' => [
            'application/json',
        ],
        'crawlerUpdateDeltaToken' => [
            'application/json',
        ],
        'delete' => [
            'application/json',
        ],
        'deleteDocuments' => [
            'application/json',
        ],
        'encryptedCommunications' => [
            'application/json',
        ],
        'externalCrawler' => [
            'application/json',
        ],
        'externalCrawlerFinished' => [
            'application/json',
        ],
        'externalCrawlerStart' => [
            'application/json',
        ],
        'getCrawler' => [
            'application/json',
        ],
        'getFailedDocuments' => [
            'application/json',
        ],
        'getSourceList' => [
            'application/json',
        ],
        'markFileAsSeen' => [
            'application/json',
        ],
        'oidcCode' => [
            'application/json',
        ],
        'processAllFiles' => [
            'application/json',
        ],
        'processorSchema' => [
            'application/json',
        ],
        'receiveExternalLogEntry' => [
            'application/json',
        ],
        'resetSourceDelta' => [
            'application/json',
        ],
        'sdcSchema' => [
            'application/json',
        ],
        'startCrawler' => [
            'application/json',
        ],
        'testCrawler' => [
            'application/json',
        ],
        'updateCrawler' => [
            'application/json',
        ],
        'version6' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation crawlerDeleteFolder
     *
     * Delete document folder
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerDeleteFolder $cm_external_crawler_delete_folder cm_external_crawler_delete_folder (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerDeleteFolder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage
     */
    public function crawlerDeleteFolder($cm_external_crawler_delete_folder, $api_version = null, string $contentType = self::contentTypes['crawlerDeleteFolder'][0])
    {
        list($response) = $this->crawlerDeleteFolderWithHttpInfo($cm_external_crawler_delete_folder, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation crawlerDeleteFolderWithHttpInfo
     *
     * Delete document folder
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerDeleteFolder $cm_external_crawler_delete_folder (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerDeleteFolder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function crawlerDeleteFolderWithHttpInfo($cm_external_crawler_delete_folder, $api_version = null, string $contentType = self::contentTypes['crawlerDeleteFolder'][0])
    {
        $request = $this->crawlerDeleteFolderRequest($cm_external_crawler_delete_folder, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JsonMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation crawlerDeleteFolderAsync
     *
     * Delete document folder
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerDeleteFolder $cm_external_crawler_delete_folder (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerDeleteFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function crawlerDeleteFolderAsync($cm_external_crawler_delete_folder, $api_version = null, string $contentType = self::contentTypes['crawlerDeleteFolder'][0])
    {
        return $this->crawlerDeleteFolderAsyncWithHttpInfo($cm_external_crawler_delete_folder, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation crawlerDeleteFolderAsyncWithHttpInfo
     *
     * Delete document folder
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerDeleteFolder $cm_external_crawler_delete_folder (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerDeleteFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function crawlerDeleteFolderAsyncWithHttpInfo($cm_external_crawler_delete_folder, $api_version = null, string $contentType = self::contentTypes['crawlerDeleteFolder'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonMessage';
        $request = $this->crawlerDeleteFolderRequest($cm_external_crawler_delete_folder, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'crawlerDeleteFolder'
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerDeleteFolder $cm_external_crawler_delete_folder (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerDeleteFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function crawlerDeleteFolderRequest($cm_external_crawler_delete_folder, $api_version = null, string $contentType = self::contentTypes['crawlerDeleteFolder'][0])
    {

        // verify the required parameter 'cm_external_crawler_delete_folder' is set
        if ($cm_external_crawler_delete_folder === null || (is_array($cm_external_crawler_delete_folder) && count($cm_external_crawler_delete_folder) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_external_crawler_delete_folder when calling crawlerDeleteFolder'
            );
        }



        $resourcePath = '/api/crawler/external/crawler/delete-folder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_external_crawler_delete_folder)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_external_crawler_delete_folder));
            } else {
                $httpBody = $cm_external_crawler_delete_folder;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation crawlerDeleteUrl
     *
     * Delete document
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerDeleteUrl $cm_external_crawler_delete_url cm_external_crawler_delete_url (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerDeleteUrl'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage
     */
    public function crawlerDeleteUrl($cm_external_crawler_delete_url, $api_version = null, string $contentType = self::contentTypes['crawlerDeleteUrl'][0])
    {
        list($response) = $this->crawlerDeleteUrlWithHttpInfo($cm_external_crawler_delete_url, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation crawlerDeleteUrlWithHttpInfo
     *
     * Delete document
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerDeleteUrl $cm_external_crawler_delete_url (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerDeleteUrl'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function crawlerDeleteUrlWithHttpInfo($cm_external_crawler_delete_url, $api_version = null, string $contentType = self::contentTypes['crawlerDeleteUrl'][0])
    {
        $request = $this->crawlerDeleteUrlRequest($cm_external_crawler_delete_url, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JsonMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation crawlerDeleteUrlAsync
     *
     * Delete document
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerDeleteUrl $cm_external_crawler_delete_url (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerDeleteUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function crawlerDeleteUrlAsync($cm_external_crawler_delete_url, $api_version = null, string $contentType = self::contentTypes['crawlerDeleteUrl'][0])
    {
        return $this->crawlerDeleteUrlAsyncWithHttpInfo($cm_external_crawler_delete_url, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation crawlerDeleteUrlAsyncWithHttpInfo
     *
     * Delete document
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerDeleteUrl $cm_external_crawler_delete_url (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerDeleteUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function crawlerDeleteUrlAsyncWithHttpInfo($cm_external_crawler_delete_url, $api_version = null, string $contentType = self::contentTypes['crawlerDeleteUrl'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonMessage';
        $request = $this->crawlerDeleteUrlRequest($cm_external_crawler_delete_url, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'crawlerDeleteUrl'
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerDeleteUrl $cm_external_crawler_delete_url (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerDeleteUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function crawlerDeleteUrlRequest($cm_external_crawler_delete_url, $api_version = null, string $contentType = self::contentTypes['crawlerDeleteUrl'][0])
    {

        // verify the required parameter 'cm_external_crawler_delete_url' is set
        if ($cm_external_crawler_delete_url === null || (is_array($cm_external_crawler_delete_url) && count($cm_external_crawler_delete_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_external_crawler_delete_url when calling crawlerDeleteUrl'
            );
        }



        $resourcePath = '/api/crawler/external/crawler/delete-url';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_external_crawler_delete_url)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_external_crawler_delete_url));
            } else {
                $httpBody = $cm_external_crawler_delete_url;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation crawlerExternalDocumentDelete
     *
     * Remove an External Document
     *
     * @param  \OpenAPI\Client\Model\CMDeleteDocument $cm_delete_document cm_delete_document (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerExternalDocumentDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage
     */
    public function crawlerExternalDocumentDelete($cm_delete_document, $api_version = null, string $contentType = self::contentTypes['crawlerExternalDocumentDelete'][0])
    {
        list($response) = $this->crawlerExternalDocumentDeleteWithHttpInfo($cm_delete_document, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation crawlerExternalDocumentDeleteWithHttpInfo
     *
     * Remove an External Document
     *
     * @param  \OpenAPI\Client\Model\CMDeleteDocument $cm_delete_document (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerExternalDocumentDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function crawlerExternalDocumentDeleteWithHttpInfo($cm_delete_document, $api_version = null, string $contentType = self::contentTypes['crawlerExternalDocumentDelete'][0])
    {
        $request = $this->crawlerExternalDocumentDeleteRequest($cm_delete_document, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JsonMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation crawlerExternalDocumentDeleteAsync
     *
     * Remove an External Document
     *
     * @param  \OpenAPI\Client\Model\CMDeleteDocument $cm_delete_document (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerExternalDocumentDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function crawlerExternalDocumentDeleteAsync($cm_delete_document, $api_version = null, string $contentType = self::contentTypes['crawlerExternalDocumentDelete'][0])
    {
        return $this->crawlerExternalDocumentDeleteAsyncWithHttpInfo($cm_delete_document, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation crawlerExternalDocumentDeleteAsyncWithHttpInfo
     *
     * Remove an External Document
     *
     * @param  \OpenAPI\Client\Model\CMDeleteDocument $cm_delete_document (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerExternalDocumentDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function crawlerExternalDocumentDeleteAsyncWithHttpInfo($cm_delete_document, $api_version = null, string $contentType = self::contentTypes['crawlerExternalDocumentDelete'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonMessage';
        $request = $this->crawlerExternalDocumentDeleteRequest($cm_delete_document, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'crawlerExternalDocumentDelete'
     *
     * @param  \OpenAPI\Client\Model\CMDeleteDocument $cm_delete_document (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerExternalDocumentDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function crawlerExternalDocumentDeleteRequest($cm_delete_document, $api_version = null, string $contentType = self::contentTypes['crawlerExternalDocumentDelete'][0])
    {

        // verify the required parameter 'cm_delete_document' is set
        if ($cm_delete_document === null || (is_array($cm_delete_document) && count($cm_delete_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_delete_document when calling crawlerExternalDocumentDelete'
            );
        }



        $resourcePath = '/api/crawler/external/document/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_delete_document)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_delete_document));
            } else {
                $httpBody = $cm_delete_document;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation crawlerExternalDocumentFailed
     *
     * Upload External Document
     *
     * @param  \OpenAPI\Client\Model\CMFailedSourceDocument $cm_failed_source_document cm_failed_source_document (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerExternalDocumentFailed'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage
     */
    public function crawlerExternalDocumentFailed($cm_failed_source_document, $api_version = null, string $contentType = self::contentTypes['crawlerExternalDocumentFailed'][0])
    {
        list($response) = $this->crawlerExternalDocumentFailedWithHttpInfo($cm_failed_source_document, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation crawlerExternalDocumentFailedWithHttpInfo
     *
     * Upload External Document
     *
     * @param  \OpenAPI\Client\Model\CMFailedSourceDocument $cm_failed_source_document (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerExternalDocumentFailed'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function crawlerExternalDocumentFailedWithHttpInfo($cm_failed_source_document, $api_version = null, string $contentType = self::contentTypes['crawlerExternalDocumentFailed'][0])
    {
        $request = $this->crawlerExternalDocumentFailedRequest($cm_failed_source_document, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JsonMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation crawlerExternalDocumentFailedAsync
     *
     * Upload External Document
     *
     * @param  \OpenAPI\Client\Model\CMFailedSourceDocument $cm_failed_source_document (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerExternalDocumentFailed'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function crawlerExternalDocumentFailedAsync($cm_failed_source_document, $api_version = null, string $contentType = self::contentTypes['crawlerExternalDocumentFailed'][0])
    {
        return $this->crawlerExternalDocumentFailedAsyncWithHttpInfo($cm_failed_source_document, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation crawlerExternalDocumentFailedAsyncWithHttpInfo
     *
     * Upload External Document
     *
     * @param  \OpenAPI\Client\Model\CMFailedSourceDocument $cm_failed_source_document (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerExternalDocumentFailed'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function crawlerExternalDocumentFailedAsyncWithHttpInfo($cm_failed_source_document, $api_version = null, string $contentType = self::contentTypes['crawlerExternalDocumentFailed'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonMessage';
        $request = $this->crawlerExternalDocumentFailedRequest($cm_failed_source_document, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'crawlerExternalDocumentFailed'
     *
     * @param  \OpenAPI\Client\Model\CMFailedSourceDocument $cm_failed_source_document (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerExternalDocumentFailed'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function crawlerExternalDocumentFailedRequest($cm_failed_source_document, $api_version = null, string $contentType = self::contentTypes['crawlerExternalDocumentFailed'][0])
    {

        // verify the required parameter 'cm_failed_source_document' is set
        if ($cm_failed_source_document === null || (is_array($cm_failed_source_document) && count($cm_failed_source_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_failed_source_document when calling crawlerExternalDocumentFailed'
            );
        }



        $resourcePath = '/api/crawler/external/document/recordfailure';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_failed_source_document)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_failed_source_document));
            } else {
                $httpBody = $cm_failed_source_document;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation crawlerExternalDocumentUpload
     *
     * Upload External Document
     *
     * @param  \OpenAPI\Client\Model\CMUploadDocument $cm_upload_document cm_upload_document (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerExternalDocumentUpload'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage
     */
    public function crawlerExternalDocumentUpload($cm_upload_document, $api_version = null, string $contentType = self::contentTypes['crawlerExternalDocumentUpload'][0])
    {
        list($response) = $this->crawlerExternalDocumentUploadWithHttpInfo($cm_upload_document, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation crawlerExternalDocumentUploadWithHttpInfo
     *
     * Upload External Document
     *
     * @param  \OpenAPI\Client\Model\CMUploadDocument $cm_upload_document (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerExternalDocumentUpload'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function crawlerExternalDocumentUploadWithHttpInfo($cm_upload_document, $api_version = null, string $contentType = self::contentTypes['crawlerExternalDocumentUpload'][0])
    {
        $request = $this->crawlerExternalDocumentUploadRequest($cm_upload_document, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JsonMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation crawlerExternalDocumentUploadAsync
     *
     * Upload External Document
     *
     * @param  \OpenAPI\Client\Model\CMUploadDocument $cm_upload_document (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerExternalDocumentUpload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function crawlerExternalDocumentUploadAsync($cm_upload_document, $api_version = null, string $contentType = self::contentTypes['crawlerExternalDocumentUpload'][0])
    {
        return $this->crawlerExternalDocumentUploadAsyncWithHttpInfo($cm_upload_document, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation crawlerExternalDocumentUploadAsyncWithHttpInfo
     *
     * Upload External Document
     *
     * @param  \OpenAPI\Client\Model\CMUploadDocument $cm_upload_document (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerExternalDocumentUpload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function crawlerExternalDocumentUploadAsyncWithHttpInfo($cm_upload_document, $api_version = null, string $contentType = self::contentTypes['crawlerExternalDocumentUpload'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonMessage';
        $request = $this->crawlerExternalDocumentUploadRequest($cm_upload_document, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'crawlerExternalDocumentUpload'
     *
     * @param  \OpenAPI\Client\Model\CMUploadDocument $cm_upload_document (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerExternalDocumentUpload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function crawlerExternalDocumentUploadRequest($cm_upload_document, $api_version = null, string $contentType = self::contentTypes['crawlerExternalDocumentUpload'][0])
    {

        // verify the required parameter 'cm_upload_document' is set
        if ($cm_upload_document === null || (is_array($cm_upload_document) && count($cm_upload_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_upload_document when calling crawlerExternalDocumentUpload'
            );
        }



        $resourcePath = '/api/crawler/external/document/upload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_upload_document)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_upload_document));
            } else {
                $httpBody = $cm_upload_document;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation crawlerExternalImageUpload
     *
     * Upload External Image
     *
     * @param  \OpenAPI\Client\Model\CMUploadImage $cm_upload_image cm_upload_image (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerExternalImageUpload'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage
     */
    public function crawlerExternalImageUpload($cm_upload_image, $api_version = null, string $contentType = self::contentTypes['crawlerExternalImageUpload'][0])
    {
        list($response) = $this->crawlerExternalImageUploadWithHttpInfo($cm_upload_image, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation crawlerExternalImageUploadWithHttpInfo
     *
     * Upload External Image
     *
     * @param  \OpenAPI\Client\Model\CMUploadImage $cm_upload_image (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerExternalImageUpload'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function crawlerExternalImageUploadWithHttpInfo($cm_upload_image, $api_version = null, string $contentType = self::contentTypes['crawlerExternalImageUpload'][0])
    {
        $request = $this->crawlerExternalImageUploadRequest($cm_upload_image, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JsonMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation crawlerExternalImageUploadAsync
     *
     * Upload External Image
     *
     * @param  \OpenAPI\Client\Model\CMUploadImage $cm_upload_image (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerExternalImageUpload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function crawlerExternalImageUploadAsync($cm_upload_image, $api_version = null, string $contentType = self::contentTypes['crawlerExternalImageUpload'][0])
    {
        return $this->crawlerExternalImageUploadAsyncWithHttpInfo($cm_upload_image, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation crawlerExternalImageUploadAsyncWithHttpInfo
     *
     * Upload External Image
     *
     * @param  \OpenAPI\Client\Model\CMUploadImage $cm_upload_image (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerExternalImageUpload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function crawlerExternalImageUploadAsyncWithHttpInfo($cm_upload_image, $api_version = null, string $contentType = self::contentTypes['crawlerExternalImageUpload'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonMessage';
        $request = $this->crawlerExternalImageUploadRequest($cm_upload_image, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'crawlerExternalImageUpload'
     *
     * @param  \OpenAPI\Client\Model\CMUploadImage $cm_upload_image (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerExternalImageUpload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function crawlerExternalImageUploadRequest($cm_upload_image, $api_version = null, string $contentType = self::contentTypes['crawlerExternalImageUpload'][0])
    {

        // verify the required parameter 'cm_upload_image' is set
        if ($cm_upload_image === null || (is_array($cm_upload_image) && count($cm_upload_image) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_upload_image when calling crawlerExternalImageUpload'
            );
        }



        $resourcePath = '/api/crawler/external/document/upload/image';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_upload_image)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_upload_image));
            } else {
                $httpBody = $cm_upload_image;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation crawlerRenameFolder
     *
     * Rename document folder
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerRenameFolder $cm_external_crawler_rename_folder cm_external_crawler_rename_folder (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerRenameFolder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage
     */
    public function crawlerRenameFolder($cm_external_crawler_rename_folder, $api_version = null, string $contentType = self::contentTypes['crawlerRenameFolder'][0])
    {
        list($response) = $this->crawlerRenameFolderWithHttpInfo($cm_external_crawler_rename_folder, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation crawlerRenameFolderWithHttpInfo
     *
     * Rename document folder
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerRenameFolder $cm_external_crawler_rename_folder (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerRenameFolder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function crawlerRenameFolderWithHttpInfo($cm_external_crawler_rename_folder, $api_version = null, string $contentType = self::contentTypes['crawlerRenameFolder'][0])
    {
        $request = $this->crawlerRenameFolderRequest($cm_external_crawler_rename_folder, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JsonMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation crawlerRenameFolderAsync
     *
     * Rename document folder
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerRenameFolder $cm_external_crawler_rename_folder (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerRenameFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function crawlerRenameFolderAsync($cm_external_crawler_rename_folder, $api_version = null, string $contentType = self::contentTypes['crawlerRenameFolder'][0])
    {
        return $this->crawlerRenameFolderAsyncWithHttpInfo($cm_external_crawler_rename_folder, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation crawlerRenameFolderAsyncWithHttpInfo
     *
     * Rename document folder
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerRenameFolder $cm_external_crawler_rename_folder (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerRenameFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function crawlerRenameFolderAsyncWithHttpInfo($cm_external_crawler_rename_folder, $api_version = null, string $contentType = self::contentTypes['crawlerRenameFolder'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonMessage';
        $request = $this->crawlerRenameFolderRequest($cm_external_crawler_rename_folder, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'crawlerRenameFolder'
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerRenameFolder $cm_external_crawler_rename_folder (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerRenameFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function crawlerRenameFolderRequest($cm_external_crawler_rename_folder, $api_version = null, string $contentType = self::contentTypes['crawlerRenameFolder'][0])
    {

        // verify the required parameter 'cm_external_crawler_rename_folder' is set
        if ($cm_external_crawler_rename_folder === null || (is_array($cm_external_crawler_rename_folder) && count($cm_external_crawler_rename_folder) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_external_crawler_rename_folder when calling crawlerRenameFolder'
            );
        }



        $resourcePath = '/api/crawler/external/crawler/rename-folder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_external_crawler_rename_folder)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_external_crawler_rename_folder));
            } else {
                $httpBody = $cm_external_crawler_rename_folder;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation crawlerUpdateDeltaToken
     *
     * Update delta token
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerSetDeltaToken $cm_external_crawler_set_delta_token cm_external_crawler_set_delta_token (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerUpdateDeltaToken'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage
     */
    public function crawlerUpdateDeltaToken($cm_external_crawler_set_delta_token, $api_version = null, string $contentType = self::contentTypes['crawlerUpdateDeltaToken'][0])
    {
        list($response) = $this->crawlerUpdateDeltaTokenWithHttpInfo($cm_external_crawler_set_delta_token, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation crawlerUpdateDeltaTokenWithHttpInfo
     *
     * Update delta token
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerSetDeltaToken $cm_external_crawler_set_delta_token (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerUpdateDeltaToken'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function crawlerUpdateDeltaTokenWithHttpInfo($cm_external_crawler_set_delta_token, $api_version = null, string $contentType = self::contentTypes['crawlerUpdateDeltaToken'][0])
    {
        $request = $this->crawlerUpdateDeltaTokenRequest($cm_external_crawler_set_delta_token, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JsonMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation crawlerUpdateDeltaTokenAsync
     *
     * Update delta token
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerSetDeltaToken $cm_external_crawler_set_delta_token (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerUpdateDeltaToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function crawlerUpdateDeltaTokenAsync($cm_external_crawler_set_delta_token, $api_version = null, string $contentType = self::contentTypes['crawlerUpdateDeltaToken'][0])
    {
        return $this->crawlerUpdateDeltaTokenAsyncWithHttpInfo($cm_external_crawler_set_delta_token, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation crawlerUpdateDeltaTokenAsyncWithHttpInfo
     *
     * Update delta token
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerSetDeltaToken $cm_external_crawler_set_delta_token (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerUpdateDeltaToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function crawlerUpdateDeltaTokenAsyncWithHttpInfo($cm_external_crawler_set_delta_token, $api_version = null, string $contentType = self::contentTypes['crawlerUpdateDeltaToken'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonMessage';
        $request = $this->crawlerUpdateDeltaTokenRequest($cm_external_crawler_set_delta_token, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'crawlerUpdateDeltaToken'
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerSetDeltaToken $cm_external_crawler_set_delta_token (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['crawlerUpdateDeltaToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function crawlerUpdateDeltaTokenRequest($cm_external_crawler_set_delta_token, $api_version = null, string $contentType = self::contentTypes['crawlerUpdateDeltaToken'][0])
    {

        // verify the required parameter 'cm_external_crawler_set_delta_token' is set
        if ($cm_external_crawler_set_delta_token === null || (is_array($cm_external_crawler_set_delta_token) && count($cm_external_crawler_set_delta_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_external_crawler_set_delta_token when calling crawlerUpdateDeltaToken'
            );
        }



        $resourcePath = '/api/crawler/external/crawler/delta-token';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_external_crawler_set_delta_token)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_external_crawler_set_delta_token));
            } else {
                $httpBody = $cm_external_crawler_set_delta_token;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation delete
     *
     * Delete source
     *
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  int $source_id the crawler&#39;s id (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['delete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage
     */
    public function delete($organisation_id, $kb_id, $session_id, $source_id, $api_version = null, string $contentType = self::contentTypes['delete'][0])
    {
        list($response) = $this->deleteWithHttpInfo($organisation_id, $kb_id, $session_id, $source_id, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation deleteWithHttpInfo
     *
     * Delete source
     *
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  int $source_id the crawler&#39;s id (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['delete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWithHttpInfo($organisation_id, $kb_id, $session_id, $source_id, $api_version = null, string $contentType = self::contentTypes['delete'][0])
    {
        $request = $this->deleteRequest($organisation_id, $kb_id, $session_id, $source_id, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JsonMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAsync
     *
     * Delete source
     *
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  int $source_id the crawler&#39;s id (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['delete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAsync($organisation_id, $kb_id, $session_id, $source_id, $api_version = null, string $contentType = self::contentTypes['delete'][0])
    {
        return $this->deleteAsyncWithHttpInfo($organisation_id, $kb_id, $session_id, $source_id, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAsyncWithHttpInfo
     *
     * Delete source
     *
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  int $source_id the crawler&#39;s id (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['delete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAsyncWithHttpInfo($organisation_id, $kb_id, $session_id, $source_id, $api_version = null, string $contentType = self::contentTypes['delete'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonMessage';
        $request = $this->deleteRequest($organisation_id, $kb_id, $session_id, $source_id, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'delete'
     *
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  int $source_id the crawler&#39;s id (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['delete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRequest($organisation_id, $kb_id, $session_id, $source_id, $api_version = null, string $contentType = self::contentTypes['delete'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling delete'
            );
        }

        // verify the required parameter 'kb_id' is set
        if ($kb_id === null || (is_array($kb_id) && count($kb_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kb_id when calling delete'
            );
        }

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling delete'
            );
        }

        // verify the required parameter 'source_id' is set
        if ($source_id === null || (is_array($source_id) && count($source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_id when calling delete'
            );
        }



        $resourcePath = '/api/crawler/crawler/{organisationId}/{kbId}/{sourceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($kb_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kbId' . '}',
                ObjectSerializer::toPathValue($kb_id),
                $resourcePath
            );
        }
        // path params
        if ($source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sourceId' . '}',
                ObjectSerializer::toPathValue($source_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDocuments
     *
     * Delete source&#39;s documents
     *
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  int $source_id the crawler&#39;s id (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocuments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CMSource|\OpenAPI\Client\Model\JsonMessage
     */
    public function deleteDocuments($organisation_id, $kb_id, $session_id, $source_id, $api_version = null, string $contentType = self::contentTypes['deleteDocuments'][0])
    {
        list($response) = $this->deleteDocumentsWithHttpInfo($organisation_id, $kb_id, $session_id, $source_id, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation deleteDocumentsWithHttpInfo
     *
     * Delete source&#39;s documents
     *
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  int $source_id the crawler&#39;s id (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocuments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CMSource|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDocumentsWithHttpInfo($organisation_id, $kb_id, $session_id, $source_id, $api_version = null, string $contentType = self::contentTypes['deleteDocuments'][0])
    {
        $request = $this->deleteDocumentsRequest($organisation_id, $kb_id, $session_id, $source_id, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CMSource' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMSource' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMSource', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMSource';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMSource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDocumentsAsync
     *
     * Delete source&#39;s documents
     *
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  int $source_id the crawler&#39;s id (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDocumentsAsync($organisation_id, $kb_id, $session_id, $source_id, $api_version = null, string $contentType = self::contentTypes['deleteDocuments'][0])
    {
        return $this->deleteDocumentsAsyncWithHttpInfo($organisation_id, $kb_id, $session_id, $source_id, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDocumentsAsyncWithHttpInfo
     *
     * Delete source&#39;s documents
     *
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  int $source_id the crawler&#39;s id (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDocumentsAsyncWithHttpInfo($organisation_id, $kb_id, $session_id, $source_id, $api_version = null, string $contentType = self::contentTypes['deleteDocuments'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMSource';
        $request = $this->deleteDocumentsRequest($organisation_id, $kb_id, $session_id, $source_id, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDocuments'
     *
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  int $source_id the crawler&#39;s id (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteDocumentsRequest($organisation_id, $kb_id, $session_id, $source_id, $api_version = null, string $contentType = self::contentTypes['deleteDocuments'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling deleteDocuments'
            );
        }

        // verify the required parameter 'kb_id' is set
        if ($kb_id === null || (is_array($kb_id) && count($kb_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kb_id when calling deleteDocuments'
            );
        }

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling deleteDocuments'
            );
        }

        // verify the required parameter 'source_id' is set
        if ($source_id === null || (is_array($source_id) && count($source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_id when calling deleteDocuments'
            );
        }



        $resourcePath = '/api/crawler/crawler/document/{organisationId}/{kbId}/{sourceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($kb_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kbId' . '}',
                ObjectSerializer::toPathValue($kb_id),
                $resourcePath
            );
        }
        // path params
        if ($source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sourceId' . '}',
                ObjectSerializer::toPathValue($source_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation encryptedCommunications
     *
     * Secure Communication
     *
     * @param  int $seed a random integer used for the communications (required)
     * @param  string $body body (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['encryptedCommunications'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage
     */
    public function encryptedCommunications($seed, $body, $api_version = null, string $contentType = self::contentTypes['encryptedCommunications'][0])
    {
        list($response) = $this->encryptedCommunicationsWithHttpInfo($seed, $body, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation encryptedCommunicationsWithHttpInfo
     *
     * Secure Communication
     *
     * @param  int $seed a random integer used for the communications (required)
     * @param  string $body (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['encryptedCommunications'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function encryptedCommunicationsWithHttpInfo($seed, $body, $api_version = null, string $contentType = self::contentTypes['encryptedCommunications'][0])
    {
        $request = $this->encryptedCommunicationsRequest($seed, $body, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JsonMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation encryptedCommunicationsAsync
     *
     * Secure Communication
     *
     * @param  int $seed a random integer used for the communications (required)
     * @param  string $body (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['encryptedCommunications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function encryptedCommunicationsAsync($seed, $body, $api_version = null, string $contentType = self::contentTypes['encryptedCommunications'][0])
    {
        return $this->encryptedCommunicationsAsyncWithHttpInfo($seed, $body, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation encryptedCommunicationsAsyncWithHttpInfo
     *
     * Secure Communication
     *
     * @param  int $seed a random integer used for the communications (required)
     * @param  string $body (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['encryptedCommunications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function encryptedCommunicationsAsyncWithHttpInfo($seed, $body, $api_version = null, string $contentType = self::contentTypes['encryptedCommunications'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonMessage';
        $request = $this->encryptedCommunicationsRequest($seed, $body, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'encryptedCommunications'
     *
     * @param  int $seed a random integer used for the communications (required)
     * @param  string $body (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['encryptedCommunications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function encryptedCommunicationsRequest($seed, $body, $api_version = null, string $contentType = self::contentTypes['encryptedCommunications'][0])
    {

        // verify the required parameter 'seed' is set
        if ($seed === null || (is_array($seed) && count($seed) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $seed when calling encryptedCommunications'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling encryptedCommunications'
            );
        }



        $resourcePath = '/api/crawler/external/secure/{seed}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($seed !== null) {
            $resourcePath = str_replace(
                '{' . 'seed' . '}',
                ObjectSerializer::toPathValue($seed),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation externalCrawler
     *
     * External Crawler
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawler $cm_external_crawler cm_external_crawler (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['externalCrawler'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\CMSource
     */
    public function externalCrawler($cm_external_crawler, $api_version = null, string $contentType = self::contentTypes['externalCrawler'][0])
    {
        list($response) = $this->externalCrawlerWithHttpInfo($cm_external_crawler, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation externalCrawlerWithHttpInfo
     *
     * External Crawler
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawler $cm_external_crawler (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['externalCrawler'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\CMSource, HTTP status code, HTTP response headers (array of strings)
     */
    public function externalCrawlerWithHttpInfo($cm_external_crawler, $api_version = null, string $contentType = self::contentTypes['externalCrawler'][0])
    {
        $request = $this->externalCrawlerRequest($cm_external_crawler, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\CMSource' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMSource' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMSource', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMSource';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMSource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation externalCrawlerAsync
     *
     * External Crawler
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawler $cm_external_crawler (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['externalCrawler'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function externalCrawlerAsync($cm_external_crawler, $api_version = null, string $contentType = self::contentTypes['externalCrawler'][0])
    {
        return $this->externalCrawlerAsyncWithHttpInfo($cm_external_crawler, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation externalCrawlerAsyncWithHttpInfo
     *
     * External Crawler
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawler $cm_external_crawler (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['externalCrawler'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function externalCrawlerAsyncWithHttpInfo($cm_external_crawler, $api_version = null, string $contentType = self::contentTypes['externalCrawler'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMSource';
        $request = $this->externalCrawlerRequest($cm_external_crawler, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'externalCrawler'
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawler $cm_external_crawler (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['externalCrawler'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function externalCrawlerRequest($cm_external_crawler, $api_version = null, string $contentType = self::contentTypes['externalCrawler'][0])
    {

        // verify the required parameter 'cm_external_crawler' is set
        if ($cm_external_crawler === null || (is_array($cm_external_crawler) && count($cm_external_crawler) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_external_crawler when calling externalCrawler'
            );
        }



        $resourcePath = '/api/crawler/external/crawler';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_external_crawler)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_external_crawler));
            } else {
                $httpBody = $cm_external_crawler;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation externalCrawlerFinished
     *
     * Stop External Crawler
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerStop $cm_external_crawler_stop cm_external_crawler_stop (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['externalCrawlerFinished'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage
     */
    public function externalCrawlerFinished($cm_external_crawler_stop, $api_version = null, string $contentType = self::contentTypes['externalCrawlerFinished'][0])
    {
        list($response) = $this->externalCrawlerFinishedWithHttpInfo($cm_external_crawler_stop, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation externalCrawlerFinishedWithHttpInfo
     *
     * Stop External Crawler
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerStop $cm_external_crawler_stop (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['externalCrawlerFinished'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function externalCrawlerFinishedWithHttpInfo($cm_external_crawler_stop, $api_version = null, string $contentType = self::contentTypes['externalCrawlerFinished'][0])
    {
        $request = $this->externalCrawlerFinishedRequest($cm_external_crawler_stop, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JsonMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation externalCrawlerFinishedAsync
     *
     * Stop External Crawler
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerStop $cm_external_crawler_stop (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['externalCrawlerFinished'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function externalCrawlerFinishedAsync($cm_external_crawler_stop, $api_version = null, string $contentType = self::contentTypes['externalCrawlerFinished'][0])
    {
        return $this->externalCrawlerFinishedAsyncWithHttpInfo($cm_external_crawler_stop, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation externalCrawlerFinishedAsyncWithHttpInfo
     *
     * Stop External Crawler
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerStop $cm_external_crawler_stop (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['externalCrawlerFinished'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function externalCrawlerFinishedAsyncWithHttpInfo($cm_external_crawler_stop, $api_version = null, string $contentType = self::contentTypes['externalCrawlerFinished'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonMessage';
        $request = $this->externalCrawlerFinishedRequest($cm_external_crawler_stop, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'externalCrawlerFinished'
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerStop $cm_external_crawler_stop (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['externalCrawlerFinished'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function externalCrawlerFinishedRequest($cm_external_crawler_stop, $api_version = null, string $contentType = self::contentTypes['externalCrawlerFinished'][0])
    {

        // verify the required parameter 'cm_external_crawler_stop' is set
        if ($cm_external_crawler_stop === null || (is_array($cm_external_crawler_stop) && count($cm_external_crawler_stop) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_external_crawler_stop when calling externalCrawlerFinished'
            );
        }



        $resourcePath = '/api/crawler/external/crawler/finish';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_external_crawler_stop)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_external_crawler_stop));
            } else {
                $httpBody = $cm_external_crawler_stop;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation externalCrawlerStart
     *
     * Start External Crawler
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerStart $cm_external_crawler_start cm_external_crawler_start (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['externalCrawlerStart'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage
     */
    public function externalCrawlerStart($cm_external_crawler_start, $api_version = null, string $contentType = self::contentTypes['externalCrawlerStart'][0])
    {
        list($response) = $this->externalCrawlerStartWithHttpInfo($cm_external_crawler_start, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation externalCrawlerStartWithHttpInfo
     *
     * Start External Crawler
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerStart $cm_external_crawler_start (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['externalCrawlerStart'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function externalCrawlerStartWithHttpInfo($cm_external_crawler_start, $api_version = null, string $contentType = self::contentTypes['externalCrawlerStart'][0])
    {
        $request = $this->externalCrawlerStartRequest($cm_external_crawler_start, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JsonMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation externalCrawlerStartAsync
     *
     * Start External Crawler
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerStart $cm_external_crawler_start (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['externalCrawlerStart'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function externalCrawlerStartAsync($cm_external_crawler_start, $api_version = null, string $contentType = self::contentTypes['externalCrawlerStart'][0])
    {
        return $this->externalCrawlerStartAsyncWithHttpInfo($cm_external_crawler_start, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation externalCrawlerStartAsyncWithHttpInfo
     *
     * Start External Crawler
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerStart $cm_external_crawler_start (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['externalCrawlerStart'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function externalCrawlerStartAsyncWithHttpInfo($cm_external_crawler_start, $api_version = null, string $contentType = self::contentTypes['externalCrawlerStart'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonMessage';
        $request = $this->externalCrawlerStartRequest($cm_external_crawler_start, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'externalCrawlerStart'
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerStart $cm_external_crawler_start (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['externalCrawlerStart'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function externalCrawlerStartRequest($cm_external_crawler_start, $api_version = null, string $contentType = self::contentTypes['externalCrawlerStart'][0])
    {

        // verify the required parameter 'cm_external_crawler_start' is set
        if ($cm_external_crawler_start === null || (is_array($cm_external_crawler_start) && count($cm_external_crawler_start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_external_crawler_start when calling externalCrawlerStart'
            );
        }



        $resourcePath = '/api/crawler/external/crawler/start';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_external_crawler_start)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_external_crawler_start));
            } else {
                $httpBody = $cm_external_crawler_start;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCrawler
     *
     * Get source
     *
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  int $source_id the crawler&#39;s id (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCrawler'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\CMSource
     */
    public function getCrawler($organisation_id, $kb_id, $source_id, $session_id, $api_version = null, string $contentType = self::contentTypes['getCrawler'][0])
    {
        list($response) = $this->getCrawlerWithHttpInfo($organisation_id, $kb_id, $source_id, $session_id, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation getCrawlerWithHttpInfo
     *
     * Get source
     *
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  int $source_id the crawler&#39;s id (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCrawler'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\CMSource, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCrawlerWithHttpInfo($organisation_id, $kb_id, $source_id, $session_id, $api_version = null, string $contentType = self::contentTypes['getCrawler'][0])
    {
        $request = $this->getCrawlerRequest($organisation_id, $kb_id, $source_id, $session_id, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\CMSource' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMSource' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMSource', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMSource';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMSource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCrawlerAsync
     *
     * Get source
     *
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  int $source_id the crawler&#39;s id (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCrawler'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCrawlerAsync($organisation_id, $kb_id, $source_id, $session_id, $api_version = null, string $contentType = self::contentTypes['getCrawler'][0])
    {
        return $this->getCrawlerAsyncWithHttpInfo($organisation_id, $kb_id, $source_id, $session_id, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCrawlerAsyncWithHttpInfo
     *
     * Get source
     *
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  int $source_id the crawler&#39;s id (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCrawler'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCrawlerAsyncWithHttpInfo($organisation_id, $kb_id, $source_id, $session_id, $api_version = null, string $contentType = self::contentTypes['getCrawler'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMSource';
        $request = $this->getCrawlerRequest($organisation_id, $kb_id, $source_id, $session_id, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCrawler'
     *
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  int $source_id the crawler&#39;s id (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCrawler'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCrawlerRequest($organisation_id, $kb_id, $source_id, $session_id, $api_version = null, string $contentType = self::contentTypes['getCrawler'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling getCrawler'
            );
        }

        // verify the required parameter 'kb_id' is set
        if ($kb_id === null || (is_array($kb_id) && count($kb_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kb_id when calling getCrawler'
            );
        }

        // verify the required parameter 'source_id' is set
        if ($source_id === null || (is_array($source_id) && count($source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_id when calling getCrawler'
            );
        }

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling getCrawler'
            );
        }



        $resourcePath = '/api/crawler/crawler/{organisationId}/{kbId}/{sourceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($kb_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kbId' . '}',
                ObjectSerializer::toPathValue($kb_id),
                $resourcePath
            );
        }
        // path params
        if ($source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sourceId' . '}',
                ObjectSerializer::toPathValue($source_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFailedDocuments
     *
     * Get source List
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  string $source_id the source  id (a number) (required)
     * @param  int $page the page number for the list (required)
     * @param  int $page_size the page size for the list (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFailedDocuments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\CMSource[]
     */
    public function getFailedDocuments($session_id, $organisation_id, $kb_id, $source_id, $page, $page_size, $api_version = null, string $contentType = self::contentTypes['getFailedDocuments'][0])
    {
        list($response) = $this->getFailedDocumentsWithHttpInfo($session_id, $organisation_id, $kb_id, $source_id, $page, $page_size, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation getFailedDocumentsWithHttpInfo
     *
     * Get source List
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  string $source_id the source  id (a number) (required)
     * @param  int $page the page number for the list (required)
     * @param  int $page_size the page size for the list (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFailedDocuments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\CMSource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getFailedDocumentsWithHttpInfo($session_id, $organisation_id, $kb_id, $source_id, $page, $page_size, $api_version = null, string $contentType = self::contentTypes['getFailedDocuments'][0])
    {
        $request = $this->getFailedDocumentsRequest($session_id, $organisation_id, $kb_id, $source_id, $page, $page_size, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\CMSource[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMSource[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMSource[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMSource[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMSource[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFailedDocumentsAsync
     *
     * Get source List
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  string $source_id the source  id (a number) (required)
     * @param  int $page the page number for the list (required)
     * @param  int $page_size the page size for the list (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFailedDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFailedDocumentsAsync($session_id, $organisation_id, $kb_id, $source_id, $page, $page_size, $api_version = null, string $contentType = self::contentTypes['getFailedDocuments'][0])
    {
        return $this->getFailedDocumentsAsyncWithHttpInfo($session_id, $organisation_id, $kb_id, $source_id, $page, $page_size, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFailedDocumentsAsyncWithHttpInfo
     *
     * Get source List
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  string $source_id the source  id (a number) (required)
     * @param  int $page the page number for the list (required)
     * @param  int $page_size the page size for the list (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFailedDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFailedDocumentsAsyncWithHttpInfo($session_id, $organisation_id, $kb_id, $source_id, $page, $page_size, $api_version = null, string $contentType = self::contentTypes['getFailedDocuments'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMSource[]';
        $request = $this->getFailedDocumentsRequest($session_id, $organisation_id, $kb_id, $source_id, $page, $page_size, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFailedDocuments'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  string $source_id the source  id (a number) (required)
     * @param  int $page the page number for the list (required)
     * @param  int $page_size the page size for the list (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFailedDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFailedDocumentsRequest($session_id, $organisation_id, $kb_id, $source_id, $page, $page_size, $api_version = null, string $contentType = self::contentTypes['getFailedDocuments'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling getFailedDocuments'
            );
        }

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling getFailedDocuments'
            );
        }

        // verify the required parameter 'kb_id' is set
        if ($kb_id === null || (is_array($kb_id) && count($kb_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kb_id when calling getFailedDocuments'
            );
        }

        // verify the required parameter 'source_id' is set
        if ($source_id === null || (is_array($source_id) && count($source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_id when calling getFailedDocuments'
            );
        }

        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling getFailedDocuments'
            );
        }

        // verify the required parameter 'page_size' is set
        if ($page_size === null || (is_array($page_size) && count($page_size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_size when calling getFailedDocuments'
            );
        }



        $resourcePath = '/api/crawler/faileddocs/{organisationId}/{kbId}/{sourceId}/{page}/{pageSize}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($kb_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kbId' . '}',
                ObjectSerializer::toPathValue($kb_id),
                $resourcePath
            );
        }
        // path params
        if ($source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sourceId' . '}',
                ObjectSerializer::toPathValue($source_id),
                $resourcePath
            );
        }
        // path params
        if ($page !== null) {
            $resourcePath = str_replace(
                '{' . 'page' . '}',
                ObjectSerializer::toPathValue($page),
                $resourcePath
            );
        }
        // path params
        if ($page_size !== null) {
            $resourcePath = str_replace(
                '{' . 'pageSize' . '}',
                ObjectSerializer::toPathValue($page_size),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSourceList
     *
     * Get source List
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSourceList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\CMSource[]
     */
    public function getSourceList($session_id, $organisation_id, $kb_id, $api_version = null, string $contentType = self::contentTypes['getSourceList'][0])
    {
        list($response) = $this->getSourceListWithHttpInfo($session_id, $organisation_id, $kb_id, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation getSourceListWithHttpInfo
     *
     * Get source List
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSourceList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\CMSource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSourceListWithHttpInfo($session_id, $organisation_id, $kb_id, $api_version = null, string $contentType = self::contentTypes['getSourceList'][0])
    {
        $request = $this->getSourceListRequest($session_id, $organisation_id, $kb_id, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\CMSource[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMSource[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMSource[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMSource[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMSource[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSourceListAsync
     *
     * Get source List
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSourceList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSourceListAsync($session_id, $organisation_id, $kb_id, $api_version = null, string $contentType = self::contentTypes['getSourceList'][0])
    {
        return $this->getSourceListAsyncWithHttpInfo($session_id, $organisation_id, $kb_id, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSourceListAsyncWithHttpInfo
     *
     * Get source List
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSourceList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSourceListAsyncWithHttpInfo($session_id, $organisation_id, $kb_id, $api_version = null, string $contentType = self::contentTypes['getSourceList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMSource[]';
        $request = $this->getSourceListRequest($session_id, $organisation_id, $kb_id, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSourceList'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSourceList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSourceListRequest($session_id, $organisation_id, $kb_id, $api_version = null, string $contentType = self::contentTypes['getSourceList'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling getSourceList'
            );
        }

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling getSourceList'
            );
        }

        // verify the required parameter 'kb_id' is set
        if ($kb_id === null || (is_array($kb_id) && count($kb_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kb_id when calling getSourceList'
            );
        }



        $resourcePath = '/api/crawler/crawlers/{organisationId}/{kbId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($kb_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kbId' . '}',
                ObjectSerializer::toPathValue($kb_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation markFileAsSeen
     *
     * Mark file as seen
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerMarkFileAsSeen $cm_external_crawler_mark_file_as_seen cm_external_crawler_mark_file_as_seen (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markFileAsSeen'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage
     */
    public function markFileAsSeen($cm_external_crawler_mark_file_as_seen, $api_version = null, string $contentType = self::contentTypes['markFileAsSeen'][0])
    {
        list($response) = $this->markFileAsSeenWithHttpInfo($cm_external_crawler_mark_file_as_seen, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation markFileAsSeenWithHttpInfo
     *
     * Mark file as seen
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerMarkFileAsSeen $cm_external_crawler_mark_file_as_seen (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markFileAsSeen'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function markFileAsSeenWithHttpInfo($cm_external_crawler_mark_file_as_seen, $api_version = null, string $contentType = self::contentTypes['markFileAsSeen'][0])
    {
        $request = $this->markFileAsSeenRequest($cm_external_crawler_mark_file_as_seen, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JsonMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation markFileAsSeenAsync
     *
     * Mark file as seen
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerMarkFileAsSeen $cm_external_crawler_mark_file_as_seen (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markFileAsSeen'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function markFileAsSeenAsync($cm_external_crawler_mark_file_as_seen, $api_version = null, string $contentType = self::contentTypes['markFileAsSeen'][0])
    {
        return $this->markFileAsSeenAsyncWithHttpInfo($cm_external_crawler_mark_file_as_seen, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation markFileAsSeenAsyncWithHttpInfo
     *
     * Mark file as seen
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerMarkFileAsSeen $cm_external_crawler_mark_file_as_seen (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markFileAsSeen'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function markFileAsSeenAsyncWithHttpInfo($cm_external_crawler_mark_file_as_seen, $api_version = null, string $contentType = self::contentTypes['markFileAsSeen'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonMessage';
        $request = $this->markFileAsSeenRequest($cm_external_crawler_mark_file_as_seen, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'markFileAsSeen'
     *
     * @param  \OpenAPI\Client\Model\CMExternalCrawlerMarkFileAsSeen $cm_external_crawler_mark_file_as_seen (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markFileAsSeen'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function markFileAsSeenRequest($cm_external_crawler_mark_file_as_seen, $api_version = null, string $contentType = self::contentTypes['markFileAsSeen'][0])
    {

        // verify the required parameter 'cm_external_crawler_mark_file_as_seen' is set
        if ($cm_external_crawler_mark_file_as_seen === null || (is_array($cm_external_crawler_mark_file_as_seen) && count($cm_external_crawler_mark_file_as_seen) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_external_crawler_mark_file_as_seen when calling markFileAsSeen'
            );
        }



        $resourcePath = '/api/crawler/external/crawler/mark-file-as-seen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_external_crawler_mark_file_as_seen)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_external_crawler_mark_file_as_seen));
            } else {
                $httpBody = $cm_external_crawler_mark_file_as_seen;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oidcCode
     *
     * OIDC code receiver
     *
     * @param  string $oidc_key the Dropbox OIDC key (required)
     * @param  array<string,string> $all_request_params all_request_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcCode'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function oidcCode($oidc_key, $all_request_params, string $contentType = self::contentTypes['oidcCode'][0])
    {
        $this->oidcCodeWithHttpInfo($oidc_key, $all_request_params, $contentType);
    }

    /**
     * Operation oidcCodeWithHttpInfo
     *
     * OIDC code receiver
     *
     * @param  string $oidc_key the Dropbox OIDC key (required)
     * @param  array<string,string> $all_request_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcCode'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function oidcCodeWithHttpInfo($oidc_key, $all_request_params, string $contentType = self::contentTypes['oidcCode'][0])
    {
        $request = $this->oidcCodeRequest($oidc_key, $all_request_params, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation oidcCodeAsync
     *
     * OIDC code receiver
     *
     * @param  string $oidc_key the Dropbox OIDC key (required)
     * @param  array<string,string> $all_request_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oidcCodeAsync($oidc_key, $all_request_params, string $contentType = self::contentTypes['oidcCode'][0])
    {
        return $this->oidcCodeAsyncWithHttpInfo($oidc_key, $all_request_params, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oidcCodeAsyncWithHttpInfo
     *
     * OIDC code receiver
     *
     * @param  string $oidc_key the Dropbox OIDC key (required)
     * @param  array<string,string> $all_request_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oidcCodeAsyncWithHttpInfo($oidc_key, $all_request_params, string $contentType = self::contentTypes['oidcCode'][0])
    {
        $returnType = '';
        $request = $this->oidcCodeRequest($oidc_key, $all_request_params, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oidcCode'
     *
     * @param  string $oidc_key the Dropbox OIDC key (required)
     * @param  array<string,string> $all_request_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oidcCodeRequest($oidc_key, $all_request_params, string $contentType = self::contentTypes['oidcCode'][0])
    {

        // verify the required parameter 'oidc_key' is set
        if ($oidc_key === null || (is_array($oidc_key) && count($oidc_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $oidc_key when calling oidcCode'
            );
        }

        // verify the required parameter 'all_request_params' is set
        if ($all_request_params === null || (is_array($all_request_params) && count($all_request_params) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $all_request_params when calling oidcCode'
            );
        }


        $resourcePath = '/api/crawler/dropbox-oidc-code/{oidcKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $all_request_params,
            'allRequestParams', // param base name
            'object', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($oidc_key !== null) {
            $resourcePath = str_replace(
                '{' . 'oidcKey' . '}',
                ObjectSerializer::toPathValue($oidc_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation processAllFiles
     *
     * Process all files of crawler/source
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMStartCrawler $cm_start_crawler cm_start_crawler (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processAllFiles'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage
     */
    public function processAllFiles($session_id, $cm_start_crawler, $api_version = null, string $contentType = self::contentTypes['processAllFiles'][0])
    {
        list($response) = $this->processAllFilesWithHttpInfo($session_id, $cm_start_crawler, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation processAllFilesWithHttpInfo
     *
     * Process all files of crawler/source
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMStartCrawler $cm_start_crawler (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processAllFiles'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function processAllFilesWithHttpInfo($session_id, $cm_start_crawler, $api_version = null, string $contentType = self::contentTypes['processAllFiles'][0])
    {
        $request = $this->processAllFilesRequest($session_id, $cm_start_crawler, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JsonMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation processAllFilesAsync
     *
     * Process all files of crawler/source
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMStartCrawler $cm_start_crawler (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processAllFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function processAllFilesAsync($session_id, $cm_start_crawler, $api_version = null, string $contentType = self::contentTypes['processAllFiles'][0])
    {
        return $this->processAllFilesAsyncWithHttpInfo($session_id, $cm_start_crawler, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation processAllFilesAsyncWithHttpInfo
     *
     * Process all files of crawler/source
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMStartCrawler $cm_start_crawler (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processAllFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function processAllFilesAsyncWithHttpInfo($session_id, $cm_start_crawler, $api_version = null, string $contentType = self::contentTypes['processAllFiles'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonMessage';
        $request = $this->processAllFilesRequest($session_id, $cm_start_crawler, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'processAllFiles'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMStartCrawler $cm_start_crawler (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processAllFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function processAllFilesRequest($session_id, $cm_start_crawler, $api_version = null, string $contentType = self::contentTypes['processAllFiles'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling processAllFiles'
            );
        }

        // verify the required parameter 'cm_start_crawler' is set
        if ($cm_start_crawler === null || (is_array($cm_start_crawler) && count($cm_start_crawler) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_start_crawler when calling processAllFiles'
            );
        }



        $resourcePath = '/api/crawler/process-all-files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_start_crawler)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_start_crawler));
            } else {
                $httpBody = $cm_start_crawler;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation processorSchema
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processorSchema'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function processorSchema(string $contentType = self::contentTypes['processorSchema'][0])
    {
        list($response) = $this->processorSchemaWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation processorSchemaWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processorSchema'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function processorSchemaWithHttpInfo(string $contentType = self::contentTypes['processorSchema'][0])
    {
        $request = $this->processorSchemaRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation processorSchemaAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processorSchema'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function processorSchemaAsync(string $contentType = self::contentTypes['processorSchema'][0])
    {
        return $this->processorSchemaAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation processorSchemaAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processorSchema'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function processorSchemaAsyncWithHttpInfo(string $contentType = self::contentTypes['processorSchema'][0])
    {
        $returnType = 'object';
        $request = $this->processorSchemaRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'processorSchema'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processorSchema'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function processorSchemaRequest(string $contentType = self::contentTypes['processorSchema'][0])
    {


        $resourcePath = '/api/crawler/processor_schema';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation receiveExternalLogEntry
     *
     * External Crawler log-entry
     *
     * @param  \OpenAPI\Client\Model\CMExternalLogEntry $cm_external_log_entry cm_external_log_entry (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['receiveExternalLogEntry'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CMSource|\OpenAPI\Client\Model\JsonMessage
     */
    public function receiveExternalLogEntry($cm_external_log_entry, $api_version = null, string $contentType = self::contentTypes['receiveExternalLogEntry'][0])
    {
        list($response) = $this->receiveExternalLogEntryWithHttpInfo($cm_external_log_entry, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation receiveExternalLogEntryWithHttpInfo
     *
     * External Crawler log-entry
     *
     * @param  \OpenAPI\Client\Model\CMExternalLogEntry $cm_external_log_entry (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['receiveExternalLogEntry'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CMSource|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function receiveExternalLogEntryWithHttpInfo($cm_external_log_entry, $api_version = null, string $contentType = self::contentTypes['receiveExternalLogEntry'][0])
    {
        $request = $this->receiveExternalLogEntryRequest($cm_external_log_entry, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CMSource' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMSource' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMSource', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMSource';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMSource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation receiveExternalLogEntryAsync
     *
     * External Crawler log-entry
     *
     * @param  \OpenAPI\Client\Model\CMExternalLogEntry $cm_external_log_entry (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['receiveExternalLogEntry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function receiveExternalLogEntryAsync($cm_external_log_entry, $api_version = null, string $contentType = self::contentTypes['receiveExternalLogEntry'][0])
    {
        return $this->receiveExternalLogEntryAsyncWithHttpInfo($cm_external_log_entry, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation receiveExternalLogEntryAsyncWithHttpInfo
     *
     * External Crawler log-entry
     *
     * @param  \OpenAPI\Client\Model\CMExternalLogEntry $cm_external_log_entry (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['receiveExternalLogEntry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function receiveExternalLogEntryAsyncWithHttpInfo($cm_external_log_entry, $api_version = null, string $contentType = self::contentTypes['receiveExternalLogEntry'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMSource';
        $request = $this->receiveExternalLogEntryRequest($cm_external_log_entry, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'receiveExternalLogEntry'
     *
     * @param  \OpenAPI\Client\Model\CMExternalLogEntry $cm_external_log_entry (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['receiveExternalLogEntry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function receiveExternalLogEntryRequest($cm_external_log_entry, $api_version = null, string $contentType = self::contentTypes['receiveExternalLogEntry'][0])
    {

        // verify the required parameter 'cm_external_log_entry' is set
        if ($cm_external_log_entry === null || (is_array($cm_external_log_entry) && count($cm_external_log_entry) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_external_log_entry when calling receiveExternalLogEntry'
            );
        }



        $resourcePath = '/api/crawler/external/crawler/log';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_external_log_entry)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_external_log_entry));
            } else {
                $httpBody = $cm_external_log_entry;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resetSourceDelta
     *
     * Reset Source delta-token
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  int $source_id the crawler&#39;s id (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetSourceDelta'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\CMSource
     */
    public function resetSourceDelta($session_id, $organisation_id, $kb_id, $source_id, $api_version = null, string $contentType = self::contentTypes['resetSourceDelta'][0])
    {
        list($response) = $this->resetSourceDeltaWithHttpInfo($session_id, $organisation_id, $kb_id, $source_id, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation resetSourceDeltaWithHttpInfo
     *
     * Reset Source delta-token
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  int $source_id the crawler&#39;s id (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetSourceDelta'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\CMSource, HTTP status code, HTTP response headers (array of strings)
     */
    public function resetSourceDeltaWithHttpInfo($session_id, $organisation_id, $kb_id, $source_id, $api_version = null, string $contentType = self::contentTypes['resetSourceDelta'][0])
    {
        $request = $this->resetSourceDeltaRequest($session_id, $organisation_id, $kb_id, $source_id, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\CMSource' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMSource' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMSource', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMSource';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMSource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation resetSourceDeltaAsync
     *
     * Reset Source delta-token
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  int $source_id the crawler&#39;s id (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetSourceDelta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetSourceDeltaAsync($session_id, $organisation_id, $kb_id, $source_id, $api_version = null, string $contentType = self::contentTypes['resetSourceDelta'][0])
    {
        return $this->resetSourceDeltaAsyncWithHttpInfo($session_id, $organisation_id, $kb_id, $source_id, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resetSourceDeltaAsyncWithHttpInfo
     *
     * Reset Source delta-token
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  int $source_id the crawler&#39;s id (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetSourceDelta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetSourceDeltaAsyncWithHttpInfo($session_id, $organisation_id, $kb_id, $source_id, $api_version = null, string $contentType = self::contentTypes['resetSourceDelta'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMSource';
        $request = $this->resetSourceDeltaRequest($session_id, $organisation_id, $kb_id, $source_id, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resetSourceDelta'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  int $source_id the crawler&#39;s id (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetSourceDelta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function resetSourceDeltaRequest($session_id, $organisation_id, $kb_id, $source_id, $api_version = null, string $contentType = self::contentTypes['resetSourceDelta'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling resetSourceDelta'
            );
        }

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling resetSourceDelta'
            );
        }

        // verify the required parameter 'kb_id' is set
        if ($kb_id === null || (is_array($kb_id) && count($kb_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kb_id when calling resetSourceDelta'
            );
        }

        // verify the required parameter 'source_id' is set
        if ($source_id === null || (is_array($source_id) && count($source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_id when calling resetSourceDelta'
            );
        }



        $resourcePath = '/api/crawler/crawler/reset-delta/{organisationId}/{kbId}/{sourceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($kb_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kbId' . '}',
                ObjectSerializer::toPathValue($kb_id),
                $resourcePath
            );
        }
        // path params
        if ($source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sourceId' . '}',
                ObjectSerializer::toPathValue($source_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sdcSchema
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sdcSchema'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sdcSchema(string $contentType = self::contentTypes['sdcSchema'][0])
    {
        list($response) = $this->sdcSchemaWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation sdcSchemaWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sdcSchema'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sdcSchemaWithHttpInfo(string $contentType = self::contentTypes['sdcSchema'][0])
    {
        $request = $this->sdcSchemaRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sdcSchemaAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sdcSchema'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sdcSchemaAsync(string $contentType = self::contentTypes['sdcSchema'][0])
    {
        return $this->sdcSchemaAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sdcSchemaAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sdcSchema'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sdcSchemaAsyncWithHttpInfo(string $contentType = self::contentTypes['sdcSchema'][0])
    {
        $returnType = 'object';
        $request = $this->sdcSchemaRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sdcSchema'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sdcSchema'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sdcSchemaRequest(string $contentType = self::contentTypes['sdcSchema'][0])
    {


        $resourcePath = '/api/crawler/sdc_schema';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation startCrawler
     *
     * Start crawler
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMStartCrawler $cm_start_crawler cm_start_crawler (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startCrawler'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage
     */
    public function startCrawler($session_id, $cm_start_crawler, $api_version = null, string $contentType = self::contentTypes['startCrawler'][0])
    {
        list($response) = $this->startCrawlerWithHttpInfo($session_id, $cm_start_crawler, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation startCrawlerWithHttpInfo
     *
     * Start crawler
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMStartCrawler $cm_start_crawler (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startCrawler'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function startCrawlerWithHttpInfo($session_id, $cm_start_crawler, $api_version = null, string $contentType = self::contentTypes['startCrawler'][0])
    {
        $request = $this->startCrawlerRequest($session_id, $cm_start_crawler, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JsonMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation startCrawlerAsync
     *
     * Start crawler
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMStartCrawler $cm_start_crawler (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startCrawler'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startCrawlerAsync($session_id, $cm_start_crawler, $api_version = null, string $contentType = self::contentTypes['startCrawler'][0])
    {
        return $this->startCrawlerAsyncWithHttpInfo($session_id, $cm_start_crawler, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startCrawlerAsyncWithHttpInfo
     *
     * Start crawler
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMStartCrawler $cm_start_crawler (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startCrawler'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startCrawlerAsyncWithHttpInfo($session_id, $cm_start_crawler, $api_version = null, string $contentType = self::contentTypes['startCrawler'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonMessage';
        $request = $this->startCrawlerRequest($session_id, $cm_start_crawler, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'startCrawler'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMStartCrawler $cm_start_crawler (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startCrawler'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function startCrawlerRequest($session_id, $cm_start_crawler, $api_version = null, string $contentType = self::contentTypes['startCrawler'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling startCrawler'
            );
        }

        // verify the required parameter 'cm_start_crawler' is set
        if ($cm_start_crawler === null || (is_array($cm_start_crawler) && count($cm_start_crawler) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_start_crawler when calling startCrawler'
            );
        }



        $resourcePath = '/api/crawler/start';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_start_crawler)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_start_crawler));
            } else {
                $httpBody = $cm_start_crawler;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation testCrawler
     *
     * Test Crawler
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  int $source_id the crawler&#39;s id (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testCrawler'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage
     */
    public function testCrawler($session_id, $organisation_id, $kb_id, $source_id, $api_version = null, string $contentType = self::contentTypes['testCrawler'][0])
    {
        list($response) = $this->testCrawlerWithHttpInfo($session_id, $organisation_id, $kb_id, $source_id, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation testCrawlerWithHttpInfo
     *
     * Test Crawler
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  int $source_id the crawler&#39;s id (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testCrawler'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function testCrawlerWithHttpInfo($session_id, $organisation_id, $kb_id, $source_id, $api_version = null, string $contentType = self::contentTypes['testCrawler'][0])
    {
        $request = $this->testCrawlerRequest($session_id, $organisation_id, $kb_id, $source_id, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JsonMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation testCrawlerAsync
     *
     * Test Crawler
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  int $source_id the crawler&#39;s id (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testCrawler'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testCrawlerAsync($session_id, $organisation_id, $kb_id, $source_id, $api_version = null, string $contentType = self::contentTypes['testCrawler'][0])
    {
        return $this->testCrawlerAsyncWithHttpInfo($session_id, $organisation_id, $kb_id, $source_id, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation testCrawlerAsyncWithHttpInfo
     *
     * Test Crawler
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  int $source_id the crawler&#39;s id (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testCrawler'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testCrawlerAsyncWithHttpInfo($session_id, $organisation_id, $kb_id, $source_id, $api_version = null, string $contentType = self::contentTypes['testCrawler'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonMessage';
        $request = $this->testCrawlerRequest($session_id, $organisation_id, $kb_id, $source_id, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'testCrawler'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $organisation_id the organisation&#39;s id (a guid) (required)
     * @param  string $kb_id the knowledge-base&#39;s id (a guid) (required)
     * @param  int $source_id the crawler&#39;s id (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testCrawler'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function testCrawlerRequest($session_id, $organisation_id, $kb_id, $source_id, $api_version = null, string $contentType = self::contentTypes['testCrawler'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling testCrawler'
            );
        }

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling testCrawler'
            );
        }

        // verify the required parameter 'kb_id' is set
        if ($kb_id === null || (is_array($kb_id) && count($kb_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kb_id when calling testCrawler'
            );
        }

        // verify the required parameter 'source_id' is set
        if ($source_id === null || (is_array($source_id) && count($source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_id when calling testCrawler'
            );
        }



        $resourcePath = '/api/crawler/crawler/test/{organisationId}/{kbId}/{sourceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($kb_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kbId' . '}',
                ObjectSerializer::toPathValue($kb_id),
                $resourcePath
            );
        }
        // path params
        if ($source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sourceId' . '}',
                ObjectSerializer::toPathValue($source_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCrawler
     *
     * Update Source
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMSource $cm_source cm_source (required)
     * @param  string $api_version api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCrawler'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\CMSource
     */
    public function updateCrawler($session_id, $cm_source, $api_version = null, string $contentType = self::contentTypes['updateCrawler'][0])
    {
        list($response) = $this->updateCrawlerWithHttpInfo($session_id, $cm_source, $api_version, $contentType);
        return $response;
    }

    /**
     * Operation updateCrawlerWithHttpInfo
     *
     * Update Source
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMSource $cm_source (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCrawler'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonMessage|\OpenAPI\Client\Model\CMSource, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCrawlerWithHttpInfo($session_id, $cm_source, $api_version = null, string $contentType = self::contentTypes['updateCrawler'][0])
    {
        $request = $this->updateCrawlerRequest($session_id, $cm_source, $api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\CMSource' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMSource' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMSource', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMSource';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMSource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCrawlerAsync
     *
     * Update Source
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMSource $cm_source (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCrawler'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCrawlerAsync($session_id, $cm_source, $api_version = null, string $contentType = self::contentTypes['updateCrawler'][0])
    {
        return $this->updateCrawlerAsyncWithHttpInfo($session_id, $cm_source, $api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCrawlerAsyncWithHttpInfo
     *
     * Update Source
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMSource $cm_source (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCrawler'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCrawlerAsyncWithHttpInfo($session_id, $cm_source, $api_version = null, string $contentType = self::contentTypes['updateCrawler'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMSource';
        $request = $this->updateCrawlerRequest($session_id, $cm_source, $api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCrawler'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMSource $cm_source (required)
     * @param  string $api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCrawler'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCrawlerRequest($session_id, $cm_source, $api_version = null, string $contentType = self::contentTypes['updateCrawler'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling updateCrawler'
            );
        }

        // verify the required parameter 'cm_source' is set
        if ($cm_source === null || (is_array($cm_source) && count($cm_source) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_source when calling updateCrawler'
            );
        }



        $resourcePath = '/api/crawler/crawler';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['API-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_source)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_source));
            } else {
                $httpBody = $cm_source;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation version6
     *
     * Version
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['version6'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CMVersion|\OpenAPI\Client\Model\JsonMessage
     */
    public function version6(string $contentType = self::contentTypes['version6'][0])
    {
        list($response) = $this->version6WithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation version6WithHttpInfo
     *
     * Version
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['version6'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CMVersion|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function version6WithHttpInfo(string $contentType = self::contentTypes['version6'][0])
    {
        $request = $this->version6Request($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CMVersion' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMVersion' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMVersion', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMVersion';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMVersion',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation version6Async
     *
     * Version
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['version6'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function version6Async(string $contentType = self::contentTypes['version6'][0])
    {
        return $this->version6AsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation version6AsyncWithHttpInfo
     *
     * Version
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['version6'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function version6AsyncWithHttpInfo(string $contentType = self::contentTypes['version6'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMVersion';
        $request = $this->version6Request($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'version6'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['version6'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function version6Request(string $contentType = self::contentTypes['version6'][0])
    {


        $resourcePath = '/api/crawler/version';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
