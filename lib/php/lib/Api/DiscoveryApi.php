<?php
/**
 * DiscoveryApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.11.4
 * Contact: info@simsage.co.uk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * DiscoveryApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DiscoveryApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'allGdprProjects' => [
            'application/json',
        ],
        'applyRedactions' => [
            'application/json',
        ],
        'createGdprProject' => [
            'application/json',
        ],
        'deleteProject' => [
            'application/json',
        ],
        'exportRedactedDoc' => [
            'application/json',
        ],
        'getGdprDocument' => [
            'application/json',
        ],
        'getPagedProjectDocuments' => [
            'application/json',
        ],
        'growthPerMonth' => [
            'application/json',
        ],
        'pdfBinary' => [
            'application/json',
        ],
        'setdocumentredactions' => [
            'application/json',
        ],
        'storageBySource' => [
            'application/json',
        ],
        'summaryByDocumentType' => [
            'application/json',
        ],
        'updateDocumentSet' => [
            'application/json',
        ],
        'version5' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation allGdprProjects
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $page the page to render (required)
     * @param  int $page_size the page size to use (required)
     * @param  string $text_filter the text filter passed in or blank if empty (required)
     * @param  string $status_filter the status filter passed in (required)
     * @param  string $sort_column the sort column used for the results (required)
     * @param  int $sort_direction sort direction to use (0/1) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['allGdprProjects'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function allGdprProjects($organisation_id, $kb_id, $page, $page_size, $text_filter, $status_filter, $sort_column, $sort_direction, $session_id, string $contentType = self::contentTypes['allGdprProjects'][0])
    {
        list($response) = $this->allGdprProjectsWithHttpInfo($organisation_id, $kb_id, $page, $page_size, $text_filter, $status_filter, $sort_column, $sort_direction, $session_id, $contentType);
        return $response;
    }

    /**
     * Operation allGdprProjectsWithHttpInfo
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $page the page to render (required)
     * @param  int $page_size the page size to use (required)
     * @param  string $text_filter the text filter passed in or blank if empty (required)
     * @param  string $status_filter the status filter passed in (required)
     * @param  string $sort_column the sort column used for the results (required)
     * @param  int $sort_direction sort direction to use (0/1) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['allGdprProjects'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function allGdprProjectsWithHttpInfo($organisation_id, $kb_id, $page, $page_size, $text_filter, $status_filter, $sort_column, $sort_direction, $session_id, string $contentType = self::contentTypes['allGdprProjects'][0])
    {
        $request = $this->allGdprProjectsRequest($organisation_id, $kb_id, $page, $page_size, $text_filter, $status_filter, $sort_column, $sort_direction, $session_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation allGdprProjectsAsync
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $page the page to render (required)
     * @param  int $page_size the page size to use (required)
     * @param  string $text_filter the text filter passed in or blank if empty (required)
     * @param  string $status_filter the status filter passed in (required)
     * @param  string $sort_column the sort column used for the results (required)
     * @param  int $sort_direction sort direction to use (0/1) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['allGdprProjects'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function allGdprProjectsAsync($organisation_id, $kb_id, $page, $page_size, $text_filter, $status_filter, $sort_column, $sort_direction, $session_id, string $contentType = self::contentTypes['allGdprProjects'][0])
    {
        return $this->allGdprProjectsAsyncWithHttpInfo($organisation_id, $kb_id, $page, $page_size, $text_filter, $status_filter, $sort_column, $sort_direction, $session_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation allGdprProjectsAsyncWithHttpInfo
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $page the page to render (required)
     * @param  int $page_size the page size to use (required)
     * @param  string $text_filter the text filter passed in or blank if empty (required)
     * @param  string $status_filter the status filter passed in (required)
     * @param  string $sort_column the sort column used for the results (required)
     * @param  int $sort_direction sort direction to use (0/1) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['allGdprProjects'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function allGdprProjectsAsyncWithHttpInfo($organisation_id, $kb_id, $page, $page_size, $text_filter, $status_filter, $sort_column, $sort_direction, $session_id, string $contentType = self::contentTypes['allGdprProjects'][0])
    {
        $returnType = 'object';
        $request = $this->allGdprProjectsRequest($organisation_id, $kb_id, $page, $page_size, $text_filter, $status_filter, $sort_column, $sort_direction, $session_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'allGdprProjects'
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  int $page the page to render (required)
     * @param  int $page_size the page size to use (required)
     * @param  string $text_filter the text filter passed in or blank if empty (required)
     * @param  string $status_filter the status filter passed in (required)
     * @param  string $sort_column the sort column used for the results (required)
     * @param  int $sort_direction sort direction to use (0/1) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['allGdprProjects'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function allGdprProjectsRequest($organisation_id, $kb_id, $page, $page_size, $text_filter, $status_filter, $sort_column, $sort_direction, $session_id, string $contentType = self::contentTypes['allGdprProjects'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling allGdprProjects'
            );
        }

        // verify the required parameter 'kb_id' is set
        if ($kb_id === null || (is_array($kb_id) && count($kb_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kb_id when calling allGdprProjects'
            );
        }

        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling allGdprProjects'
            );
        }

        // verify the required parameter 'page_size' is set
        if ($page_size === null || (is_array($page_size) && count($page_size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_size when calling allGdprProjects'
            );
        }

        // verify the required parameter 'text_filter' is set
        if ($text_filter === null || (is_array($text_filter) && count($text_filter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $text_filter when calling allGdprProjects'
            );
        }

        // verify the required parameter 'status_filter' is set
        if ($status_filter === null || (is_array($status_filter) && count($status_filter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status_filter when calling allGdprProjects'
            );
        }

        // verify the required parameter 'sort_column' is set
        if ($sort_column === null || (is_array($sort_column) && count($sort_column) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sort_column when calling allGdprProjects'
            );
        }

        // verify the required parameter 'sort_direction' is set
        if ($sort_direction === null || (is_array($sort_direction) && count($sort_direction) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sort_direction when calling allGdprProjects'
            );
        }

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling allGdprProjects'
            );
        }


        $resourcePath = '/api/discovery/gdprproject/{organisationId}/{kbId}/{page}/{pageSize}/{textFilter}/{statusFilter}/{sortColumn}/{sortDirection}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($kb_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kbId' . '}',
                ObjectSerializer::toPathValue($kb_id),
                $resourcePath
            );
        }
        // path params
        if ($page !== null) {
            $resourcePath = str_replace(
                '{' . 'page' . '}',
                ObjectSerializer::toPathValue($page),
                $resourcePath
            );
        }
        // path params
        if ($page_size !== null) {
            $resourcePath = str_replace(
                '{' . 'pageSize' . '}',
                ObjectSerializer::toPathValue($page_size),
                $resourcePath
            );
        }
        // path params
        if ($text_filter !== null) {
            $resourcePath = str_replace(
                '{' . 'textFilter' . '}',
                ObjectSerializer::toPathValue($text_filter),
                $resourcePath
            );
        }
        // path params
        if ($status_filter !== null) {
            $resourcePath = str_replace(
                '{' . 'statusFilter' . '}',
                ObjectSerializer::toPathValue($status_filter),
                $resourcePath
            );
        }
        // path params
        if ($sort_column !== null) {
            $resourcePath = str_replace(
                '{' . 'sortColumn' . '}',
                ObjectSerializer::toPathValue($sort_column),
                $resourcePath
            );
        }
        // path params
        if ($sort_direction !== null) {
            $resourcePath = str_replace(
                '{' . 'sortDirection' . '}',
                ObjectSerializer::toPathValue($sort_direction),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation applyRedactions
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMRedactionData $cm_redaction_data cm_redaction_data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyRedactions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function applyRedactions($session_id, $cm_redaction_data, string $contentType = self::contentTypes['applyRedactions'][0])
    {
        list($response) = $this->applyRedactionsWithHttpInfo($session_id, $cm_redaction_data, $contentType);
        return $response;
    }

    /**
     * Operation applyRedactionsWithHttpInfo
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMRedactionData $cm_redaction_data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyRedactions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function applyRedactionsWithHttpInfo($session_id, $cm_redaction_data, string $contentType = self::contentTypes['applyRedactions'][0])
    {
        $request = $this->applyRedactionsRequest($session_id, $cm_redaction_data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation applyRedactionsAsync
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMRedactionData $cm_redaction_data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyRedactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyRedactionsAsync($session_id, $cm_redaction_data, string $contentType = self::contentTypes['applyRedactions'][0])
    {
        return $this->applyRedactionsAsyncWithHttpInfo($session_id, $cm_redaction_data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation applyRedactionsAsyncWithHttpInfo
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMRedactionData $cm_redaction_data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyRedactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyRedactionsAsyncWithHttpInfo($session_id, $cm_redaction_data, string $contentType = self::contentTypes['applyRedactions'][0])
    {
        $returnType = 'object';
        $request = $this->applyRedactionsRequest($session_id, $cm_redaction_data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'applyRedactions'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMRedactionData $cm_redaction_data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyRedactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function applyRedactionsRequest($session_id, $cm_redaction_data, string $contentType = self::contentTypes['applyRedactions'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling applyRedactions'
            );
        }

        // verify the required parameter 'cm_redaction_data' is set
        if ($cm_redaction_data === null || (is_array($cm_redaction_data) && count($cm_redaction_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_redaction_data when calling applyRedactions'
            );
        }


        $resourcePath = '/api/discovery/applyredactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_redaction_data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_redaction_data));
            } else {
                $httpBody = $cm_redaction_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createGdprProject
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMCreateGdprProject $cm_create_gdpr_project cm_create_gdpr_project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createGdprProject'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function createGdprProject($session_id, $cm_create_gdpr_project, string $contentType = self::contentTypes['createGdprProject'][0])
    {
        list($response) = $this->createGdprProjectWithHttpInfo($session_id, $cm_create_gdpr_project, $contentType);
        return $response;
    }

    /**
     * Operation createGdprProjectWithHttpInfo
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMCreateGdprProject $cm_create_gdpr_project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createGdprProject'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function createGdprProjectWithHttpInfo($session_id, $cm_create_gdpr_project, string $contentType = self::contentTypes['createGdprProject'][0])
    {
        $request = $this->createGdprProjectRequest($session_id, $cm_create_gdpr_project, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createGdprProjectAsync
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMCreateGdprProject $cm_create_gdpr_project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createGdprProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createGdprProjectAsync($session_id, $cm_create_gdpr_project, string $contentType = self::contentTypes['createGdprProject'][0])
    {
        return $this->createGdprProjectAsyncWithHttpInfo($session_id, $cm_create_gdpr_project, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createGdprProjectAsyncWithHttpInfo
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMCreateGdprProject $cm_create_gdpr_project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createGdprProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createGdprProjectAsyncWithHttpInfo($session_id, $cm_create_gdpr_project, string $contentType = self::contentTypes['createGdprProject'][0])
    {
        $returnType = 'object';
        $request = $this->createGdprProjectRequest($session_id, $cm_create_gdpr_project, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createGdprProject'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMCreateGdprProject $cm_create_gdpr_project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createGdprProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createGdprProjectRequest($session_id, $cm_create_gdpr_project, string $contentType = self::contentTypes['createGdprProject'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling createGdprProject'
            );
        }

        // verify the required parameter 'cm_create_gdpr_project' is set
        if ($cm_create_gdpr_project === null || (is_array($cm_create_gdpr_project) && count($cm_create_gdpr_project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_create_gdpr_project when calling createGdprProject'
            );
        }


        $resourcePath = '/api/discovery/createproject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_create_gdpr_project)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_create_gdpr_project));
            } else {
                $httpBody = $cm_create_gdpr_project;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteProject
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMDeleteProjectCmd $cm_delete_project_cmd cm_delete_project_cmd (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProject'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function deleteProject($session_id, $cm_delete_project_cmd, string $contentType = self::contentTypes['deleteProject'][0])
    {
        list($response) = $this->deleteProjectWithHttpInfo($session_id, $cm_delete_project_cmd, $contentType);
        return $response;
    }

    /**
     * Operation deleteProjectWithHttpInfo
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMDeleteProjectCmd $cm_delete_project_cmd (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProject'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProjectWithHttpInfo($session_id, $cm_delete_project_cmd, string $contentType = self::contentTypes['deleteProject'][0])
    {
        $request = $this->deleteProjectRequest($session_id, $cm_delete_project_cmd, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteProjectAsync
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMDeleteProjectCmd $cm_delete_project_cmd (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProjectAsync($session_id, $cm_delete_project_cmd, string $contentType = self::contentTypes['deleteProject'][0])
    {
        return $this->deleteProjectAsyncWithHttpInfo($session_id, $cm_delete_project_cmd, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteProjectAsyncWithHttpInfo
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMDeleteProjectCmd $cm_delete_project_cmd (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProjectAsyncWithHttpInfo($session_id, $cm_delete_project_cmd, string $contentType = self::contentTypes['deleteProject'][0])
    {
        $returnType = 'object';
        $request = $this->deleteProjectRequest($session_id, $cm_delete_project_cmd, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProject'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMDeleteProjectCmd $cm_delete_project_cmd (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteProjectRequest($session_id, $cm_delete_project_cmd, string $contentType = self::contentTypes['deleteProject'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling deleteProject'
            );
        }

        // verify the required parameter 'cm_delete_project_cmd' is set
        if ($cm_delete_project_cmd === null || (is_array($cm_delete_project_cmd) && count($cm_delete_project_cmd) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_delete_project_cmd when calling deleteProject'
            );
        }


        $resourcePath = '/api/discovery/deleteproject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_delete_project_cmd)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_delete_project_cmd));
            } else {
                $httpBody = $cm_delete_project_cmd;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportRedactedDoc
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMExportRedactedDocument $cm_export_redacted_document cm_export_redacted_document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportRedactedDoc'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function exportRedactedDoc($session_id, $cm_export_redacted_document, string $contentType = self::contentTypes['exportRedactedDoc'][0])
    {
        list($response) = $this->exportRedactedDocWithHttpInfo($session_id, $cm_export_redacted_document, $contentType);
        return $response;
    }

    /**
     * Operation exportRedactedDocWithHttpInfo
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMExportRedactedDocument $cm_export_redacted_document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportRedactedDoc'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportRedactedDocWithHttpInfo($session_id, $cm_export_redacted_document, string $contentType = self::contentTypes['exportRedactedDoc'][0])
    {
        $request = $this->exportRedactedDocRequest($session_id, $cm_export_redacted_document, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportRedactedDocAsync
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMExportRedactedDocument $cm_export_redacted_document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportRedactedDoc'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportRedactedDocAsync($session_id, $cm_export_redacted_document, string $contentType = self::contentTypes['exportRedactedDoc'][0])
    {
        return $this->exportRedactedDocAsyncWithHttpInfo($session_id, $cm_export_redacted_document, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportRedactedDocAsyncWithHttpInfo
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMExportRedactedDocument $cm_export_redacted_document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportRedactedDoc'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportRedactedDocAsyncWithHttpInfo($session_id, $cm_export_redacted_document, string $contentType = self::contentTypes['exportRedactedDoc'][0])
    {
        $returnType = 'object';
        $request = $this->exportRedactedDocRequest($session_id, $cm_export_redacted_document, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportRedactedDoc'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMExportRedactedDocument $cm_export_redacted_document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportRedactedDoc'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function exportRedactedDocRequest($session_id, $cm_export_redacted_document, string $contentType = self::contentTypes['exportRedactedDoc'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling exportRedactedDoc'
            );
        }

        // verify the required parameter 'cm_export_redacted_document' is set
        if ($cm_export_redacted_document === null || (is_array($cm_export_redacted_document) && count($cm_export_redacted_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_export_redacted_document when calling exportRedactedDoc'
            );
        }


        $resourcePath = '/api/discovery/exportredacteddoc';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_export_redacted_document)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_export_redacted_document));
            } else {
                $httpBody = $cm_export_redacted_document;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGdprDocument
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $project_id Project Id for the items (required)
     * @param  string $url The url of the document to retrieve (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGdprDocument'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getGdprDocument($organisation_id, $kb_id, $project_id, $url, $session_id, string $contentType = self::contentTypes['getGdprDocument'][0])
    {
        list($response) = $this->getGdprDocumentWithHttpInfo($organisation_id, $kb_id, $project_id, $url, $session_id, $contentType);
        return $response;
    }

    /**
     * Operation getGdprDocumentWithHttpInfo
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $project_id Project Id for the items (required)
     * @param  string $url The url of the document to retrieve (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGdprDocument'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGdprDocumentWithHttpInfo($organisation_id, $kb_id, $project_id, $url, $session_id, string $contentType = self::contentTypes['getGdprDocument'][0])
    {
        $request = $this->getGdprDocumentRequest($organisation_id, $kb_id, $project_id, $url, $session_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGdprDocumentAsync
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $project_id Project Id for the items (required)
     * @param  string $url The url of the document to retrieve (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGdprDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGdprDocumentAsync($organisation_id, $kb_id, $project_id, $url, $session_id, string $contentType = self::contentTypes['getGdprDocument'][0])
    {
        return $this->getGdprDocumentAsyncWithHttpInfo($organisation_id, $kb_id, $project_id, $url, $session_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGdprDocumentAsyncWithHttpInfo
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $project_id Project Id for the items (required)
     * @param  string $url The url of the document to retrieve (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGdprDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGdprDocumentAsyncWithHttpInfo($organisation_id, $kb_id, $project_id, $url, $session_id, string $contentType = self::contentTypes['getGdprDocument'][0])
    {
        $returnType = 'object';
        $request = $this->getGdprDocumentRequest($organisation_id, $kb_id, $project_id, $url, $session_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGdprDocument'
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $project_id Project Id for the items (required)
     * @param  string $url The url of the document to retrieve (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGdprDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGdprDocumentRequest($organisation_id, $kb_id, $project_id, $url, $session_id, string $contentType = self::contentTypes['getGdprDocument'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling getGdprDocument'
            );
        }

        // verify the required parameter 'kb_id' is set
        if ($kb_id === null || (is_array($kb_id) && count($kb_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kb_id when calling getGdprDocument'
            );
        }

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling getGdprDocument'
            );
        }

        // verify the required parameter 'url' is set
        if ($url === null || (is_array($url) && count($url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling getGdprDocument'
            );
        }

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling getGdprDocument'
            );
        }


        $resourcePath = '/api/discovery/gdprdocument/{organisationId}/{kbId}/{projectId}/{url}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($kb_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kbId' . '}',
                ObjectSerializer::toPathValue($kb_id),
                $resourcePath
            );
        }
        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($url !== null) {
            $resourcePath = str_replace(
                '{' . 'url' . '}',
                ObjectSerializer::toPathValue($url),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPagedProjectDocuments
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $project_id Project Id for the items (required)
     * @param  int $page the page to render (required)
     * @param  int $page_size the page size to use (required)
     * @param  string $text_filter the text filter passed in or blank if empty (required)
     * @param  string $type_filter the type filter passed in (required)
     * @param  string $status_filter the status filter passed in (required)
     * @param  string $sort_column the sort column used for the results (required)
     * @param  int $sort_direction sort direction to use (0/1) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagedProjectDocuments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getPagedProjectDocuments($organisation_id, $kb_id, $project_id, $page, $page_size, $text_filter, $type_filter, $status_filter, $sort_column, $sort_direction, $session_id, string $contentType = self::contentTypes['getPagedProjectDocuments'][0])
    {
        list($response) = $this->getPagedProjectDocumentsWithHttpInfo($organisation_id, $kb_id, $project_id, $page, $page_size, $text_filter, $type_filter, $status_filter, $sort_column, $sort_direction, $session_id, $contentType);
        return $response;
    }

    /**
     * Operation getPagedProjectDocumentsWithHttpInfo
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $project_id Project Id for the items (required)
     * @param  int $page the page to render (required)
     * @param  int $page_size the page size to use (required)
     * @param  string $text_filter the text filter passed in or blank if empty (required)
     * @param  string $type_filter the type filter passed in (required)
     * @param  string $status_filter the status filter passed in (required)
     * @param  string $sort_column the sort column used for the results (required)
     * @param  int $sort_direction sort direction to use (0/1) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagedProjectDocuments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPagedProjectDocumentsWithHttpInfo($organisation_id, $kb_id, $project_id, $page, $page_size, $text_filter, $type_filter, $status_filter, $sort_column, $sort_direction, $session_id, string $contentType = self::contentTypes['getPagedProjectDocuments'][0])
    {
        $request = $this->getPagedProjectDocumentsRequest($organisation_id, $kb_id, $project_id, $page, $page_size, $text_filter, $type_filter, $status_filter, $sort_column, $sort_direction, $session_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPagedProjectDocumentsAsync
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $project_id Project Id for the items (required)
     * @param  int $page the page to render (required)
     * @param  int $page_size the page size to use (required)
     * @param  string $text_filter the text filter passed in or blank if empty (required)
     * @param  string $type_filter the type filter passed in (required)
     * @param  string $status_filter the status filter passed in (required)
     * @param  string $sort_column the sort column used for the results (required)
     * @param  int $sort_direction sort direction to use (0/1) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagedProjectDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPagedProjectDocumentsAsync($organisation_id, $kb_id, $project_id, $page, $page_size, $text_filter, $type_filter, $status_filter, $sort_column, $sort_direction, $session_id, string $contentType = self::contentTypes['getPagedProjectDocuments'][0])
    {
        return $this->getPagedProjectDocumentsAsyncWithHttpInfo($organisation_id, $kb_id, $project_id, $page, $page_size, $text_filter, $type_filter, $status_filter, $sort_column, $sort_direction, $session_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPagedProjectDocumentsAsyncWithHttpInfo
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $project_id Project Id for the items (required)
     * @param  int $page the page to render (required)
     * @param  int $page_size the page size to use (required)
     * @param  string $text_filter the text filter passed in or blank if empty (required)
     * @param  string $type_filter the type filter passed in (required)
     * @param  string $status_filter the status filter passed in (required)
     * @param  string $sort_column the sort column used for the results (required)
     * @param  int $sort_direction sort direction to use (0/1) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagedProjectDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPagedProjectDocumentsAsyncWithHttpInfo($organisation_id, $kb_id, $project_id, $page, $page_size, $text_filter, $type_filter, $status_filter, $sort_column, $sort_direction, $session_id, string $contentType = self::contentTypes['getPagedProjectDocuments'][0])
    {
        $returnType = 'object';
        $request = $this->getPagedProjectDocumentsRequest($organisation_id, $kb_id, $project_id, $page, $page_size, $text_filter, $type_filter, $status_filter, $sort_column, $sort_direction, $session_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPagedProjectDocuments'
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $project_id Project Id for the items (required)
     * @param  int $page the page to render (required)
     * @param  int $page_size the page size to use (required)
     * @param  string $text_filter the text filter passed in or blank if empty (required)
     * @param  string $type_filter the type filter passed in (required)
     * @param  string $status_filter the status filter passed in (required)
     * @param  string $sort_column the sort column used for the results (required)
     * @param  int $sort_direction sort direction to use (0/1) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagedProjectDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPagedProjectDocumentsRequest($organisation_id, $kb_id, $project_id, $page, $page_size, $text_filter, $type_filter, $status_filter, $sort_column, $sort_direction, $session_id, string $contentType = self::contentTypes['getPagedProjectDocuments'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling getPagedProjectDocuments'
            );
        }

        // verify the required parameter 'kb_id' is set
        if ($kb_id === null || (is_array($kb_id) && count($kb_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kb_id when calling getPagedProjectDocuments'
            );
        }

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling getPagedProjectDocuments'
            );
        }

        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling getPagedProjectDocuments'
            );
        }

        // verify the required parameter 'page_size' is set
        if ($page_size === null || (is_array($page_size) && count($page_size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_size when calling getPagedProjectDocuments'
            );
        }

        // verify the required parameter 'text_filter' is set
        if ($text_filter === null || (is_array($text_filter) && count($text_filter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $text_filter when calling getPagedProjectDocuments'
            );
        }

        // verify the required parameter 'type_filter' is set
        if ($type_filter === null || (is_array($type_filter) && count($type_filter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type_filter when calling getPagedProjectDocuments'
            );
        }

        // verify the required parameter 'status_filter' is set
        if ($status_filter === null || (is_array($status_filter) && count($status_filter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status_filter when calling getPagedProjectDocuments'
            );
        }

        // verify the required parameter 'sort_column' is set
        if ($sort_column === null || (is_array($sort_column) && count($sort_column) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sort_column when calling getPagedProjectDocuments'
            );
        }

        // verify the required parameter 'sort_direction' is set
        if ($sort_direction === null || (is_array($sort_direction) && count($sort_direction) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sort_direction when calling getPagedProjectDocuments'
            );
        }

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling getPagedProjectDocuments'
            );
        }


        $resourcePath = '/api/discovery/projectdocument/{organisationId}/{kbId}/{projectId}/{page}/{pageSize}/{textFilter}/{typeFilter}/{statusFilter}/{sortColumn}/{sortDirection}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($kb_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kbId' . '}',
                ObjectSerializer::toPathValue($kb_id),
                $resourcePath
            );
        }
        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($page !== null) {
            $resourcePath = str_replace(
                '{' . 'page' . '}',
                ObjectSerializer::toPathValue($page),
                $resourcePath
            );
        }
        // path params
        if ($page_size !== null) {
            $resourcePath = str_replace(
                '{' . 'pageSize' . '}',
                ObjectSerializer::toPathValue($page_size),
                $resourcePath
            );
        }
        // path params
        if ($text_filter !== null) {
            $resourcePath = str_replace(
                '{' . 'textFilter' . '}',
                ObjectSerializer::toPathValue($text_filter),
                $resourcePath
            );
        }
        // path params
        if ($type_filter !== null) {
            $resourcePath = str_replace(
                '{' . 'typeFilter' . '}',
                ObjectSerializer::toPathValue($type_filter),
                $resourcePath
            );
        }
        // path params
        if ($status_filter !== null) {
            $resourcePath = str_replace(
                '{' . 'statusFilter' . '}',
                ObjectSerializer::toPathValue($status_filter),
                $resourcePath
            );
        }
        // path params
        if ($sort_column !== null) {
            $resourcePath = str_replace(
                '{' . 'sortColumn' . '}',
                ObjectSerializer::toPathValue($sort_column),
                $resourcePath
            );
        }
        // path params
        if ($sort_direction !== null) {
            $resourcePath = str_replace(
                '{' . 'sortDirection' . '}',
                ObjectSerializer::toPathValue($sort_direction),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation growthPerMonth
     *
     * growth
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['growthPerMonth'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function growthPerMonth($organisation_id, $kb_id, $session_id, string $contentType = self::contentTypes['growthPerMonth'][0])
    {
        list($response) = $this->growthPerMonthWithHttpInfo($organisation_id, $kb_id, $session_id, $contentType);
        return $response;
    }

    /**
     * Operation growthPerMonthWithHttpInfo
     *
     * growth
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['growthPerMonth'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function growthPerMonthWithHttpInfo($organisation_id, $kb_id, $session_id, string $contentType = self::contentTypes['growthPerMonth'][0])
    {
        $request = $this->growthPerMonthRequest($organisation_id, $kb_id, $session_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation growthPerMonthAsync
     *
     * growth
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['growthPerMonth'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function growthPerMonthAsync($organisation_id, $kb_id, $session_id, string $contentType = self::contentTypes['growthPerMonth'][0])
    {
        return $this->growthPerMonthAsyncWithHttpInfo($organisation_id, $kb_id, $session_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation growthPerMonthAsyncWithHttpInfo
     *
     * growth
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['growthPerMonth'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function growthPerMonthAsyncWithHttpInfo($organisation_id, $kb_id, $session_id, string $contentType = self::contentTypes['growthPerMonth'][0])
    {
        $returnType = 'object';
        $request = $this->growthPerMonthRequest($organisation_id, $kb_id, $session_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'growthPerMonth'
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['growthPerMonth'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function growthPerMonthRequest($organisation_id, $kb_id, $session_id, string $contentType = self::contentTypes['growthPerMonth'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling growthPerMonth'
            );
        }

        // verify the required parameter 'kb_id' is set
        if ($kb_id === null || (is_array($kb_id) && count($kb_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kb_id when calling growthPerMonth'
            );
        }

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling growthPerMonth'
            );
        }


        $resourcePath = '/api/discovery/growth/{organisationId}/{kbId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($kb_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kbId' . '}',
                ObjectSerializer::toPathValue($kb_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pdfBinary
     *
     * Binary
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $url a base64 encoded url (required)
     * @param  string $session_id a valid SimSage Session id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pdfBinary'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function pdfBinary($organisation_id, $kb_id, $url, $session_id = null, string $contentType = self::contentTypes['pdfBinary'][0])
    {
        list($response) = $this->pdfBinaryWithHttpInfo($organisation_id, $kb_id, $url, $session_id, $contentType);
        return $response;
    }

    /**
     * Operation pdfBinaryWithHttpInfo
     *
     * Binary
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $url a base64 encoded url (required)
     * @param  string $session_id a valid SimSage Session id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pdfBinary'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function pdfBinaryWithHttpInfo($organisation_id, $kb_id, $url, $session_id = null, string $contentType = self::contentTypes['pdfBinary'][0])
    {
        $request = $this->pdfBinaryRequest($organisation_id, $kb_id, $url, $session_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pdfBinaryAsync
     *
     * Binary
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $url a base64 encoded url (required)
     * @param  string $session_id a valid SimSage Session id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pdfBinary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pdfBinaryAsync($organisation_id, $kb_id, $url, $session_id = null, string $contentType = self::contentTypes['pdfBinary'][0])
    {
        return $this->pdfBinaryAsyncWithHttpInfo($organisation_id, $kb_id, $url, $session_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pdfBinaryAsyncWithHttpInfo
     *
     * Binary
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $url a base64 encoded url (required)
     * @param  string $session_id a valid SimSage Session id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pdfBinary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pdfBinaryAsyncWithHttpInfo($organisation_id, $kb_id, $url, $session_id = null, string $contentType = self::contentTypes['pdfBinary'][0])
    {
        $returnType = 'object';
        $request = $this->pdfBinaryRequest($organisation_id, $kb_id, $url, $session_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pdfBinary'
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $url a base64 encoded url (required)
     * @param  string $session_id a valid SimSage Session id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pdfBinary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pdfBinaryRequest($organisation_id, $kb_id, $url, $session_id = null, string $contentType = self::contentTypes['pdfBinary'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling pdfBinary'
            );
        }

        // verify the required parameter 'kb_id' is set
        if ($kb_id === null || (is_array($kb_id) && count($kb_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kb_id when calling pdfBinary'
            );
        }

        // verify the required parameter 'url' is set
        if ($url === null || (is_array($url) && count($url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling pdfBinary'
            );
        }



        $resourcePath = '/api/discovery/pdf/latest/{organisationId}/{kbId}/{url}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($kb_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kbId' . '}',
                ObjectSerializer::toPathValue($kb_id),
                $resourcePath
            );
        }
        // path params
        if ($url !== null) {
            $resourcePath = str_replace(
                '{' . 'url' . '}',
                ObjectSerializer::toPathValue($url),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setdocumentredactions
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMRedactionData $cm_redaction_data cm_redaction_data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setdocumentredactions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function setdocumentredactions($session_id, $cm_redaction_data, string $contentType = self::contentTypes['setdocumentredactions'][0])
    {
        list($response) = $this->setdocumentredactionsWithHttpInfo($session_id, $cm_redaction_data, $contentType);
        return $response;
    }

    /**
     * Operation setdocumentredactionsWithHttpInfo
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMRedactionData $cm_redaction_data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setdocumentredactions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function setdocumentredactionsWithHttpInfo($session_id, $cm_redaction_data, string $contentType = self::contentTypes['setdocumentredactions'][0])
    {
        $request = $this->setdocumentredactionsRequest($session_id, $cm_redaction_data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setdocumentredactionsAsync
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMRedactionData $cm_redaction_data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setdocumentredactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setdocumentredactionsAsync($session_id, $cm_redaction_data, string $contentType = self::contentTypes['setdocumentredactions'][0])
    {
        return $this->setdocumentredactionsAsyncWithHttpInfo($session_id, $cm_redaction_data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setdocumentredactionsAsyncWithHttpInfo
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMRedactionData $cm_redaction_data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setdocumentredactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setdocumentredactionsAsyncWithHttpInfo($session_id, $cm_redaction_data, string $contentType = self::contentTypes['setdocumentredactions'][0])
    {
        $returnType = 'object';
        $request = $this->setdocumentredactionsRequest($session_id, $cm_redaction_data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setdocumentredactions'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMRedactionData $cm_redaction_data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setdocumentredactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setdocumentredactionsRequest($session_id, $cm_redaction_data, string $contentType = self::contentTypes['setdocumentredactions'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling setdocumentredactions'
            );
        }

        // verify the required parameter 'cm_redaction_data' is set
        if ($cm_redaction_data === null || (is_array($cm_redaction_data) && count($cm_redaction_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_redaction_data when calling setdocumentredactions'
            );
        }


        $resourcePath = '/api/discovery/updategdprdocument';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_redaction_data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_redaction_data));
            } else {
                $httpBody = $cm_redaction_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storageBySource
     *
     * storage
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storageBySource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function storageBySource($organisation_id, $kb_id, $session_id, string $contentType = self::contentTypes['storageBySource'][0])
    {
        list($response) = $this->storageBySourceWithHttpInfo($organisation_id, $kb_id, $session_id, $contentType);
        return $response;
    }

    /**
     * Operation storageBySourceWithHttpInfo
     *
     * storage
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storageBySource'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function storageBySourceWithHttpInfo($organisation_id, $kb_id, $session_id, string $contentType = self::contentTypes['storageBySource'][0])
    {
        $request = $this->storageBySourceRequest($organisation_id, $kb_id, $session_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation storageBySourceAsync
     *
     * storage
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storageBySource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storageBySourceAsync($organisation_id, $kb_id, $session_id, string $contentType = self::contentTypes['storageBySource'][0])
    {
        return $this->storageBySourceAsyncWithHttpInfo($organisation_id, $kb_id, $session_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storageBySourceAsyncWithHttpInfo
     *
     * storage
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storageBySource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storageBySourceAsyncWithHttpInfo($organisation_id, $kb_id, $session_id, string $contentType = self::contentTypes['storageBySource'][0])
    {
        $returnType = 'object';
        $request = $this->storageBySourceRequest($organisation_id, $kb_id, $session_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storageBySource'
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storageBySource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storageBySourceRequest($organisation_id, $kb_id, $session_id, string $contentType = self::contentTypes['storageBySource'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling storageBySource'
            );
        }

        // verify the required parameter 'kb_id' is set
        if ($kb_id === null || (is_array($kb_id) && count($kb_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kb_id when calling storageBySource'
            );
        }

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling storageBySource'
            );
        }


        $resourcePath = '/api/discovery/storage/{organisationId}/{kbId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($kb_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kbId' . '}',
                ObjectSerializer::toPathValue($kb_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation summaryByDocumentType
     *
     * storage
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['summaryByDocumentType'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function summaryByDocumentType($organisation_id, $kb_id, $session_id, string $contentType = self::contentTypes['summaryByDocumentType'][0])
    {
        list($response) = $this->summaryByDocumentTypeWithHttpInfo($organisation_id, $kb_id, $session_id, $contentType);
        return $response;
    }

    /**
     * Operation summaryByDocumentTypeWithHttpInfo
     *
     * storage
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['summaryByDocumentType'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function summaryByDocumentTypeWithHttpInfo($organisation_id, $kb_id, $session_id, string $contentType = self::contentTypes['summaryByDocumentType'][0])
    {
        $request = $this->summaryByDocumentTypeRequest($organisation_id, $kb_id, $session_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation summaryByDocumentTypeAsync
     *
     * storage
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['summaryByDocumentType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function summaryByDocumentTypeAsync($organisation_id, $kb_id, $session_id, string $contentType = self::contentTypes['summaryByDocumentType'][0])
    {
        return $this->summaryByDocumentTypeAsyncWithHttpInfo($organisation_id, $kb_id, $session_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation summaryByDocumentTypeAsyncWithHttpInfo
     *
     * storage
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['summaryByDocumentType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function summaryByDocumentTypeAsyncWithHttpInfo($organisation_id, $kb_id, $session_id, string $contentType = self::contentTypes['summaryByDocumentType'][0])
    {
        $returnType = 'object';
        $request = $this->summaryByDocumentTypeRequest($organisation_id, $kb_id, $session_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'summaryByDocumentType'
     *
     * @param  string $organisation_id the organisation (its guid id) (required)
     * @param  string $kb_id the knowledge-base (its guid id) (required)
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['summaryByDocumentType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function summaryByDocumentTypeRequest($organisation_id, $kb_id, $session_id, string $contentType = self::contentTypes['summaryByDocumentType'][0])
    {

        // verify the required parameter 'organisation_id' is set
        if ($organisation_id === null || (is_array($organisation_id) && count($organisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_id when calling summaryByDocumentType'
            );
        }

        // verify the required parameter 'kb_id' is set
        if ($kb_id === null || (is_array($kb_id) && count($kb_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kb_id when calling summaryByDocumentType'
            );
        }

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling summaryByDocumentType'
            );
        }


        $resourcePath = '/api/discovery/doctypesummary/{organisationId}/{kbId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }

        // path params
        if ($organisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationId' . '}',
                ObjectSerializer::toPathValue($organisation_id),
                $resourcePath
            );
        }
        // path params
        if ($kb_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kbId' . '}',
                ObjectSerializer::toPathValue($kb_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDocumentSet
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMUpdateDocumentSet $cm_update_document_set cm_update_document_set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDocumentSet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function updateDocumentSet($session_id, $cm_update_document_set, string $contentType = self::contentTypes['updateDocumentSet'][0])
    {
        list($response) = $this->updateDocumentSetWithHttpInfo($session_id, $cm_update_document_set, $contentType);
        return $response;
    }

    /**
     * Operation updateDocumentSetWithHttpInfo
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMUpdateDocumentSet $cm_update_document_set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDocumentSet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDocumentSetWithHttpInfo($session_id, $cm_update_document_set, string $contentType = self::contentTypes['updateDocumentSet'][0])
    {
        $request = $this->updateDocumentSetRequest($session_id, $cm_update_document_set, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDocumentSetAsync
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMUpdateDocumentSet $cm_update_document_set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDocumentSet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDocumentSetAsync($session_id, $cm_update_document_set, string $contentType = self::contentTypes['updateDocumentSet'][0])
    {
        return $this->updateDocumentSetAsyncWithHttpInfo($session_id, $cm_update_document_set, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDocumentSetAsyncWithHttpInfo
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMUpdateDocumentSet $cm_update_document_set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDocumentSet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDocumentSetAsyncWithHttpInfo($session_id, $cm_update_document_set, string $contentType = self::contentTypes['updateDocumentSet'][0])
    {
        $returnType = 'object';
        $request = $this->updateDocumentSetRequest($session_id, $cm_update_document_set, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDocumentSet'
     *
     * @param  string $session_id a valid SimSage Session id. (required)
     * @param  \OpenAPI\Client\Model\CMUpdateDocumentSet $cm_update_document_set (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDocumentSet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateDocumentSetRequest($session_id, $cm_update_document_set, string $contentType = self::contentTypes['updateDocumentSet'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling updateDocumentSet'
            );
        }

        // verify the required parameter 'cm_update_document_set' is set
        if ($cm_update_document_set === null || (is_array($cm_update_document_set) && count($cm_update_document_set) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cm_update_document_set when calling updateDocumentSet'
            );
        }


        $resourcePath = '/api/discovery/updatedocumentset';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($session_id !== null) {
            $headerParams['session-id'] = ObjectSerializer::toHeaderValue($session_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cm_update_document_set)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cm_update_document_set));
            } else {
                $httpBody = $cm_update_document_set;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation version5
     *
     * Version
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['version5'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CMVersion|\OpenAPI\Client\Model\JsonMessage
     */
    public function version5(string $contentType = self::contentTypes['version5'][0])
    {
        list($response) = $this->version5WithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation version5WithHttpInfo
     *
     * Version
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['version5'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CMVersion|\OpenAPI\Client\Model\JsonMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function version5WithHttpInfo(string $contentType = self::contentTypes['version5'][0])
    {
        $request = $this->version5Request($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CMVersion' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CMVersion' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CMVersion', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\JsonMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JsonMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JsonMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CMVersion';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CMVersion',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation version5Async
     *
     * Version
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['version5'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function version5Async(string $contentType = self::contentTypes['version5'][0])
    {
        return $this->version5AsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation version5AsyncWithHttpInfo
     *
     * Version
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['version5'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function version5AsyncWithHttpInfo(string $contentType = self::contentTypes['version5'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CMVersion';
        $request = $this->version5Request($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'version5'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['version5'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function version5Request(string $contentType = self::contentTypes['version5'][0])
    {


        $resourcePath = '/api/discovery/version';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
