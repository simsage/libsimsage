/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.13.31
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CMCommandQueueItem;
import org.openapitools.client.model.CMLoggerEntry;
import org.openapitools.client.model.CMReturnStatistics;
import org.openapitools.client.model.CMVersion;
import org.openapitools.client.model.JsonMessage;
import org.openapitools.client.model.OptimizeIndexesGetReportCmd;
import org.openapitools.client.model.OptimizeIndexesGetReportsCmd;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StatsApi
 */
@Disabled
public class StatsApiTest {

    private final StatsApi api = new StatsApi();

    /**
     * get an optimization report
     *
     * return an optimization report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIndexOptimizationReportTest() throws ApiException {
        String sessionId = null;
        String organisationId = null;
        String kbId = null;
        Long id = null;
        List<OptimizeIndexesGetReportCmd> response = api.getIndexOptimizationReport(sessionId, organisationId, kbId, id);
        // TODO: test validations
    }

    /**
     * get optimization report list
     *
     * return a list of optimization reports
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIndexOptimizationReportsTest() throws ApiException {
        String sessionId = null;
        String organisationId = null;
        String kbId = null;
        List<OptimizeIndexesGetReportsCmd> response = api.getIndexOptimizationReports(sessionId, organisationId, kbId);
        // TODO: test validations
    }

    /**
     * Get usage Statistics
     *
     * Get all statistics for a given month, including some global ones.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStatsTest() throws ApiException {
        String sessionId = null;
        String organisationId = null;
        String kbId = null;
        Integer year = null;
        Integer month = null;
        Integer top = null;
        String apIVersion = null;
        CMReturnStatistics response = api.getStats(sessionId, organisationId, kbId, year, month, top, apIVersion);
        // TODO: test validations
    }

    /**
     * SimSage status
     *
     * return SimSage indexer and parser status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void simSageStatusTest() throws ApiException {
        String sessionId = null;
        String organisationId = null;
        List<CMCommandQueueItem> response = api.simSageStatus(sessionId, organisationId);
        // TODO: test validations
    }

    /**
     * System Logs
     *
     * return SimSage System-logs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void systemLogsTest() throws ApiException {
        String organisationId = null;
        String service = null;
        Integer numLines = null;
        String sessionId = null;
        List<CMLoggerEntry> response = api.systemLogs(organisationId, service, numLines, sessionId);
        // TODO: test validations
    }

    /**
     * Version
     *
     * Get the version of SimSage Stats Services.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void versionTest() throws ApiException {
        CMVersion response = api.version();
        // TODO: test validations
    }

}
