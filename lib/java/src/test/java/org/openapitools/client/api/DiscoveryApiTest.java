/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CMCreateGdprProject;
import org.openapitools.client.model.CMDeleteProjectCmd;
import org.openapitools.client.model.CMExportRedactedDocument;
import org.openapitools.client.model.CMRedactionData;
import org.openapitools.client.model.CMUpdateDocumentSet;
import org.openapitools.client.model.CMVersion;
import org.openapitools.client.model.JsonMessage;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DiscoveryApi
 */
@Disabled
public class DiscoveryApiTest {

    private final DiscoveryApi api = new DiscoveryApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void allGdprProjectsTest() throws ApiException {
        String organisationId = null;
        String kbId = null;
        Integer page = null;
        Integer pageSize = null;
        String textFilter = null;
        String statusFilter = null;
        String sortColumn = null;
        Integer sortDirection = null;
        String sessionId = null;
        Object response = api.allGdprProjects(organisationId, kbId, page, pageSize, textFilter, statusFilter, sortColumn, sortDirection, sessionId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applyRedactionsTest() throws ApiException {
        String sessionId = null;
        CMRedactionData cmRedactionData = null;
        Object response = api.applyRedactions(sessionId, cmRedactionData);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGdprProjectTest() throws ApiException {
        String sessionId = null;
        CMCreateGdprProject cmCreateGdprProject = null;
        Object response = api.createGdprProject(sessionId, cmCreateGdprProject);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProjectTest() throws ApiException {
        String sessionId = null;
        CMDeleteProjectCmd cmDeleteProjectCmd = null;
        Object response = api.deleteProject(sessionId, cmDeleteProjectCmd);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportRedactedDocTest() throws ApiException {
        String sessionId = null;
        CMExportRedactedDocument cmExportRedactedDocument = null;
        Object response = api.exportRedactedDoc(sessionId, cmExportRedactedDocument);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGdprDocumentTest() throws ApiException {
        String organisationId = null;
        String kbId = null;
        String projectId = null;
        String url = null;
        String sessionId = null;
        Object response = api.getGdprDocument(organisationId, kbId, projectId, url, sessionId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPagedProjectDocumentsTest() throws ApiException {
        String organisationId = null;
        String kbId = null;
        String projectId = null;
        Integer page = null;
        Integer pageSize = null;
        String textFilter = null;
        String typeFilter = null;
        String statusFilter = null;
        String sortColumn = null;
        Integer sortDirection = null;
        String sessionId = null;
        Object response = api.getPagedProjectDocuments(organisationId, kbId, projectId, page, pageSize, textFilter, typeFilter, statusFilter, sortColumn, sortDirection, sessionId);
        // TODO: test validations
    }

    /**
     * growth
     *
     * Get the storage growth delta per month
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void growthPerMonthTest() throws ApiException {
        String organisationId = null;
        String kbId = null;
        String sessionId = null;
        Object response = api.growthPerMonth(organisationId, kbId, sessionId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setdocumentredactionsTest() throws ApiException {
        String sessionId = null;
        CMRedactionData cmRedactionData = null;
        Object response = api.setdocumentredactions(sessionId, cmRedactionData);
        // TODO: test validations
    }

    /**
     * storage
     *
     * Get the current amount of storage used by source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageBySourceTest() throws ApiException {
        String organisationId = null;
        String kbId = null;
        String sessionId = null;
        Object response = api.storageBySource(organisationId, kbId, sessionId);
        // TODO: test validations
    }

    /**
     * storage
     *
     * Get the current amount of storage used by source and document type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void summaryByDocumentTypeTest() throws ApiException {
        String organisationId = null;
        String kbId = null;
        String sessionId = null;
        Object response = api.summaryByDocumentType(organisationId, kbId, sessionId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDocumentSetTest() throws ApiException {
        String sessionId = null;
        CMUpdateDocumentSet cmUpdateDocumentSet = null;
        Object response = api.updateDocumentSet(sessionId, cmUpdateDocumentSet);
        // TODO: test validations
    }

    /**
     * Version
     *
     * Get the version of SimSage Discovery Services.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void version5Test() throws ApiException {
        CMVersion response = api.version5();
        // TODO: test validations
    }

}
