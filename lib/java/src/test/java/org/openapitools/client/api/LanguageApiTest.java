/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CMCategorization;
import org.openapitools.client.model.CMCategorizationPaginatedList;
import org.openapitools.client.model.CMOptimizeIndex;
import org.openapitools.client.model.CMSemanticModelEdit;
import org.openapitools.client.model.CMSemanticsPaginated;
import org.openapitools.client.model.CMSemanticsPaginatedResult;
import org.openapitools.client.model.CMSynSet;
import org.openapitools.client.model.CMSynSetFind;
import org.openapitools.client.model.CMSynSetList;
import org.openapitools.client.model.CMSynonym;
import org.openapitools.client.model.CMSynonymsPaginated;
import org.openapitools.client.model.CMSynonymsPaginatedResult;
import org.openapitools.client.model.CMVersion;
import org.openapitools.client.model.JsonMessage;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LanguageApi
 */
@Disabled
public class LanguageApiTest {

    private final LanguageApi api = new LanguageApi();

    /**
     * Add all default SynSets
     *
     * Add default syn-sets to the given org/kb
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addDefaultSynSetsTest() throws ApiException {
        String organisationId = null;
        String kbId = null;
        String sessionId = null;
        String apIVersion = null;
        JsonMessage response = api.addDefaultSynSets(organisationId, kbId, sessionId, apIVersion);
        // TODO: test validations
    }

    /**
     * Delete All Synonyms
     *
     * Delete all synonyms for a given org/kb
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAllSynonymsTest() throws ApiException {
        String organisationId = null;
        String kbId = null;
        String sessionId = null;
        String apIVersion = null;
        JsonMessage response = api.deleteAllSynonyms(organisationId, kbId, sessionId, apIVersion);
        // TODO: test validations
    }

    /**
     * remove categorization
     *
     * remove a specific categorization for a given org/kb
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCategorizationTest() throws ApiException {
        String organisationId = null;
        String kbId = null;
        String categorizationLabel = null;
        String sessionId = null;
        String apIVersion = null;
        JsonMessage response = api.deleteCategorization(organisationId, kbId, categorizationLabel, sessionId, apIVersion);
        // TODO: test validations
    }

    /**
     * Delete Semantic
     *
     * Remove an existing semantic from SimSage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSemanticTest() throws ApiException {
        String organisationId = null;
        String kbId = null;
        String word = null;
        String semantic = null;
        String sessionId = null;
        String apIVersion = null;
        JsonMessage response = api.deleteSemantic(organisationId, kbId, word, semantic, sessionId, apIVersion);
        // TODO: test validations
    }

    /**
     * Delete SynSet
     *
     * Remove a syn-set from SimSage by lemma.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSynSetTest() throws ApiException {
        String organisationId = null;
        String kbId = null;
        String lemma = null;
        String sessionId = null;
        String apIVersion = null;
        JsonMessage response = api.deleteSynSet(organisationId, kbId, lemma, sessionId, apIVersion);
        // TODO: test validations
    }

    /**
     * Delete Synonym
     *
     * Delete a synonym using its id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSynonymTest() throws ApiException {
        String organisationId = null;
        String kbId = null;
        Integer id = null;
        String sessionId = null;
        String apIVersion = null;
        JsonMessage response = api.deleteSynonym(organisationId, kbId, id, sessionId, apIVersion);
        // TODO: test validations
    }

    /**
     * Find SynSets
     *
     * Find syn-sets using filters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findSynSetsTest() throws ApiException {
        String sessionId = null;
        CMSynSetFind cmSynSetFind = null;
        String apIVersion = null;
        CMSynSetList response = api.findSynSets(sessionId, cmSynSetFind, apIVersion);
        // TODO: test validations
    }

    /**
     * categorization list
     *
     * get all categorizations for a given org/kb paginated
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCategorizationListTest() throws ApiException {
        String organisationId = null;
        String kbId = null;
        String prevCategorizationLabel = null;
        Integer pageSize = null;
        String sessionId = null;
        String apIVersion = null;
        CMCategorizationPaginatedList response = api.getCategorizationList(organisationId, kbId, prevCategorizationLabel, pageSize, sessionId, apIVersion);
        // TODO: test validations
    }

    /**
     * get Synonyms Paginated
     *
     * return a paginated list of synonyms with optional filtering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaginatedTest() throws ApiException {
        String sessionId = null;
        CMSynonymsPaginated cmSynonymsPaginated = null;
        String apIVersion = null;
        CMSynonymsPaginatedResult response = api.getPaginated(sessionId, cmSynonymsPaginated, apIVersion);
        // TODO: test validations
    }

    /**
     * Semantics Paginated
     *
     * Return a paginated list of semantics with an optional filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSemanticsPaginatedTest() throws ApiException {
        String sessionId = null;
        CMSemanticsPaginated cmSemanticsPaginated = null;
        String apIVersion = null;
        CMSemanticsPaginatedResult response = api.getSemanticsPaginated(sessionId, cmSemanticsPaginated, apIVersion);
        // TODO: test validations
    }

    /**
     * Optimize Indexes
     *
     * Force index optimization for a the given knowledge-base, now.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void optimizeIndexesTest() throws ApiException {
        String sessionId = null;
        CMOptimizeIndex cmOptimizeIndex = null;
        String apIVersion = null;
        JsonMessage response = api.optimizeIndexes(sessionId, cmOptimizeIndex, apIVersion);
        // TODO: test validations
    }

    /**
     * Redact Document
     *
     * Create a redacted version of a document as a PDF given its url.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redactDocumentTest() throws ApiException {
        String organisationId = null;
        String kbId = null;
        String url = null;
        String entityCsv = null;
        String wordCsv = null;
        String allowWordsCsv = null;
        String sessionId = null;
        byte[] response = api.redactDocument(organisationId, kbId, url, entityCsv, wordCsv, allowWordsCsv, sessionId);
        // TODO: test validations
    }

    /**
     * save categorization
     *
     * create or update a specific categorization for a given org/kb
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveCategorizationTest() throws ApiException {
        String sessionId = null;
        CMCategorization cmCategorization = null;
        String apIVersion = null;
        JsonMessage response = api.saveCategorization(sessionId, cmCategorization, apIVersion);
        // TODO: test validations
    }

    /**
     * Save Semantic
     *
     * Create or update (save) a semantic in SimSage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveSemanticTest() throws ApiException {
        String organisationId = null;
        String kbId = null;
        String sessionId = null;
        CMSemanticModelEdit cmSemanticModelEdit = null;
        String apIVersion = null;
        JsonMessage response = api.saveSemantic(organisationId, kbId, sessionId, cmSemanticModelEdit, apIVersion);
        // TODO: test validations
    }

    /**
     * Save SynSet
     *
     * Save (update/create) a syn-set in SimSage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveSynSetTest() throws ApiException {
        String organisationId = null;
        String kbId = null;
        String sessionId = null;
        CMSynSet cmSynSet = null;
        String apIVersion = null;
        JsonMessage response = api.saveSynSet(organisationId, kbId, sessionId, cmSynSet, apIVersion);
        // TODO: test validations
    }

    /**
     * Save Synonym
     *
     * Save (update/create) a synonym.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveSynonymTest() throws ApiException {
        String organisationId = null;
        String kbId = null;
        String sessionId = null;
        CMSynonym cmSynonym = null;
        String apIVersion = null;
        JsonMessage response = api.saveSynonym(organisationId, kbId, sessionId, cmSynonym, apIVersion);
        // TODO: test validations
    }

    /**
     * Truncate slow Indexes
     *
     * Force slow-index truncation for a the given knowledge-base, now.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void truncateSlowIndexesTest() throws ApiException {
        String organisationId = null;
        String kbId = null;
        String sessionId = null;
        String apIVersion = null;
        JsonMessage response = api.truncateSlowIndexes(organisationId, kbId, sessionId, apIVersion);
        // TODO: test validations
    }

    /**
     * Tune Graph
     *
     * Create a tuned language graph for a given organisation/knowledge-base.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tuneLanguageGraphTest() throws ApiException {
        String organisationId = null;
        String kbId = null;
        String sessionId = null;
        String apIVersion = null;
        JsonMessage response = api.tuneLanguageGraph(organisationId, kbId, sessionId, apIVersion);
        // TODO: test validations
    }

    /**
     * Version
     *
     * Return the version of the SimSage Language Services.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void version2Test() throws ApiException {
        CMVersion response = api.version2();
        // TODO: test validations
    }

}
