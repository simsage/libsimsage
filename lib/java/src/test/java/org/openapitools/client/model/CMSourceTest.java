/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.11.4
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CMDocumentAcl;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for CMSource
 */
public class CMSourceTest {
    private final CMSource model = new CMSource();

    /**
     * Model tests for CMSource
     */
    @Test
    public void testCMSource() {
        // TODO: test CMSource
    }

    /**
     * Test the property 'sourceId'
     */
    @Test
    public void sourceIdTest() {
        // TODO: test sourceId
    }

    /**
     * Test the property 'organisationId'
     */
    @Test
    public void organisationIdTest() {
        // TODO: test organisationId
    }

    /**
     * Test the property 'kbId'
     */
    @Test
    public void kbIdTest() {
        // TODO: test kbId
    }

    /**
     * Test the property 'nodeId'
     */
    @Test
    public void nodeIdTest() {
        // TODO: test nodeId
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'crawlerType'
     */
    @Test
    public void crawlerTypeTest() {
        // TODO: test crawlerType
    }

    /**
     * Test the property 'schedule'
     */
    @Test
    public void scheduleTest() {
        // TODO: test schedule
    }

    /**
     * Test the property 'deleteFiles'
     */
    @Test
    public void deleteFilesTest() {
        // TODO: test deleteFiles
    }

    /**
     * Test the property 'allowAnonymous'
     */
    @Test
    public void allowAnonymousTest() {
        // TODO: test allowAnonymous
    }

    /**
     * Test the property 'processingLevel'
     */
    @Test
    public void processingLevelTest() {
        // TODO: test processingLevel
    }

    /**
     * Test the property 'enablePreview'
     */
    @Test
    public void enablePreviewTest() {
        // TODO: test enablePreview
    }

    /**
     * Test the property 'filesPerSecond'
     */
    @Test
    public void filesPerSecondTest() {
        // TODO: test filesPerSecond
    }

    /**
     * Test the property 'specificJson'
     */
    @Test
    public void specificJsonTest() {
        // TODO: test specificJson
    }

    /**
     * Test the property 'sessionId'
     */
    @Test
    public void sessionIdTest() {
        // TODO: test sessionId
    }

    /**
     * Test the property 'maxItems'
     */
    @Test
    public void maxItemsTest() {
        // TODO: test maxItems
    }

    /**
     * Test the property 'maxBotItems'
     */
    @Test
    public void maxBotItemsTest() {
        // TODO: test maxBotItems
    }

    /**
     * Test the property 'customRender'
     */
    @Test
    public void customRenderTest() {
        // TODO: test customRender
    }

    /**
     * Test the property 'edgeDeviceId'
     */
    @Test
    public void edgeDeviceIdTest() {
        // TODO: test edgeDeviceId
    }

    /**
     * Test the property 'qaMatchStrength'
     */
    @Test
    public void qaMatchStrengthTest() {
        // TODO: test qaMatchStrength
    }

    /**
     * Test the property 'numResults'
     */
    @Test
    public void numResultsTest() {
        // TODO: test numResults
    }

    /**
     * Test the property 'numFragments'
     */
    @Test
    public void numFragmentsTest() {
        // TODO: test numFragments
    }

    /**
     * Test the property 'numErrors'
     */
    @Test
    public void numErrorsTest() {
        // TODO: test numErrors
    }

    /**
     * Test the property 'errorThreshold'
     */
    @Test
    public void errorThresholdTest() {
        // TODO: test errorThreshold
    }

    /**
     * Test the property 'startTime'
     */
    @Test
    public void startTimeTest() {
        // TODO: test startTime
    }

    /**
     * Test the property 'endTime'
     */
    @Test
    public void endTimeTest() {
        // TODO: test endTime
    }

    /**
     * Test the property 'acls'
     */
    @Test
    public void aclsTest() {
        // TODO: test acls
    }

    /**
     * Test the property 'isCrawling'
     */
    @Test
    public void isCrawlingTest() {
        // TODO: test isCrawling
    }

    /**
     * Test the property 'numCrawledDocuments'
     */
    @Test
    public void numCrawledDocumentsTest() {
        // TODO: test numCrawledDocuments
    }

    /**
     * Test the property 'numConvertedDocuments'
     */
    @Test
    public void numConvertedDocumentsTest() {
        // TODO: test numConvertedDocuments
    }

    /**
     * Test the property 'numParsedDocuments'
     */
    @Test
    public void numParsedDocumentsTest() {
        // TODO: test numParsedDocuments
    }

    /**
     * Test the property 'numIndexedDocuments'
     */
    @Test
    public void numIndexedDocumentsTest() {
        // TODO: test numIndexedDocuments
    }

    /**
     * Test the property 'numFinishedDocuments'
     */
    @Test
    public void numFinishedDocumentsTest() {
        // TODO: test numFinishedDocuments
    }

    /**
     * Test the property 'numTotalDocuments'
     */
    @Test
    public void numTotalDocumentsTest() {
        // TODO: test numTotalDocuments
    }

    /**
     * Test the property 'useDefaultRelationships'
     */
    @Test
    public void useDefaultRelationshipsTest() {
        // TODO: test useDefaultRelationships
    }

    /**
     * Test the property 'isBusy'
     */
    @Test
    public void isBusyTest() {
        // TODO: test isBusy
    }

    /**
     * Test the property 'autoOptimize'
     */
    @Test
    public void autoOptimizeTest() {
        // TODO: test autoOptimize
    }

    /**
     * Test the property 'storeBinary'
     */
    @Test
    public void storeBinaryTest() {
        // TODO: test storeBinary
    }

    /**
     * Test the property 'versioned'
     */
    @Test
    public void versionedTest() {
        // TODO: test versioned
    }

    /**
     * Test the property 'writeToCassandra'
     */
    @Test
    public void writeToCassandraTest() {
        // TODO: test writeToCassandra
    }

    /**
     * Test the property 'processorConfig'
     */
    @Test
    public void processorConfigTest() {
        // TODO: test processorConfig
    }

    /**
     * Test the property 'enableDocumentSimilarity'
     */
    @Test
    public void enableDocumentSimilarityTest() {
        // TODO: test enableDocumentSimilarity
    }

    /**
     * Test the property 'documentSimilarityThreshold'
     */
    @Test
    public void documentSimilarityThresholdTest() {
        // TODO: test documentSimilarityThreshold
    }

    /**
     * Test the property 'isExternal'
     */
    @Test
    public void isExternalTest() {
        // TODO: test isExternal
    }

    /**
     * Test the property 'useOCR'
     */
    @Test
    public void useOCRTest() {
        // TODO: test useOCR
    }

    /**
     * Test the property 'useSTT'
     */
    @Test
    public void useSTTTest() {
        // TODO: test useSTT
    }

    /**
     * Test the property 'external'
     */
    @Test
    public void externalTest() {
        // TODO: test external
    }

    /**
     * Test the property 'crawling'
     */
    @Test
    public void crawlingTest() {
        // TODO: test crawling
    }

    /**
     * Test the property 'busy'
     */
    @Test
    public void busyTest() {
        // TODO: test busy
    }

}
