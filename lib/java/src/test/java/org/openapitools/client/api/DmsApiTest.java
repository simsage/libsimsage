/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CMAddFolder;
import org.openapitools.client.model.CMAddSourceFolder;
import org.openapitools.client.model.CMClientQuery;
import org.openapitools.client.model.CMClientQueryResult;
import org.openapitools.client.model.CMDUserDashboard;
import org.openapitools.client.model.CMDocument;
import org.openapitools.client.model.CMDocumentAudit;
import org.openapitools.client.model.CMDocumentBookmark;
import org.openapitools.client.model.CMDocumentFolder;
import org.openapitools.client.model.CMDocumentHashTag;
import org.openapitools.client.model.CMDocumentLock;
import org.openapitools.client.model.CMDocumentNote;
import org.openapitools.client.model.CMDocumentSubscription;
import org.openapitools.client.model.CMSavedSearch;
import org.openapitools.client.model.CMSubscriptions;
import org.openapitools.client.model.CMUpdateACLs;
import org.openapitools.client.model.CMUserNotification;
import org.openapitools.client.model.DocumentBookmark;
import org.openapitools.client.model.DocumentDeleted;
import java.io.File;
import org.openapitools.client.model.JsonMessage;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DmsApi
 */
@Disabled
public class DmsApiTest {

    private final DmsApi api = new DmsApi();

    /**
     * Add a new folder
     *
     * Add a new folder to the SimSage DMS.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addFolderTest() throws ApiException {
        String sessionId = null;
        CMAddFolder cmAddFolder = null;
        String apIVersion = null;
        CMDocumentFolder response = api.addFolder(sessionId, cmAddFolder, apIVersion);
        // TODO: test validations
    }

    /**
     * Add a new source-folder
     *
     * Add a new top-level folder (source folder) to the SimSage DMS.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addSourceFolderTest() throws ApiException {
        String sessionId = null;
        CMAddSourceFolder cmAddSourceFolder = null;
        String apIVersion = null;
        CMDocumentFolder response = api.addSourceFolder(sessionId, cmAddSourceFolder, apIVersion);
        // TODO: test validations
    }

    /**
     * delete all Notes
     *
     * delete all notes associated with a document
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAllNotesTest() throws ApiException {
        String sessionId = null;
        String organisationId = null;
        String kbId = null;
        String url = null;
        String apIVersion = null;
        JsonMessage response = api.deleteAllNotes(sessionId, organisationId, kbId, url, apIVersion);
        // TODO: test validations
    }

    /**
     * Delete a Bookmark
     *
     * Delete a user&#39;s bookmark associated with a document
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBookmarkTest() throws ApiException {
        String sessionId = null;
        String organisationId = null;
        String kbId = null;
        String userId = null;
        String url = null;
        String apIVersion = null;
        List<CMDocumentBookmark> response = api.deleteBookmark(sessionId, organisationId, kbId, userId, url, apIVersion);
        // TODO: test validations
    }

    /**
     * Delete a document or a folder
     *
     * Mark a document/folder as deleted in the SimSage DMS.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDocumentOrFolderTest() throws ApiException {
        String sessionId = null;
        String organisationId = null;
        String kbId = null;
        Boolean isFolder = null;
        Integer sourceId = null;
        String url = null;
        String folderId = null;
        String apIVersion = null;
        CMDocumentFolder response = api.deleteDocumentOrFolder(sessionId, organisationId, kbId, isFolder, sourceId, url, folderId, apIVersion);
        // TODO: test validations
    }

    /**
     * Delete a Note
     *
     * Delete a note associated with a document
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNoteTest() throws ApiException {
        String sessionId = null;
        String organisationId = null;
        String kbId = null;
        String url = null;
        Integer noteId = null;
        String apIVersion = null;
        List<CMDocumentNote> response = api.deleteNote(sessionId, organisationId, kbId, url, noteId, apIVersion);
        // TODO: test validations
    }

    /**
     * Remove source-folder
     *
     * Remove an existing top-level folder (source folder) from the SimSage DMS.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSourceFolderTest() throws ApiException {
        String sessionId = null;
        String organisationId = null;
        String kbId = null;
        Integer sourceId = null;
        String apIVersion = null;
        CMDocumentFolder response = api.deleteSourceFolder(sessionId, organisationId, kbId, sourceId, apIVersion);
        // TODO: test validations
    }

    /**
     * Delete a Subscription
     *
     * Delete a user&#39;s subscription associated with a document, returns an updated subscription set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSubscriptionTest() throws ApiException {
        String sessionId = null;
        String organisationId = null;
        String kbId = null;
        String userId = null;
        String url = null;
        String apIVersion = null;
        CMSubscriptions response = api.deleteSubscription(sessionId, organisationId, kbId, userId, url, apIVersion);
        // TODO: test validations
    }

    /**
     * Delete a Saved Search
     *
     * Delete a user&#39;s saved search
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserSearchTest() throws ApiException {
        String sessionId = null;
        String organisationId = null;
        String kbId = null;
        String userId = null;
        String text = null;
        Integer top = null;
        String apIVersion = null;
        List<CMSavedSearch> response = api.deleteUserSearch(sessionId, organisationId, kbId, userId, text, top, apIVersion);
        // TODO: test validations
    }

    /**
     * Get Document
     *
     * Return a document&#39;s details by url-id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void document1Test() throws ApiException {
        String sessionId = null;
        String organisationId = null;
        String kbId = null;
        Integer urlId = null;
        CMDocument response = api.document1(sessionId, organisationId, kbId, urlId);
        // TODO: test validations
    }

    /**
     * Binary
     *
     * Get the original for a document if available by url (latest version)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentBinaryTest() throws ApiException {
        String sessionId = null;
        String organisationId = null;
        String kbId = null;
        String url = null;
        byte[] response = api.documentBinary(sessionId, organisationId, kbId, url);
        // TODO: test validations
    }

    /**
     * Get Binary Document
     *
     * Return a document&#39;s binary by url and version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentVersionTest() throws ApiException {
        String sessionId = null;
        String organisationId = null;
        String kbId = null;
        String url = null;
        Integer version = null;
        byte[] response = api.documentVersion(sessionId, organisationId, kbId, url, version);
        // TODO: test validations
    }

    /**
     * Filter Folders
     *
     * Filter a set of folders using Search
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void filterFoldersTest() throws ApiException {
        String sessionId = null;
        String organisationId = null;
        String kbId = null;
        String text = null;
        String apIVersion = null;
        CMDocumentFolder response = api.filterFolders(sessionId, organisationId, kbId, text, apIVersion);
        // TODO: test validations
    }

    /**
     * Force-release a lock
     *
     * A system administrator or manager can force-unlock a document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void forceReleaseLockTest() throws ApiException {
        String sessionId = null;
        String organisationId = null;
        String kbId = null;
        String userId = null;
        String url = null;
        String apIVersion = null;
        JsonMessage response = api.forceReleaseLock(sessionId, organisationId, kbId, userId, url, apIVersion);
        // TODO: test validations
    }

    /**
     * Get Bookmarks
     *
     * Return a list of bookmarks for a given user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBookmarkListTest() throws ApiException {
        String organisationId = null;
        String kbId = null;
        String userId = null;
        String sessionId = null;
        String apIVersion = null;
        List<CMDocumentBookmark> response = api.getBookmarkList(organisationId, kbId, userId, sessionId, apIVersion);
        // TODO: test validations
    }

    /**
     * Deleted records with optional filter
     *
     * Return a list of deleted document records for an administrator (all records) with an optional filter set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeletedDocumentsTest() throws ApiException {
        String sessionId = null;
        String organisationId = null;
        String kbId = null;
        String filter = null;
        String apIVersion = null;
        List<DocumentDeleted> response = api.getDeletedDocuments(sessionId, organisationId, kbId, filter, apIVersion);
        // TODO: test validations
    }

    /**
     * Audit records for a document for a month
     *
     * Return document audit records for a user (filtered) or administrator (all records) for a given document / month
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentAuditTest() throws ApiException {
        String sessionId = null;
        String organisationId = null;
        String kbId = null;
        Integer year = null;
        Integer month = null;
        String url = null;
        String apIVersion = null;
        List<CMDocumentAudit> response = api.getDocumentAudit(sessionId, organisationId, kbId, year, month, url, apIVersion);
        // TODO: test validations
    }

    /**
     * Get Folder Content
     *
     * Return a folder&#39;s content
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFolderTest() throws ApiException {
        String sessionId = null;
        String organisationId = null;
        String kbId = null;
        Integer sourceId = null;
        String folderId = null;
        String prevUrl = null;
        Integer pageSize = null;
        String apIVersion = null;
        CMDocumentFolder response = api.getFolder(sessionId, organisationId, kbId, sourceId, folderId, prevUrl, pageSize, apIVersion);
        // TODO: test validations
    }

    /**
     * Audit records for a month
     *
     * Return document audit records for a user (filtered) or administrator (all records) for a given month
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFullAuditTest() throws ApiException {
        String sessionId = null;
        String organisationId = null;
        String kbId = null;
        Integer year = null;
        Integer month = null;
        String apIVersion = null;
        List<CMDocumentAudit> response = api.getFullAudit(sessionId, organisationId, kbId, year, month, apIVersion);
        // TODO: test validations
    }

    /**
     * Get locked documents for user
     *
     * Return a list of locked documents for a given user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLockedListTest() throws ApiException {
        String organisationId = null;
        String kbId = null;
        String userId = null;
        String sessionId = null;
        String apIVersion = null;
        List<CMDocument> response = api.getLockedList(organisationId, kbId, userId, sessionId, apIVersion);
        // TODO: test validations
    }

    /**
     * Get Notes
     *
     * Return a list of notes for a given url
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNoteListTest() throws ApiException {
        String sessionId = null;
        String organisationId = null;
        String kbId = null;
        String url = null;
        String apIVersion = null;
        List<CMDocumentNote> response = api.getNoteList(sessionId, organisationId, kbId, url, apIVersion);
        // TODO: test validations
    }

    /**
     * User&#39;s saved searches
     *
     * Return a user&#39;s saved searches
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSavedSearchesTest() throws ApiException {
        String sessionId = null;
        String organisationId = null;
        String kbId = null;
        String userId = null;
        Integer top = null;
        String apIVersion = null;
        List<CMSavedSearch> response = api.getSavedSearches(sessionId, organisationId, kbId, userId, top, apIVersion);
        // TODO: test validations
    }

    /**
     * Get source-folder
     *
     * Return the content of a top-level folder (source folder).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSourceFolderTest() throws ApiException {
        String organisationId = null;
        String kbId = null;
        Integer sourceId = null;
        String sessionId = null;
        String apIVersion = null;
        CMDocumentFolder response = api.getSourceFolder(organisationId, kbId, sourceId, sessionId, apIVersion);
        // TODO: test validations
    }

    /**
     * Get Subscriptions
     *
     * Return a subscriptions object for a given user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubscriptionListTest() throws ApiException {
        String organisationId = null;
        String kbId = null;
        String userId = null;
        String sessionId = null;
        String apIVersion = null;
        CMSubscriptions response = api.getSubscriptionList(organisationId, kbId, userId, sessionId, apIVersion);
        // TODO: test validations
    }

    /**
     * User Dashboard
     *
     * Return a the user&#39;s DMS dashboard
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserDashboardTest() throws ApiException {
        String organisationId = null;
        String kbId = null;
        String sessionId = null;
        String apIVersion = null;
        CMDUserDashboard response = api.getUserDashboard(organisationId, kbId, sessionId, apIVersion);
        // TODO: test validations
    }

    /**
     * Get User Notifications
     *
     * Return all user notifications from the DMS for a given user by id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserNotificationsTest() throws ApiException {
        String sessionId = null;
        String organisationId = null;
        String kbId = null;
        Integer year = null;
        Integer month = null;
        String apIVersion = null;
        List<CMUserNotification> response = api.getUserNotifications(sessionId, organisationId, kbId, year, month, apIVersion);
        // TODO: test validations
    }

    /**
     * Document Lock
     *
     * Lock a document for a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lockDocumentTest() throws ApiException {
        String sessionId = null;
        CMDocumentLock cmDocumentLock = null;
        String apIVersion = null;
        List<CMDocument> response = api.lockDocument(sessionId, cmDocumentLock, apIVersion);
        // TODO: test validations
    }

    /**
     * Release a lock
     *
     * The originator of a lock releases a locked document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releaseLockTest() throws ApiException {
        String sessionId = null;
        String organisationId = null;
        String kbId = null;
        String userId = null;
        String url = null;
        String apIVersion = null;
        List<CMDocument> response = api.releaseLock(sessionId, organisationId, kbId, userId, url, apIVersion);
        // TODO: test validations
    }

    /**
     * DMS Client Query
     *
     * a SimSage DMS client asks a question or performs a keyword-search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restfulDMSClientQueryTest() throws ApiException {
        String sessionId = null;
        CMClientQuery cmClientQuery = null;
        CMClientQueryResult response = api.restfulDMSClientQuery(sessionId, cmClientQuery);
        // TODO: test validations
    }

    /**
     * Save Bookmark
     *
     * Save (create or update) a SimSage Document Bookmark.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveBookmarkTest() throws ApiException {
        String sessionId = null;
        CMDocumentBookmark cmDocumentBookmark = null;
        String apIVersion = null;
        List<DocumentBookmark> response = api.saveBookmark(sessionId, cmDocumentBookmark, apIVersion);
        // TODO: test validations
    }

    /**
     * Save HashTag set for a document
     *
     * Save (create / update / delete) a hashTag set for a document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveHashTagsTest() throws ApiException {
        String sessionId = null;
        CMDocumentHashTag cmDocumentHashTag = null;
        String apIVersion = null;
        JsonMessage response = api.saveHashTags(sessionId, cmDocumentHashTag, apIVersion);
        // TODO: test validations
    }

    /**
     * Save Note
     *
     * Save (create or update) a SimSage Document Note.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveNoteTest() throws ApiException {
        String sessionId = null;
        CMDocumentNote cmDocumentNote = null;
        String apIVersion = null;
        List<CMDocumentNote> response = api.saveNote(sessionId, cmDocumentNote, apIVersion);
        // TODO: test validations
    }

    /**
     * Save Search
     *
     * Save a user&#39;s search query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveSearchTest() throws ApiException {
        String sessionId = null;
        CMSavedSearch cmSavedSearch = null;
        String apIVersion = null;
        List<CMSavedSearch> response = api.saveSearch(sessionId, cmSavedSearch, apIVersion);
        // TODO: test validations
    }

    /**
     * Save Subscription
     *
     * Save (create or update) a SimSage Document subscription.  Returns a subscription object for this user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveSubscriptionTest() throws ApiException {
        String sessionId = null;
        CMDocumentSubscription cmDocumentSubscription = null;
        String apIVersion = null;
        CMSubscriptions response = api.saveSubscription(sessionId, cmDocumentSubscription, apIVersion);
        // TODO: test validations
    }

    /**
     * un-delete a record
     *
     * Un-delete a previously deleted document and return a list of deleted document records for an administrator (all records).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void undeleteDocumentTest() throws ApiException {
        String sessionId = null;
        String organisationId = null;
        String kbId = null;
        Integer sourceId = null;
        String url = null;
        String filter = null;
        String apIVersion = null;
        List<DocumentDeleted> response = api.undeleteDocument(sessionId, organisationId, kbId, sourceId, url, filter, apIVersion);
        // TODO: test validations
    }

    /**
     * Update an item&#39;s ACLs
     *
     * Update the Access Control List of a SimSage DMS item (source, file, or folder).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateACLsTest() throws ApiException {
        String sessionId = null;
        CMUpdateACLs cmUpdateACLs = null;
        String apIVersion = null;
        JsonMessage response = api.updateACLs(sessionId, cmUpdateACLs, apIVersion);
        // TODO: test validations
    }

    /**
     * Upload a Document
     *
     * Upload a document into a DMS folder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadDocumentTest() throws ApiException {
        String sessionId = null;
        String organisationId = null;
        String kbId = null;
        Integer sourceId = null;
        String folderId = null;
        String lastModified = null;
        File _file = null;
        CMDocumentFolder response = api.uploadDocument(sessionId, organisationId, kbId, sourceId, folderId, lastModified, _file);
        // TODO: test validations
    }

}
