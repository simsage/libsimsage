/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CMDocumentAcl;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * the ACLs for the object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-06T16:21:46.672184776Z[Europe/London]")
public class CMUpdateACLs {
  public static final String SERIALIZED_NAME_ORGANISATION_ID = "organisationId";
  @SerializedName(SERIALIZED_NAME_ORGANISATION_ID)
  private String organisationId;

  public static final String SERIALIZED_NAME_KB_ID = "kbId";
  @SerializedName(SERIALIZED_NAME_KB_ID)
  private String kbId;

  public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private Integer sourceId;

  public static final String SERIALIZED_NAME_PARENT_ID = "parentId";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private String parentId;

  public static final String SERIALIZED_NAME_OBJECT_ID = "objectId";
  @SerializedName(SERIALIZED_NAME_OBJECT_ID)
  private String objectId;

  public static final String SERIALIZED_NAME_ITEM_TYPE = "itemType";
  @SerializedName(SERIALIZED_NAME_ITEM_TYPE)
  private String itemType;

  public static final String SERIALIZED_NAME_ACLS = "acls";
  @SerializedName(SERIALIZED_NAME_ACLS)
  private List<CMDocumentAcl> acls = new ArrayList<>();

  public static final String SERIALIZED_NAME_APPLY_TO_CHILDREN = "applyToChildren";
  @SerializedName(SERIALIZED_NAME_APPLY_TO_CHILDREN)
  private Boolean applyToChildren;

  public CMUpdateACLs() {
  }

  public CMUpdateACLs organisationId(String organisationId) {
    
    this.organisationId = organisationId;
    return this;
  }

   /**
   * the main organisation (its guid id) for this source/crawler
   * @return organisationId
  **/
  @javax.annotation.Nonnull
  public String getOrganisationId() {
    return organisationId;
  }


  public void setOrganisationId(String organisationId) {
    this.organisationId = organisationId;
  }


  public CMUpdateACLs kbId(String kbId) {
    
    this.kbId = kbId;
    return this;
  }

   /**
   * the knowledge-base id of this context item, a guid-string
   * @return kbId
  **/
  @javax.annotation.Nonnull
  public String getKbId() {
    return kbId;
  }


  public void setKbId(String kbId) {
    this.kbId = kbId;
  }


  public CMUpdateACLs sourceId(Integer sourceId) {
    
    this.sourceId = sourceId;
    return this;
  }

   /**
   * the source-id of the owner of the url
   * @return sourceId
  **/
  @javax.annotation.Nonnull
  public Integer getSourceId() {
    return sourceId;
  }


  public void setSourceId(Integer sourceId) {
    this.sourceId = sourceId;
  }


  public CMUpdateACLs parentId(String parentId) {
    
    this.parentId = parentId;
    return this;
  }

   /**
   * the parent id of the update to update
   * @return parentId
  **/
  @javax.annotation.Nonnull
  public String getParentId() {
    return parentId;
  }


  public void setParentId(String parentId) {
    this.parentId = parentId;
  }


  public CMUpdateACLs objectId(String objectId) {
    
    this.objectId = objectId;
    return this;
  }

   /**
   * the id of the update to update
   * @return objectId
  **/
  @javax.annotation.Nonnull
  public String getObjectId() {
    return objectId;
  }


  public void setObjectId(String objectId) {
    this.objectId = objectId;
  }


  public CMUpdateACLs itemType(String itemType) {
    
    this.itemType = itemType;
    return this;
  }

   /**
   * the type of item to update, one of source, file or folder
   * @return itemType
  **/
  @javax.annotation.Nonnull
  public String getItemType() {
    return itemType;
  }


  public void setItemType(String itemType) {
    this.itemType = itemType;
  }


  public CMUpdateACLs acls(List<CMDocumentAcl> acls) {
    
    this.acls = acls;
    return this;
  }

  public CMUpdateACLs addAclsItem(CMDocumentAcl aclsItem) {
    if (this.acls == null) {
      this.acls = new ArrayList<>();
    }
    this.acls.add(aclsItem);
    return this;
  }

   /**
   * the initial ACLs for this source-folder.
   * @return acls
  **/
  @javax.annotation.Nonnull
  public List<CMDocumentAcl> getAcls() {
    return acls;
  }


  public void setAcls(List<CMDocumentAcl> acls) {
    this.acls = acls;
  }


  public CMUpdateACLs applyToChildren(Boolean applyToChildren) {
    
    this.applyToChildren = applyToChildren;
    return this;
  }

   /**
   * apply these ACLs to any children of this object?
   * @return applyToChildren
  **/
  @javax.annotation.Nonnull
  public Boolean getApplyToChildren() {
    return applyToChildren;
  }


  public void setApplyToChildren(Boolean applyToChildren) {
    this.applyToChildren = applyToChildren;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CMUpdateACLs cmUpdateACLs = (CMUpdateACLs) o;
    return Objects.equals(this.organisationId, cmUpdateACLs.organisationId) &&
        Objects.equals(this.kbId, cmUpdateACLs.kbId) &&
        Objects.equals(this.sourceId, cmUpdateACLs.sourceId) &&
        Objects.equals(this.parentId, cmUpdateACLs.parentId) &&
        Objects.equals(this.objectId, cmUpdateACLs.objectId) &&
        Objects.equals(this.itemType, cmUpdateACLs.itemType) &&
        Objects.equals(this.acls, cmUpdateACLs.acls) &&
        Objects.equals(this.applyToChildren, cmUpdateACLs.applyToChildren);
  }

  @Override
  public int hashCode() {
    return Objects.hash(organisationId, kbId, sourceId, parentId, objectId, itemType, acls, applyToChildren);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CMUpdateACLs {\n");
    sb.append("    organisationId: ").append(toIndentedString(organisationId)).append("\n");
    sb.append("    kbId: ").append(toIndentedString(kbId)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    objectId: ").append(toIndentedString(objectId)).append("\n");
    sb.append("    itemType: ").append(toIndentedString(itemType)).append("\n");
    sb.append("    acls: ").append(toIndentedString(acls)).append("\n");
    sb.append("    applyToChildren: ").append(toIndentedString(applyToChildren)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("organisationId");
    openapiFields.add("kbId");
    openapiFields.add("sourceId");
    openapiFields.add("parentId");
    openapiFields.add("objectId");
    openapiFields.add("itemType");
    openapiFields.add("acls");
    openapiFields.add("applyToChildren");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("organisationId");
    openapiRequiredFields.add("kbId");
    openapiRequiredFields.add("sourceId");
    openapiRequiredFields.add("parentId");
    openapiRequiredFields.add("objectId");
    openapiRequiredFields.add("itemType");
    openapiRequiredFields.add("acls");
    openapiRequiredFields.add("applyToChildren");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CMUpdateACLs
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CMUpdateACLs.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CMUpdateACLs is not found in the empty JSON string", CMUpdateACLs.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CMUpdateACLs.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CMUpdateACLs` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CMUpdateACLs.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("organisationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organisationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organisationId").toString()));
      }
      if (!jsonObj.get("kbId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kbId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kbId").toString()));
      }
      if (!jsonObj.get("parentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentId").toString()));
      }
      if (!jsonObj.get("objectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectId").toString()));
      }
      if (!jsonObj.get("itemType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemType").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("acls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `acls` to be an array in the JSON string but got `%s`", jsonObj.get("acls").toString()));
      }

      JsonArray jsonArrayacls = jsonObj.getAsJsonArray("acls");
      // validate the required field `acls` (array)
      for (int i = 0; i < jsonArrayacls.size(); i++) {
        CMDocumentAcl.validateJsonElement(jsonArrayacls.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CMUpdateACLs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CMUpdateACLs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CMUpdateACLs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CMUpdateACLs.class));

       return (TypeAdapter<T>) new TypeAdapter<CMUpdateACLs>() {
           @Override
           public void write(JsonWriter out, CMUpdateACLs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CMUpdateACLs read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CMUpdateACLs given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CMUpdateACLs
  * @throws IOException if the JSON string is invalid with respect to CMUpdateACLs
  */
  public static CMUpdateACLs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CMUpdateACLs.class);
  }

 /**
  * Convert an instance of CMUpdateACLs to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

