/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CMChangeTaskPhase;
import org.openapitools.client.model.CMClaimDocument;
import org.openapitools.client.model.CMCommentFilter;
import org.openapitools.client.model.CMCrawlerStatusTask;
import org.openapitools.client.model.CMCreatedProject;
import org.openapitools.client.model.CMDocumentsByToken;
import org.openapitools.client.model.CMNewComment;
import org.openapitools.client.model.CMNextDocument;
import org.openapitools.client.model.CMPagedProjectDocuments;
import org.openapitools.client.model.CMPagedQueueItems;
import org.openapitools.client.model.CMProjectDefinition;
import org.openapitools.client.model.CMProjectDefinitionTask;
import org.openapitools.client.model.CMProjectInfo;
import org.openapitools.client.model.CMProjectReview;
import org.openapitools.client.model.CMProjectSliceTask;
import org.openapitools.client.model.CMQueueFilter;
import org.openapitools.client.model.CMReassignSliceDocument;
import org.openapitools.client.model.CMRecordedComment;
import org.openapitools.client.model.CMRedactionDetails;
import org.openapitools.client.model.CMRemoveSliceDocument;
import org.openapitools.client.model.CMSearchResultSummary;
import org.openapitools.client.model.CMSearchResultSummaryTask;
import org.openapitools.client.model.CMSetSliceDefinitions;
import org.openapitools.client.model.CMSlicedDocumentListAndTotals;
import org.openapitools.client.model.CMSlicedDocumentRequest;
import org.openapitools.client.model.CMStartProject;
import org.openapitools.client.model.CMUpdateDocumentStatus;
import org.openapitools.client.model.CMUpdateRedactions;
import org.openapitools.client.model.JsonMessage;
import org.openapitools.client.model.LocatedRedaction;
import org.openapitools.client.model.ReturnedDocument;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataprojectApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataprojectApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataprojectApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addComment
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmNewComment  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Could not add comment. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Create Comment Status OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCommentCall(String sessionId, CMNewComment cmNewComment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmNewComment;

        // create path and map variables
        String localVarPath = "/api/dataproject/comment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCommentValidateBeforeCall(String sessionId, CMNewComment cmNewComment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling addComment(Async)");
        }

        // verify the required parameter 'cmNewComment' is set
        if (cmNewComment == null) {
            throw new ApiException("Missing the required parameter 'cmNewComment' when calling addComment(Async)");
        }

        return addCommentCall(sessionId, cmNewComment, _callback);

    }

    /**
     * Create Comment
     * Adds a comment with the given level and ids
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmNewComment  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Could not add comment. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Create Comment Status OK response </td><td>  -  </td></tr>
     </table>
     */
    public String addComment(String sessionId, CMNewComment cmNewComment) throws ApiException {
        ApiResponse<String> localVarResp = addCommentWithHttpInfo(sessionId, cmNewComment);
        return localVarResp.getData();
    }

    /**
     * Create Comment
     * Adds a comment with the given level and ids
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmNewComment  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Could not add comment. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Create Comment Status OK response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> addCommentWithHttpInfo(String sessionId, CMNewComment cmNewComment) throws ApiException {
        okhttp3.Call localVarCall = addCommentValidateBeforeCall(sessionId, cmNewComment, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Comment (asynchronously)
     * Adds a comment with the given level and ids
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmNewComment  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Could not add comment. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Create Comment Status OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCommentAsync(String sessionId, CMNewComment cmNewComment, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCommentValidateBeforeCall(sessionId, cmNewComment, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for allTasks
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmQueueFilter  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get running projects list. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> running project list response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allTasksCall(String sessionId, CMQueueFilter cmQueueFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmQueueFilter;

        // create path and map variables
        String localVarPath = "/api/dataproject/runningprojects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call allTasksValidateBeforeCall(String sessionId, CMQueueFilter cmQueueFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling allTasks(Async)");
        }

        // verify the required parameter 'cmQueueFilter' is set
        if (cmQueueFilter == null) {
            throw new ApiException("Missing the required parameter 'cmQueueFilter' when calling allTasks(Async)");
        }

        return allTasksCall(sessionId, cmQueueFilter, _callback);

    }

    /**
     * get Running Projects
     * Get the list of running projects
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmQueueFilter  (required)
     * @return CMPagedQueueItems
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get running projects list. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> running project list response </td><td>  -  </td></tr>
     </table>
     */
    public CMPagedQueueItems allTasks(String sessionId, CMQueueFilter cmQueueFilter) throws ApiException {
        ApiResponse<CMPagedQueueItems> localVarResp = allTasksWithHttpInfo(sessionId, cmQueueFilter);
        return localVarResp.getData();
    }

    /**
     * get Running Projects
     * Get the list of running projects
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmQueueFilter  (required)
     * @return ApiResponse&lt;CMPagedQueueItems&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get running projects list. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> running project list response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMPagedQueueItems> allTasksWithHttpInfo(String sessionId, CMQueueFilter cmQueueFilter) throws ApiException {
        okhttp3.Call localVarCall = allTasksValidateBeforeCall(sessionId, cmQueueFilter, null);
        Type localVarReturnType = new TypeToken<CMPagedQueueItems>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get Running Projects (asynchronously)
     * Get the list of running projects
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmQueueFilter  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get running projects list. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> running project list response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allTasksAsync(String sessionId, CMQueueFilter cmQueueFilter, final ApiCallback<CMPagedQueueItems> _callback) throws ApiException {

        okhttp3.Call localVarCall = allTasksValidateBeforeCall(sessionId, cmQueueFilter, _callback);
        Type localVarReturnType = new TypeToken<CMPagedQueueItems>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for changeTaskPhase
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmChangeTaskPhase  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> change task-phase OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not change task-phase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeTaskPhaseCall(String sessionId, CMChangeTaskPhase cmChangeTaskPhase, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmChangeTaskPhase;

        // create path and map variables
        String localVarPath = "/api/dataproject/changetaskphase";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeTaskPhaseValidateBeforeCall(String sessionId, CMChangeTaskPhase cmChangeTaskPhase, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling changeTaskPhase(Async)");
        }

        // verify the required parameter 'cmChangeTaskPhase' is set
        if (cmChangeTaskPhase == null) {
            throw new ApiException("Missing the required parameter 'cmChangeTaskPhase' when calling changeTaskPhase(Async)");
        }

        return changeTaskPhaseCall(sessionId, cmChangeTaskPhase, _callback);

    }

    /**
     * Change Task Phase
     * Notifies Workflow engine that a task changed it&#39;s status and passes results in
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmChangeTaskPhase  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> change task-phase OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not change task-phase. </td><td>  -  </td></tr>
     </table>
     */
    public String changeTaskPhase(String sessionId, CMChangeTaskPhase cmChangeTaskPhase) throws ApiException {
        ApiResponse<String> localVarResp = changeTaskPhaseWithHttpInfo(sessionId, cmChangeTaskPhase);
        return localVarResp.getData();
    }

    /**
     * Change Task Phase
     * Notifies Workflow engine that a task changed it&#39;s status and passes results in
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmChangeTaskPhase  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> change task-phase OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not change task-phase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> changeTaskPhaseWithHttpInfo(String sessionId, CMChangeTaskPhase cmChangeTaskPhase) throws ApiException {
        okhttp3.Call localVarCall = changeTaskPhaseValidateBeforeCall(sessionId, cmChangeTaskPhase, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Task Phase (asynchronously)
     * Notifies Workflow engine that a task changed it&#39;s status and passes results in
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmChangeTaskPhase  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> change task-phase OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not change task-phase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeTaskPhaseAsync(String sessionId, CMChangeTaskPhase cmChangeTaskPhase, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeTaskPhaseValidateBeforeCall(sessionId, cmChangeTaskPhase, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for claimDocument
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmClaimDocument  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not retrieve redacted document. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Wrapper containing the document binary </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call claimDocumentCall(String sessionId, CMClaimDocument cmClaimDocument, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmClaimDocument;

        // create path and map variables
        String localVarPath = "/api/dataproject/claimdocument";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call claimDocumentValidateBeforeCall(String sessionId, CMClaimDocument cmClaimDocument, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling claimDocument(Async)");
        }

        // verify the required parameter 'cmClaimDocument' is set
        if (cmClaimDocument == null) {
            throw new ApiException("Missing the required parameter 'cmClaimDocument' when calling claimDocument(Async)");
        }

        return claimDocumentCall(sessionId, cmClaimDocument, _callback);

    }

    /**
     * Claim sliced document
     * Claim sliced document for signed in user
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmClaimDocument  (required)
     * @return ReturnedDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not retrieve redacted document. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Wrapper containing the document binary </td><td>  -  </td></tr>
     </table>
     */
    public ReturnedDocument claimDocument(String sessionId, CMClaimDocument cmClaimDocument) throws ApiException {
        ApiResponse<ReturnedDocument> localVarResp = claimDocumentWithHttpInfo(sessionId, cmClaimDocument);
        return localVarResp.getData();
    }

    /**
     * Claim sliced document
     * Claim sliced document for signed in user
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmClaimDocument  (required)
     * @return ApiResponse&lt;ReturnedDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not retrieve redacted document. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Wrapper containing the document binary </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReturnedDocument> claimDocumentWithHttpInfo(String sessionId, CMClaimDocument cmClaimDocument) throws ApiException {
        okhttp3.Call localVarCall = claimDocumentValidateBeforeCall(sessionId, cmClaimDocument, null);
        Type localVarReturnType = new TypeToken<ReturnedDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Claim sliced document (asynchronously)
     * Claim sliced document for signed in user
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmClaimDocument  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not retrieve redacted document. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Wrapper containing the document binary </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call claimDocumentAsync(String sessionId, CMClaimDocument cmClaimDocument, final ApiCallback<ReturnedDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = claimDocumentValidateBeforeCall(sessionId, cmClaimDocument, _callback);
        Type localVarReturnType = new TypeToken<ReturnedDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crawlerStatus
     * @param organisationId the organisation (its guid id) (required)
     * @param taskId the id of the task (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> crawler-status response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get crawler-status. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crawlerStatusCall(String organisationId, String taskId, String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataproject/crawlerstatus/{organisationId}/{taskId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call crawlerStatusValidateBeforeCall(String organisationId, String taskId, String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling crawlerStatus(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling crawlerStatus(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling crawlerStatus(Async)");
        }

        return crawlerStatusCall(organisationId, taskId, sessionId, _callback);

    }

    /**
     * get Crawler Status
     * Get the crawler status for the given task id
     * @param organisationId the organisation (its guid id) (required)
     * @param taskId the id of the task (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return CMCrawlerStatusTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> crawler-status response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get crawler-status. </td><td>  -  </td></tr>
     </table>
     */
    public CMCrawlerStatusTask crawlerStatus(String organisationId, String taskId, String sessionId) throws ApiException {
        ApiResponse<CMCrawlerStatusTask> localVarResp = crawlerStatusWithHttpInfo(organisationId, taskId, sessionId);
        return localVarResp.getData();
    }

    /**
     * get Crawler Status
     * Get the crawler status for the given task id
     * @param organisationId the organisation (its guid id) (required)
     * @param taskId the id of the task (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return ApiResponse&lt;CMCrawlerStatusTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> crawler-status response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get crawler-status. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMCrawlerStatusTask> crawlerStatusWithHttpInfo(String organisationId, String taskId, String sessionId) throws ApiException {
        okhttp3.Call localVarCall = crawlerStatusValidateBeforeCall(organisationId, taskId, sessionId, null);
        Type localVarReturnType = new TypeToken<CMCrawlerStatusTask>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get Crawler Status (asynchronously)
     * Get the crawler status for the given task id
     * @param organisationId the organisation (its guid id) (required)
     * @param taskId the id of the task (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> crawler-status response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get crawler-status. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crawlerStatusAsync(String organisationId, String taskId, String sessionId, final ApiCallback<CMCrawlerStatusTask> _callback) throws ApiException {

        okhttp3.Call localVarCall = crawlerStatusValidateBeforeCall(organisationId, taskId, sessionId, _callback);
        Type localVarReturnType = new TypeToken<CMCrawlerStatusTask>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentsByTokens
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmDocumentsByToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns paged list of documents for the given set of query tokens </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not retrieve document list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentsByTokensCall(String sessionId, CMDocumentsByToken cmDocumentsByToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmDocumentsByToken;

        // create path and map variables
        String localVarPath = "/api/dataproject/documentsbytokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentsByTokensValidateBeforeCall(String sessionId, CMDocumentsByToken cmDocumentsByToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling documentsByTokens(Async)");
        }

        // verify the required parameter 'cmDocumentsByToken' is set
        if (cmDocumentsByToken == null) {
            throw new ApiException("Missing the required parameter 'cmDocumentsByToken' when calling documentsByTokens(Async)");
        }

        return documentsByTokensCall(sessionId, cmDocumentsByToken, _callback);

    }

    /**
     * Returns document list for tokens
     * Returns paged list of documents for the given set of query tokens
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmDocumentsByToken  (required)
     * @return CMPagedProjectDocuments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns paged list of documents for the given set of query tokens </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not retrieve document list. </td><td>  -  </td></tr>
     </table>
     */
    public CMPagedProjectDocuments documentsByTokens(String sessionId, CMDocumentsByToken cmDocumentsByToken) throws ApiException {
        ApiResponse<CMPagedProjectDocuments> localVarResp = documentsByTokensWithHttpInfo(sessionId, cmDocumentsByToken);
        return localVarResp.getData();
    }

    /**
     * Returns document list for tokens
     * Returns paged list of documents for the given set of query tokens
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmDocumentsByToken  (required)
     * @return ApiResponse&lt;CMPagedProjectDocuments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns paged list of documents for the given set of query tokens </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not retrieve document list. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMPagedProjectDocuments> documentsByTokensWithHttpInfo(String sessionId, CMDocumentsByToken cmDocumentsByToken) throws ApiException {
        okhttp3.Call localVarCall = documentsByTokensValidateBeforeCall(sessionId, cmDocumentsByToken, null);
        Type localVarReturnType = new TypeToken<CMPagedProjectDocuments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns document list for tokens (asynchronously)
     * Returns paged list of documents for the given set of query tokens
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmDocumentsByToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns paged list of documents for the given set of query tokens </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not retrieve document list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentsByTokensAsync(String sessionId, CMDocumentsByToken cmDocumentsByToken, final ApiCallback<CMPagedProjectDocuments> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentsByTokensValidateBeforeCall(sessionId, cmDocumentsByToken, _callback);
        Type localVarReturnType = new TypeToken<CMPagedProjectDocuments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filteredComments
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmCommentFilter  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Could not get comments. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Create Comment Status OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filteredCommentsCall(String sessionId, CMCommentFilter cmCommentFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmCommentFilter;

        // create path and map variables
        String localVarPath = "/api/dataproject/filteredcomments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filteredCommentsValidateBeforeCall(String sessionId, CMCommentFilter cmCommentFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling filteredComments(Async)");
        }

        // verify the required parameter 'cmCommentFilter' is set
        if (cmCommentFilter == null) {
            throw new ApiException("Missing the required parameter 'cmCommentFilter' when calling filteredComments(Async)");
        }

        return filteredCommentsCall(sessionId, cmCommentFilter, _callback);

    }

    /**
     * Retrieve Comments
     * Retrieves the list of comments for the passed in Filter
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmCommentFilter  (required)
     * @return List&lt;CMRecordedComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Could not get comments. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Create Comment Status OK response </td><td>  -  </td></tr>
     </table>
     */
    public List<CMRecordedComment> filteredComments(String sessionId, CMCommentFilter cmCommentFilter) throws ApiException {
        ApiResponse<List<CMRecordedComment>> localVarResp = filteredCommentsWithHttpInfo(sessionId, cmCommentFilter);
        return localVarResp.getData();
    }

    /**
     * Retrieve Comments
     * Retrieves the list of comments for the passed in Filter
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmCommentFilter  (required)
     * @return ApiResponse&lt;List&lt;CMRecordedComment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Could not get comments. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Create Comment Status OK response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CMRecordedComment>> filteredCommentsWithHttpInfo(String sessionId, CMCommentFilter cmCommentFilter) throws ApiException {
        okhttp3.Call localVarCall = filteredCommentsValidateBeforeCall(sessionId, cmCommentFilter, null);
        Type localVarReturnType = new TypeToken<List<CMRecordedComment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Comments (asynchronously)
     * Retrieves the list of comments for the passed in Filter
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmCommentFilter  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Could not get comments. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Create Comment Status OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filteredCommentsAsync(String sessionId, CMCommentFilter cmCommentFilter, final ApiCallback<List<CMRecordedComment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = filteredCommentsValidateBeforeCall(sessionId, cmCommentFilter, _callback);
        Type localVarReturnType = new TypeToken<List<CMRecordedComment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocumentRedactionInfo
     * @param organisationId the organisation (its guid id) (required)
     * @param sliceId the id of the slice (required)
     * @param documentKey the document key of the document to be redacted (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all identified potential Redaction locations for the document </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not retrieve redaction info. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentRedactionInfoCall(String organisationId, String sliceId, String documentKey, String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataproject/docredactioninfo/{organisationId}/{sliceId}/{documentKey}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "sliceId" + "}", localVarApiClient.escapeString(sliceId.toString()))
            .replace("{" + "documentKey" + "}", localVarApiClient.escapeString(documentKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentRedactionInfoValidateBeforeCall(String organisationId, String sliceId, String documentKey, String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getDocumentRedactionInfo(Async)");
        }

        // verify the required parameter 'sliceId' is set
        if (sliceId == null) {
            throw new ApiException("Missing the required parameter 'sliceId' when calling getDocumentRedactionInfo(Async)");
        }

        // verify the required parameter 'documentKey' is set
        if (documentKey == null) {
            throw new ApiException("Missing the required parameter 'documentKey' when calling getDocumentRedactionInfo(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getDocumentRedactionInfo(Async)");
        }

        return getDocumentRedactionInfoCall(organisationId, sliceId, documentKey, sessionId, _callback);

    }

    /**
     * Get Document Redaction info
     * Get list of all identified potential Redaction locations for the document
     * @param organisationId the organisation (its guid id) (required)
     * @param sliceId the id of the slice (required)
     * @param documentKey the document key of the document to be redacted (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return List&lt;LocatedRedaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all identified potential Redaction locations for the document </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not retrieve redaction info. </td><td>  -  </td></tr>
     </table>
     */
    public List<LocatedRedaction> getDocumentRedactionInfo(String organisationId, String sliceId, String documentKey, String sessionId) throws ApiException {
        ApiResponse<List<LocatedRedaction>> localVarResp = getDocumentRedactionInfoWithHttpInfo(organisationId, sliceId, documentKey, sessionId);
        return localVarResp.getData();
    }

    /**
     * Get Document Redaction info
     * Get list of all identified potential Redaction locations for the document
     * @param organisationId the organisation (its guid id) (required)
     * @param sliceId the id of the slice (required)
     * @param documentKey the document key of the document to be redacted (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return ApiResponse&lt;List&lt;LocatedRedaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all identified potential Redaction locations for the document </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not retrieve redaction info. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LocatedRedaction>> getDocumentRedactionInfoWithHttpInfo(String organisationId, String sliceId, String documentKey, String sessionId) throws ApiException {
        okhttp3.Call localVarCall = getDocumentRedactionInfoValidateBeforeCall(organisationId, sliceId, documentKey, sessionId, null);
        Type localVarReturnType = new TypeToken<List<LocatedRedaction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Document Redaction info (asynchronously)
     * Get list of all identified potential Redaction locations for the document
     * @param organisationId the organisation (its guid id) (required)
     * @param sliceId the id of the slice (required)
     * @param documentKey the document key of the document to be redacted (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all identified potential Redaction locations for the document </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not retrieve redaction info. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentRedactionInfoAsync(String organisationId, String sliceId, String documentKey, String sessionId, final ApiCallback<List<LocatedRedaction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentRedactionInfoValidateBeforeCall(organisationId, sliceId, documentKey, sessionId, _callback);
        Type localVarReturnType = new TypeToken<List<LocatedRedaction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectDefinition
     * @param organisationId the organisation (its guid id) (required)
     * @param taskId the id of the task (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get project definition. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> project definition response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectDefinitionCall(String organisationId, String taskId, String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataproject/projectdefinition/{organisationId}/{taskId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectDefinitionValidateBeforeCall(String organisationId, String taskId, String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getProjectDefinition(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getProjectDefinition(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getProjectDefinition(Async)");
        }

        return getProjectDefinitionCall(organisationId, taskId, sessionId, _callback);

    }

    /**
     * get Project Definition
     * Get the project definition of the project for the given task id
     * @param organisationId the organisation (its guid id) (required)
     * @param taskId the id of the task (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return CMProjectDefinitionTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get project definition. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> project definition response </td><td>  -  </td></tr>
     </table>
     */
    public CMProjectDefinitionTask getProjectDefinition(String organisationId, String taskId, String sessionId) throws ApiException {
        ApiResponse<CMProjectDefinitionTask> localVarResp = getProjectDefinitionWithHttpInfo(organisationId, taskId, sessionId);
        return localVarResp.getData();
    }

    /**
     * get Project Definition
     * Get the project definition of the project for the given task id
     * @param organisationId the organisation (its guid id) (required)
     * @param taskId the id of the task (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return ApiResponse&lt;CMProjectDefinitionTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get project definition. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> project definition response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMProjectDefinitionTask> getProjectDefinitionWithHttpInfo(String organisationId, String taskId, String sessionId) throws ApiException {
        okhttp3.Call localVarCall = getProjectDefinitionValidateBeforeCall(organisationId, taskId, sessionId, null);
        Type localVarReturnType = new TypeToken<CMProjectDefinitionTask>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get Project Definition (asynchronously)
     * Get the project definition of the project for the given task id
     * @param organisationId the organisation (its guid id) (required)
     * @param taskId the id of the task (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get project definition. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> project definition response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectDefinitionAsync(String organisationId, String taskId, String sessionId, final ApiCallback<CMProjectDefinitionTask> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectDefinitionValidateBeforeCall(organisationId, taskId, sessionId, _callback);
        Type localVarReturnType = new TypeToken<CMProjectDefinitionTask>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectReview
     * @param organisationId the organisation (its guid id) (required)
     * @param projectId the id of the task (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> project review response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get project review. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectReviewCall(String organisationId, String projectId, String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataproject/projectreview/{organisationId}/{projectId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectReviewValidateBeforeCall(String organisationId, String projectId, String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getProjectReview(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProjectReview(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getProjectReview(Async)");
        }

        return getProjectReviewCall(organisationId, projectId, sessionId, _callback);

    }

    /**
     * get Project Definition
     * Get the project review data of the project for the given project id
     * @param organisationId the organisation (its guid id) (required)
     * @param projectId the id of the task (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return CMProjectReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> project review response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get project review. </td><td>  -  </td></tr>
     </table>
     */
    public CMProjectReview getProjectReview(String organisationId, String projectId, String sessionId) throws ApiException {
        ApiResponse<CMProjectReview> localVarResp = getProjectReviewWithHttpInfo(organisationId, projectId, sessionId);
        return localVarResp.getData();
    }

    /**
     * get Project Definition
     * Get the project review data of the project for the given project id
     * @param organisationId the organisation (its guid id) (required)
     * @param projectId the id of the task (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return ApiResponse&lt;CMProjectReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> project review response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get project review. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMProjectReview> getProjectReviewWithHttpInfo(String organisationId, String projectId, String sessionId) throws ApiException {
        okhttp3.Call localVarCall = getProjectReviewValidateBeforeCall(organisationId, projectId, sessionId, null);
        Type localVarReturnType = new TypeToken<CMProjectReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get Project Definition (asynchronously)
     * Get the project review data of the project for the given project id
     * @param organisationId the organisation (its guid id) (required)
     * @param projectId the id of the task (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> project review response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get project review. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectReviewAsync(String organisationId, String projectId, String sessionId, final ApiCallback<CMProjectReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectReviewValidateBeforeCall(organisationId, projectId, sessionId, _callback);
        Type localVarReturnType = new TypeToken<CMProjectReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectSlice
     * @param organisationId the organisation (its guid id) (required)
     * @param taskId the id of the task (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project slice data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not retrieve project slice. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectSliceCall(String organisationId, String taskId, String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataproject/projectslice/{organisationId}/{taskId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectSliceValidateBeforeCall(String organisationId, String taskId, String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getProjectSlice(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getProjectSlice(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getProjectSlice(Async)");
        }

        return getProjectSliceCall(organisationId, taskId, sessionId, _callback);

    }

    /**
     * get project slice
     * Get the project project slice for the given task id
     * @param organisationId the organisation (its guid id) (required)
     * @param taskId the id of the task (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return List&lt;CMProjectSliceTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project slice data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not retrieve project slice. </td><td>  -  </td></tr>
     </table>
     */
    public List<CMProjectSliceTask> getProjectSlice(String organisationId, String taskId, String sessionId) throws ApiException {
        ApiResponse<List<CMProjectSliceTask>> localVarResp = getProjectSliceWithHttpInfo(organisationId, taskId, sessionId);
        return localVarResp.getData();
    }

    /**
     * get project slice
     * Get the project project slice for the given task id
     * @param organisationId the organisation (its guid id) (required)
     * @param taskId the id of the task (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return ApiResponse&lt;List&lt;CMProjectSliceTask&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project slice data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not retrieve project slice. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CMProjectSliceTask>> getProjectSliceWithHttpInfo(String organisationId, String taskId, String sessionId) throws ApiException {
        okhttp3.Call localVarCall = getProjectSliceValidateBeforeCall(organisationId, taskId, sessionId, null);
        Type localVarReturnType = new TypeToken<List<CMProjectSliceTask>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get project slice (asynchronously)
     * Get the project project slice for the given task id
     * @param organisationId the organisation (its guid id) (required)
     * @param taskId the id of the task (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project slice data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not retrieve project slice. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectSliceAsync(String organisationId, String taskId, String sessionId, final ApiCallback<List<CMProjectSliceTask>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectSliceValidateBeforeCall(organisationId, taskId, sessionId, _callback);
        Type localVarReturnType = new TypeToken<List<CMProjectSliceTask>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSearchResultSummary
     * @param organisationId the organisation (its guid id) (required)
     * @param taskId the id of the task (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get search result summary. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> search result summary response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSearchResultSummaryCall(String organisationId, String taskId, String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataproject/searchresult/{organisationId}/{taskId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSearchResultSummaryValidateBeforeCall(String organisationId, String taskId, String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getSearchResultSummary(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getSearchResultSummary(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getSearchResultSummary(Async)");
        }

        return getSearchResultSummaryCall(organisationId, taskId, sessionId, _callback);

    }

    /**
     * get Search Result Summary
     * Get the summary information for the search results of a given project by task id
     * @param organisationId the organisation (its guid id) (required)
     * @param taskId the id of the task (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return CMSearchResultSummaryTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get search result summary. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> search result summary response </td><td>  -  </td></tr>
     </table>
     */
    public CMSearchResultSummaryTask getSearchResultSummary(String organisationId, String taskId, String sessionId) throws ApiException {
        ApiResponse<CMSearchResultSummaryTask> localVarResp = getSearchResultSummaryWithHttpInfo(organisationId, taskId, sessionId);
        return localVarResp.getData();
    }

    /**
     * get Search Result Summary
     * Get the summary information for the search results of a given project by task id
     * @param organisationId the organisation (its guid id) (required)
     * @param taskId the id of the task (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return ApiResponse&lt;CMSearchResultSummaryTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get search result summary. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> search result summary response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMSearchResultSummaryTask> getSearchResultSummaryWithHttpInfo(String organisationId, String taskId, String sessionId) throws ApiException {
        okhttp3.Call localVarCall = getSearchResultSummaryValidateBeforeCall(organisationId, taskId, sessionId, null);
        Type localVarReturnType = new TypeToken<CMSearchResultSummaryTask>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get Search Result Summary (asynchronously)
     * Get the summary information for the search results of a given project by task id
     * @param organisationId the organisation (its guid id) (required)
     * @param taskId the id of the task (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get search result summary. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> search result summary response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSearchResultSummaryAsync(String organisationId, String taskId, String sessionId, final ApiCallback<CMSearchResultSummaryTask> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSearchResultSummaryValidateBeforeCall(organisationId, taskId, sessionId, _callback);
        Type localVarReturnType = new TypeToken<CMSearchResultSummaryTask>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSearchResultSummaryForReview
     * @param organisationId the organisation (its guid id) (required)
     * @param projectId the id of the task (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search result summary response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get search result summary. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSearchResultSummaryForReviewCall(String organisationId, String projectId, String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataproject/searchresultreview/{organisationId}/{projectId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSearchResultSummaryForReviewValidateBeforeCall(String organisationId, String projectId, String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getSearchResultSummaryForReview(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getSearchResultSummaryForReview(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getSearchResultSummaryForReview(Async)");
        }

        return getSearchResultSummaryForReviewCall(organisationId, projectId, sessionId, _callback);

    }

    /**
     * get Search Result Summary
     * Get the summary information for the search results of a given project by task id
     * @param organisationId the organisation (its guid id) (required)
     * @param projectId the id of the task (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return CMSearchResultSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search result summary response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get search result summary. </td><td>  -  </td></tr>
     </table>
     */
    public CMSearchResultSummary getSearchResultSummaryForReview(String organisationId, String projectId, String sessionId) throws ApiException {
        ApiResponse<CMSearchResultSummary> localVarResp = getSearchResultSummaryForReviewWithHttpInfo(organisationId, projectId, sessionId);
        return localVarResp.getData();
    }

    /**
     * get Search Result Summary
     * Get the summary information for the search results of a given project by task id
     * @param organisationId the organisation (its guid id) (required)
     * @param projectId the id of the task (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return ApiResponse&lt;CMSearchResultSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search result summary response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get search result summary. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMSearchResultSummary> getSearchResultSummaryForReviewWithHttpInfo(String organisationId, String projectId, String sessionId) throws ApiException {
        okhttp3.Call localVarCall = getSearchResultSummaryForReviewValidateBeforeCall(organisationId, projectId, sessionId, null);
        Type localVarReturnType = new TypeToken<CMSearchResultSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get Search Result Summary (asynchronously)
     * Get the summary information for the search results of a given project by task id
     * @param organisationId the organisation (its guid id) (required)
     * @param projectId the id of the task (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search result summary response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get search result summary. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSearchResultSummaryForReviewAsync(String organisationId, String projectId, String sessionId, final ApiCallback<CMSearchResultSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSearchResultSummaryForReviewValidateBeforeCall(organisationId, projectId, sessionId, _callback);
        Type localVarReturnType = new TypeToken<CMSearchResultSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nextDocument
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmNextDocument  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paged list of documents for the passed in slice and filters as well as totals </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not retrieve document list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nextDocumentCall(String sessionId, CMNextDocument cmNextDocument, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmNextDocument;

        // create path and map variables
        String localVarPath = "/api/dataproject/nextdocument";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nextDocumentValidateBeforeCall(String sessionId, CMNextDocument cmNextDocument, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling nextDocument(Async)");
        }

        // verify the required parameter 'cmNextDocument' is set
        if (cmNextDocument == null) {
            throw new ApiException("Missing the required parameter 'cmNextDocument' when calling nextDocument(Async)");
        }

        return nextDocumentCall(sessionId, cmNextDocument, _callback);

    }

    /**
     * Document list for given slice and filters
     * Returns paged list of documents for the passed in slice and filters as well as totals
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmNextDocument  (required)
     * @return CMSlicedDocumentListAndTotals
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paged list of documents for the passed in slice and filters as well as totals </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not retrieve document list. </td><td>  -  </td></tr>
     </table>
     */
    public CMSlicedDocumentListAndTotals nextDocument(String sessionId, CMNextDocument cmNextDocument) throws ApiException {
        ApiResponse<CMSlicedDocumentListAndTotals> localVarResp = nextDocumentWithHttpInfo(sessionId, cmNextDocument);
        return localVarResp.getData();
    }

    /**
     * Document list for given slice and filters
     * Returns paged list of documents for the passed in slice and filters as well as totals
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmNextDocument  (required)
     * @return ApiResponse&lt;CMSlicedDocumentListAndTotals&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paged list of documents for the passed in slice and filters as well as totals </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not retrieve document list. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMSlicedDocumentListAndTotals> nextDocumentWithHttpInfo(String sessionId, CMNextDocument cmNextDocument) throws ApiException {
        okhttp3.Call localVarCall = nextDocumentValidateBeforeCall(sessionId, cmNextDocument, null);
        Type localVarReturnType = new TypeToken<CMSlicedDocumentListAndTotals>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Document list for given slice and filters (asynchronously)
     * Returns paged list of documents for the passed in slice and filters as well as totals
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmNextDocument  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paged list of documents for the passed in slice and filters as well as totals </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not retrieve document list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nextDocumentAsync(String sessionId, CMNextDocument cmNextDocument, final ApiCallback<CMSlicedDocumentListAndTotals> _callback) throws ApiException {

        okhttp3.Call localVarCall = nextDocumentValidateBeforeCall(sessionId, cmNextDocument, _callback);
        Type localVarReturnType = new TypeToken<CMSlicedDocumentListAndTotals>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pdfBinary
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url a base64 encoded url (required)
     * @param sessionId a valid SimSage Session id. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pdfBinaryCall(String organisationId, String kbId, String url, String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataproject/pdf/latest/{organisationId}/{kbId}/{url}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "url" + "}", localVarApiClient.escapeString(url.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pdfBinaryValidateBeforeCall(String organisationId, String kbId, String url, String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling pdfBinary(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling pdfBinary(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling pdfBinary(Async)");
        }

        return pdfBinaryCall(organisationId, kbId, url, sessionId, _callback);

    }

    /**
     * Binary
     * Get the original for a document if available by url (latest version)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url a base64 encoded url (required)
     * @param sessionId a valid SimSage Session id. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object pdfBinary(String organisationId, String kbId, String url, String sessionId) throws ApiException {
        ApiResponse<Object> localVarResp = pdfBinaryWithHttpInfo(organisationId, kbId, url, sessionId);
        return localVarResp.getData();
    }

    /**
     * Binary
     * Get the original for a document if available by url (latest version)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url a base64 encoded url (required)
     * @param sessionId a valid SimSage Session id. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pdfBinaryWithHttpInfo(String organisationId, String kbId, String url, String sessionId) throws ApiException {
        okhttp3.Call localVarCall = pdfBinaryValidateBeforeCall(organisationId, kbId, url, sessionId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Binary (asynchronously)
     * Get the original for a document if available by url (latest version)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url a base64 encoded url (required)
     * @param sessionId a valid SimSage Session id. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pdfBinaryAsync(String organisationId, String kbId, String url, String sessionId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pdfBinaryValidateBeforeCall(organisationId, kbId, url, sessionId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectTypes
     * @param organisationId the organisation (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> project-type list response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get project-type list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTypesCall(String organisationId, String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataproject/projects/{organisationId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectTypesValidateBeforeCall(String organisationId, String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling projectTypes(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling projectTypes(Async)");
        }

        return projectTypesCall(organisationId, sessionId, _callback);

    }

    /**
     * get Project Types
     * Get the list of available project types
     * @param organisationId the organisation (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return List&lt;CMProjectInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> project-type list response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get project-type list. </td><td>  -  </td></tr>
     </table>
     */
    public List<CMProjectInfo> projectTypes(String organisationId, String sessionId) throws ApiException {
        ApiResponse<List<CMProjectInfo>> localVarResp = projectTypesWithHttpInfo(organisationId, sessionId);
        return localVarResp.getData();
    }

    /**
     * get Project Types
     * Get the list of available project types
     * @param organisationId the organisation (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return ApiResponse&lt;List&lt;CMProjectInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> project-type list response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get project-type list. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CMProjectInfo>> projectTypesWithHttpInfo(String organisationId, String sessionId) throws ApiException {
        okhttp3.Call localVarCall = projectTypesValidateBeforeCall(organisationId, sessionId, null);
        Type localVarReturnType = new TypeToken<List<CMProjectInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get Project Types (asynchronously)
     * Get the list of available project types
     * @param organisationId the organisation (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> project-type list response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get project-type list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTypesAsync(String organisationId, String sessionId, final ApiCallback<List<CMProjectInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectTypesValidateBeforeCall(organisationId, sessionId, _callback);
        Type localVarReturnType = new TypeToken<List<CMProjectInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reassignSliceDocument
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmReassignSliceDocument  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reassignSliceDocumentCall(String sessionId, CMReassignSliceDocument cmReassignSliceDocument, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmReassignSliceDocument;

        // create path and map variables
        String localVarPath = "/api/dataproject/reassignslicedoc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reassignSliceDocumentValidateBeforeCall(String sessionId, CMReassignSliceDocument cmReassignSliceDocument, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling reassignSliceDocument(Async)");
        }

        // verify the required parameter 'cmReassignSliceDocument' is set
        if (cmReassignSliceDocument == null) {
            throw new ApiException("Missing the required parameter 'cmReassignSliceDocument' when calling reassignSliceDocument(Async)");
        }

        return reassignSliceDocumentCall(sessionId, cmReassignSliceDocument, _callback);

    }

    /**
     * 
     * 
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmReassignSliceDocument  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object reassignSliceDocument(String sessionId, CMReassignSliceDocument cmReassignSliceDocument) throws ApiException {
        ApiResponse<Object> localVarResp = reassignSliceDocumentWithHttpInfo(sessionId, cmReassignSliceDocument);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmReassignSliceDocument  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> reassignSliceDocumentWithHttpInfo(String sessionId, CMReassignSliceDocument cmReassignSliceDocument) throws ApiException {
        okhttp3.Call localVarCall = reassignSliceDocumentValidateBeforeCall(sessionId, cmReassignSliceDocument, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmReassignSliceDocument  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reassignSliceDocumentAsync(String sessionId, CMReassignSliceDocument cmReassignSliceDocument, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = reassignSliceDocumentValidateBeforeCall(sessionId, cmReassignSliceDocument, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for redactedDocument
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmRedactionDetails  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not retrieve redacted document. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Wrapper containing the document binary </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call redactedDocumentCall(String sessionId, CMRedactionDetails cmRedactionDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmRedactionDetails;

        // create path and map variables
        String localVarPath = "/api/dataproject/redacteddocument";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call redactedDocumentValidateBeforeCall(String sessionId, CMRedactionDetails cmRedactionDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling redactedDocument(Async)");
        }

        // verify the required parameter 'cmRedactionDetails' is set
        if (cmRedactionDetails == null) {
            throw new ApiException("Missing the required parameter 'cmRedactionDetails' when calling redactedDocument(Async)");
        }

        return redactedDocumentCall(sessionId, cmRedactionDetails, _callback);

    }

    /**
     * Get Redacted Document
     * Retrieves the redacted document binary
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmRedactionDetails  (required)
     * @return ReturnedDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not retrieve redacted document. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Wrapper containing the document binary </td><td>  -  </td></tr>
     </table>
     */
    public ReturnedDocument redactedDocument(String sessionId, CMRedactionDetails cmRedactionDetails) throws ApiException {
        ApiResponse<ReturnedDocument> localVarResp = redactedDocumentWithHttpInfo(sessionId, cmRedactionDetails);
        return localVarResp.getData();
    }

    /**
     * Get Redacted Document
     * Retrieves the redacted document binary
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmRedactionDetails  (required)
     * @return ApiResponse&lt;ReturnedDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not retrieve redacted document. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Wrapper containing the document binary </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReturnedDocument> redactedDocumentWithHttpInfo(String sessionId, CMRedactionDetails cmRedactionDetails) throws ApiException {
        okhttp3.Call localVarCall = redactedDocumentValidateBeforeCall(sessionId, cmRedactionDetails, null);
        Type localVarReturnType = new TypeToken<ReturnedDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Redacted Document (asynchronously)
     * Retrieves the redacted document binary
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmRedactionDetails  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not retrieve redacted document. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Wrapper containing the document binary </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call redactedDocumentAsync(String sessionId, CMRedactionDetails cmRedactionDetails, final ApiCallback<ReturnedDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = redactedDocumentValidateBeforeCall(sessionId, cmRedactionDetails, _callback);
        Type localVarReturnType = new TypeToken<ReturnedDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeSliceDocument
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmRemoveSliceDocument  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeSliceDocumentCall(String sessionId, CMRemoveSliceDocument cmRemoveSliceDocument, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmRemoveSliceDocument;

        // create path and map variables
        String localVarPath = "/api/dataproject/removeslicedoc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSliceDocumentValidateBeforeCall(String sessionId, CMRemoveSliceDocument cmRemoveSliceDocument, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling removeSliceDocument(Async)");
        }

        // verify the required parameter 'cmRemoveSliceDocument' is set
        if (cmRemoveSliceDocument == null) {
            throw new ApiException("Missing the required parameter 'cmRemoveSliceDocument' when calling removeSliceDocument(Async)");
        }

        return removeSliceDocumentCall(sessionId, cmRemoveSliceDocument, _callback);

    }

    /**
     * 
     * 
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmRemoveSliceDocument  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object removeSliceDocument(String sessionId, CMRemoveSliceDocument cmRemoveSliceDocument) throws ApiException {
        ApiResponse<Object> localVarResp = removeSliceDocumentWithHttpInfo(sessionId, cmRemoveSliceDocument);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmRemoveSliceDocument  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> removeSliceDocumentWithHttpInfo(String sessionId, CMRemoveSliceDocument cmRemoveSliceDocument) throws ApiException {
        okhttp3.Call localVarCall = removeSliceDocumentValidateBeforeCall(sessionId, cmRemoveSliceDocument, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmRemoveSliceDocument  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeSliceDocumentAsync(String sessionId, CMRemoveSliceDocument cmRemoveSliceDocument, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSliceDocumentValidateBeforeCall(sessionId, cmRemoveSliceDocument, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetEvolve
     * @param organisationId a valid SimSage Organisation id. (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Exception during reset. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Evolve successfully reset </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetEvolveCall(String organisationId, String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataproject/reset/{organisationId}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (organisationId != null) {
            localVarHeaderParams.put("organisation-id", localVarApiClient.parameterToString(organisationId));
        }

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetEvolveValidateBeforeCall(String organisationId, String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling resetEvolve(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling resetEvolve(Async)");
        }

        return resetEvolveCall(organisationId, sessionId, _callback);

    }

    /**
     * Reset Evolve Application
     * Fully resets Evolve to an empty system
     * @param organisationId a valid SimSage Organisation id. (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Exception during reset. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Evolve successfully reset </td><td>  -  </td></tr>
     </table>
     */
    public String resetEvolve(String organisationId, String sessionId) throws ApiException {
        ApiResponse<String> localVarResp = resetEvolveWithHttpInfo(organisationId, sessionId);
        return localVarResp.getData();
    }

    /**
     * Reset Evolve Application
     * Fully resets Evolve to an empty system
     * @param organisationId a valid SimSage Organisation id. (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Exception during reset. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Evolve successfully reset </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> resetEvolveWithHttpInfo(String organisationId, String sessionId) throws ApiException {
        okhttp3.Call localVarCall = resetEvolveValidateBeforeCall(organisationId, sessionId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset Evolve Application (asynchronously)
     * Fully resets Evolve to an empty system
     * @param organisationId a valid SimSage Organisation id. (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Exception during reset. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Evolve successfully reset </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetEvolveAsync(String organisationId, String sessionId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetEvolveValidateBeforeCall(organisationId, sessionId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveProjectDefinition
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmProjectDefinition  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing the task and project ids to use to further refine the project details </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not save project-definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveProjectDefinitionCall(String sessionId, CMProjectDefinition cmProjectDefinition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmProjectDefinition;

        // create path and map variables
        String localVarPath = "/api/dataproject/saveprojectdefinition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveProjectDefinitionValidateBeforeCall(String sessionId, CMProjectDefinition cmProjectDefinition, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling saveProjectDefinition(Async)");
        }

        // verify the required parameter 'cmProjectDefinition' is set
        if (cmProjectDefinition == null) {
            throw new ApiException("Missing the required parameter 'cmProjectDefinition' when calling saveProjectDefinition(Async)");
        }

        return saveProjectDefinitionCall(sessionId, cmProjectDefinition, _callback);

    }

    /**
     * Inserts/Updates a project definition
     * Inserts/Updates the details for a project definition
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmProjectDefinition  (required)
     * @return CMCreatedProject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing the task and project ids to use to further refine the project details </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not save project-definition. </td><td>  -  </td></tr>
     </table>
     */
    public CMCreatedProject saveProjectDefinition(String sessionId, CMProjectDefinition cmProjectDefinition) throws ApiException {
        ApiResponse<CMCreatedProject> localVarResp = saveProjectDefinitionWithHttpInfo(sessionId, cmProjectDefinition);
        return localVarResp.getData();
    }

    /**
     * Inserts/Updates a project definition
     * Inserts/Updates the details for a project definition
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmProjectDefinition  (required)
     * @return ApiResponse&lt;CMCreatedProject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing the task and project ids to use to further refine the project details </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not save project-definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMCreatedProject> saveProjectDefinitionWithHttpInfo(String sessionId, CMProjectDefinition cmProjectDefinition) throws ApiException {
        okhttp3.Call localVarCall = saveProjectDefinitionValidateBeforeCall(sessionId, cmProjectDefinition, null);
        Type localVarReturnType = new TypeToken<CMCreatedProject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Inserts/Updates a project definition (asynchronously)
     * Inserts/Updates the details for a project definition
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmProjectDefinition  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing the task and project ids to use to further refine the project details </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not save project-definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveProjectDefinitionAsync(String sessionId, CMProjectDefinition cmProjectDefinition, final ApiCallback<CMCreatedProject> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveProjectDefinitionValidateBeforeCall(sessionId, cmProjectDefinition, _callback);
        Type localVarReturnType = new TypeToken<CMCreatedProject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setSliceConfig
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSetSliceDefinitions  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set Slice config OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Could not set Slice configuration. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setSliceConfigCall(String sessionId, CMSetSliceDefinitions cmSetSliceDefinitions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmSetSliceDefinitions;

        // create path and map variables
        String localVarPath = "/api/dataproject/setsliceconfig";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setSliceConfigValidateBeforeCall(String sessionId, CMSetSliceDefinitions cmSetSliceDefinitions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling setSliceConfig(Async)");
        }

        // verify the required parameter 'cmSetSliceDefinitions' is set
        if (cmSetSliceDefinitions == null) {
            throw new ApiException("Missing the required parameter 'cmSetSliceDefinitions' when calling setSliceConfig(Async)");
        }

        return setSliceConfigCall(sessionId, cmSetSliceDefinitions, _callback);

    }

    /**
     * Set Slice configuration
     * Saves/updates the slices configured for a running project
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSetSliceDefinitions  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set Slice config OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Could not set Slice configuration. </td><td>  -  </td></tr>
     </table>
     */
    public String setSliceConfig(String sessionId, CMSetSliceDefinitions cmSetSliceDefinitions) throws ApiException {
        ApiResponse<String> localVarResp = setSliceConfigWithHttpInfo(sessionId, cmSetSliceDefinitions);
        return localVarResp.getData();
    }

    /**
     * Set Slice configuration
     * Saves/updates the slices configured for a running project
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSetSliceDefinitions  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set Slice config OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Could not set Slice configuration. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> setSliceConfigWithHttpInfo(String sessionId, CMSetSliceDefinitions cmSetSliceDefinitions) throws ApiException {
        okhttp3.Call localVarCall = setSliceConfigValidateBeforeCall(sessionId, cmSetSliceDefinitions, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set Slice configuration (asynchronously)
     * Saves/updates the slices configured for a running project
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSetSliceDefinitions  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set Slice config OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Could not set Slice configuration. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setSliceConfigAsync(String sessionId, CMSetSliceDefinitions cmSetSliceDefinitions, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = setSliceConfigValidateBeforeCall(sessionId, cmSetSliceDefinitions, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slicedDocuments
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSlicedDocumentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paged list of documents for the passed in slice and filters as well as totals </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not retrieve document list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slicedDocumentsCall(String sessionId, CMSlicedDocumentRequest cmSlicedDocumentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmSlicedDocumentRequest;

        // create path and map variables
        String localVarPath = "/api/dataproject/sliceddocuments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slicedDocumentsValidateBeforeCall(String sessionId, CMSlicedDocumentRequest cmSlicedDocumentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling slicedDocuments(Async)");
        }

        // verify the required parameter 'cmSlicedDocumentRequest' is set
        if (cmSlicedDocumentRequest == null) {
            throw new ApiException("Missing the required parameter 'cmSlicedDocumentRequest' when calling slicedDocuments(Async)");
        }

        return slicedDocumentsCall(sessionId, cmSlicedDocumentRequest, _callback);

    }

    /**
     * Document list for given slice and filters
     * Returns paged list of documents for the passed in slice and filters as well as totals
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSlicedDocumentRequest  (required)
     * @return CMSlicedDocumentListAndTotals
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paged list of documents for the passed in slice and filters as well as totals </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not retrieve document list. </td><td>  -  </td></tr>
     </table>
     */
    public CMSlicedDocumentListAndTotals slicedDocuments(String sessionId, CMSlicedDocumentRequest cmSlicedDocumentRequest) throws ApiException {
        ApiResponse<CMSlicedDocumentListAndTotals> localVarResp = slicedDocumentsWithHttpInfo(sessionId, cmSlicedDocumentRequest);
        return localVarResp.getData();
    }

    /**
     * Document list for given slice and filters
     * Returns paged list of documents for the passed in slice and filters as well as totals
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSlicedDocumentRequest  (required)
     * @return ApiResponse&lt;CMSlicedDocumentListAndTotals&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paged list of documents for the passed in slice and filters as well as totals </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not retrieve document list. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMSlicedDocumentListAndTotals> slicedDocumentsWithHttpInfo(String sessionId, CMSlicedDocumentRequest cmSlicedDocumentRequest) throws ApiException {
        okhttp3.Call localVarCall = slicedDocumentsValidateBeforeCall(sessionId, cmSlicedDocumentRequest, null);
        Type localVarReturnType = new TypeToken<CMSlicedDocumentListAndTotals>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Document list for given slice and filters (asynchronously)
     * Returns paged list of documents for the passed in slice and filters as well as totals
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSlicedDocumentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paged list of documents for the passed in slice and filters as well as totals </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not retrieve document list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slicedDocumentsAsync(String sessionId, CMSlicedDocumentRequest cmSlicedDocumentRequest, final ApiCallback<CMSlicedDocumentListAndTotals> _callback) throws ApiException {

        okhttp3.Call localVarCall = slicedDocumentsValidateBeforeCall(sessionId, cmSlicedDocumentRequest, _callback);
        Type localVarReturnType = new TypeToken<CMSlicedDocumentListAndTotals>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startProject
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmStartProject  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startProjectCall(String sessionId, CMStartProject cmStartProject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmStartProject;

        // create path and map variables
        String localVarPath = "/api/dataproject/startproject";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startProjectValidateBeforeCall(String sessionId, CMStartProject cmStartProject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling startProject(Async)");
        }

        // verify the required parameter 'cmStartProject' is set
        if (cmStartProject == null) {
            throw new ApiException("Missing the required parameter 'cmStartProject' when calling startProject(Async)");
        }

        return startProjectCall(sessionId, cmStartProject, _callback);

    }

    /**
     * 
     * 
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmStartProject  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object startProject(String sessionId, CMStartProject cmStartProject) throws ApiException {
        ApiResponse<Object> localVarResp = startProjectWithHttpInfo(sessionId, cmStartProject);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmStartProject  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> startProjectWithHttpInfo(String sessionId, CMStartProject cmStartProject) throws ApiException {
        okhttp3.Call localVarCall = startProjectValidateBeforeCall(sessionId, cmStartProject, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmStartProject  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startProjectAsync(String sessionId, CMStartProject cmStartProject, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = startProjectValidateBeforeCall(sessionId, cmStartProject, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDocumentStatus
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmUpdateDocumentStatus  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Could not update document status. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Update Document Status OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDocumentStatusCall(String sessionId, CMUpdateDocumentStatus cmUpdateDocumentStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmUpdateDocumentStatus;

        // create path and map variables
        String localVarPath = "/api/dataproject/updatedocstatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDocumentStatusValidateBeforeCall(String sessionId, CMUpdateDocumentStatus cmUpdateDocumentStatus, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling updateDocumentStatus(Async)");
        }

        // verify the required parameter 'cmUpdateDocumentStatus' is set
        if (cmUpdateDocumentStatus == null) {
            throw new ApiException("Missing the required parameter 'cmUpdateDocumentStatus' when calling updateDocumentStatus(Async)");
        }

        return updateDocumentStatusCall(sessionId, cmUpdateDocumentStatus, _callback);

    }

    /**
     * Update document status
     * Updates the status applied to a slice document
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmUpdateDocumentStatus  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Could not update document status. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Update Document Status OK response </td><td>  -  </td></tr>
     </table>
     */
    public String updateDocumentStatus(String sessionId, CMUpdateDocumentStatus cmUpdateDocumentStatus) throws ApiException {
        ApiResponse<String> localVarResp = updateDocumentStatusWithHttpInfo(sessionId, cmUpdateDocumentStatus);
        return localVarResp.getData();
    }

    /**
     * Update document status
     * Updates the status applied to a slice document
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmUpdateDocumentStatus  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Could not update document status. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Update Document Status OK response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> updateDocumentStatusWithHttpInfo(String sessionId, CMUpdateDocumentStatus cmUpdateDocumentStatus) throws ApiException {
        okhttp3.Call localVarCall = updateDocumentStatusValidateBeforeCall(sessionId, cmUpdateDocumentStatus, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update document status (asynchronously)
     * Updates the status applied to a slice document
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmUpdateDocumentStatus  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Could not update document status. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Update Document Status OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDocumentStatusAsync(String sessionId, CMUpdateDocumentStatus cmUpdateDocumentStatus, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDocumentStatusValidateBeforeCall(sessionId, cmUpdateDocumentStatus, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRedactions
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmUpdateRedactions  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not update redactionst. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Update Redactions OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRedactionsCall(String sessionId, CMUpdateRedactions cmUpdateRedactions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmUpdateRedactions;

        // create path and map variables
        String localVarPath = "/api/dataproject/updateredactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRedactionsValidateBeforeCall(String sessionId, CMUpdateRedactions cmUpdateRedactions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling updateRedactions(Async)");
        }

        // verify the required parameter 'cmUpdateRedactions' is set
        if (cmUpdateRedactions == null) {
            throw new ApiException("Missing the required parameter 'cmUpdateRedactions' when calling updateRedactions(Async)");
        }

        return updateRedactionsCall(sessionId, cmUpdateRedactions, _callback);

    }

    /**
     * Update document redactions
     * Updates the redactions applied to a document
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmUpdateRedactions  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not update redactionst. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Update Redactions OK response </td><td>  -  </td></tr>
     </table>
     */
    public String updateRedactions(String sessionId, CMUpdateRedactions cmUpdateRedactions) throws ApiException {
        ApiResponse<String> localVarResp = updateRedactionsWithHttpInfo(sessionId, cmUpdateRedactions);
        return localVarResp.getData();
    }

    /**
     * Update document redactions
     * Updates the redactions applied to a document
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmUpdateRedactions  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not update redactionst. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Update Redactions OK response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> updateRedactionsWithHttpInfo(String sessionId, CMUpdateRedactions cmUpdateRedactions) throws ApiException {
        okhttp3.Call localVarCall = updateRedactionsValidateBeforeCall(sessionId, cmUpdateRedactions, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update document redactions (asynchronously)
     * Updates the redactions applied to a document
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmUpdateRedactions  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not update redactionst. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Update Redactions OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRedactionsAsync(String sessionId, CMUpdateRedactions cmUpdateRedactions, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRedactionsValidateBeforeCall(sessionId, cmUpdateRedactions, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
