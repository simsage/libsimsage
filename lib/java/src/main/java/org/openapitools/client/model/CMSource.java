/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.14.12
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CMDocumentAcl;
import org.openapitools.client.model.CMSourceError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A SimSage source object used for updating and creating SimSage crawlers/connections to external silos like Sharepoint, OneDrive, Exchange, DropBox, Box, iManage, and others.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-14T16:13:48.547313222+01:00[Europe/London]")
public class CMSource {
  public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private Integer sourceId;

  public static final String SERIALIZED_NAME_ORGANISATION_ID = "organisationId";
  @SerializedName(SERIALIZED_NAME_ORGANISATION_ID)
  private String organisationId;

  public static final String SERIALIZED_NAME_KB_ID = "kbId";
  @SerializedName(SERIALIZED_NAME_KB_ID)
  private String kbId;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Float weight;

  public static final String SERIALIZED_NAME_NODE_ID = "nodeId";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private Integer nodeId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CRAWLER_TYPE = "crawlerType";
  @SerializedName(SERIALIZED_NAME_CRAWLER_TYPE)
  private String crawlerType;

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private String schedule;

  public static final String SERIALIZED_NAME_DELETE_FILES = "deleteFiles";
  @SerializedName(SERIALIZED_NAME_DELETE_FILES)
  private Boolean deleteFiles;

  public static final String SERIALIZED_NAME_ALLOW_ANONYMOUS = "allowAnonymous";
  @SerializedName(SERIALIZED_NAME_ALLOW_ANONYMOUS)
  private Boolean allowAnonymous;

  public static final String SERIALIZED_NAME_PROCESSING_LEVEL = "processingLevel";
  @SerializedName(SERIALIZED_NAME_PROCESSING_LEVEL)
  private String processingLevel;

  public static final String SERIALIZED_NAME_ENABLE_PREVIEW = "enablePreview";
  @SerializedName(SERIALIZED_NAME_ENABLE_PREVIEW)
  private Boolean enablePreview;

  public static final String SERIALIZED_NAME_FILES_PER_SECOND = "filesPerSecond";
  @SerializedName(SERIALIZED_NAME_FILES_PER_SECOND)
  private Float filesPerSecond;

  public static final String SERIALIZED_NAME_SPECIFIC_JSON = "specificJson";
  @SerializedName(SERIALIZED_NAME_SPECIFIC_JSON)
  private String specificJson;

  public static final String SERIALIZED_NAME_SESSION_ID = "sessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public static final String SERIALIZED_NAME_MAX_ITEMS = "maxItems";
  @SerializedName(SERIALIZED_NAME_MAX_ITEMS)
  private Long maxItems;

  public static final String SERIALIZED_NAME_MAX_BOT_ITEMS = "maxBotItems";
  @SerializedName(SERIALIZED_NAME_MAX_BOT_ITEMS)
  private Long maxBotItems;

  public static final String SERIALIZED_NAME_CUSTOM_RENDER = "customRender";
  @SerializedName(SERIALIZED_NAME_CUSTOM_RENDER)
  private Boolean customRender;

  public static final String SERIALIZED_NAME_EDGE_DEVICE_ID = "edgeDeviceId";
  @SerializedName(SERIALIZED_NAME_EDGE_DEVICE_ID)
  private String edgeDeviceId;

  public static final String SERIALIZED_NAME_NUM_RESULTS = "numResults";
  @SerializedName(SERIALIZED_NAME_NUM_RESULTS)
  private Integer numResults;

  public static final String SERIALIZED_NAME_NUM_FRAGMENTS = "numFragments";
  @SerializedName(SERIALIZED_NAME_NUM_FRAGMENTS)
  private Integer numFragments;

  public static final String SERIALIZED_NAME_NUM_ERRORS = "numErrors";
  @SerializedName(SERIALIZED_NAME_NUM_ERRORS)
  private Integer numErrors;

  public static final String SERIALIZED_NAME_ERROR_THRESHOLD = "errorThreshold";
  @SerializedName(SERIALIZED_NAME_ERROR_THRESHOLD)
  private Integer errorThreshold;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private Long startTime;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private Long endTime;

  public static final String SERIALIZED_NAME_ACLS = "acls";
  @SerializedName(SERIALIZED_NAME_ACLS)
  private List<CMDocumentAcl> acls = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_CRAWLING = "isCrawling";
  @SerializedName(SERIALIZED_NAME_IS_CRAWLING)
  private Boolean isCrawling;

  public static final String SERIALIZED_NAME_NUM_CRAWLED_DOCUMENTS = "numCrawledDocuments";
  @SerializedName(SERIALIZED_NAME_NUM_CRAWLED_DOCUMENTS)
  private Integer numCrawledDocuments;

  public static final String SERIALIZED_NAME_NUM_CONVERTED_DOCUMENTS = "numConvertedDocuments";
  @SerializedName(SERIALIZED_NAME_NUM_CONVERTED_DOCUMENTS)
  private Integer numConvertedDocuments;

  public static final String SERIALIZED_NAME_NUM_PARSED_DOCUMENTS = "numParsedDocuments";
  @SerializedName(SERIALIZED_NAME_NUM_PARSED_DOCUMENTS)
  private Integer numParsedDocuments;

  public static final String SERIALIZED_NAME_NUM_INDEXED_DOCUMENTS = "numIndexedDocuments";
  @SerializedName(SERIALIZED_NAME_NUM_INDEXED_DOCUMENTS)
  private Integer numIndexedDocuments;

  public static final String SERIALIZED_NAME_NUM_FINISHED_DOCUMENTS = "numFinishedDocuments";
  @SerializedName(SERIALIZED_NAME_NUM_FINISHED_DOCUMENTS)
  private Integer numFinishedDocuments;

  public static final String SERIALIZED_NAME_NUM_ERRORED_DOCUMENTS = "numErroredDocuments";
  @SerializedName(SERIALIZED_NAME_NUM_ERRORED_DOCUMENTS)
  private Integer numErroredDocuments;

  public static final String SERIALIZED_NAME_NUM_TOTAL_DOCUMENTS = "numTotalDocuments";
  @SerializedName(SERIALIZED_NAME_NUM_TOTAL_DOCUMENTS)
  private Integer numTotalDocuments;

  public static final String SERIALIZED_NAME_NUM_TOTAL_ERRORED_DOCUMENTS = "numTotalErroredDocuments";
  @SerializedName(SERIALIZED_NAME_NUM_TOTAL_ERRORED_DOCUMENTS)
  private Integer numTotalErroredDocuments;

  public static final String SERIALIZED_NAME_USE_DEFAULT_RELATIONSHIPS = "useDefaultRelationships";
  @SerializedName(SERIALIZED_NAME_USE_DEFAULT_RELATIONSHIPS)
  private Boolean useDefaultRelationships;

  public static final String SERIALIZED_NAME_IS_BUSY = "isBusy";
  @SerializedName(SERIALIZED_NAME_IS_BUSY)
  private Boolean isBusy;

  public static final String SERIALIZED_NAME_STORE_BINARY = "storeBinary";
  @SerializedName(SERIALIZED_NAME_STORE_BINARY)
  private Boolean storeBinary;

  public static final String SERIALIZED_NAME_VERSIONED = "versioned";
  @SerializedName(SERIALIZED_NAME_VERSIONED)
  private Boolean versioned;

  public static final String SERIALIZED_NAME_WRITE_TO_CASSANDRA = "writeToCassandra";
  @SerializedName(SERIALIZED_NAME_WRITE_TO_CASSANDRA)
  private Boolean writeToCassandra;

  public static final String SERIALIZED_NAME_PROCESSOR_CONFIG = "processorConfig";
  @SerializedName(SERIALIZED_NAME_PROCESSOR_CONFIG)
  private String processorConfig;

  public static final String SERIALIZED_NAME_ENABLE_DOCUMENT_SIMILARITY = "enableDocumentSimilarity";
  @SerializedName(SERIALIZED_NAME_ENABLE_DOCUMENT_SIMILARITY)
  private Boolean enableDocumentSimilarity;

  public static final String SERIALIZED_NAME_DOCUMENT_SIMILARITY_THRESHOLD = "documentSimilarityThreshold";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_SIMILARITY_THRESHOLD)
  private Float documentSimilarityThreshold;

  public static final String SERIALIZED_NAME_IS_EXTERNAL = "isExternal";
  @SerializedName(SERIALIZED_NAME_IS_EXTERNAL)
  private Boolean isExternal;

  public static final String SERIALIZED_NAME_USE_O_C_R = "useOCR";
  @SerializedName(SERIALIZED_NAME_USE_O_C_R)
  private Boolean useOCR;

  public static final String SERIALIZED_NAME_USE_S_T_T = "useSTT";
  @SerializedName(SERIALIZED_NAME_USE_S_T_T)
  private Boolean useSTT;

  public static final String SERIALIZED_NAME_DELTA_INDICATOR = "deltaIndicator";
  @SerializedName(SERIALIZED_NAME_DELTA_INDICATOR)
  private String deltaIndicator;

  public static final String SERIALIZED_NAME_TRANSMIT_EXTERNAL_LOGS = "transmitExternalLogs";
  @SerializedName(SERIALIZED_NAME_TRANSMIT_EXTERNAL_LOGS)
  private Boolean transmitExternalLogs;

  public static final String SERIALIZED_NAME_SOURCE_ERROR = "sourceError";
  @SerializedName(SERIALIZED_NAME_SOURCE_ERROR)
  private CMSourceError sourceError;

  public static final String SERIALIZED_NAME_EXTERNAL = "external";
  @SerializedName(SERIALIZED_NAME_EXTERNAL)
  private Boolean external;

  public static final String SERIALIZED_NAME_CRAWLING = "crawling";
  @SerializedName(SERIALIZED_NAME_CRAWLING)
  private Boolean crawling;

  public static final String SERIALIZED_NAME_BUSY = "busy";
  @SerializedName(SERIALIZED_NAME_BUSY)
  private Boolean busy;

  public CMSource() {
  }

  public CMSource sourceId(Integer sourceId) {
    
    this.sourceId = sourceId;
    return this;
  }

   /**
   * the source-id, primary key of the source
   * @return sourceId
  **/
  @javax.annotation.Nonnull
  public Integer getSourceId() {
    return sourceId;
  }


  public void setSourceId(Integer sourceId) {
    this.sourceId = sourceId;
  }


  public CMSource organisationId(String organisationId) {
    
    this.organisationId = organisationId;
    return this;
  }

   /**
   * the main organisation (its guid id) for this source/crawler
   * @return organisationId
  **/
  @javax.annotation.Nonnull
  public String getOrganisationId() {
    return organisationId;
  }


  public void setOrganisationId(String organisationId) {
    this.organisationId = organisationId;
  }


  public CMSource kbId(String kbId) {
    
    this.kbId = kbId;
    return this;
  }

   /**
   * the knowledge-base id (its guid id) for this source/crawler
   * @return kbId
  **/
  @javax.annotation.Nonnull
  public String getKbId() {
    return kbId;
  }


  public void setKbId(String kbId) {
    this.kbId = kbId;
  }


  public CMSource weight(Float weight) {
    
    this.weight = weight;
    return this;
  }

   /**
   * the importance of this source relative to others &lt;0.0,1.0]
   * @return weight
  **/
  @javax.annotation.Nonnull
  public Float getWeight() {
    return weight;
  }


  public void setWeight(Float weight) {
    this.weight = weight;
  }


  public CMSource nodeId(Integer nodeId) {
    
    this.nodeId = nodeId;
    return this;
  }

   /**
   * the system&#39;s node id of this source (what kubernetes-node to run on, starting with zero, set NODE_ID in env to manipulate this value).  Sources will only run on machines with a matching node-id
   * @return nodeId
  **/
  @javax.annotation.Nonnull
  public Integer getNodeId() {
    return nodeId;
  }


  public void setNodeId(Integer nodeId) {
    this.nodeId = nodeId;
  }


  public CMSource name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * the display-name (descriptive name) of this source.  The source&#39;s name must be unique within a knowledge-base.
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CMSource crawlerType(String crawlerType) {
    
    this.crawlerType = crawlerType;
    return this;
  }

   /**
   * the type of this source
   * @return crawlerType
  **/
  @javax.annotation.Nonnull
  public String getCrawlerType() {
    return crawlerType;
  }


  public void setCrawlerType(String crawlerType) {
    this.crawlerType = crawlerType;
  }


  public CMSource schedule(String schedule) {
    
    this.schedule = schedule;
    return this;
  }

   /**
   * the time-schedule of this crawler, when active and when not repeating in a weekly-per hour cycle in GMT time.  Empty string means not active at all
   * @return schedule
  **/
  @javax.annotation.Nonnull
  public String getSchedule() {
    return schedule;
  }


  public void setSchedule(String schedule) {
    this.schedule = schedule;
  }


  public CMSource deleteFiles(Boolean deleteFiles) {
    
    this.deleteFiles = deleteFiles;
    return this;
  }

   /**
   * Should this crawler remove files that are no longer visible after a crawl completes without errors?  Used for sources that cannot report on file/data removal.
   * @return deleteFiles
  **/
  @javax.annotation.Nonnull
  public Boolean getDeleteFiles() {
    return deleteFiles;
  }


  public void setDeleteFiles(Boolean deleteFiles) {
    this.deleteFiles = deleteFiles;
  }


  public CMSource allowAnonymous(Boolean allowAnonymous) {
    
    this.allowAnonymous = allowAnonymous;
    return this;
  }

   /**
   * Is the content of this crawler accessible anonymously (ie. no permissions/ACLs required).  Some crawlers like the web crawler always have this value as true.  NB.  Setting this flag to \&quot;true\&quot; will bypass any security on the source&#39;s own ACLs and make all its content available to everyone.
   * @return allowAnonymous
  **/
  @javax.annotation.Nonnull
  public Boolean getAllowAnonymous() {
    return allowAnonymous;
  }


  public void setAllowAnonymous(Boolean allowAnonymous) {
    this.allowAnonymous = allowAnonymous;
  }


  public CMSource processingLevel(String processingLevel) {
    
    this.processingLevel = processingLevel;
    return this;
  }

   /**
   * How much processing should SimSage give each file of this source.  As defined internally in ProcessingLevel.  level 1, CONVERT: convert all document binaries to text (creates metadata text).  level 2, PARSE: NLP process the files (creates sentences and tokens for all text).  level 3, INDEX: create inverted indexes for files (creates indexes).
   * @return processingLevel
  **/
  @javax.annotation.Nonnull
  public String getProcessingLevel() {
    return processingLevel;
  }


  public void setProcessingLevel(String processingLevel) {
    this.processingLevel = processingLevel;
  }


  public CMSource enablePreview(Boolean enablePreview) {
    
    this.enablePreview = enablePreview;
    return this;
  }

   /**
   * Generate per-document image-preview information as well as full HTML previews if set to \&quot;true\&quot;.
   * @return enablePreview
  **/
  @javax.annotation.Nonnull
  public Boolean getEnablePreview() {
    return enablePreview;
  }


  public void setEnablePreview(Boolean enablePreview) {
    this.enablePreview = enablePreview;
  }


  public CMSource filesPerSecond(Float filesPerSecond) {
    
    this.filesPerSecond = filesPerSecond;
    return this;
  }

   /**
   * Any value greater than 0 will cause the crawler to sleep for as many milliseconds between file uploads.
   * @return filesPerSecond
  **/
  @javax.annotation.Nonnull
  public Float getFilesPerSecond() {
    return filesPerSecond;
  }


  public void setFilesPerSecond(Float filesPerSecond) {
    this.filesPerSecond = filesPerSecond;
  }


  public CMSource specificJson(String specificJson) {
    
    this.specificJson = specificJson;
    return this;
  }

   /**
   * A json string with specific values for this type of source.  Generated by the SimSage administrative system.
   * @return specificJson
  **/
  @javax.annotation.Nonnull
  public String getSpecificJson() {
    return specificJson;
  }


  public void setSpecificJson(String specificJson) {
    this.specificJson = specificJson;
  }


  public CMSource sessionId(String sessionId) {
    
    this.sessionId = sessionId;
    return this;
  }

   /**
   * a valid session-guid id.
   * @return sessionId
  **/
  @javax.annotation.Nonnull
  public String getSessionId() {
    return sessionId;
  }


  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }


  public CMSource maxItems(Long maxItems) {
    
    this.maxItems = maxItems;
    return this;
  }

   /**
   * Set a content limit for the maximum number of items to contain for this source.  A value of zero (0) indicates no limits.
   * @return maxItems
  **/
  @javax.annotation.Nonnull
  public Long getMaxItems() {
    return maxItems;
  }


  public void setMaxItems(Long maxItems) {
    this.maxItems = maxItems;
  }


  public CMSource maxBotItems(Long maxBotItems) {
    
    this.maxBotItems = maxBotItems;
    return this;
  }

   /**
   * Set a Question and Answer content limit for the maximum number of deep-learning Q&amp;A items this source can contain.  A value of zero (0) indicates no limits.
   * @return maxBotItems
  **/
  @javax.annotation.Nonnull
  public Long getMaxBotItems() {
    return maxBotItems;
  }


  public void setMaxBotItems(Long maxBotItems) {
    this.maxBotItems = maxBotItems;
  }


  public CMSource customRender(Boolean customRender) {
    
    this.customRender = customRender;
    return this;
  }

   /**
   * Does this source require custom render templates or use ordinary search-results?
   * @return customRender
  **/
  @javax.annotation.Nonnull
  public Boolean getCustomRender() {
    return customRender;
  }


  public void setCustomRender(Boolean customRender) {
    this.customRender = customRender;
  }


  public CMSource edgeDeviceId(String edgeDeviceId) {
    
    this.edgeDeviceId = edgeDeviceId;
    return this;
  }

   /**
   * The associated Edge device for this source (or empty string if not associated with one)
   * @return edgeDeviceId
  **/
  @javax.annotation.Nonnull
  public String getEdgeDeviceId() {
    return edgeDeviceId;
  }


  public void setEdgeDeviceId(String edgeDeviceId) {
    this.edgeDeviceId = edgeDeviceId;
  }


  public CMSource numResults(Integer numResults) {
    
    this.numResults = numResults;
    return this;
  }

   /**
   * the default number of search results to return from the semantic-search system
   * @return numResults
  **/
  @javax.annotation.Nonnull
  public Integer getNumResults() {
    return numResults;
  }


  public void setNumResults(Integer numResults) {
    this.numResults = numResults;
  }


  public CMSource numFragments(Integer numFragments) {
    
    this.numFragments = numFragments;
    return this;
  }

   /**
   * the number of fragments to return per search-result from the semantic-search system.  Affects accuracy, a value of \&quot;1\&quot; will only look at the first match.  Higher values look for more matches inside a single document.  Too high a value will affect performance.  Default value \&quot;3\&quot;.
   * @return numFragments
  **/
  @javax.annotation.Nonnull
  public Integer getNumFragments() {
    return numFragments;
  }


  public void setNumFragments(Integer numFragments) {
    this.numFragments = numFragments;
  }


  public CMSource numErrors(Integer numErrors) {
    
    this.numErrors = numErrors;
    return this;
  }

   /**
   * the number of errors from the last source-run
   * @return numErrors
  **/
  @javax.annotation.Nonnull
  public Integer getNumErrors() {
    return numErrors;
  }


  public void setNumErrors(Integer numErrors) {
    this.numErrors = numErrors;
  }


  public CMSource errorThreshold(Integer errorThreshold) {
    
    this.errorThreshold = errorThreshold;
    return this;
  }

   /**
   * the number of errors allowed before failing the source and not force-removing any files at the end of a run through an external source.
   * @return errorThreshold
  **/
  @javax.annotation.Nonnull
  public Integer getErrorThreshold() {
    return errorThreshold;
  }


  public void setErrorThreshold(Integer errorThreshold) {
    this.errorThreshold = errorThreshold;
  }


  public CMSource startTime(Long startTime) {
    
    this.startTime = startTime;
    return this;
  }

   /**
   * when the last run of this source started
   * @return startTime
  **/
  @javax.annotation.Nonnull
  public Long getStartTime() {
    return startTime;
  }


  public void setStartTime(Long startTime) {
    this.startTime = startTime;
  }


  public CMSource endTime(Long endTime) {
    
    this.endTime = endTime;
    return this;
  }

   /**
   * when the last run of this source finished
   * @return endTime
  **/
  @javax.annotation.Nonnull
  public Long getEndTime() {
    return endTime;
  }


  public void setEndTime(Long endTime) {
    this.endTime = endTime;
  }


  public CMSource acls(List<CMDocumentAcl> acls) {
    
    this.acls = acls;
    return this;
  }

  public CMSource addAclsItem(CMDocumentAcl aclsItem) {
    if (this.acls == null) {
      this.acls = new ArrayList<>();
    }
    this.acls.add(aclsItem);
    return this;
  }

   /**
   * A list for overwriting security permission for a source.  Can be empty.  Use this to override security on external systems.
   * @return acls
  **/
  @javax.annotation.Nonnull
  public List<CMDocumentAcl> getAcls() {
    return acls;
  }


  public void setAcls(List<CMDocumentAcl> acls) {
    this.acls = acls;
  }


  public CMSource isCrawling(Boolean isCrawling) {
    
    this.isCrawling = isCrawling;
    return this;
  }

   /**
   * \&quot;true\&quot; if this source busy/active.
   * @return isCrawling
  **/
  @javax.annotation.Nonnull
  public Boolean getIsCrawling() {
    return isCrawling;
  }


  public void setIsCrawling(Boolean isCrawling) {
    this.isCrawling = isCrawling;
  }


  public CMSource numCrawledDocuments(Integer numCrawledDocuments) {
    
    this.numCrawledDocuments = numCrawledDocuments;
    return this;
  }

   /**
   * the number of documents seen by the crawler thus-far.
   * @return numCrawledDocuments
  **/
  @javax.annotation.Nonnull
  public Integer getNumCrawledDocuments() {
    return numCrawledDocuments;
  }


  public void setNumCrawledDocuments(Integer numCrawledDocuments) {
    this.numCrawledDocuments = numCrawledDocuments;
  }


  public CMSource numConvertedDocuments(Integer numConvertedDocuments) {
    
    this.numConvertedDocuments = numConvertedDocuments;
    return this;
  }

   /**
   * the number of documents converted by SimSage thus-far.
   * @return numConvertedDocuments
  **/
  @javax.annotation.Nonnull
  public Integer getNumConvertedDocuments() {
    return numConvertedDocuments;
  }


  public void setNumConvertedDocuments(Integer numConvertedDocuments) {
    this.numConvertedDocuments = numConvertedDocuments;
  }


  public CMSource numParsedDocuments(Integer numParsedDocuments) {
    
    this.numParsedDocuments = numParsedDocuments;
    return this;
  }

   /**
   * the number of documents parsed by SimSage thus-far.
   * @return numParsedDocuments
  **/
  @javax.annotation.Nonnull
  public Integer getNumParsedDocuments() {
    return numParsedDocuments;
  }


  public void setNumParsedDocuments(Integer numParsedDocuments) {
    this.numParsedDocuments = numParsedDocuments;
  }


  public CMSource numIndexedDocuments(Integer numIndexedDocuments) {
    
    this.numIndexedDocuments = numIndexedDocuments;
    return this;
  }

   /**
   * the number of documents indexed by SimSage thus-far.
   * @return numIndexedDocuments
  **/
  @javax.annotation.Nonnull
  public Integer getNumIndexedDocuments() {
    return numIndexedDocuments;
  }


  public void setNumIndexedDocuments(Integer numIndexedDocuments) {
    this.numIndexedDocuments = numIndexedDocuments;
  }


  public CMSource numFinishedDocuments(Integer numFinishedDocuments) {
    
    this.numFinishedDocuments = numFinishedDocuments;
    return this;
  }

   /**
   * the number of finished (fully processed) by SimSage thus-far.
   * @return numFinishedDocuments
  **/
  @javax.annotation.Nonnull
  public Integer getNumFinishedDocuments() {
    return numFinishedDocuments;
  }


  public void setNumFinishedDocuments(Integer numFinishedDocuments) {
    this.numFinishedDocuments = numFinishedDocuments;
  }


  public CMSource numErroredDocuments(Integer numErroredDocuments) {
    
    this.numErroredDocuments = numErroredDocuments;
    return this;
  }

   /**
   * the number of errored documents by SimSage thus-far.
   * @return numErroredDocuments
  **/
  @javax.annotation.Nonnull
  public Integer getNumErroredDocuments() {
    return numErroredDocuments;
  }


  public void setNumErroredDocuments(Integer numErroredDocuments) {
    this.numErroredDocuments = numErroredDocuments;
  }


  public CMSource numTotalDocuments(Integer numTotalDocuments) {
    
    this.numTotalDocuments = numTotalDocuments;
    return this;
  }

   /**
   * the total number of documents for this source in SimSage.
   * @return numTotalDocuments
  **/
  @javax.annotation.Nonnull
  public Integer getNumTotalDocuments() {
    return numTotalDocuments;
  }


  public void setNumTotalDocuments(Integer numTotalDocuments) {
    this.numTotalDocuments = numTotalDocuments;
  }


  public CMSource numTotalErroredDocuments(Integer numTotalErroredDocuments) {
    
    this.numTotalErroredDocuments = numTotalErroredDocuments;
    return this;
  }

   /**
   * the total number of documents for this source marked as errored in SimSage.
   * @return numTotalErroredDocuments
  **/
  @javax.annotation.Nonnull
  public Integer getNumTotalErroredDocuments() {
    return numTotalErroredDocuments;
  }


  public void setNumTotalErroredDocuments(Integer numTotalErroredDocuments) {
    this.numTotalErroredDocuments = numTotalErroredDocuments;
  }


  public CMSource useDefaultRelationships(Boolean useDefaultRelationships) {
    
    this.useDefaultRelationships = useDefaultRelationships;
    return this;
  }

   /**
   * \&quot;true\&quot; if this source is to use the default (built-in) SimSage relationships.  All user-defined relationships and language-entities will be used regardless of the value of this flag.
   * @return useDefaultRelationships
  **/
  @javax.annotation.Nonnull
  public Boolean getUseDefaultRelationships() {
    return useDefaultRelationships;
  }


  public void setUseDefaultRelationships(Boolean useDefaultRelationships) {
    this.useDefaultRelationships = useDefaultRelationships;
  }


  public CMSource isBusy(Boolean isBusy) {
    
    this.isBusy = isBusy;
    return this;
  }

   /**
   * \&quot;true\&quot; if this source is currently being optimized / processed by the index-optimizer.
   * @return isBusy
  **/
  @javax.annotation.Nonnull
  public Boolean getIsBusy() {
    return isBusy;
  }


  public void setIsBusy(Boolean isBusy) {
    this.isBusy = isBusy;
  }


  public CMSource storeBinary(Boolean storeBinary) {
    
    this.storeBinary = storeBinary;
    return this;
  }

   /**
   * \&quot;true\&quot; if this source is to store all documents locally on the SimSage platform
   * @return storeBinary
  **/
  @javax.annotation.Nonnull
  public Boolean getStoreBinary() {
    return storeBinary;
  }


  public void setStoreBinary(Boolean storeBinary) {
    this.storeBinary = storeBinary;
  }


  public CMSource versioned(Boolean versioned) {
    
    this.versioned = versioned;
    return this;
  }

   /**
   * \&quot;true\&quot; if this source is to store all versions of documents locally on the SimSage platform
   * @return versioned
  **/
  @javax.annotation.Nonnull
  public Boolean getVersioned() {
    return versioned;
  }


  public void setVersioned(Boolean versioned) {
    this.versioned = versioned;
  }


  public CMSource writeToCassandra(Boolean writeToCassandra) {
    
    this.writeToCassandra = writeToCassandra;
    return this;
  }

   /**
   * \&quot;true\&quot; if this source is to write any changes direct to Cassandra, otherwise this source will collect indexes on disk first (for initial loading)
   * @return writeToCassandra
  **/
  @javax.annotation.Nonnull
  public Boolean getWriteToCassandra() {
    return writeToCassandra;
  }


  public void setWriteToCassandra(Boolean writeToCassandra) {
    this.writeToCassandra = writeToCassandra;
  }


  public CMSource processorConfig(String processorConfig) {
    
    this.processorConfig = processorConfig;
    return this;
  }

   /**
   * Json string defining any optional processors configured on the source
   * @return processorConfig
  **/
  @javax.annotation.Nonnull
  public String getProcessorConfig() {
    return processorConfig;
  }


  public void setProcessorConfig(String processorConfig) {
    this.processorConfig = processorConfig;
  }


  public CMSource enableDocumentSimilarity(Boolean enableDocumentSimilarity) {
    
    this.enableDocumentSimilarity = enableDocumentSimilarity;
    return this;
  }

   /**
   * enable document similarity calculations.
   * @return enableDocumentSimilarity
  **/
  @javax.annotation.Nonnull
  public Boolean getEnableDocumentSimilarity() {
    return enableDocumentSimilarity;
  }


  public void setEnableDocumentSimilarity(Boolean enableDocumentSimilarity) {
    this.enableDocumentSimilarity = enableDocumentSimilarity;
  }


  public CMSource documentSimilarityThreshold(Float documentSimilarityThreshold) {
    
    this.documentSimilarityThreshold = documentSimilarityThreshold;
    return this;
  }

   /**
   * the document similarity threshold for grouping documents, a value between 0.75 and 1.0
   * @return documentSimilarityThreshold
  **/
  @javax.annotation.Nonnull
  public Float getDocumentSimilarityThreshold() {
    return documentSimilarityThreshold;
  }


  public void setDocumentSimilarityThreshold(Float documentSimilarityThreshold) {
    this.documentSimilarityThreshold = documentSimilarityThreshold;
  }


  public CMSource isExternal(Boolean isExternal) {
    
    this.isExternal = isExternal;
    return this;
  }

   /**
   * is this crawler to be connected as an external source using our external crawler software?
   * @return isExternal
  **/
  @javax.annotation.Nonnull
  public Boolean getIsExternal() {
    return isExternal;
  }


  public void setIsExternal(Boolean isExternal) {
    this.isExternal = isExternal;
  }


  public CMSource useOCR(Boolean useOCR) {
    
    this.useOCR = useOCR;
    return this;
  }

   /**
   * enable OCR processing for files in this source?
   * @return useOCR
  **/
  @javax.annotation.Nonnull
  public Boolean getUseOCR() {
    return useOCR;
  }


  public void setUseOCR(Boolean useOCR) {
    this.useOCR = useOCR;
  }


  public CMSource useSTT(Boolean useSTT) {
    
    this.useSTT = useSTT;
    return this;
  }

   /**
   * enable Speech-to-text processing for files in this source?
   * @return useSTT
  **/
  @javax.annotation.Nonnull
  public Boolean getUseSTT() {
    return useSTT;
  }


  public void setUseSTT(Boolean useSTT) {
    this.useSTT = useSTT;
  }


  public CMSource deltaIndicator(String deltaIndicator) {
    
    this.deltaIndicator = deltaIndicator;
    return this;
  }

   /**
   * A saved value indicating last crawler state
   * @return deltaIndicator
  **/
  @javax.annotation.Nonnull
  public String getDeltaIndicator() {
    return deltaIndicator;
  }


  public void setDeltaIndicator(String deltaIndicator) {
    this.deltaIndicator = deltaIndicator;
  }


  public CMSource transmitExternalLogs(Boolean transmitExternalLogs) {
    
    this.transmitExternalLogs = transmitExternalLogs;
    return this;
  }

   /**
   * enabling sending of logs to SimSage for external crawlers
   * @return transmitExternalLogs
  **/
  @javax.annotation.Nonnull
  public Boolean getTransmitExternalLogs() {
    return transmitExternalLogs;
  }


  public void setTransmitExternalLogs(Boolean transmitExternalLogs) {
    this.transmitExternalLogs = transmitExternalLogs;
  }


  public CMSource sourceError(CMSourceError sourceError) {
    
    this.sourceError = sourceError;
    return this;
  }

   /**
   * Get sourceError
   * @return sourceError
  **/
  @javax.annotation.Nonnull
  public CMSourceError getSourceError() {
    return sourceError;
  }


  public void setSourceError(CMSourceError sourceError) {
    this.sourceError = sourceError;
  }


  public CMSource external(Boolean external) {
    
    this.external = external;
    return this;
  }

   /**
   * Get external
   * @return external
  **/
  @javax.annotation.Nullable
  public Boolean getExternal() {
    return external;
  }


  public void setExternal(Boolean external) {
    this.external = external;
  }


  public CMSource crawling(Boolean crawling) {
    
    this.crawling = crawling;
    return this;
  }

   /**
   * Get crawling
   * @return crawling
  **/
  @javax.annotation.Nullable
  public Boolean getCrawling() {
    return crawling;
  }


  public void setCrawling(Boolean crawling) {
    this.crawling = crawling;
  }


  public CMSource busy(Boolean busy) {
    
    this.busy = busy;
    return this;
  }

   /**
   * Get busy
   * @return busy
  **/
  @javax.annotation.Nullable
  public Boolean getBusy() {
    return busy;
  }


  public void setBusy(Boolean busy) {
    this.busy = busy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CMSource cmSource = (CMSource) o;
    return Objects.equals(this.sourceId, cmSource.sourceId) &&
        Objects.equals(this.organisationId, cmSource.organisationId) &&
        Objects.equals(this.kbId, cmSource.kbId) &&
        Objects.equals(this.weight, cmSource.weight) &&
        Objects.equals(this.nodeId, cmSource.nodeId) &&
        Objects.equals(this.name, cmSource.name) &&
        Objects.equals(this.crawlerType, cmSource.crawlerType) &&
        Objects.equals(this.schedule, cmSource.schedule) &&
        Objects.equals(this.deleteFiles, cmSource.deleteFiles) &&
        Objects.equals(this.allowAnonymous, cmSource.allowAnonymous) &&
        Objects.equals(this.processingLevel, cmSource.processingLevel) &&
        Objects.equals(this.enablePreview, cmSource.enablePreview) &&
        Objects.equals(this.filesPerSecond, cmSource.filesPerSecond) &&
        Objects.equals(this.specificJson, cmSource.specificJson) &&
        Objects.equals(this.sessionId, cmSource.sessionId) &&
        Objects.equals(this.maxItems, cmSource.maxItems) &&
        Objects.equals(this.maxBotItems, cmSource.maxBotItems) &&
        Objects.equals(this.customRender, cmSource.customRender) &&
        Objects.equals(this.edgeDeviceId, cmSource.edgeDeviceId) &&
        Objects.equals(this.numResults, cmSource.numResults) &&
        Objects.equals(this.numFragments, cmSource.numFragments) &&
        Objects.equals(this.numErrors, cmSource.numErrors) &&
        Objects.equals(this.errorThreshold, cmSource.errorThreshold) &&
        Objects.equals(this.startTime, cmSource.startTime) &&
        Objects.equals(this.endTime, cmSource.endTime) &&
        Objects.equals(this.acls, cmSource.acls) &&
        Objects.equals(this.isCrawling, cmSource.isCrawling) &&
        Objects.equals(this.numCrawledDocuments, cmSource.numCrawledDocuments) &&
        Objects.equals(this.numConvertedDocuments, cmSource.numConvertedDocuments) &&
        Objects.equals(this.numParsedDocuments, cmSource.numParsedDocuments) &&
        Objects.equals(this.numIndexedDocuments, cmSource.numIndexedDocuments) &&
        Objects.equals(this.numFinishedDocuments, cmSource.numFinishedDocuments) &&
        Objects.equals(this.numErroredDocuments, cmSource.numErroredDocuments) &&
        Objects.equals(this.numTotalDocuments, cmSource.numTotalDocuments) &&
        Objects.equals(this.numTotalErroredDocuments, cmSource.numTotalErroredDocuments) &&
        Objects.equals(this.useDefaultRelationships, cmSource.useDefaultRelationships) &&
        Objects.equals(this.isBusy, cmSource.isBusy) &&
        Objects.equals(this.storeBinary, cmSource.storeBinary) &&
        Objects.equals(this.versioned, cmSource.versioned) &&
        Objects.equals(this.writeToCassandra, cmSource.writeToCassandra) &&
        Objects.equals(this.processorConfig, cmSource.processorConfig) &&
        Objects.equals(this.enableDocumentSimilarity, cmSource.enableDocumentSimilarity) &&
        Objects.equals(this.documentSimilarityThreshold, cmSource.documentSimilarityThreshold) &&
        Objects.equals(this.isExternal, cmSource.isExternal) &&
        Objects.equals(this.useOCR, cmSource.useOCR) &&
        Objects.equals(this.useSTT, cmSource.useSTT) &&
        Objects.equals(this.deltaIndicator, cmSource.deltaIndicator) &&
        Objects.equals(this.transmitExternalLogs, cmSource.transmitExternalLogs) &&
        Objects.equals(this.sourceError, cmSource.sourceError) &&
        Objects.equals(this.external, cmSource.external) &&
        Objects.equals(this.crawling, cmSource.crawling) &&
        Objects.equals(this.busy, cmSource.busy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceId, organisationId, kbId, weight, nodeId, name, crawlerType, schedule, deleteFiles, allowAnonymous, processingLevel, enablePreview, filesPerSecond, specificJson, sessionId, maxItems, maxBotItems, customRender, edgeDeviceId, numResults, numFragments, numErrors, errorThreshold, startTime, endTime, acls, isCrawling, numCrawledDocuments, numConvertedDocuments, numParsedDocuments, numIndexedDocuments, numFinishedDocuments, numErroredDocuments, numTotalDocuments, numTotalErroredDocuments, useDefaultRelationships, isBusy, storeBinary, versioned, writeToCassandra, processorConfig, enableDocumentSimilarity, documentSimilarityThreshold, isExternal, useOCR, useSTT, deltaIndicator, transmitExternalLogs, sourceError, external, crawling, busy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CMSource {\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    organisationId: ").append(toIndentedString(organisationId)).append("\n");
    sb.append("    kbId: ").append(toIndentedString(kbId)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    crawlerType: ").append(toIndentedString(crawlerType)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    deleteFiles: ").append(toIndentedString(deleteFiles)).append("\n");
    sb.append("    allowAnonymous: ").append(toIndentedString(allowAnonymous)).append("\n");
    sb.append("    processingLevel: ").append(toIndentedString(processingLevel)).append("\n");
    sb.append("    enablePreview: ").append(toIndentedString(enablePreview)).append("\n");
    sb.append("    filesPerSecond: ").append(toIndentedString(filesPerSecond)).append("\n");
    sb.append("    specificJson: ").append(toIndentedString(specificJson)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    maxItems: ").append(toIndentedString(maxItems)).append("\n");
    sb.append("    maxBotItems: ").append(toIndentedString(maxBotItems)).append("\n");
    sb.append("    customRender: ").append(toIndentedString(customRender)).append("\n");
    sb.append("    edgeDeviceId: ").append(toIndentedString(edgeDeviceId)).append("\n");
    sb.append("    numResults: ").append(toIndentedString(numResults)).append("\n");
    sb.append("    numFragments: ").append(toIndentedString(numFragments)).append("\n");
    sb.append("    numErrors: ").append(toIndentedString(numErrors)).append("\n");
    sb.append("    errorThreshold: ").append(toIndentedString(errorThreshold)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    acls: ").append(toIndentedString(acls)).append("\n");
    sb.append("    isCrawling: ").append(toIndentedString(isCrawling)).append("\n");
    sb.append("    numCrawledDocuments: ").append(toIndentedString(numCrawledDocuments)).append("\n");
    sb.append("    numConvertedDocuments: ").append(toIndentedString(numConvertedDocuments)).append("\n");
    sb.append("    numParsedDocuments: ").append(toIndentedString(numParsedDocuments)).append("\n");
    sb.append("    numIndexedDocuments: ").append(toIndentedString(numIndexedDocuments)).append("\n");
    sb.append("    numFinishedDocuments: ").append(toIndentedString(numFinishedDocuments)).append("\n");
    sb.append("    numErroredDocuments: ").append(toIndentedString(numErroredDocuments)).append("\n");
    sb.append("    numTotalDocuments: ").append(toIndentedString(numTotalDocuments)).append("\n");
    sb.append("    numTotalErroredDocuments: ").append(toIndentedString(numTotalErroredDocuments)).append("\n");
    sb.append("    useDefaultRelationships: ").append(toIndentedString(useDefaultRelationships)).append("\n");
    sb.append("    isBusy: ").append(toIndentedString(isBusy)).append("\n");
    sb.append("    storeBinary: ").append(toIndentedString(storeBinary)).append("\n");
    sb.append("    versioned: ").append(toIndentedString(versioned)).append("\n");
    sb.append("    writeToCassandra: ").append(toIndentedString(writeToCassandra)).append("\n");
    sb.append("    processorConfig: ").append(toIndentedString(processorConfig)).append("\n");
    sb.append("    enableDocumentSimilarity: ").append(toIndentedString(enableDocumentSimilarity)).append("\n");
    sb.append("    documentSimilarityThreshold: ").append(toIndentedString(documentSimilarityThreshold)).append("\n");
    sb.append("    isExternal: ").append(toIndentedString(isExternal)).append("\n");
    sb.append("    useOCR: ").append(toIndentedString(useOCR)).append("\n");
    sb.append("    useSTT: ").append(toIndentedString(useSTT)).append("\n");
    sb.append("    deltaIndicator: ").append(toIndentedString(deltaIndicator)).append("\n");
    sb.append("    transmitExternalLogs: ").append(toIndentedString(transmitExternalLogs)).append("\n");
    sb.append("    sourceError: ").append(toIndentedString(sourceError)).append("\n");
    sb.append("    external: ").append(toIndentedString(external)).append("\n");
    sb.append("    crawling: ").append(toIndentedString(crawling)).append("\n");
    sb.append("    busy: ").append(toIndentedString(busy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sourceId");
    openapiFields.add("organisationId");
    openapiFields.add("kbId");
    openapiFields.add("weight");
    openapiFields.add("nodeId");
    openapiFields.add("name");
    openapiFields.add("crawlerType");
    openapiFields.add("schedule");
    openapiFields.add("deleteFiles");
    openapiFields.add("allowAnonymous");
    openapiFields.add("processingLevel");
    openapiFields.add("enablePreview");
    openapiFields.add("filesPerSecond");
    openapiFields.add("specificJson");
    openapiFields.add("sessionId");
    openapiFields.add("maxItems");
    openapiFields.add("maxBotItems");
    openapiFields.add("customRender");
    openapiFields.add("edgeDeviceId");
    openapiFields.add("numResults");
    openapiFields.add("numFragments");
    openapiFields.add("numErrors");
    openapiFields.add("errorThreshold");
    openapiFields.add("startTime");
    openapiFields.add("endTime");
    openapiFields.add("acls");
    openapiFields.add("isCrawling");
    openapiFields.add("numCrawledDocuments");
    openapiFields.add("numConvertedDocuments");
    openapiFields.add("numParsedDocuments");
    openapiFields.add("numIndexedDocuments");
    openapiFields.add("numFinishedDocuments");
    openapiFields.add("numErroredDocuments");
    openapiFields.add("numTotalDocuments");
    openapiFields.add("numTotalErroredDocuments");
    openapiFields.add("useDefaultRelationships");
    openapiFields.add("isBusy");
    openapiFields.add("storeBinary");
    openapiFields.add("versioned");
    openapiFields.add("writeToCassandra");
    openapiFields.add("processorConfig");
    openapiFields.add("enableDocumentSimilarity");
    openapiFields.add("documentSimilarityThreshold");
    openapiFields.add("isExternal");
    openapiFields.add("useOCR");
    openapiFields.add("useSTT");
    openapiFields.add("deltaIndicator");
    openapiFields.add("transmitExternalLogs");
    openapiFields.add("sourceError");
    openapiFields.add("external");
    openapiFields.add("crawling");
    openapiFields.add("busy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sourceId");
    openapiRequiredFields.add("organisationId");
    openapiRequiredFields.add("kbId");
    openapiRequiredFields.add("weight");
    openapiRequiredFields.add("nodeId");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("crawlerType");
    openapiRequiredFields.add("schedule");
    openapiRequiredFields.add("deleteFiles");
    openapiRequiredFields.add("allowAnonymous");
    openapiRequiredFields.add("processingLevel");
    openapiRequiredFields.add("enablePreview");
    openapiRequiredFields.add("filesPerSecond");
    openapiRequiredFields.add("specificJson");
    openapiRequiredFields.add("sessionId");
    openapiRequiredFields.add("maxItems");
    openapiRequiredFields.add("maxBotItems");
    openapiRequiredFields.add("customRender");
    openapiRequiredFields.add("edgeDeviceId");
    openapiRequiredFields.add("numResults");
    openapiRequiredFields.add("numFragments");
    openapiRequiredFields.add("numErrors");
    openapiRequiredFields.add("errorThreshold");
    openapiRequiredFields.add("startTime");
    openapiRequiredFields.add("endTime");
    openapiRequiredFields.add("acls");
    openapiRequiredFields.add("isCrawling");
    openapiRequiredFields.add("numCrawledDocuments");
    openapiRequiredFields.add("numConvertedDocuments");
    openapiRequiredFields.add("numParsedDocuments");
    openapiRequiredFields.add("numIndexedDocuments");
    openapiRequiredFields.add("numFinishedDocuments");
    openapiRequiredFields.add("numErroredDocuments");
    openapiRequiredFields.add("numTotalDocuments");
    openapiRequiredFields.add("numTotalErroredDocuments");
    openapiRequiredFields.add("useDefaultRelationships");
    openapiRequiredFields.add("isBusy");
    openapiRequiredFields.add("storeBinary");
    openapiRequiredFields.add("versioned");
    openapiRequiredFields.add("writeToCassandra");
    openapiRequiredFields.add("processorConfig");
    openapiRequiredFields.add("enableDocumentSimilarity");
    openapiRequiredFields.add("documentSimilarityThreshold");
    openapiRequiredFields.add("isExternal");
    openapiRequiredFields.add("useOCR");
    openapiRequiredFields.add("useSTT");
    openapiRequiredFields.add("deltaIndicator");
    openapiRequiredFields.add("transmitExternalLogs");
    openapiRequiredFields.add("sourceError");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CMSource
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CMSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CMSource is not found in the empty JSON string", CMSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CMSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CMSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CMSource.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("organisationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organisationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organisationId").toString()));
      }
      if (!jsonObj.get("kbId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kbId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kbId").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("crawlerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crawlerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crawlerType").toString()));
      }
      if (!jsonObj.get("schedule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schedule").toString()));
      }
      if (!jsonObj.get("processingLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processingLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processingLevel").toString()));
      }
      if (!jsonObj.get("specificJson").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `specificJson` to be a primitive type in the JSON string but got `%s`", jsonObj.get("specificJson").toString()));
      }
      if (!jsonObj.get("sessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionId").toString()));
      }
      if (!jsonObj.get("edgeDeviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `edgeDeviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("edgeDeviceId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("acls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `acls` to be an array in the JSON string but got `%s`", jsonObj.get("acls").toString()));
      }

      JsonArray jsonArrayacls = jsonObj.getAsJsonArray("acls");
      // validate the required field `acls` (array)
      for (int i = 0; i < jsonArrayacls.size(); i++) {
        CMDocumentAcl.validateJsonElement(jsonArrayacls.get(i));
      };
      if (!jsonObj.get("processorConfig").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processorConfig` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processorConfig").toString()));
      }
      if (!jsonObj.get("deltaIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deltaIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deltaIndicator").toString()));
      }
      // validate the required field `sourceError`
      CMSourceError.validateJsonElement(jsonObj.get("sourceError"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CMSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CMSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CMSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CMSource.class));

       return (TypeAdapter<T>) new TypeAdapter<CMSource>() {
           @Override
           public void write(JsonWriter out, CMSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CMSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CMSource given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CMSource
  * @throws IOException if the JSON string is invalid with respect to CMSource
  */
  public static CMSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CMSource.class);
  }

 /**
  * Convert an instance of CMSource to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

