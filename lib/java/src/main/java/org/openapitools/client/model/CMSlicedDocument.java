/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.13.31
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CMSlicedDocument
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-06T16:03:21.377776023Z[Europe/London]")
public class CMSlicedDocument {
  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_SLICE_ID = "sliceId";
  @SerializedName(SERIALIZED_NAME_SLICE_ID)
  private String sliceId;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_EXTENSION = "extension";
  @SerializedName(SERIALIZED_NAME_EXTENSION)
  private String extension;

  public static final String SERIALIZED_NAME_DOCUMENT_KEY = "documentKey";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_KEY)
  private String documentKey;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Long size;

  public static final String SERIALIZED_NAME_FOLDER_ID = "folderId";
  @SerializedName(SERIALIZED_NAME_FOLDER_ID)
  private String folderId;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Long count;

  public static final String SERIALIZED_NAME_CONFIDENCE = "confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private Integer confidence;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_ASSIGNED_USER = "assignedUser";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_USER)
  private String assignedUser;

  public static final String SERIALIZED_NAME_OWNS_ITEM = "ownsItem";
  @SerializedName(SERIALIZED_NAME_OWNS_ITEM)
  private Boolean ownsItem;

  public static final String SERIALIZED_NAME_CAN_CLAIM = "canClaim";
  @SerializedName(SERIALIZED_NAME_CAN_CLAIM)
  private Boolean canClaim;

  public CMSlicedDocument() {
  }

  public CMSlicedDocument projectId(String projectId) {
    
    this.projectId = projectId;
    return this;
  }

   /**
   * Get projectId
   * @return projectId
  **/
  @javax.annotation.Nonnull
  public String getProjectId() {
    return projectId;
  }


  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  public CMSlicedDocument sliceId(String sliceId) {
    
    this.sliceId = sliceId;
    return this;
  }

   /**
   * Get sliceId
   * @return sliceId
  **/
  @javax.annotation.Nonnull
  public String getSliceId() {
    return sliceId;
  }


  public void setSliceId(String sliceId) {
    this.sliceId = sliceId;
  }


  public CMSlicedDocument source(String source) {
    
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @javax.annotation.Nonnull
  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    this.source = source;
  }


  public CMSlicedDocument extension(String extension) {
    
    this.extension = extension;
    return this;
  }

   /**
   * Get extension
   * @return extension
  **/
  @javax.annotation.Nonnull
  public String getExtension() {
    return extension;
  }


  public void setExtension(String extension) {
    this.extension = extension;
  }


  public CMSlicedDocument documentKey(String documentKey) {
    
    this.documentKey = documentKey;
    return this;
  }

   /**
   * Get documentKey
   * @return documentKey
  **/
  @javax.annotation.Nonnull
  public String getDocumentKey() {
    return documentKey;
  }


  public void setDocumentKey(String documentKey) {
    this.documentKey = documentKey;
  }


  public CMSlicedDocument title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public CMSlicedDocument size(Long size) {
    
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @javax.annotation.Nonnull
  public Long getSize() {
    return size;
  }


  public void setSize(Long size) {
    this.size = size;
  }


  public CMSlicedDocument folderId(String folderId) {
    
    this.folderId = folderId;
    return this;
  }

   /**
   * Get folderId
   * @return folderId
  **/
  @javax.annotation.Nonnull
  public String getFolderId() {
    return folderId;
  }


  public void setFolderId(String folderId) {
    this.folderId = folderId;
  }


  public CMSlicedDocument count(Long count) {
    
    this.count = count;
    return this;
  }

   /**
   * Get count
   * @return count
  **/
  @javax.annotation.Nonnull
  public Long getCount() {
    return count;
  }


  public void setCount(Long count) {
    this.count = count;
  }


  public CMSlicedDocument confidence(Integer confidence) {
    
    this.confidence = confidence;
    return this;
  }

   /**
   * Get confidence
   * @return confidence
  **/
  @javax.annotation.Nonnull
  public Integer getConfidence() {
    return confidence;
  }


  public void setConfidence(Integer confidence) {
    this.confidence = confidence;
  }


  public CMSlicedDocument status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public CMSlicedDocument assignedUser(String assignedUser) {
    
    this.assignedUser = assignedUser;
    return this;
  }

   /**
   * Get assignedUser
   * @return assignedUser
  **/
  @javax.annotation.Nonnull
  public String getAssignedUser() {
    return assignedUser;
  }


  public void setAssignedUser(String assignedUser) {
    this.assignedUser = assignedUser;
  }


  public CMSlicedDocument ownsItem(Boolean ownsItem) {
    
    this.ownsItem = ownsItem;
    return this;
  }

   /**
   * Get ownsItem
   * @return ownsItem
  **/
  @javax.annotation.Nonnull
  public Boolean getOwnsItem() {
    return ownsItem;
  }


  public void setOwnsItem(Boolean ownsItem) {
    this.ownsItem = ownsItem;
  }


  public CMSlicedDocument canClaim(Boolean canClaim) {
    
    this.canClaim = canClaim;
    return this;
  }

   /**
   * Get canClaim
   * @return canClaim
  **/
  @javax.annotation.Nonnull
  public Boolean getCanClaim() {
    return canClaim;
  }


  public void setCanClaim(Boolean canClaim) {
    this.canClaim = canClaim;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CMSlicedDocument cmSlicedDocument = (CMSlicedDocument) o;
    return Objects.equals(this.projectId, cmSlicedDocument.projectId) &&
        Objects.equals(this.sliceId, cmSlicedDocument.sliceId) &&
        Objects.equals(this.source, cmSlicedDocument.source) &&
        Objects.equals(this.extension, cmSlicedDocument.extension) &&
        Objects.equals(this.documentKey, cmSlicedDocument.documentKey) &&
        Objects.equals(this.title, cmSlicedDocument.title) &&
        Objects.equals(this.size, cmSlicedDocument.size) &&
        Objects.equals(this.folderId, cmSlicedDocument.folderId) &&
        Objects.equals(this.count, cmSlicedDocument.count) &&
        Objects.equals(this.confidence, cmSlicedDocument.confidence) &&
        Objects.equals(this.status, cmSlicedDocument.status) &&
        Objects.equals(this.assignedUser, cmSlicedDocument.assignedUser) &&
        Objects.equals(this.ownsItem, cmSlicedDocument.ownsItem) &&
        Objects.equals(this.canClaim, cmSlicedDocument.canClaim);
  }

  @Override
  public int hashCode() {
    return Objects.hash(projectId, sliceId, source, extension, documentKey, title, size, folderId, count, confidence, status, assignedUser, ownsItem, canClaim);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CMSlicedDocument {\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    sliceId: ").append(toIndentedString(sliceId)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    documentKey: ").append(toIndentedString(documentKey)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    folderId: ").append(toIndentedString(folderId)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    assignedUser: ").append(toIndentedString(assignedUser)).append("\n");
    sb.append("    ownsItem: ").append(toIndentedString(ownsItem)).append("\n");
    sb.append("    canClaim: ").append(toIndentedString(canClaim)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("projectId");
    openapiFields.add("sliceId");
    openapiFields.add("source");
    openapiFields.add("extension");
    openapiFields.add("documentKey");
    openapiFields.add("title");
    openapiFields.add("size");
    openapiFields.add("folderId");
    openapiFields.add("count");
    openapiFields.add("confidence");
    openapiFields.add("status");
    openapiFields.add("assignedUser");
    openapiFields.add("ownsItem");
    openapiFields.add("canClaim");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("projectId");
    openapiRequiredFields.add("sliceId");
    openapiRequiredFields.add("source");
    openapiRequiredFields.add("extension");
    openapiRequiredFields.add("documentKey");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("size");
    openapiRequiredFields.add("folderId");
    openapiRequiredFields.add("count");
    openapiRequiredFields.add("confidence");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("assignedUser");
    openapiRequiredFields.add("ownsItem");
    openapiRequiredFields.add("canClaim");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CMSlicedDocument
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CMSlicedDocument.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CMSlicedDocument is not found in the empty JSON string", CMSlicedDocument.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CMSlicedDocument.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CMSlicedDocument` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CMSlicedDocument.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if (!jsonObj.get("sliceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sliceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sliceId").toString()));
      }
      if (!jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if (!jsonObj.get("extension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extension").toString()));
      }
      if (!jsonObj.get("documentKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentKey").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("folderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folderId").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("assignedUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignedUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assignedUser").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CMSlicedDocument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CMSlicedDocument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CMSlicedDocument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CMSlicedDocument.class));

       return (TypeAdapter<T>) new TypeAdapter<CMSlicedDocument>() {
           @Override
           public void write(JsonWriter out, CMSlicedDocument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CMSlicedDocument read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CMSlicedDocument given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CMSlicedDocument
  * @throws IOException if the JSON string is invalid with respect to CMSlicedDocument
  */
  public static CMSlicedDocument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CMSlicedDocument.class);
  }

 /**
  * Convert an instance of CMSlicedDocument to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

