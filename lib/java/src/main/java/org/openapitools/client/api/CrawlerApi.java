/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.13.31
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CMDeleteDocument;
import org.openapitools.client.model.CMExternalCrawler;
import org.openapitools.client.model.CMExternalCrawlerDeleteFolder;
import org.openapitools.client.model.CMExternalCrawlerDeleteUrl;
import org.openapitools.client.model.CMExternalCrawlerMarkFileAsSeen;
import org.openapitools.client.model.CMExternalCrawlerRenameFolder;
import org.openapitools.client.model.CMExternalCrawlerSetDeltaToken;
import org.openapitools.client.model.CMExternalCrawlerStart;
import org.openapitools.client.model.CMExternalCrawlerStop;
import org.openapitools.client.model.CMExternalLogEntry;
import org.openapitools.client.model.CMFailedSourceDocument;
import org.openapitools.client.model.CMSource;
import org.openapitools.client.model.CMStartCrawler;
import org.openapitools.client.model.CMUploadDocument;
import org.openapitools.client.model.CMUploadImage;
import org.openapitools.client.model.CMVersion;
import org.openapitools.client.model.JsonMessage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CrawlerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CrawlerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CrawlerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for crawlerDeleteFolder
     * @param cmExternalCrawlerDeleteFolder  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not delete document folder. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> delete document folder update OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crawlerDeleteFolderCall(CMExternalCrawlerDeleteFolder cmExternalCrawlerDeleteFolder, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmExternalCrawlerDeleteFolder;

        // create path and map variables
        String localVarPath = "/api/crawler/external/crawler/delete-folder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call crawlerDeleteFolderValidateBeforeCall(CMExternalCrawlerDeleteFolder cmExternalCrawlerDeleteFolder, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cmExternalCrawlerDeleteFolder' is set
        if (cmExternalCrawlerDeleteFolder == null) {
            throw new ApiException("Missing the required parameter 'cmExternalCrawlerDeleteFolder' when calling crawlerDeleteFolder(Async)");
        }

        return crawlerDeleteFolderCall(cmExternalCrawlerDeleteFolder, apIVersion, _callback);

    }

    /**
     * Delete document folder
     * An external crawler removes a document folder.
     * @param cmExternalCrawlerDeleteFolder  (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not delete document folder. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> delete document folder update OK response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage crawlerDeleteFolder(CMExternalCrawlerDeleteFolder cmExternalCrawlerDeleteFolder, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = crawlerDeleteFolderWithHttpInfo(cmExternalCrawlerDeleteFolder, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Delete document folder
     * An external crawler removes a document folder.
     * @param cmExternalCrawlerDeleteFolder  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not delete document folder. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> delete document folder update OK response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> crawlerDeleteFolderWithHttpInfo(CMExternalCrawlerDeleteFolder cmExternalCrawlerDeleteFolder, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = crawlerDeleteFolderValidateBeforeCall(cmExternalCrawlerDeleteFolder, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete document folder (asynchronously)
     * An external crawler removes a document folder.
     * @param cmExternalCrawlerDeleteFolder  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not delete document folder. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> delete document folder update OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crawlerDeleteFolderAsync(CMExternalCrawlerDeleteFolder cmExternalCrawlerDeleteFolder, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = crawlerDeleteFolderValidateBeforeCall(cmExternalCrawlerDeleteFolder, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crawlerDeleteUrl
     * @param cmExternalCrawlerDeleteUrl  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete document update OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not delete document. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crawlerDeleteUrlCall(CMExternalCrawlerDeleteUrl cmExternalCrawlerDeleteUrl, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmExternalCrawlerDeleteUrl;

        // create path and map variables
        String localVarPath = "/api/crawler/external/crawler/delete-url";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call crawlerDeleteUrlValidateBeforeCall(CMExternalCrawlerDeleteUrl cmExternalCrawlerDeleteUrl, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cmExternalCrawlerDeleteUrl' is set
        if (cmExternalCrawlerDeleteUrl == null) {
            throw new ApiException("Missing the required parameter 'cmExternalCrawlerDeleteUrl' when calling crawlerDeleteUrl(Async)");
        }

        return crawlerDeleteUrlCall(cmExternalCrawlerDeleteUrl, apIVersion, _callback);

    }

    /**
     * Delete document
     * An external crawler removes a document.
     * @param cmExternalCrawlerDeleteUrl  (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete document update OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not delete document. </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage crawlerDeleteUrl(CMExternalCrawlerDeleteUrl cmExternalCrawlerDeleteUrl, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = crawlerDeleteUrlWithHttpInfo(cmExternalCrawlerDeleteUrl, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Delete document
     * An external crawler removes a document.
     * @param cmExternalCrawlerDeleteUrl  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete document update OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not delete document. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> crawlerDeleteUrlWithHttpInfo(CMExternalCrawlerDeleteUrl cmExternalCrawlerDeleteUrl, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = crawlerDeleteUrlValidateBeforeCall(cmExternalCrawlerDeleteUrl, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete document (asynchronously)
     * An external crawler removes a document.
     * @param cmExternalCrawlerDeleteUrl  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete document update OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not delete document. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crawlerDeleteUrlAsync(CMExternalCrawlerDeleteUrl cmExternalCrawlerDeleteUrl, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = crawlerDeleteUrlValidateBeforeCall(cmExternalCrawlerDeleteUrl, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crawlerExternalDocumentDelete
     * @param cmDeleteDocument  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> remove external-crawler document OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not remove external-crawler document. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crawlerExternalDocumentDeleteCall(CMDeleteDocument cmDeleteDocument, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmDeleteDocument;

        // create path and map variables
        String localVarPath = "/api/crawler/external/document/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call crawlerExternalDocumentDeleteValidateBeforeCall(CMDeleteDocument cmDeleteDocument, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cmDeleteDocument' is set
        if (cmDeleteDocument == null) {
            throw new ApiException("Missing the required parameter 'cmDeleteDocument' when calling crawlerExternalDocumentDelete(Async)");
        }

        return crawlerExternalDocumentDeleteCall(cmDeleteDocument, apIVersion, _callback);

    }

    /**
     * Remove an External Document
     * Remove an external crawler document from SimSage.
     * @param cmDeleteDocument  (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> remove external-crawler document OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not remove external-crawler document. </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage crawlerExternalDocumentDelete(CMDeleteDocument cmDeleteDocument, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = crawlerExternalDocumentDeleteWithHttpInfo(cmDeleteDocument, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Remove an External Document
     * Remove an external crawler document from SimSage.
     * @param cmDeleteDocument  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> remove external-crawler document OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not remove external-crawler document. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> crawlerExternalDocumentDeleteWithHttpInfo(CMDeleteDocument cmDeleteDocument, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = crawlerExternalDocumentDeleteValidateBeforeCall(cmDeleteDocument, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove an External Document (asynchronously)
     * Remove an external crawler document from SimSage.
     * @param cmDeleteDocument  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> remove external-crawler document OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not remove external-crawler document. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crawlerExternalDocumentDeleteAsync(CMDeleteDocument cmDeleteDocument, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = crawlerExternalDocumentDeleteValidateBeforeCall(cmDeleteDocument, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crawlerExternalDocumentFailed
     * @param cmFailedSourceDocument  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not start external crawler. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> upload external-crawler document OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crawlerExternalDocumentFailedCall(CMFailedSourceDocument cmFailedSourceDocument, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmFailedSourceDocument;

        // create path and map variables
        String localVarPath = "/api/crawler/external/document/recordfailure";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call crawlerExternalDocumentFailedValidateBeforeCall(CMFailedSourceDocument cmFailedSourceDocument, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cmFailedSourceDocument' is set
        if (cmFailedSourceDocument == null) {
            throw new ApiException("Missing the required parameter 'cmFailedSourceDocument' when calling crawlerExternalDocumentFailed(Async)");
        }

        return crawlerExternalDocumentFailedCall(cmFailedSourceDocument, apIVersion, _callback);

    }

    /**
     * Upload External Document
     * An external crawler document wants to upload a document to SimSage.
     * @param cmFailedSourceDocument  (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not start external crawler. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> upload external-crawler document OK response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage crawlerExternalDocumentFailed(CMFailedSourceDocument cmFailedSourceDocument, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = crawlerExternalDocumentFailedWithHttpInfo(cmFailedSourceDocument, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Upload External Document
     * An external crawler document wants to upload a document to SimSage.
     * @param cmFailedSourceDocument  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not start external crawler. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> upload external-crawler document OK response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> crawlerExternalDocumentFailedWithHttpInfo(CMFailedSourceDocument cmFailedSourceDocument, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = crawlerExternalDocumentFailedValidateBeforeCall(cmFailedSourceDocument, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload External Document (asynchronously)
     * An external crawler document wants to upload a document to SimSage.
     * @param cmFailedSourceDocument  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not start external crawler. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> upload external-crawler document OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crawlerExternalDocumentFailedAsync(CMFailedSourceDocument cmFailedSourceDocument, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = crawlerExternalDocumentFailedValidateBeforeCall(cmFailedSourceDocument, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crawlerExternalDocumentUpload
     * @param cmUploadDocument  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not start external crawler. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> upload external-crawler document OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crawlerExternalDocumentUploadCall(CMUploadDocument cmUploadDocument, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmUploadDocument;

        // create path and map variables
        String localVarPath = "/api/crawler/external/document/upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call crawlerExternalDocumentUploadValidateBeforeCall(CMUploadDocument cmUploadDocument, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cmUploadDocument' is set
        if (cmUploadDocument == null) {
            throw new ApiException("Missing the required parameter 'cmUploadDocument' when calling crawlerExternalDocumentUpload(Async)");
        }

        return crawlerExternalDocumentUploadCall(cmUploadDocument, apIVersion, _callback);

    }

    /**
     * Upload External Document
     * An external crawler document wants to upload a document to SimSage.
     * @param cmUploadDocument  (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not start external crawler. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> upload external-crawler document OK response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage crawlerExternalDocumentUpload(CMUploadDocument cmUploadDocument, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = crawlerExternalDocumentUploadWithHttpInfo(cmUploadDocument, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Upload External Document
     * An external crawler document wants to upload a document to SimSage.
     * @param cmUploadDocument  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not start external crawler. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> upload external-crawler document OK response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> crawlerExternalDocumentUploadWithHttpInfo(CMUploadDocument cmUploadDocument, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = crawlerExternalDocumentUploadValidateBeforeCall(cmUploadDocument, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload External Document (asynchronously)
     * An external crawler document wants to upload a document to SimSage.
     * @param cmUploadDocument  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not start external crawler. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> upload external-crawler document OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crawlerExternalDocumentUploadAsync(CMUploadDocument cmUploadDocument, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = crawlerExternalDocumentUploadValidateBeforeCall(cmUploadDocument, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crawlerExternalImageUpload
     * @param cmUploadImage  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> upload external-crawler document-image OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not upload external-crawler document image. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crawlerExternalImageUploadCall(CMUploadImage cmUploadImage, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmUploadImage;

        // create path and map variables
        String localVarPath = "/api/crawler/external/document/upload/image";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call crawlerExternalImageUploadValidateBeforeCall(CMUploadImage cmUploadImage, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cmUploadImage' is set
        if (cmUploadImage == null) {
            throw new ApiException("Missing the required parameter 'cmUploadImage' when calling crawlerExternalImageUpload(Async)");
        }

        return crawlerExternalImageUploadCall(cmUploadImage, apIVersion, _callback);

    }

    /**
     * Upload External Image
     * An external crawler uploads an image for a document.
     * @param cmUploadImage  (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> upload external-crawler document-image OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not upload external-crawler document image. </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage crawlerExternalImageUpload(CMUploadImage cmUploadImage, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = crawlerExternalImageUploadWithHttpInfo(cmUploadImage, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Upload External Image
     * An external crawler uploads an image for a document.
     * @param cmUploadImage  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> upload external-crawler document-image OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not upload external-crawler document image. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> crawlerExternalImageUploadWithHttpInfo(CMUploadImage cmUploadImage, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = crawlerExternalImageUploadValidateBeforeCall(cmUploadImage, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload External Image (asynchronously)
     * An external crawler uploads an image for a document.
     * @param cmUploadImage  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> upload external-crawler document-image OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not upload external-crawler document image. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crawlerExternalImageUploadAsync(CMUploadImage cmUploadImage, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = crawlerExternalImageUploadValidateBeforeCall(cmUploadImage, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crawlerRenameFolder
     * @param cmExternalCrawlerRenameFolder  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rename document folder update OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not rename document folder. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crawlerRenameFolderCall(CMExternalCrawlerRenameFolder cmExternalCrawlerRenameFolder, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmExternalCrawlerRenameFolder;

        // create path and map variables
        String localVarPath = "/api/crawler/external/crawler/rename-folder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call crawlerRenameFolderValidateBeforeCall(CMExternalCrawlerRenameFolder cmExternalCrawlerRenameFolder, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cmExternalCrawlerRenameFolder' is set
        if (cmExternalCrawlerRenameFolder == null) {
            throw new ApiException("Missing the required parameter 'cmExternalCrawlerRenameFolder' when calling crawlerRenameFolder(Async)");
        }

        return crawlerRenameFolderCall(cmExternalCrawlerRenameFolder, apIVersion, _callback);

    }

    /**
     * Rename document folder
     * An external crawler renames a document folder.
     * @param cmExternalCrawlerRenameFolder  (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rename document folder update OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not rename document folder. </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage crawlerRenameFolder(CMExternalCrawlerRenameFolder cmExternalCrawlerRenameFolder, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = crawlerRenameFolderWithHttpInfo(cmExternalCrawlerRenameFolder, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Rename document folder
     * An external crawler renames a document folder.
     * @param cmExternalCrawlerRenameFolder  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rename document folder update OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not rename document folder. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> crawlerRenameFolderWithHttpInfo(CMExternalCrawlerRenameFolder cmExternalCrawlerRenameFolder, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = crawlerRenameFolderValidateBeforeCall(cmExternalCrawlerRenameFolder, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rename document folder (asynchronously)
     * An external crawler renames a document folder.
     * @param cmExternalCrawlerRenameFolder  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rename document folder update OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not rename document folder. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crawlerRenameFolderAsync(CMExternalCrawlerRenameFolder cmExternalCrawlerRenameFolder, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = crawlerRenameFolderValidateBeforeCall(cmExternalCrawlerRenameFolder, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crawlerUpdateDeltaToken
     * @param cmExternalCrawlerSetDeltaToken  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> source delta-token update OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not update source delta-token. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crawlerUpdateDeltaTokenCall(CMExternalCrawlerSetDeltaToken cmExternalCrawlerSetDeltaToken, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmExternalCrawlerSetDeltaToken;

        // create path and map variables
        String localVarPath = "/api/crawler/external/crawler/delta-token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call crawlerUpdateDeltaTokenValidateBeforeCall(CMExternalCrawlerSetDeltaToken cmExternalCrawlerSetDeltaToken, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cmExternalCrawlerSetDeltaToken' is set
        if (cmExternalCrawlerSetDeltaToken == null) {
            throw new ApiException("Missing the required parameter 'cmExternalCrawlerSetDeltaToken' when calling crawlerUpdateDeltaToken(Async)");
        }

        return crawlerUpdateDeltaTokenCall(cmExternalCrawlerSetDeltaToken, apIVersion, _callback);

    }

    /**
     * Update delta token
     * An external crawler updates a delta-token.
     * @param cmExternalCrawlerSetDeltaToken  (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> source delta-token update OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not update source delta-token. </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage crawlerUpdateDeltaToken(CMExternalCrawlerSetDeltaToken cmExternalCrawlerSetDeltaToken, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = crawlerUpdateDeltaTokenWithHttpInfo(cmExternalCrawlerSetDeltaToken, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Update delta token
     * An external crawler updates a delta-token.
     * @param cmExternalCrawlerSetDeltaToken  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> source delta-token update OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not update source delta-token. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> crawlerUpdateDeltaTokenWithHttpInfo(CMExternalCrawlerSetDeltaToken cmExternalCrawlerSetDeltaToken, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = crawlerUpdateDeltaTokenValidateBeforeCall(cmExternalCrawlerSetDeltaToken, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update delta token (asynchronously)
     * An external crawler updates a delta-token.
     * @param cmExternalCrawlerSetDeltaToken  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> source delta-token update OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not update source delta-token. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crawlerUpdateDeltaTokenAsync(CMExternalCrawlerSetDeltaToken cmExternalCrawlerSetDeltaToken, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = crawlerUpdateDeltaTokenValidateBeforeCall(cmExternalCrawlerSetDeltaToken, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for delete
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-base&#39;s id (a guid) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param sourceId the crawler&#39;s id (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not remove source. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> remove a source OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCall(String organisationId, String kbId, String sessionId, Integer sourceId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/crawler/crawler/{organisationId}/{kbId}/{sourceId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "sourceId" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(String organisationId, String kbId, String sessionId, Integer sourceId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling delete(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling delete(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling delete(Async)");
        }

        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling delete(Async)");
        }

        return deleteCall(organisationId, kbId, sessionId, sourceId, apIVersion, _callback);

    }

    /**
     * Delete source
     * Remove a source and all its content by its source-id.
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-base&#39;s id (a guid) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param sourceId the crawler&#39;s id (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not remove source. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> remove a source OK response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage delete(String organisationId, String kbId, String sessionId, Integer sourceId, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = deleteWithHttpInfo(organisationId, kbId, sessionId, sourceId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Delete source
     * Remove a source and all its content by its source-id.
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-base&#39;s id (a guid) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param sourceId the crawler&#39;s id (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not remove source. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> remove a source OK response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> deleteWithHttpInfo(String organisationId, String kbId, String sessionId, Integer sourceId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteValidateBeforeCall(organisationId, kbId, sessionId, sourceId, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete source (asynchronously)
     * Remove a source and all its content by its source-id.
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-base&#39;s id (a guid) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param sourceId the crawler&#39;s id (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not remove source. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> remove a source OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAsync(String organisationId, String kbId, String sessionId, Integer sourceId, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidateBeforeCall(organisationId, kbId, sessionId, sourceId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDocuments
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-base&#39;s id (a guid) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param sourceId the crawler&#39;s id (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updated source response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not remove a source&#39;s documents. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentsCall(String organisationId, String kbId, String sessionId, Integer sourceId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/crawler/crawler/document/{organisationId}/{kbId}/{sourceId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "sourceId" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDocumentsValidateBeforeCall(String organisationId, String kbId, String sessionId, Integer sourceId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling deleteDocuments(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling deleteDocuments(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling deleteDocuments(Async)");
        }

        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling deleteDocuments(Async)");
        }

        return deleteDocumentsCall(organisationId, kbId, sessionId, sourceId, apIVersion, _callback);

    }

    /**
     * Delete source&#39;s documents
     * Remove a source&#39;s documents and stop the crawler if it&#39;s running.  Return an updated sources.
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-base&#39;s id (a guid) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param sourceId the crawler&#39;s id (required)
     * @param apIVersion  (optional)
     * @return CMSource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updated source response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not remove a source&#39;s documents. </td><td>  -  </td></tr>
     </table>
     */
    public CMSource deleteDocuments(String organisationId, String kbId, String sessionId, Integer sourceId, String apIVersion) throws ApiException {
        ApiResponse<CMSource> localVarResp = deleteDocumentsWithHttpInfo(organisationId, kbId, sessionId, sourceId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Delete source&#39;s documents
     * Remove a source&#39;s documents and stop the crawler if it&#39;s running.  Return an updated sources.
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-base&#39;s id (a guid) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param sourceId the crawler&#39;s id (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMSource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updated source response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not remove a source&#39;s documents. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMSource> deleteDocumentsWithHttpInfo(String organisationId, String kbId, String sessionId, Integer sourceId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteDocumentsValidateBeforeCall(organisationId, kbId, sessionId, sourceId, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMSource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete source&#39;s documents (asynchronously)
     * Remove a source&#39;s documents and stop the crawler if it&#39;s running.  Return an updated sources.
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-base&#39;s id (a guid) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param sourceId the crawler&#39;s id (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updated source response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not remove a source&#39;s documents. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentsAsync(String organisationId, String kbId, String sessionId, Integer sourceId, String apIVersion, final ApiCallback<CMSource> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDocumentsValidateBeforeCall(organisationId, kbId, sessionId, sourceId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMSource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for encryptedCommunications
     * @param seed a random integer used for the communications (required)
     * @param body  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not execute command. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> secure communication result (various) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call encryptedCommunicationsCall(Integer seed, String body, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/crawler/external/secure/{seed}"
            .replace("{" + "seed" + "}", localVarApiClient.escapeString(seed.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call encryptedCommunicationsValidateBeforeCall(Integer seed, String body, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'seed' is set
        if (seed == null) {
            throw new ApiException("Missing the required parameter 'seed' when calling encryptedCommunications(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling encryptedCommunications(Async)");
        }

        return encryptedCommunicationsCall(seed, body, apIVersion, _callback);

    }

    /**
     * Secure Communication
     * Secure Communications end-point.  Send encrypted messages from external crawlers and edge devices to this end-point.
     * @param seed a random integer used for the communications (required)
     * @param body  (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not execute command. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> secure communication result (various) </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage encryptedCommunications(Integer seed, String body, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = encryptedCommunicationsWithHttpInfo(seed, body, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Secure Communication
     * Secure Communications end-point.  Send encrypted messages from external crawlers and edge devices to this end-point.
     * @param seed a random integer used for the communications (required)
     * @param body  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not execute command. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> secure communication result (various) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> encryptedCommunicationsWithHttpInfo(Integer seed, String body, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = encryptedCommunicationsValidateBeforeCall(seed, body, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Secure Communication (asynchronously)
     * Secure Communications end-point.  Send encrypted messages from external crawlers and edge devices to this end-point.
     * @param seed a random integer used for the communications (required)
     * @param body  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not execute command. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> secure communication result (various) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call encryptedCommunicationsAsync(Integer seed, String body, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = encryptedCommunicationsValidateBeforeCall(seed, body, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for externalCrawler
     * @param cmExternalCrawler  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get external crawler source. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> external-crawler source response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call externalCrawlerCall(CMExternalCrawler cmExternalCrawler, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmExternalCrawler;

        // create path and map variables
        String localVarPath = "/api/crawler/external/crawler";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call externalCrawlerValidateBeforeCall(CMExternalCrawler cmExternalCrawler, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cmExternalCrawler' is set
        if (cmExternalCrawler == null) {
            throw new ApiException("Missing the required parameter 'cmExternalCrawler' when calling externalCrawler(Async)");
        }

        return externalCrawlerCall(cmExternalCrawler, apIVersion, _callback);

    }

    /**
     * External Crawler
     * Retrieve a crawler data-structure by orgId/kbId/sid and sourceId.  Used by External Crawlers to do their job.
     * @param cmExternalCrawler  (required)
     * @param apIVersion  (optional)
     * @return CMSource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get external crawler source. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> external-crawler source response </td><td>  -  </td></tr>
     </table>
     */
    public CMSource externalCrawler(CMExternalCrawler cmExternalCrawler, String apIVersion) throws ApiException {
        ApiResponse<CMSource> localVarResp = externalCrawlerWithHttpInfo(cmExternalCrawler, apIVersion);
        return localVarResp.getData();
    }

    /**
     * External Crawler
     * Retrieve a crawler data-structure by orgId/kbId/sid and sourceId.  Used by External Crawlers to do their job.
     * @param cmExternalCrawler  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMSource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get external crawler source. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> external-crawler source response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMSource> externalCrawlerWithHttpInfo(CMExternalCrawler cmExternalCrawler, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = externalCrawlerValidateBeforeCall(cmExternalCrawler, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMSource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * External Crawler (asynchronously)
     * Retrieve a crawler data-structure by orgId/kbId/sid and sourceId.  Used by External Crawlers to do their job.
     * @param cmExternalCrawler  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get external crawler source. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> external-crawler source response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call externalCrawlerAsync(CMExternalCrawler cmExternalCrawler, String apIVersion, final ApiCallback<CMSource> _callback) throws ApiException {

        okhttp3.Call localVarCall = externalCrawlerValidateBeforeCall(cmExternalCrawler, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMSource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for externalCrawlerFinished
     * @param cmExternalCrawlerStop  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> external-crawler stop OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not stop external crawler. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call externalCrawlerFinishedCall(CMExternalCrawlerStop cmExternalCrawlerStop, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmExternalCrawlerStop;

        // create path and map variables
        String localVarPath = "/api/crawler/external/crawler/finish";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call externalCrawlerFinishedValidateBeforeCall(CMExternalCrawlerStop cmExternalCrawlerStop, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cmExternalCrawlerStop' is set
        if (cmExternalCrawlerStop == null) {
            throw new ApiException("Missing the required parameter 'cmExternalCrawlerStop' when calling externalCrawlerFinished(Async)");
        }

        return externalCrawlerFinishedCall(cmExternalCrawlerStop, apIVersion, _callback);

    }

    /**
     * Stop External Crawler
     * An external crawler notifies SimSage it has finished its job, its run through the data once.
     * @param cmExternalCrawlerStop  (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> external-crawler stop OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not stop external crawler. </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage externalCrawlerFinished(CMExternalCrawlerStop cmExternalCrawlerStop, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = externalCrawlerFinishedWithHttpInfo(cmExternalCrawlerStop, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Stop External Crawler
     * An external crawler notifies SimSage it has finished its job, its run through the data once.
     * @param cmExternalCrawlerStop  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> external-crawler stop OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not stop external crawler. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> externalCrawlerFinishedWithHttpInfo(CMExternalCrawlerStop cmExternalCrawlerStop, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = externalCrawlerFinishedValidateBeforeCall(cmExternalCrawlerStop, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stop External Crawler (asynchronously)
     * An external crawler notifies SimSage it has finished its job, its run through the data once.
     * @param cmExternalCrawlerStop  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> external-crawler stop OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not stop external crawler. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call externalCrawlerFinishedAsync(CMExternalCrawlerStop cmExternalCrawlerStop, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = externalCrawlerFinishedValidateBeforeCall(cmExternalCrawlerStop, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for externalCrawlerStart
     * @param cmExternalCrawlerStart  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not start external crawler. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> external-crawler start OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call externalCrawlerStartCall(CMExternalCrawlerStart cmExternalCrawlerStart, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmExternalCrawlerStart;

        // create path and map variables
        String localVarPath = "/api/crawler/external/crawler/start";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call externalCrawlerStartValidateBeforeCall(CMExternalCrawlerStart cmExternalCrawlerStart, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cmExternalCrawlerStart' is set
        if (cmExternalCrawlerStart == null) {
            throw new ApiException("Missing the required parameter 'cmExternalCrawlerStart' when calling externalCrawlerStart(Async)");
        }

        return externalCrawlerStartCall(cmExternalCrawlerStart, apIVersion, _callback);

    }

    /**
     * Start External Crawler
     * An external crawler notifies SimSage is it starting a new run.
     * @param cmExternalCrawlerStart  (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not start external crawler. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> external-crawler start OK response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage externalCrawlerStart(CMExternalCrawlerStart cmExternalCrawlerStart, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = externalCrawlerStartWithHttpInfo(cmExternalCrawlerStart, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Start External Crawler
     * An external crawler notifies SimSage is it starting a new run.
     * @param cmExternalCrawlerStart  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not start external crawler. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> external-crawler start OK response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> externalCrawlerStartWithHttpInfo(CMExternalCrawlerStart cmExternalCrawlerStart, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = externalCrawlerStartValidateBeforeCall(cmExternalCrawlerStart, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start External Crawler (asynchronously)
     * An external crawler notifies SimSage is it starting a new run.
     * @param cmExternalCrawlerStart  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not start external crawler. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> external-crawler start OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call externalCrawlerStartAsync(CMExternalCrawlerStart cmExternalCrawlerStart, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = externalCrawlerStartValidateBeforeCall(cmExternalCrawlerStart, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCrawler
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-base&#39;s id (a guid) (required)
     * @param sourceId the crawler&#39;s id (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get source. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> the source </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCrawlerCall(String organisationId, String kbId, Integer sourceId, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/crawler/crawler/{organisationId}/{kbId}/{sourceId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "sourceId" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCrawlerValidateBeforeCall(String organisationId, String kbId, Integer sourceId, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getCrawler(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling getCrawler(Async)");
        }

        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling getCrawler(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getCrawler(Async)");
        }

        return getCrawlerCall(organisationId, kbId, sourceId, sessionId, apIVersion, _callback);

    }

    /**
     * Get source
     * Return the data-structure for a source by id.
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-base&#39;s id (a guid) (required)
     * @param sourceId the crawler&#39;s id (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return CMSource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get source. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> the source </td><td>  -  </td></tr>
     </table>
     */
    public CMSource getCrawler(String organisationId, String kbId, Integer sourceId, String sessionId, String apIVersion) throws ApiException {
        ApiResponse<CMSource> localVarResp = getCrawlerWithHttpInfo(organisationId, kbId, sourceId, sessionId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Get source
     * Return the data-structure for a source by id.
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-base&#39;s id (a guid) (required)
     * @param sourceId the crawler&#39;s id (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMSource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get source. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> the source </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMSource> getCrawlerWithHttpInfo(String organisationId, String kbId, Integer sourceId, String sessionId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = getCrawlerValidateBeforeCall(organisationId, kbId, sourceId, sessionId, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMSource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get source (asynchronously)
     * Return the data-structure for a source by id.
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-base&#39;s id (a guid) (required)
     * @param sourceId the crawler&#39;s id (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get source. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> the source </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCrawlerAsync(String organisationId, String kbId, Integer sourceId, String sessionId, String apIVersion, final ApiCallback<CMSource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCrawlerValidateBeforeCall(organisationId, kbId, sourceId, sessionId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMSource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFailedDocuments
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-base&#39;s id (a guid) (required)
     * @param sourceId the source  id (a number) (required)
     * @param page the page number for the list (required)
     * @param pageSize the page size for the list (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get source list. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> source list response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFailedDocumentsCall(String sessionId, String organisationId, String kbId, String sourceId, Integer page, Integer pageSize, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/crawler/faileddocs/{organisationId}/{kbId}/{sourceId}/{page}/{pageSize}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "sourceId" + "}", localVarApiClient.escapeString(sourceId.toString()))
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()))
            .replace("{" + "pageSize" + "}", localVarApiClient.escapeString(pageSize.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFailedDocumentsValidateBeforeCall(String sessionId, String organisationId, String kbId, String sourceId, Integer page, Integer pageSize, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getFailedDocuments(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getFailedDocuments(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling getFailedDocuments(Async)");
        }

        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling getFailedDocuments(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getFailedDocuments(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling getFailedDocuments(Async)");
        }

        return getFailedDocumentsCall(sessionId, organisationId, kbId, sourceId, page, pageSize, apIVersion, _callback);

    }

    /**
     * Get source List
     * Get a list of failed documents for a source.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-base&#39;s id (a guid) (required)
     * @param sourceId the source  id (a number) (required)
     * @param page the page number for the list (required)
     * @param pageSize the page size for the list (required)
     * @param apIVersion  (optional)
     * @return List&lt;CMSource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get source list. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> source list response </td><td>  -  </td></tr>
     </table>
     */
    public List<CMSource> getFailedDocuments(String sessionId, String organisationId, String kbId, String sourceId, Integer page, Integer pageSize, String apIVersion) throws ApiException {
        ApiResponse<List<CMSource>> localVarResp = getFailedDocumentsWithHttpInfo(sessionId, organisationId, kbId, sourceId, page, pageSize, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Get source List
     * Get a list of failed documents for a source.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-base&#39;s id (a guid) (required)
     * @param sourceId the source  id (a number) (required)
     * @param page the page number for the list (required)
     * @param pageSize the page size for the list (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;List&lt;CMSource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get source list. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> source list response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CMSource>> getFailedDocumentsWithHttpInfo(String sessionId, String organisationId, String kbId, String sourceId, Integer page, Integer pageSize, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = getFailedDocumentsValidateBeforeCall(sessionId, organisationId, kbId, sourceId, page, pageSize, apIVersion, null);
        Type localVarReturnType = new TypeToken<List<CMSource>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get source List (asynchronously)
     * Get a list of failed documents for a source.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-base&#39;s id (a guid) (required)
     * @param sourceId the source  id (a number) (required)
     * @param page the page number for the list (required)
     * @param pageSize the page size for the list (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get source list. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> source list response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFailedDocumentsAsync(String sessionId, String organisationId, String kbId, String sourceId, Integer page, Integer pageSize, String apIVersion, final ApiCallback<List<CMSource>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFailedDocumentsValidateBeforeCall(sessionId, organisationId, kbId, sourceId, page, pageSize, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<CMSource>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSourceList
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-base&#39;s id (a guid) (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get source list. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> source list response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSourceListCall(String sessionId, String organisationId, String kbId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/crawler/crawlers/{organisationId}/{kbId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSourceListValidateBeforeCall(String sessionId, String organisationId, String kbId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getSourceList(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getSourceList(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling getSourceList(Async)");
        }

        return getSourceListCall(sessionId, organisationId, kbId, apIVersion, _callback);

    }

    /**
     * Get source List
     * Get a list of sources for a given organisation / knowledge base.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-base&#39;s id (a guid) (required)
     * @param apIVersion  (optional)
     * @return List&lt;CMSource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get source list. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> source list response </td><td>  -  </td></tr>
     </table>
     */
    public List<CMSource> getSourceList(String sessionId, String organisationId, String kbId, String apIVersion) throws ApiException {
        ApiResponse<List<CMSource>> localVarResp = getSourceListWithHttpInfo(sessionId, organisationId, kbId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Get source List
     * Get a list of sources for a given organisation / knowledge base.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-base&#39;s id (a guid) (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;List&lt;CMSource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get source list. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> source list response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CMSource>> getSourceListWithHttpInfo(String sessionId, String organisationId, String kbId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = getSourceListValidateBeforeCall(sessionId, organisationId, kbId, apIVersion, null);
        Type localVarReturnType = new TypeToken<List<CMSource>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get source List (asynchronously)
     * Get a list of sources for a given organisation / knowledge base.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-base&#39;s id (a guid) (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get source list. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> source list response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSourceListAsync(String sessionId, String organisationId, String kbId, String apIVersion, final ApiCallback<List<CMSource>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSourceListValidateBeforeCall(sessionId, organisationId, kbId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<CMSource>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for markFileAsSeen
     * @param cmExternalCrawlerMarkFileAsSeen  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> mark file as seen OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not mark file as seen. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call markFileAsSeenCall(CMExternalCrawlerMarkFileAsSeen cmExternalCrawlerMarkFileAsSeen, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmExternalCrawlerMarkFileAsSeen;

        // create path and map variables
        String localVarPath = "/api/crawler/external/crawler/mark-file-as-seen";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markFileAsSeenValidateBeforeCall(CMExternalCrawlerMarkFileAsSeen cmExternalCrawlerMarkFileAsSeen, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cmExternalCrawlerMarkFileAsSeen' is set
        if (cmExternalCrawlerMarkFileAsSeen == null) {
            throw new ApiException("Missing the required parameter 'cmExternalCrawlerMarkFileAsSeen' when calling markFileAsSeen(Async)");
        }

        return markFileAsSeenCall(cmExternalCrawlerMarkFileAsSeen, apIVersion, _callback);

    }

    /**
     * Mark file as seen
     * An external crawler marks a file as seen.
     * @param cmExternalCrawlerMarkFileAsSeen  (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> mark file as seen OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not mark file as seen. </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage markFileAsSeen(CMExternalCrawlerMarkFileAsSeen cmExternalCrawlerMarkFileAsSeen, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = markFileAsSeenWithHttpInfo(cmExternalCrawlerMarkFileAsSeen, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Mark file as seen
     * An external crawler marks a file as seen.
     * @param cmExternalCrawlerMarkFileAsSeen  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> mark file as seen OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not mark file as seen. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> markFileAsSeenWithHttpInfo(CMExternalCrawlerMarkFileAsSeen cmExternalCrawlerMarkFileAsSeen, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = markFileAsSeenValidateBeforeCall(cmExternalCrawlerMarkFileAsSeen, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark file as seen (asynchronously)
     * An external crawler marks a file as seen.
     * @param cmExternalCrawlerMarkFileAsSeen  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> mark file as seen OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not mark file as seen. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call markFileAsSeenAsync(CMExternalCrawlerMarkFileAsSeen cmExternalCrawlerMarkFileAsSeen, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = markFileAsSeenValidateBeforeCall(cmExternalCrawlerMarkFileAsSeen, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for oidcCode
     * @param oidcKey the Dropbox OIDC key (required)
     * @param allRequestParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> something went wrong with the OIDC request set-up. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oidcCodeCall(String oidcKey, Map<String, String> allRequestParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/crawler/dropbox-oidc-code/{oidcKey}"
            .replace("{" + "oidcKey" + "}", localVarApiClient.escapeString(oidcKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (allRequestParams != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allRequestParams", allRequestParams));
        }

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oidcCodeValidateBeforeCall(String oidcKey, Map<String, String> allRequestParams, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'oidcKey' is set
        if (oidcKey == null) {
            throw new ApiException("Missing the required parameter 'oidcKey' when calling oidcCode(Async)");
        }

        // verify the required parameter 'allRequestParams' is set
        if (allRequestParams == null) {
            throw new ApiException("Missing the required parameter 'allRequestParams' when calling oidcCode(Async)");
        }

        return oidcCodeCall(oidcKey, allRequestParams, _callback);

    }

    /**
     * OIDC code receiver
     * used for OIDC systems to receive codes
     * @param oidcKey the Dropbox OIDC key (required)
     * @param allRequestParams  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> something went wrong with the OIDC request set-up. </td><td>  -  </td></tr>
     </table>
     */
    public void oidcCode(String oidcKey, Map<String, String> allRequestParams) throws ApiException {
        oidcCodeWithHttpInfo(oidcKey, allRequestParams);
    }

    /**
     * OIDC code receiver
     * used for OIDC systems to receive codes
     * @param oidcKey the Dropbox OIDC key (required)
     * @param allRequestParams  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> something went wrong with the OIDC request set-up. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> oidcCodeWithHttpInfo(String oidcKey, Map<String, String> allRequestParams) throws ApiException {
        okhttp3.Call localVarCall = oidcCodeValidateBeforeCall(oidcKey, allRequestParams, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * OIDC code receiver (asynchronously)
     * used for OIDC systems to receive codes
     * @param oidcKey the Dropbox OIDC key (required)
     * @param allRequestParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> something went wrong with the OIDC request set-up. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oidcCodeAsync(String oidcKey, Map<String, String> allRequestParams, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = oidcCodeValidateBeforeCall(oidcKey, allRequestParams, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for processAllFiles
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmStartCrawler  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not start processing files. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> start processing all OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call processAllFilesCall(String sessionId, CMStartCrawler cmStartCrawler, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmStartCrawler;

        // create path and map variables
        String localVarPath = "/api/crawler/process-all-files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processAllFilesValidateBeforeCall(String sessionId, CMStartCrawler cmStartCrawler, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling processAllFiles(Async)");
        }

        // verify the required parameter 'cmStartCrawler' is set
        if (cmStartCrawler == null) {
            throw new ApiException("Missing the required parameter 'cmStartCrawler' when calling processAllFiles(Async)");
        }

        return processAllFilesCall(sessionId, cmStartCrawler, apIVersion, _callback);

    }

    /**
     * Process all files of crawler/source
     * Start and force processing all files for a crawler/source
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmStartCrawler  (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not start processing files. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> start processing all OK response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage processAllFiles(String sessionId, CMStartCrawler cmStartCrawler, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = processAllFilesWithHttpInfo(sessionId, cmStartCrawler, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Process all files of crawler/source
     * Start and force processing all files for a crawler/source
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmStartCrawler  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not start processing files. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> start processing all OK response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> processAllFilesWithHttpInfo(String sessionId, CMStartCrawler cmStartCrawler, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = processAllFilesValidateBeforeCall(sessionId, cmStartCrawler, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Process all files of crawler/source (asynchronously)
     * Start and force processing all files for a crawler/source
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmStartCrawler  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not start processing files. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> start processing all OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call processAllFilesAsync(String sessionId, CMStartCrawler cmStartCrawler, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = processAllFilesValidateBeforeCall(sessionId, cmStartCrawler, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for processorSchema
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call processorSchemaCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/crawler/processor_schema";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processorSchemaValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return processorSchemaCall(_callback);

    }

    /**
     * 
     * 
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object processorSchema() throws ApiException {
        ApiResponse<Object> localVarResp = processorSchemaWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> processorSchemaWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = processorSchemaValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call processorSchemaAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = processorSchemaValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for receiveExternalLogEntry
     * @param cmExternalLogEntry  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get write log-entry / log-entry invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiveExternalLogEntryCall(CMExternalLogEntry cmExternalLogEntry, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmExternalLogEntry;

        // create path and map variables
        String localVarPath = "/api/crawler/external/crawler/log";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call receiveExternalLogEntryValidateBeforeCall(CMExternalLogEntry cmExternalLogEntry, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cmExternalLogEntry' is set
        if (cmExternalLogEntry == null) {
            throw new ApiException("Missing the required parameter 'cmExternalLogEntry' when calling receiveExternalLogEntry(Async)");
        }

        return receiveExternalLogEntryCall(cmExternalLogEntry, apIVersion, _callback);

    }

    /**
     * External Crawler log-entry
     * An external crawler sends a log entry to SimSage.
     * @param cmExternalLogEntry  (required)
     * @param apIVersion  (optional)
     * @return CMSource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get write log-entry / log-entry invalid. </td><td>  -  </td></tr>
     </table>
     */
    public CMSource receiveExternalLogEntry(CMExternalLogEntry cmExternalLogEntry, String apIVersion) throws ApiException {
        ApiResponse<CMSource> localVarResp = receiveExternalLogEntryWithHttpInfo(cmExternalLogEntry, apIVersion);
        return localVarResp.getData();
    }

    /**
     * External Crawler log-entry
     * An external crawler sends a log entry to SimSage.
     * @param cmExternalLogEntry  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMSource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get write log-entry / log-entry invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMSource> receiveExternalLogEntryWithHttpInfo(CMExternalLogEntry cmExternalLogEntry, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = receiveExternalLogEntryValidateBeforeCall(cmExternalLogEntry, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMSource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * External Crawler log-entry (asynchronously)
     * An external crawler sends a log entry to SimSage.
     * @param cmExternalLogEntry  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get write log-entry / log-entry invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiveExternalLogEntryAsync(CMExternalLogEntry cmExternalLogEntry, String apIVersion, final ApiCallback<CMSource> _callback) throws ApiException {

        okhttp3.Call localVarCall = receiveExternalLogEntryValidateBeforeCall(cmExternalLogEntry, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMSource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetSourceDelta
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-base&#39;s id (a guid) (required)
     * @param sourceId the crawler&#39;s id (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not reset source delta-token. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> reset delta response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetSourceDeltaCall(String sessionId, String organisationId, String kbId, Integer sourceId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/crawler/crawler/reset-delta/{organisationId}/{kbId}/{sourceId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "sourceId" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetSourceDeltaValidateBeforeCall(String sessionId, String organisationId, String kbId, Integer sourceId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling resetSourceDelta(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling resetSourceDelta(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling resetSourceDelta(Async)");
        }

        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling resetSourceDelta(Async)");
        }

        return resetSourceDeltaCall(sessionId, organisationId, kbId, sourceId, apIVersion, _callback);

    }

    /**
     * Reset Source delta-token
     * reset a SimSage source&#39;s delta token.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-base&#39;s id (a guid) (required)
     * @param sourceId the crawler&#39;s id (required)
     * @param apIVersion  (optional)
     * @return CMSource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not reset source delta-token. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> reset delta response </td><td>  -  </td></tr>
     </table>
     */
    public CMSource resetSourceDelta(String sessionId, String organisationId, String kbId, Integer sourceId, String apIVersion) throws ApiException {
        ApiResponse<CMSource> localVarResp = resetSourceDeltaWithHttpInfo(sessionId, organisationId, kbId, sourceId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Reset Source delta-token
     * reset a SimSage source&#39;s delta token.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-base&#39;s id (a guid) (required)
     * @param sourceId the crawler&#39;s id (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMSource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not reset source delta-token. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> reset delta response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMSource> resetSourceDeltaWithHttpInfo(String sessionId, String organisationId, String kbId, Integer sourceId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = resetSourceDeltaValidateBeforeCall(sessionId, organisationId, kbId, sourceId, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMSource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset Source delta-token (asynchronously)
     * reset a SimSage source&#39;s delta token.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-base&#39;s id (a guid) (required)
     * @param sourceId the crawler&#39;s id (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not reset source delta-token. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> reset delta response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetSourceDeltaAsync(String sessionId, String organisationId, String kbId, Integer sourceId, String apIVersion, final ApiCallback<CMSource> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetSourceDeltaValidateBeforeCall(sessionId, organisationId, kbId, sourceId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMSource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sdcSchema
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sdcSchemaCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/crawler/sdc_schema";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sdcSchemaValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return sdcSchemaCall(_callback);

    }

    /**
     * 
     * 
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sdcSchema() throws ApiException {
        ApiResponse<Object> localVarResp = sdcSchemaWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sdcSchemaWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = sdcSchemaValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sdcSchemaAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sdcSchemaValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startCrawler
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmStartCrawler  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> start crawler OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not start crawler. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startCrawlerCall(String sessionId, CMStartCrawler cmStartCrawler, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmStartCrawler;

        // create path and map variables
        String localVarPath = "/api/crawler/start";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startCrawlerValidateBeforeCall(String sessionId, CMStartCrawler cmStartCrawler, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling startCrawler(Async)");
        }

        // verify the required parameter 'cmStartCrawler' is set
        if (cmStartCrawler == null) {
            throw new ApiException("Missing the required parameter 'cmStartCrawler' when calling startCrawler(Async)");
        }

        return startCrawlerCall(sessionId, cmStartCrawler, apIVersion, _callback);

    }

    /**
     * Start crawler
     * Start a crawler by source-id if after it has stopped.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmStartCrawler  (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> start crawler OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not start crawler. </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage startCrawler(String sessionId, CMStartCrawler cmStartCrawler, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = startCrawlerWithHttpInfo(sessionId, cmStartCrawler, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Start crawler
     * Start a crawler by source-id if after it has stopped.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmStartCrawler  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> start crawler OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not start crawler. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> startCrawlerWithHttpInfo(String sessionId, CMStartCrawler cmStartCrawler, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = startCrawlerValidateBeforeCall(sessionId, cmStartCrawler, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start crawler (asynchronously)
     * Start a crawler by source-id if after it has stopped.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmStartCrawler  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> start crawler OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not start crawler. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startCrawlerAsync(String sessionId, CMStartCrawler cmStartCrawler, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = startCrawlerValidateBeforeCall(sessionId, cmStartCrawler, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testCrawler
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-base&#39;s id (a guid) (required)
     * @param sourceId the crawler&#39;s id (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> test crawler connection OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not test crawler. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testCrawlerCall(String sessionId, String organisationId, String kbId, Integer sourceId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/crawler/crawler/test/{organisationId}/{kbId}/{sourceId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "sourceId" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testCrawlerValidateBeforeCall(String sessionId, String organisationId, String kbId, Integer sourceId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling testCrawler(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling testCrawler(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling testCrawler(Async)");
        }

        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling testCrawler(Async)");
        }

        return testCrawlerCall(sessionId, organisationId, kbId, sourceId, apIVersion, _callback);

    }

    /**
     * Test Crawler
     * Some crawlers (platform crawlers, not external crawlers) can check if the given information is enough for it to operator.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-base&#39;s id (a guid) (required)
     * @param sourceId the crawler&#39;s id (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> test crawler connection OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not test crawler. </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage testCrawler(String sessionId, String organisationId, String kbId, Integer sourceId, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = testCrawlerWithHttpInfo(sessionId, organisationId, kbId, sourceId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Test Crawler
     * Some crawlers (platform crawlers, not external crawlers) can check if the given information is enough for it to operator.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-base&#39;s id (a guid) (required)
     * @param sourceId the crawler&#39;s id (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> test crawler connection OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not test crawler. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> testCrawlerWithHttpInfo(String sessionId, String organisationId, String kbId, Integer sourceId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = testCrawlerValidateBeforeCall(sessionId, organisationId, kbId, sourceId, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Test Crawler (asynchronously)
     * Some crawlers (platform crawlers, not external crawlers) can check if the given information is enough for it to operator.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-base&#39;s id (a guid) (required)
     * @param sourceId the crawler&#39;s id (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> test crawler connection OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not test crawler. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testCrawlerAsync(String sessionId, String organisationId, String kbId, Integer sourceId, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = testCrawlerValidateBeforeCall(sessionId, organisationId, kbId, sourceId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCrawler
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSource  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not save source. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> save source response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCrawlerCall(String sessionId, CMSource cmSource, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmSource;

        // create path and map variables
        String localVarPath = "/api/crawler/crawler";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCrawlerValidateBeforeCall(String sessionId, CMSource cmSource, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling updateCrawler(Async)");
        }

        // verify the required parameter 'cmSource' is set
        if (cmSource == null) {
            throw new ApiException("Missing the required parameter 'cmSource' when calling updateCrawler(Async)");
        }

        return updateCrawlerCall(sessionId, cmSource, apIVersion, _callback);

    }

    /**
     * Update Source
     * Save (create or update) a SimSage source.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSource  (required)
     * @param apIVersion  (optional)
     * @return CMSource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not save source. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> save source response </td><td>  -  </td></tr>
     </table>
     */
    public CMSource updateCrawler(String sessionId, CMSource cmSource, String apIVersion) throws ApiException {
        ApiResponse<CMSource> localVarResp = updateCrawlerWithHttpInfo(sessionId, cmSource, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Update Source
     * Save (create or update) a SimSage source.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSource  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMSource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not save source. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> save source response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMSource> updateCrawlerWithHttpInfo(String sessionId, CMSource cmSource, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = updateCrawlerValidateBeforeCall(sessionId, cmSource, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMSource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Source (asynchronously)
     * Save (create or update) a SimSage source.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSource  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not save source. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> save source response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCrawlerAsync(String sessionId, CMSource cmSource, String apIVersion, final ApiCallback<CMSource> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCrawlerValidateBeforeCall(sessionId, cmSource, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMSource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for version6
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get the version response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get version. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call version6Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/crawler/version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call version6ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return version6Call(_callback);

    }

    /**
     * Version
     * Get the version of SimSage crawler-services.
     * @return CMVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get the version response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get version. </td><td>  -  </td></tr>
     </table>
     */
    public CMVersion version6() throws ApiException {
        ApiResponse<CMVersion> localVarResp = version6WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Version
     * Get the version of SimSage crawler-services.
     * @return ApiResponse&lt;CMVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get the version response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get version. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMVersion> version6WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = version6ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CMVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Version (asynchronously)
     * Get the version of SimSage crawler-services.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get the version response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get version. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call version6Async(final ApiCallback<CMVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = version6ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CMVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
