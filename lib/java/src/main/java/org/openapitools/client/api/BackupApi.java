/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.14.12
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Backup;
import org.openapitools.client.model.CMRestoreFromText;
import org.openapitools.client.model.JsonMessage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BackupApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BackupApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BackupApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for backup
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) to backup (required)
     * @param regime what to backup, one of &#39;all&#39; (all organisations, requires admin privileges) or &#39;specific&#39; (only the given organisation) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not create backup. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> create backup OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupCall(String sessionId, String organisationId, String regime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/backup/backup/{organisationId}/{regime}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "regime" + "}", localVarApiClient.escapeString(regime.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call backupValidateBeforeCall(String sessionId, String organisationId, String regime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling backup(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling backup(Async)");
        }

        // verify the required parameter 'regime' is set
        if (regime == null) {
            throw new ApiException("Missing the required parameter 'regime' when calling backup(Async)");
        }

        return backupCall(sessionId, organisationId, regime, _callback);

    }

    /**
     * create backup
     * Backup all of SimSage (excludes indexes and documents).  Create a SimSage text file with all relevant information for a SimSage Restore on the cloud node.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) to backup (required)
     * @param regime what to backup, one of &#39;all&#39; (all organisations, requires admin privileges) or &#39;specific&#39; (only the given organisation) (required)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not create backup. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> create backup OK response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage backup(String sessionId, String organisationId, String regime) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = backupWithHttpInfo(sessionId, organisationId, regime);
        return localVarResp.getData();
    }

    /**
     * create backup
     * Backup all of SimSage (excludes indexes and documents).  Create a SimSage text file with all relevant information for a SimSage Restore on the cloud node.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) to backup (required)
     * @param regime what to backup, one of &#39;all&#39; (all organisations, requires admin privileges) or &#39;specific&#39; (only the given organisation) (required)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not create backup. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> create backup OK response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> backupWithHttpInfo(String sessionId, String organisationId, String regime) throws ApiException {
        okhttp3.Call localVarCall = backupValidateBeforeCall(sessionId, organisationId, regime, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * create backup (asynchronously)
     * Backup all of SimSage (excludes indexes and documents).  Create a SimSage text file with all relevant information for a SimSage Restore on the cloud node.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) to backup (required)
     * @param regime what to backup, one of &#39;all&#39; (all organisations, requires admin privileges) or &#39;specific&#39; (only the given organisation) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not create backup. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> create backup OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupAsync(String sessionId, String organisationId, String regime, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = backupValidateBeforeCall(sessionId, organisationId, regime, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteBackup
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) to backup (required)
     * @param backupId the backup&#39;s id (along) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not remove backup </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> remove backup, updated backup-list response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBackupCall(String sessionId, String organisationId, Long backupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/backup/backup/{organisationId}/{backupId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "backupId" + "}", localVarApiClient.escapeString(backupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBackupValidateBeforeCall(String sessionId, String organisationId, Long backupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling deleteBackup(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling deleteBackup(Async)");
        }

        // verify the required parameter 'backupId' is set
        if (backupId == null) {
            throw new ApiException("Missing the required parameter 'backupId' when calling deleteBackup(Async)");
        }

        return deleteBackupCall(sessionId, organisationId, backupId, _callback);

    }

    /**
     * remove backup
     * Delete a backup by ID and return list of all Backups present in this SimSage instance
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) to backup (required)
     * @param backupId the backup&#39;s id (along) (required)
     * @return List&lt;Backup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not remove backup </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> remove backup, updated backup-list response </td><td>  -  </td></tr>
     </table>
     */
    public List<Backup> deleteBackup(String sessionId, String organisationId, Long backupId) throws ApiException {
        ApiResponse<List<Backup>> localVarResp = deleteBackupWithHttpInfo(sessionId, organisationId, backupId);
        return localVarResp.getData();
    }

    /**
     * remove backup
     * Delete a backup by ID and return list of all Backups present in this SimSage instance
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) to backup (required)
     * @param backupId the backup&#39;s id (along) (required)
     * @return ApiResponse&lt;List&lt;Backup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not remove backup </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> remove backup, updated backup-list response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Backup>> deleteBackupWithHttpInfo(String sessionId, String organisationId, Long backupId) throws ApiException {
        okhttp3.Call localVarCall = deleteBackupValidateBeforeCall(sessionId, organisationId, backupId, null);
        Type localVarReturnType = new TypeToken<List<Backup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * remove backup (asynchronously)
     * Delete a backup by ID and return list of all Backups present in this SimSage instance
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) to backup (required)
     * @param backupId the backup&#39;s id (along) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not remove backup </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> remove backup, updated backup-list response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBackupAsync(String sessionId, String organisationId, Long backupId, final ApiCallback<List<Backup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBackupValidateBeforeCall(sessionId, organisationId, backupId, _callback);
        Type localVarReturnType = new TypeToken<List<Backup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBackup
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) for access control (required)
     * @param backupId the backup&#39;s id (along) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get backup response. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get backup. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBackupCall(String sessionId, String organisationId, Long backupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/backup/{organisationId}/{backupId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "backupId" + "}", localVarApiClient.escapeString(backupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBackupValidateBeforeCall(String sessionId, String organisationId, Long backupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getBackup(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getBackup(Async)");
        }

        // verify the required parameter 'backupId' is set
        if (backupId == null) {
            throw new ApiException("Missing the required parameter 'backupId' when calling getBackup(Async)");
        }

        return getBackupCall(sessionId, organisationId, backupId, _callback);

    }

    /**
     * get backup
     * return the backup data for a given backup-id
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) for access control (required)
     * @param backupId the backup&#39;s id (along) (required)
     * @return Backup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get backup response. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get backup. </td><td>  -  </td></tr>
     </table>
     */
    public Backup getBackup(String sessionId, String organisationId, Long backupId) throws ApiException {
        ApiResponse<Backup> localVarResp = getBackupWithHttpInfo(sessionId, organisationId, backupId);
        return localVarResp.getData();
    }

    /**
     * get backup
     * return the backup data for a given backup-id
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) for access control (required)
     * @param backupId the backup&#39;s id (along) (required)
     * @return ApiResponse&lt;Backup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get backup response. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get backup. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Backup> getBackupWithHttpInfo(String sessionId, String organisationId, Long backupId) throws ApiException {
        okhttp3.Call localVarCall = getBackupValidateBeforeCall(sessionId, organisationId, backupId, null);
        Type localVarReturnType = new TypeToken<Backup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get backup (asynchronously)
     * return the backup data for a given backup-id
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) for access control (required)
     * @param backupId the backup&#39;s id (along) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get backup response. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get backup. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBackupAsync(String sessionId, String organisationId, Long backupId, final ApiCallback<Backup> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBackupValidateBeforeCall(sessionId, organisationId, backupId, _callback);
        Type localVarReturnType = new TypeToken<Backup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBackupList
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) to backup (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get backup-list response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get backup-list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBackupListCall(String sessionId, String organisationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/backup/backups/{organisationId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBackupListValidateBeforeCall(String sessionId, String organisationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getBackupList(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getBackupList(Async)");
        }

        return getBackupListCall(sessionId, organisationId, _callback);

    }

    /**
     * get backup list
     * Get a list of all Backups present in this SimSage instance
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) to backup (required)
     * @return List&lt;Backup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get backup-list response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get backup-list. </td><td>  -  </td></tr>
     </table>
     */
    public List<Backup> getBackupList(String sessionId, String organisationId) throws ApiException {
        ApiResponse<List<Backup>> localVarResp = getBackupListWithHttpInfo(sessionId, organisationId);
        return localVarResp.getData();
    }

    /**
     * get backup list
     * Get a list of all Backups present in this SimSage instance
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) to backup (required)
     * @return ApiResponse&lt;List&lt;Backup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get backup-list response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get backup-list. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Backup>> getBackupListWithHttpInfo(String sessionId, String organisationId) throws ApiException {
        okhttp3.Call localVarCall = getBackupListValidateBeforeCall(sessionId, organisationId, null);
        Type localVarReturnType = new TypeToken<List<Backup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get backup list (asynchronously)
     * Get a list of all Backups present in this SimSage instance
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation&#39;s id (a guid) to backup (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get backup-list response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get backup-list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBackupListAsync(String sessionId, String organisationId, final ApiCallback<List<Backup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBackupListValidateBeforeCall(sessionId, organisationId, _callback);
        Type localVarReturnType = new TypeToken<List<Backup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restoreFromText
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmRestoreFromText  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> restore backup OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not restore backup. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreFromTextCall(String sessionId, CMRestoreFromText cmRestoreFromText, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmRestoreFromText;

        // create path and map variables
        String localVarPath = "/api/backup/restore";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restoreFromTextValidateBeforeCall(String sessionId, CMRestoreFromText cmRestoreFromText, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling restoreFromText(Async)");
        }

        // verify the required parameter 'cmRestoreFromText' is set
        if (cmRestoreFromText == null) {
            throw new ApiException("Missing the required parameter 'cmRestoreFromText' when calling restoreFromText(Async)");
        }

        return restoreFromTextCall(sessionId, cmRestoreFromText, _callback);

    }

    /**
     * restore backup
     * Restore parts of SimSage (documents, users, organisation/kb, roles) from a text-file.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmRestoreFromText  (required)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> restore backup OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not restore backup. </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage restoreFromText(String sessionId, CMRestoreFromText cmRestoreFromText) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = restoreFromTextWithHttpInfo(sessionId, cmRestoreFromText);
        return localVarResp.getData();
    }

    /**
     * restore backup
     * Restore parts of SimSage (documents, users, organisation/kb, roles) from a text-file.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmRestoreFromText  (required)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> restore backup OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not restore backup. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> restoreFromTextWithHttpInfo(String sessionId, CMRestoreFromText cmRestoreFromText) throws ApiException {
        okhttp3.Call localVarCall = restoreFromTextValidateBeforeCall(sessionId, cmRestoreFromText, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * restore backup (asynchronously)
     * Restore parts of SimSage (documents, users, organisation/kb, roles) from a text-file.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmRestoreFromText  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> restore backup OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not restore backup. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreFromTextAsync(String sessionId, CMRestoreFromText cmRestoreFromText, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = restoreFromTextValidateBeforeCall(sessionId, cmRestoreFromText, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
