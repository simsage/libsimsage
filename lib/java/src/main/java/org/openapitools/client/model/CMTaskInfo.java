/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.11.4
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CMTaskInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-16T13:18:33.437170740+01:00[Europe/London]")
public class CMTaskInfo {
  public static final String SERIALIZED_NAME_TASK_ID = "taskId";
  @SerializedName(SERIALIZED_NAME_TASK_ID)
  private String taskId;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_ORGANISATION_ID = "organisationId";
  @SerializedName(SERIALIZED_NAME_ORGANISATION_ID)
  private String organisationId;

  public static final String SERIALIZED_NAME_SOURCE_KB_ID = "sourceKbId";
  @SerializedName(SERIALIZED_NAME_SOURCE_KB_ID)
  private String sourceKbId;

  public static final String SERIALIZED_NAME_CRAWLER_KB_ID = "crawlerKbId";
  @SerializedName(SERIALIZED_NAME_CRAWLER_KB_ID)
  private String crawlerKbId;

  public static final String SERIALIZED_NAME_PROJECT_TYPE = "projectType";
  @SerializedName(SERIALIZED_NAME_PROJECT_TYPE)
  private String projectType;

  public static final String SERIALIZED_NAME_PROJECT_TITLE = "projectTitle";
  @SerializedName(SERIALIZED_NAME_PROJECT_TITLE)
  private String projectTitle;

  public static final String SERIALIZED_NAME_PROJECT_NARRATIVE = "projectNarrative";
  @SerializedName(SERIALIZED_NAME_PROJECT_NARRATIVE)
  private String projectNarrative;

  public static final String SERIALIZED_NAME_SLICE_ID = "sliceId";
  @SerializedName(SERIALIZED_NAME_SLICE_ID)
  private String sliceId;

  public static final String SERIALIZED_NAME_PROCESS_ID = "processId";
  @SerializedName(SERIALIZED_NAME_PROCESS_ID)
  private String processId;

  public static final String SERIALIZED_NAME_PROCESS_NAME = "processName";
  @SerializedName(SERIALIZED_NAME_PROCESS_NAME)
  private String processName;

  public static final String SERIALIZED_NAME_TASK_TYPE = "taskType";
  @SerializedName(SERIALIZED_NAME_TASK_TYPE)
  private String taskType;

  public static final String SERIALIZED_NAME_TASK_NAME = "taskName";
  @SerializedName(SERIALIZED_NAME_TASK_NAME)
  private String taskName;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_COMPLETED = "dateCompleted";
  @SerializedName(SERIALIZED_NAME_DATE_COMPLETED)
  private OffsetDateTime dateCompleted;

  public static final String SERIALIZED_NAME_POTENTIAL_USERS = "potentialUsers";
  @SerializedName(SERIALIZED_NAME_POTENTIAL_USERS)
  private String potentialUsers;

  public static final String SERIALIZED_NAME_EXCLUDED_USERS = "excludedUsers";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_USERS)
  private String excludedUsers;

  public static final String SERIALIZED_NAME_POTENTIAL_GROUPS = "potentialGroups";
  @SerializedName(SERIALIZED_NAME_POTENTIAL_GROUPS)
  private String potentialGroups;

  public static final String SERIALIZED_NAME_ASSIGNED_USER = "assignedUser";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_USER)
  private String assignedUser;

  public CMTaskInfo() {
  }

  public CMTaskInfo taskId(String taskId) {
    
    this.taskId = taskId;
    return this;
  }

   /**
   * Get taskId
   * @return taskId
  **/
  @javax.annotation.Nonnull
  public String getTaskId() {
    return taskId;
  }


  public void setTaskId(String taskId) {
    this.taskId = taskId;
  }


  public CMTaskInfo projectId(String projectId) {
    
    this.projectId = projectId;
    return this;
  }

   /**
   * Get projectId
   * @return projectId
  **/
  @javax.annotation.Nonnull
  public String getProjectId() {
    return projectId;
  }


  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  public CMTaskInfo organisationId(String organisationId) {
    
    this.organisationId = organisationId;
    return this;
  }

   /**
   * Get organisationId
   * @return organisationId
  **/
  @javax.annotation.Nonnull
  public String getOrganisationId() {
    return organisationId;
  }


  public void setOrganisationId(String organisationId) {
    this.organisationId = organisationId;
  }


  public CMTaskInfo sourceKbId(String sourceKbId) {
    
    this.sourceKbId = sourceKbId;
    return this;
  }

   /**
   * Get sourceKbId
   * @return sourceKbId
  **/
  @javax.annotation.Nonnull
  public String getSourceKbId() {
    return sourceKbId;
  }


  public void setSourceKbId(String sourceKbId) {
    this.sourceKbId = sourceKbId;
  }


  public CMTaskInfo crawlerKbId(String crawlerKbId) {
    
    this.crawlerKbId = crawlerKbId;
    return this;
  }

   /**
   * Get crawlerKbId
   * @return crawlerKbId
  **/
  @javax.annotation.Nullable
  public String getCrawlerKbId() {
    return crawlerKbId;
  }


  public void setCrawlerKbId(String crawlerKbId) {
    this.crawlerKbId = crawlerKbId;
  }


  public CMTaskInfo projectType(String projectType) {
    
    this.projectType = projectType;
    return this;
  }

   /**
   * Get projectType
   * @return projectType
  **/
  @javax.annotation.Nonnull
  public String getProjectType() {
    return projectType;
  }


  public void setProjectType(String projectType) {
    this.projectType = projectType;
  }


  public CMTaskInfo projectTitle(String projectTitle) {
    
    this.projectTitle = projectTitle;
    return this;
  }

   /**
   * Get projectTitle
   * @return projectTitle
  **/
  @javax.annotation.Nonnull
  public String getProjectTitle() {
    return projectTitle;
  }


  public void setProjectTitle(String projectTitle) {
    this.projectTitle = projectTitle;
  }


  public CMTaskInfo projectNarrative(String projectNarrative) {
    
    this.projectNarrative = projectNarrative;
    return this;
  }

   /**
   * Get projectNarrative
   * @return projectNarrative
  **/
  @javax.annotation.Nonnull
  public String getProjectNarrative() {
    return projectNarrative;
  }


  public void setProjectNarrative(String projectNarrative) {
    this.projectNarrative = projectNarrative;
  }


  public CMTaskInfo sliceId(String sliceId) {
    
    this.sliceId = sliceId;
    return this;
  }

   /**
   * Get sliceId
   * @return sliceId
  **/
  @javax.annotation.Nullable
  public String getSliceId() {
    return sliceId;
  }


  public void setSliceId(String sliceId) {
    this.sliceId = sliceId;
  }


  public CMTaskInfo processId(String processId) {
    
    this.processId = processId;
    return this;
  }

   /**
   * Get processId
   * @return processId
  **/
  @javax.annotation.Nonnull
  public String getProcessId() {
    return processId;
  }


  public void setProcessId(String processId) {
    this.processId = processId;
  }


  public CMTaskInfo processName(String processName) {
    
    this.processName = processName;
    return this;
  }

   /**
   * Get processName
   * @return processName
  **/
  @javax.annotation.Nonnull
  public String getProcessName() {
    return processName;
  }


  public void setProcessName(String processName) {
    this.processName = processName;
  }


  public CMTaskInfo taskType(String taskType) {
    
    this.taskType = taskType;
    return this;
  }

   /**
   * Get taskType
   * @return taskType
  **/
  @javax.annotation.Nonnull
  public String getTaskType() {
    return taskType;
  }


  public void setTaskType(String taskType) {
    this.taskType = taskType;
  }


  public CMTaskInfo taskName(String taskName) {
    
    this.taskName = taskName;
    return this;
  }

   /**
   * Get taskName
   * @return taskName
  **/
  @javax.annotation.Nonnull
  public String getTaskName() {
    return taskName;
  }


  public void setTaskName(String taskName) {
    this.taskName = taskName;
  }


  public CMTaskInfo dateCreated(OffsetDateTime dateCreated) {
    
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * Get dateCreated
   * @return dateCreated
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }


  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public CMTaskInfo dateCompleted(OffsetDateTime dateCompleted) {
    
    this.dateCompleted = dateCompleted;
    return this;
  }

   /**
   * Get dateCompleted
   * @return dateCompleted
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateCompleted() {
    return dateCompleted;
  }


  public void setDateCompleted(OffsetDateTime dateCompleted) {
    this.dateCompleted = dateCompleted;
  }


  public CMTaskInfo potentialUsers(String potentialUsers) {
    
    this.potentialUsers = potentialUsers;
    return this;
  }

   /**
   * Get potentialUsers
   * @return potentialUsers
  **/
  @javax.annotation.Nonnull
  public String getPotentialUsers() {
    return potentialUsers;
  }


  public void setPotentialUsers(String potentialUsers) {
    this.potentialUsers = potentialUsers;
  }


  public CMTaskInfo excludedUsers(String excludedUsers) {
    
    this.excludedUsers = excludedUsers;
    return this;
  }

   /**
   * Get excludedUsers
   * @return excludedUsers
  **/
  @javax.annotation.Nonnull
  public String getExcludedUsers() {
    return excludedUsers;
  }


  public void setExcludedUsers(String excludedUsers) {
    this.excludedUsers = excludedUsers;
  }


  public CMTaskInfo potentialGroups(String potentialGroups) {
    
    this.potentialGroups = potentialGroups;
    return this;
  }

   /**
   * Get potentialGroups
   * @return potentialGroups
  **/
  @javax.annotation.Nonnull
  public String getPotentialGroups() {
    return potentialGroups;
  }


  public void setPotentialGroups(String potentialGroups) {
    this.potentialGroups = potentialGroups;
  }


  public CMTaskInfo assignedUser(String assignedUser) {
    
    this.assignedUser = assignedUser;
    return this;
  }

   /**
   * Get assignedUser
   * @return assignedUser
  **/
  @javax.annotation.Nullable
  public String getAssignedUser() {
    return assignedUser;
  }


  public void setAssignedUser(String assignedUser) {
    this.assignedUser = assignedUser;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CMTaskInfo cmTaskInfo = (CMTaskInfo) o;
    return Objects.equals(this.taskId, cmTaskInfo.taskId) &&
        Objects.equals(this.projectId, cmTaskInfo.projectId) &&
        Objects.equals(this.organisationId, cmTaskInfo.organisationId) &&
        Objects.equals(this.sourceKbId, cmTaskInfo.sourceKbId) &&
        Objects.equals(this.crawlerKbId, cmTaskInfo.crawlerKbId) &&
        Objects.equals(this.projectType, cmTaskInfo.projectType) &&
        Objects.equals(this.projectTitle, cmTaskInfo.projectTitle) &&
        Objects.equals(this.projectNarrative, cmTaskInfo.projectNarrative) &&
        Objects.equals(this.sliceId, cmTaskInfo.sliceId) &&
        Objects.equals(this.processId, cmTaskInfo.processId) &&
        Objects.equals(this.processName, cmTaskInfo.processName) &&
        Objects.equals(this.taskType, cmTaskInfo.taskType) &&
        Objects.equals(this.taskName, cmTaskInfo.taskName) &&
        Objects.equals(this.dateCreated, cmTaskInfo.dateCreated) &&
        Objects.equals(this.dateCompleted, cmTaskInfo.dateCompleted) &&
        Objects.equals(this.potentialUsers, cmTaskInfo.potentialUsers) &&
        Objects.equals(this.excludedUsers, cmTaskInfo.excludedUsers) &&
        Objects.equals(this.potentialGroups, cmTaskInfo.potentialGroups) &&
        Objects.equals(this.assignedUser, cmTaskInfo.assignedUser);
  }

  @Override
  public int hashCode() {
    return Objects.hash(taskId, projectId, organisationId, sourceKbId, crawlerKbId, projectType, projectTitle, projectNarrative, sliceId, processId, processName, taskType, taskName, dateCreated, dateCompleted, potentialUsers, excludedUsers, potentialGroups, assignedUser);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CMTaskInfo {\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    organisationId: ").append(toIndentedString(organisationId)).append("\n");
    sb.append("    sourceKbId: ").append(toIndentedString(sourceKbId)).append("\n");
    sb.append("    crawlerKbId: ").append(toIndentedString(crawlerKbId)).append("\n");
    sb.append("    projectType: ").append(toIndentedString(projectType)).append("\n");
    sb.append("    projectTitle: ").append(toIndentedString(projectTitle)).append("\n");
    sb.append("    projectNarrative: ").append(toIndentedString(projectNarrative)).append("\n");
    sb.append("    sliceId: ").append(toIndentedString(sliceId)).append("\n");
    sb.append("    processId: ").append(toIndentedString(processId)).append("\n");
    sb.append("    processName: ").append(toIndentedString(processName)).append("\n");
    sb.append("    taskType: ").append(toIndentedString(taskType)).append("\n");
    sb.append("    taskName: ").append(toIndentedString(taskName)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateCompleted: ").append(toIndentedString(dateCompleted)).append("\n");
    sb.append("    potentialUsers: ").append(toIndentedString(potentialUsers)).append("\n");
    sb.append("    excludedUsers: ").append(toIndentedString(excludedUsers)).append("\n");
    sb.append("    potentialGroups: ").append(toIndentedString(potentialGroups)).append("\n");
    sb.append("    assignedUser: ").append(toIndentedString(assignedUser)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("taskId");
    openapiFields.add("projectId");
    openapiFields.add("organisationId");
    openapiFields.add("sourceKbId");
    openapiFields.add("crawlerKbId");
    openapiFields.add("projectType");
    openapiFields.add("projectTitle");
    openapiFields.add("projectNarrative");
    openapiFields.add("sliceId");
    openapiFields.add("processId");
    openapiFields.add("processName");
    openapiFields.add("taskType");
    openapiFields.add("taskName");
    openapiFields.add("dateCreated");
    openapiFields.add("dateCompleted");
    openapiFields.add("potentialUsers");
    openapiFields.add("excludedUsers");
    openapiFields.add("potentialGroups");
    openapiFields.add("assignedUser");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("taskId");
    openapiRequiredFields.add("projectId");
    openapiRequiredFields.add("organisationId");
    openapiRequiredFields.add("sourceKbId");
    openapiRequiredFields.add("projectType");
    openapiRequiredFields.add("projectTitle");
    openapiRequiredFields.add("projectNarrative");
    openapiRequiredFields.add("processId");
    openapiRequiredFields.add("processName");
    openapiRequiredFields.add("taskType");
    openapiRequiredFields.add("taskName");
    openapiRequiredFields.add("dateCreated");
    openapiRequiredFields.add("potentialUsers");
    openapiRequiredFields.add("excludedUsers");
    openapiRequiredFields.add("potentialGroups");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CMTaskInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CMTaskInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CMTaskInfo is not found in the empty JSON string", CMTaskInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CMTaskInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CMTaskInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CMTaskInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("taskId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskId").toString()));
      }
      if (!jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if (!jsonObj.get("organisationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organisationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organisationId").toString()));
      }
      if (!jsonObj.get("sourceKbId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceKbId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceKbId").toString()));
      }
      if ((jsonObj.get("crawlerKbId") != null && !jsonObj.get("crawlerKbId").isJsonNull()) && !jsonObj.get("crawlerKbId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crawlerKbId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crawlerKbId").toString()));
      }
      if (!jsonObj.get("projectType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectType").toString()));
      }
      if (!jsonObj.get("projectTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectTitle").toString()));
      }
      if (!jsonObj.get("projectNarrative").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectNarrative` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectNarrative").toString()));
      }
      if ((jsonObj.get("sliceId") != null && !jsonObj.get("sliceId").isJsonNull()) && !jsonObj.get("sliceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sliceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sliceId").toString()));
      }
      if (!jsonObj.get("processId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processId").toString()));
      }
      if (!jsonObj.get("processName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processName").toString()));
      }
      if (!jsonObj.get("taskType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskType").toString()));
      }
      if (!jsonObj.get("taskName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskName").toString()));
      }
      if (!jsonObj.get("potentialUsers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `potentialUsers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("potentialUsers").toString()));
      }
      if (!jsonObj.get("excludedUsers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedUsers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("excludedUsers").toString()));
      }
      if (!jsonObj.get("potentialGroups").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `potentialGroups` to be a primitive type in the JSON string but got `%s`", jsonObj.get("potentialGroups").toString()));
      }
      if ((jsonObj.get("assignedUser") != null && !jsonObj.get("assignedUser").isJsonNull()) && !jsonObj.get("assignedUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignedUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assignedUser").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CMTaskInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CMTaskInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CMTaskInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CMTaskInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<CMTaskInfo>() {
           @Override
           public void write(JsonWriter out, CMTaskInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CMTaskInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CMTaskInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CMTaskInfo
  * @throws IOException if the JSON string is invalid with respect to CMTaskInfo
  */
  public static CMTaskInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CMTaskInfo.class);
  }

 /**
  * Convert an instance of CMTaskInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

