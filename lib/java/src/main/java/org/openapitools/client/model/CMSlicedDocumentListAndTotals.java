/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.13.31
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CMPagedResultsCMSlicedDocument;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CMSlicedDocumentListAndTotals
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-06T16:03:21.377776023Z[Europe/London]")
public class CMSlicedDocumentListAndTotals {
  public static final String SERIALIZED_NAME_PAGED_RESULTS = "pagedResults";
  @SerializedName(SERIALIZED_NAME_PAGED_RESULTS)
  private CMPagedResultsCMSlicedDocument pagedResults;

  public static final String SERIALIZED_NAME_ALL_DOCS = "allDocs";
  @SerializedName(SERIALIZED_NAME_ALL_DOCS)
  private Long allDocs;

  public static final String SERIALIZED_NAME_COMPLETED = "completed";
  @SerializedName(SERIALIZED_NAME_COMPLETED)
  private Long completed;

  public static final String SERIALIZED_NAME_QUARANTINED = "quarantined";
  @SerializedName(SERIALIZED_NAME_QUARANTINED)
  private Long quarantined;

  public static final String SERIALIZED_NAME_SOURCE_MAP = "sourceMap";
  @SerializedName(SERIALIZED_NAME_SOURCE_MAP)
  private Map<String, String> sourceMap = new HashMap<>();

  public static final String SERIALIZED_NAME_USER_MAP = "userMap";
  @SerializedName(SERIALIZED_NAME_USER_MAP)
  private Map<String, String> userMap = new HashMap<>();

  public CMSlicedDocumentListAndTotals() {
  }

  public CMSlicedDocumentListAndTotals pagedResults(CMPagedResultsCMSlicedDocument pagedResults) {
    
    this.pagedResults = pagedResults;
    return this;
  }

   /**
   * Get pagedResults
   * @return pagedResults
  **/
  @javax.annotation.Nonnull
  public CMPagedResultsCMSlicedDocument getPagedResults() {
    return pagedResults;
  }


  public void setPagedResults(CMPagedResultsCMSlicedDocument pagedResults) {
    this.pagedResults = pagedResults;
  }


  public CMSlicedDocumentListAndTotals allDocs(Long allDocs) {
    
    this.allDocs = allDocs;
    return this;
  }

   /**
   * Get allDocs
   * @return allDocs
  **/
  @javax.annotation.Nonnull
  public Long getAllDocs() {
    return allDocs;
  }


  public void setAllDocs(Long allDocs) {
    this.allDocs = allDocs;
  }


  public CMSlicedDocumentListAndTotals completed(Long completed) {
    
    this.completed = completed;
    return this;
  }

   /**
   * Get completed
   * @return completed
  **/
  @javax.annotation.Nonnull
  public Long getCompleted() {
    return completed;
  }


  public void setCompleted(Long completed) {
    this.completed = completed;
  }


  public CMSlicedDocumentListAndTotals quarantined(Long quarantined) {
    
    this.quarantined = quarantined;
    return this;
  }

   /**
   * Get quarantined
   * @return quarantined
  **/
  @javax.annotation.Nonnull
  public Long getQuarantined() {
    return quarantined;
  }


  public void setQuarantined(Long quarantined) {
    this.quarantined = quarantined;
  }


  public CMSlicedDocumentListAndTotals sourceMap(Map<String, String> sourceMap) {
    
    this.sourceMap = sourceMap;
    return this;
  }

  public CMSlicedDocumentListAndTotals putSourceMapItem(String key, String sourceMapItem) {
    if (this.sourceMap == null) {
      this.sourceMap = new HashMap<>();
    }
    this.sourceMap.put(key, sourceMapItem);
    return this;
  }

   /**
   * Get sourceMap
   * @return sourceMap
  **/
  @javax.annotation.Nonnull
  public Map<String, String> getSourceMap() {
    return sourceMap;
  }


  public void setSourceMap(Map<String, String> sourceMap) {
    this.sourceMap = sourceMap;
  }


  public CMSlicedDocumentListAndTotals userMap(Map<String, String> userMap) {
    
    this.userMap = userMap;
    return this;
  }

  public CMSlicedDocumentListAndTotals putUserMapItem(String key, String userMapItem) {
    if (this.userMap == null) {
      this.userMap = new HashMap<>();
    }
    this.userMap.put(key, userMapItem);
    return this;
  }

   /**
   * Get userMap
   * @return userMap
  **/
  @javax.annotation.Nonnull
  public Map<String, String> getUserMap() {
    return userMap;
  }


  public void setUserMap(Map<String, String> userMap) {
    this.userMap = userMap;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CMSlicedDocumentListAndTotals cmSlicedDocumentListAndTotals = (CMSlicedDocumentListAndTotals) o;
    return Objects.equals(this.pagedResults, cmSlicedDocumentListAndTotals.pagedResults) &&
        Objects.equals(this.allDocs, cmSlicedDocumentListAndTotals.allDocs) &&
        Objects.equals(this.completed, cmSlicedDocumentListAndTotals.completed) &&
        Objects.equals(this.quarantined, cmSlicedDocumentListAndTotals.quarantined) &&
        Objects.equals(this.sourceMap, cmSlicedDocumentListAndTotals.sourceMap) &&
        Objects.equals(this.userMap, cmSlicedDocumentListAndTotals.userMap);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pagedResults, allDocs, completed, quarantined, sourceMap, userMap);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CMSlicedDocumentListAndTotals {\n");
    sb.append("    pagedResults: ").append(toIndentedString(pagedResults)).append("\n");
    sb.append("    allDocs: ").append(toIndentedString(allDocs)).append("\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    quarantined: ").append(toIndentedString(quarantined)).append("\n");
    sb.append("    sourceMap: ").append(toIndentedString(sourceMap)).append("\n");
    sb.append("    userMap: ").append(toIndentedString(userMap)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pagedResults");
    openapiFields.add("allDocs");
    openapiFields.add("completed");
    openapiFields.add("quarantined");
    openapiFields.add("sourceMap");
    openapiFields.add("userMap");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pagedResults");
    openapiRequiredFields.add("allDocs");
    openapiRequiredFields.add("completed");
    openapiRequiredFields.add("quarantined");
    openapiRequiredFields.add("sourceMap");
    openapiRequiredFields.add("userMap");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CMSlicedDocumentListAndTotals
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CMSlicedDocumentListAndTotals.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CMSlicedDocumentListAndTotals is not found in the empty JSON string", CMSlicedDocumentListAndTotals.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CMSlicedDocumentListAndTotals.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CMSlicedDocumentListAndTotals` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CMSlicedDocumentListAndTotals.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `pagedResults`
      CMPagedResultsCMSlicedDocument.validateJsonElement(jsonObj.get("pagedResults"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CMSlicedDocumentListAndTotals.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CMSlicedDocumentListAndTotals' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CMSlicedDocumentListAndTotals> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CMSlicedDocumentListAndTotals.class));

       return (TypeAdapter<T>) new TypeAdapter<CMSlicedDocumentListAndTotals>() {
           @Override
           public void write(JsonWriter out, CMSlicedDocumentListAndTotals value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CMSlicedDocumentListAndTotals read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CMSlicedDocumentListAndTotals given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CMSlicedDocumentListAndTotals
  * @throws IOException if the JSON string is invalid with respect to CMSlicedDocumentListAndTotals
  */
  public static CMSlicedDocumentListAndTotals fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CMSlicedDocumentListAndTotals.class);
  }

 /**
  * Convert an instance of CMSlicedDocumentListAndTotals to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

