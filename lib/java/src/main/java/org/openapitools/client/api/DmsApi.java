/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.14.12
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CMAddFolder;
import org.openapitools.client.model.CMAddSourceFolder;
import org.openapitools.client.model.CMClientQuery;
import org.openapitools.client.model.CMClientQueryResult;
import org.openapitools.client.model.CMDUserDashboard;
import org.openapitools.client.model.CMDocument;
import org.openapitools.client.model.CMDocumentAudit;
import org.openapitools.client.model.CMDocumentBookmark;
import org.openapitools.client.model.CMDocumentFolder;
import org.openapitools.client.model.CMDocumentHashTag;
import org.openapitools.client.model.CMDocumentLock;
import org.openapitools.client.model.CMDocumentNote;
import org.openapitools.client.model.CMDocumentSubscription;
import org.openapitools.client.model.CMSavedSearch;
import org.openapitools.client.model.CMSubscriptions;
import org.openapitools.client.model.CMUpdateACLs;
import org.openapitools.client.model.CMUserNotification;
import org.openapitools.client.model.DocumentBookmark;
import org.openapitools.client.model.DocumentDeleted;
import java.io.File;
import org.openapitools.client.model.JsonMessage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DmsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DmsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DmsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addFolder
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmAddFolder  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFolderCall(String sessionId, CMAddFolder cmAddFolder, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmAddFolder;

        // create path and map variables
        String localVarPath = "/api/dms/folder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFolderValidateBeforeCall(String sessionId, CMAddFolder cmAddFolder, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling addFolder(Async)");
        }

        // verify the required parameter 'cmAddFolder' is set
        if (cmAddFolder == null) {
            throw new ApiException("Missing the required parameter 'cmAddFolder' when calling addFolder(Async)");
        }

        return addFolderCall(sessionId, cmAddFolder, apIVersion, _callback);

    }

    /**
     * Add a new folder
     * Add a new folder to the SimSage DMS.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmAddFolder  (required)
     * @param apIVersion  (optional)
     * @return CMDocumentFolder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public CMDocumentFolder addFolder(String sessionId, CMAddFolder cmAddFolder, String apIVersion) throws ApiException {
        ApiResponse<CMDocumentFolder> localVarResp = addFolderWithHttpInfo(sessionId, cmAddFolder, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Add a new folder
     * Add a new folder to the SimSage DMS.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmAddFolder  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMDocumentFolder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMDocumentFolder> addFolderWithHttpInfo(String sessionId, CMAddFolder cmAddFolder, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = addFolderValidateBeforeCall(sessionId, cmAddFolder, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMDocumentFolder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new folder (asynchronously)
     * Add a new folder to the SimSage DMS.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmAddFolder  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFolderAsync(String sessionId, CMAddFolder cmAddFolder, String apIVersion, final ApiCallback<CMDocumentFolder> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFolderValidateBeforeCall(sessionId, cmAddFolder, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMDocumentFolder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addSourceFolder
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmAddSourceFolder  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addSourceFolderCall(String sessionId, CMAddSourceFolder cmAddSourceFolder, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmAddSourceFolder;

        // create path and map variables
        String localVarPath = "/api/dms/source";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addSourceFolderValidateBeforeCall(String sessionId, CMAddSourceFolder cmAddSourceFolder, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling addSourceFolder(Async)");
        }

        // verify the required parameter 'cmAddSourceFolder' is set
        if (cmAddSourceFolder == null) {
            throw new ApiException("Missing the required parameter 'cmAddSourceFolder' when calling addSourceFolder(Async)");
        }

        return addSourceFolderCall(sessionId, cmAddSourceFolder, apIVersion, _callback);

    }

    /**
     * Add a new source-folder
     * Add a new top-level folder (source folder) to the SimSage DMS.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmAddSourceFolder  (required)
     * @param apIVersion  (optional)
     * @return CMDocumentFolder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public CMDocumentFolder addSourceFolder(String sessionId, CMAddSourceFolder cmAddSourceFolder, String apIVersion) throws ApiException {
        ApiResponse<CMDocumentFolder> localVarResp = addSourceFolderWithHttpInfo(sessionId, cmAddSourceFolder, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Add a new source-folder
     * Add a new top-level folder (source folder) to the SimSage DMS.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmAddSourceFolder  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMDocumentFolder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMDocumentFolder> addSourceFolderWithHttpInfo(String sessionId, CMAddSourceFolder cmAddSourceFolder, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = addSourceFolderValidateBeforeCall(sessionId, cmAddSourceFolder, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMDocumentFolder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new source-folder (asynchronously)
     * Add a new top-level folder (source folder) to the SimSage DMS.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmAddSourceFolder  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addSourceFolderAsync(String sessionId, CMAddSourceFolder cmAddSourceFolder, String apIVersion, final ApiCallback<CMDocumentFolder> _callback) throws ApiException {

        okhttp3.Call localVarCall = addSourceFolderValidateBeforeCall(sessionId, cmAddSourceFolder, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMDocumentFolder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAllNotes
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url the base64 encoded url value (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAllNotesCall(String sessionId, String organisationId, String kbId, String url, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dms/note/{organisationId}/{kbId}/{url}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "url" + "}", localVarApiClient.escapeString(url.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAllNotesValidateBeforeCall(String sessionId, String organisationId, String kbId, String url, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling deleteAllNotes(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling deleteAllNotes(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling deleteAllNotes(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling deleteAllNotes(Async)");
        }

        return deleteAllNotesCall(sessionId, organisationId, kbId, url, apIVersion, _callback);

    }

    /**
     * delete all Notes
     * delete all notes associated with a document
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url the base64 encoded url value (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage deleteAllNotes(String sessionId, String organisationId, String kbId, String url, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = deleteAllNotesWithHttpInfo(sessionId, organisationId, kbId, url, apIVersion);
        return localVarResp.getData();
    }

    /**
     * delete all Notes
     * delete all notes associated with a document
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url the base64 encoded url value (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> deleteAllNotesWithHttpInfo(String sessionId, String organisationId, String kbId, String url, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteAllNotesValidateBeforeCall(sessionId, organisationId, kbId, url, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * delete all Notes (asynchronously)
     * delete all notes associated with a document
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url the base64 encoded url value (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAllNotesAsync(String sessionId, String organisationId, String kbId, String url, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAllNotesValidateBeforeCall(sessionId, organisationId, kbId, url, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteBookmark
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param url the base64 encoded url value (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBookmarkCall(String sessionId, String organisationId, String kbId, String userId, String url, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dms/bookmark/{organisationId}/{kbId}/{userId}/{url}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "url" + "}", localVarApiClient.escapeString(url.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBookmarkValidateBeforeCall(String sessionId, String organisationId, String kbId, String userId, String url, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling deleteBookmark(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling deleteBookmark(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling deleteBookmark(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteBookmark(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling deleteBookmark(Async)");
        }

        return deleteBookmarkCall(sessionId, organisationId, kbId, userId, url, apIVersion, _callback);

    }

    /**
     * Delete a Bookmark
     * Delete a user&#39;s bookmark associated with a document
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param url the base64 encoded url value (required)
     * @param apIVersion  (optional)
     * @return List&lt;CMDocumentBookmark&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public List<CMDocumentBookmark> deleteBookmark(String sessionId, String organisationId, String kbId, String userId, String url, String apIVersion) throws ApiException {
        ApiResponse<List<CMDocumentBookmark>> localVarResp = deleteBookmarkWithHttpInfo(sessionId, organisationId, kbId, userId, url, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Delete a Bookmark
     * Delete a user&#39;s bookmark associated with a document
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param url the base64 encoded url value (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;List&lt;CMDocumentBookmark&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CMDocumentBookmark>> deleteBookmarkWithHttpInfo(String sessionId, String organisationId, String kbId, String userId, String url, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteBookmarkValidateBeforeCall(sessionId, organisationId, kbId, userId, url, apIVersion, null);
        Type localVarReturnType = new TypeToken<List<CMDocumentBookmark>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Bookmark (asynchronously)
     * Delete a user&#39;s bookmark associated with a document
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param url the base64 encoded url value (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBookmarkAsync(String sessionId, String organisationId, String kbId, String userId, String url, String apIVersion, final ApiCallback<List<CMDocumentBookmark>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBookmarkValidateBeforeCall(sessionId, organisationId, kbId, userId, url, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<CMDocumentBookmark>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDocumentOrFolder
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param isFolder is this a folder or a document? (required)
     * @param sourceId the source-id of the item being deleted (required)
     * @param url the base64 encoded url value (required)
     * @param folderId the folder&#39;s id (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentOrFolderCall(String sessionId, String organisationId, String kbId, Boolean isFolder, Integer sourceId, String url, String folderId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dms/document/delete/{organisationId}/{kbId}/{isFolder}/{sourceId}/{url}/{folderId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "isFolder" + "}", localVarApiClient.escapeString(isFolder.toString()))
            .replace("{" + "sourceId" + "}", localVarApiClient.escapeString(sourceId.toString()))
            .replace("{" + "url" + "}", localVarApiClient.escapeString(url.toString()))
            .replace("{" + "folderId" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDocumentOrFolderValidateBeforeCall(String sessionId, String organisationId, String kbId, Boolean isFolder, Integer sourceId, String url, String folderId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling deleteDocumentOrFolder(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling deleteDocumentOrFolder(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling deleteDocumentOrFolder(Async)");
        }

        // verify the required parameter 'isFolder' is set
        if (isFolder == null) {
            throw new ApiException("Missing the required parameter 'isFolder' when calling deleteDocumentOrFolder(Async)");
        }

        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling deleteDocumentOrFolder(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling deleteDocumentOrFolder(Async)");
        }

        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling deleteDocumentOrFolder(Async)");
        }

        return deleteDocumentOrFolderCall(sessionId, organisationId, kbId, isFolder, sourceId, url, folderId, apIVersion, _callback);

    }

    /**
     * Delete a document or a folder
     * Mark a document/folder as deleted in the SimSage DMS.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param isFolder is this a folder or a document? (required)
     * @param sourceId the source-id of the item being deleted (required)
     * @param url the base64 encoded url value (required)
     * @param folderId the folder&#39;s id (required)
     * @param apIVersion  (optional)
     * @return CMDocumentFolder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public CMDocumentFolder deleteDocumentOrFolder(String sessionId, String organisationId, String kbId, Boolean isFolder, Integer sourceId, String url, String folderId, String apIVersion) throws ApiException {
        ApiResponse<CMDocumentFolder> localVarResp = deleteDocumentOrFolderWithHttpInfo(sessionId, organisationId, kbId, isFolder, sourceId, url, folderId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Delete a document or a folder
     * Mark a document/folder as deleted in the SimSage DMS.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param isFolder is this a folder or a document? (required)
     * @param sourceId the source-id of the item being deleted (required)
     * @param url the base64 encoded url value (required)
     * @param folderId the folder&#39;s id (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMDocumentFolder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMDocumentFolder> deleteDocumentOrFolderWithHttpInfo(String sessionId, String organisationId, String kbId, Boolean isFolder, Integer sourceId, String url, String folderId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteDocumentOrFolderValidateBeforeCall(sessionId, organisationId, kbId, isFolder, sourceId, url, folderId, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMDocumentFolder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a document or a folder (asynchronously)
     * Mark a document/folder as deleted in the SimSage DMS.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param isFolder is this a folder or a document? (required)
     * @param sourceId the source-id of the item being deleted (required)
     * @param url the base64 encoded url value (required)
     * @param folderId the folder&#39;s id (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentOrFolderAsync(String sessionId, String organisationId, String kbId, Boolean isFolder, Integer sourceId, String url, String folderId, String apIVersion, final ApiCallback<CMDocumentFolder> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDocumentOrFolderValidateBeforeCall(sessionId, organisationId, kbId, isFolder, sourceId, url, folderId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMDocumentFolder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNote
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url the base64 encoded url value (required)
     * @param noteId the id of the note to delete (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNoteCall(String sessionId, String organisationId, String kbId, String url, Integer noteId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dms/note/{organisationId}/{kbId}/{url}/{noteId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "url" + "}", localVarApiClient.escapeString(url.toString()))
            .replace("{" + "noteId" + "}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNoteValidateBeforeCall(String sessionId, String organisationId, String kbId, String url, Integer noteId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling deleteNote(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling deleteNote(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling deleteNote(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling deleteNote(Async)");
        }

        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling deleteNote(Async)");
        }

        return deleteNoteCall(sessionId, organisationId, kbId, url, noteId, apIVersion, _callback);

    }

    /**
     * Delete a Note
     * Delete a note associated with a document
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url the base64 encoded url value (required)
     * @param noteId the id of the note to delete (required)
     * @param apIVersion  (optional)
     * @return List&lt;CMDocumentNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public List<CMDocumentNote> deleteNote(String sessionId, String organisationId, String kbId, String url, Integer noteId, String apIVersion) throws ApiException {
        ApiResponse<List<CMDocumentNote>> localVarResp = deleteNoteWithHttpInfo(sessionId, organisationId, kbId, url, noteId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Delete a Note
     * Delete a note associated with a document
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url the base64 encoded url value (required)
     * @param noteId the id of the note to delete (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;List&lt;CMDocumentNote&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CMDocumentNote>> deleteNoteWithHttpInfo(String sessionId, String organisationId, String kbId, String url, Integer noteId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteNoteValidateBeforeCall(sessionId, organisationId, kbId, url, noteId, apIVersion, null);
        Type localVarReturnType = new TypeToken<List<CMDocumentNote>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Note (asynchronously)
     * Delete a note associated with a document
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url the base64 encoded url value (required)
     * @param noteId the id of the note to delete (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNoteAsync(String sessionId, String organisationId, String kbId, String url, Integer noteId, String apIVersion, final ApiCallback<List<CMDocumentNote>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNoteValidateBeforeCall(sessionId, organisationId, kbId, url, noteId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<CMDocumentNote>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSourceFolder
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sourceId the sourceId of the source-folder to remove (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSourceFolderCall(String sessionId, String organisationId, String kbId, Integer sourceId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dms/source/{organisationId}/{kbId}/{sourceId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "sourceId" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSourceFolderValidateBeforeCall(String sessionId, String organisationId, String kbId, Integer sourceId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling deleteSourceFolder(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling deleteSourceFolder(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling deleteSourceFolder(Async)");
        }

        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling deleteSourceFolder(Async)");
        }

        return deleteSourceFolderCall(sessionId, organisationId, kbId, sourceId, apIVersion, _callback);

    }

    /**
     * Remove source-folder
     * Remove an existing top-level folder (source folder) from the SimSage DMS.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sourceId the sourceId of the source-folder to remove (required)
     * @param apIVersion  (optional)
     * @return CMDocumentFolder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public CMDocumentFolder deleteSourceFolder(String sessionId, String organisationId, String kbId, Integer sourceId, String apIVersion) throws ApiException {
        ApiResponse<CMDocumentFolder> localVarResp = deleteSourceFolderWithHttpInfo(sessionId, organisationId, kbId, sourceId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Remove source-folder
     * Remove an existing top-level folder (source folder) from the SimSage DMS.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sourceId the sourceId of the source-folder to remove (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMDocumentFolder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMDocumentFolder> deleteSourceFolderWithHttpInfo(String sessionId, String organisationId, String kbId, Integer sourceId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteSourceFolderValidateBeforeCall(sessionId, organisationId, kbId, sourceId, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMDocumentFolder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove source-folder (asynchronously)
     * Remove an existing top-level folder (source folder) from the SimSage DMS.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sourceId the sourceId of the source-folder to remove (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSourceFolderAsync(String sessionId, String organisationId, String kbId, Integer sourceId, String apIVersion, final ApiCallback<CMDocumentFolder> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSourceFolderValidateBeforeCall(sessionId, organisationId, kbId, sourceId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMDocumentFolder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSubscription
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param url the base64 encoded url value (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSubscriptionCall(String sessionId, String organisationId, String kbId, String userId, String url, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dms/subscription/{organisationId}/{kbId}/{userId}/{url}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "url" + "}", localVarApiClient.escapeString(url.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSubscriptionValidateBeforeCall(String sessionId, String organisationId, String kbId, String userId, String url, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling deleteSubscription(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling deleteSubscription(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling deleteSubscription(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteSubscription(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling deleteSubscription(Async)");
        }

        return deleteSubscriptionCall(sessionId, organisationId, kbId, userId, url, apIVersion, _callback);

    }

    /**
     * Delete a Subscription
     * Delete a user&#39;s subscription associated with a document, returns an updated subscription set.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param url the base64 encoded url value (required)
     * @param apIVersion  (optional)
     * @return CMSubscriptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public CMSubscriptions deleteSubscription(String sessionId, String organisationId, String kbId, String userId, String url, String apIVersion) throws ApiException {
        ApiResponse<CMSubscriptions> localVarResp = deleteSubscriptionWithHttpInfo(sessionId, organisationId, kbId, userId, url, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Delete a Subscription
     * Delete a user&#39;s subscription associated with a document, returns an updated subscription set.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param url the base64 encoded url value (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMSubscriptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMSubscriptions> deleteSubscriptionWithHttpInfo(String sessionId, String organisationId, String kbId, String userId, String url, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteSubscriptionValidateBeforeCall(sessionId, organisationId, kbId, userId, url, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMSubscriptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Subscription (asynchronously)
     * Delete a user&#39;s subscription associated with a document, returns an updated subscription set.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param url the base64 encoded url value (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSubscriptionAsync(String sessionId, String organisationId, String kbId, String userId, String url, String apIVersion, final ApiCallback<CMSubscriptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSubscriptionValidateBeforeCall(sessionId, organisationId, kbId, userId, url, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMSubscriptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUserSearch
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param text the base64 encoded search-text value (required)
     * @param top how many records to return (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserSearchCall(String sessionId, String organisationId, String kbId, String userId, String text, Integer top, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dms/saved-search/{organisationId}/{kbId}/{userId}/{text}/{top}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "text" + "}", localVarApiClient.escapeString(text.toString()))
            .replace("{" + "top" + "}", localVarApiClient.escapeString(top.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserSearchValidateBeforeCall(String sessionId, String organisationId, String kbId, String userId, String text, Integer top, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling deleteUserSearch(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling deleteUserSearch(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling deleteUserSearch(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUserSearch(Async)");
        }

        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling deleteUserSearch(Async)");
        }

        // verify the required parameter 'top' is set
        if (top == null) {
            throw new ApiException("Missing the required parameter 'top' when calling deleteUserSearch(Async)");
        }

        return deleteUserSearchCall(sessionId, organisationId, kbId, userId, text, top, apIVersion, _callback);

    }

    /**
     * Delete a Saved Search
     * Delete a user&#39;s saved search
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param text the base64 encoded search-text value (required)
     * @param top how many records to return (required)
     * @param apIVersion  (optional)
     * @return List&lt;CMSavedSearch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public List<CMSavedSearch> deleteUserSearch(String sessionId, String organisationId, String kbId, String userId, String text, Integer top, String apIVersion) throws ApiException {
        ApiResponse<List<CMSavedSearch>> localVarResp = deleteUserSearchWithHttpInfo(sessionId, organisationId, kbId, userId, text, top, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Delete a Saved Search
     * Delete a user&#39;s saved search
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param text the base64 encoded search-text value (required)
     * @param top how many records to return (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;List&lt;CMSavedSearch&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CMSavedSearch>> deleteUserSearchWithHttpInfo(String sessionId, String organisationId, String kbId, String userId, String text, Integer top, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteUserSearchValidateBeforeCall(sessionId, organisationId, kbId, userId, text, top, apIVersion, null);
        Type localVarReturnType = new TypeToken<List<CMSavedSearch>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Saved Search (asynchronously)
     * Delete a user&#39;s saved search
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param text the base64 encoded search-text value (required)
     * @param top how many records to return (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserSearchAsync(String sessionId, String organisationId, String kbId, String userId, String text, Integer top, String apIVersion, final ApiCallback<List<CMSavedSearch>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserSearchValidateBeforeCall(sessionId, organisationId, kbId, userId, text, top, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<CMSavedSearch>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for document1
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param urlId the document&#39;s url-id, a unique id identifying a document. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call document1Call(String sessionId, String organisationId, String kbId, Integer urlId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dms/document/{organisationId}/{kbId}/{urlId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "urlId" + "}", localVarApiClient.escapeString(urlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call document1ValidateBeforeCall(String sessionId, String organisationId, String kbId, Integer urlId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling document1(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling document1(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling document1(Async)");
        }

        // verify the required parameter 'urlId' is set
        if (urlId == null) {
            throw new ApiException("Missing the required parameter 'urlId' when calling document1(Async)");
        }

        return document1Call(sessionId, organisationId, kbId, urlId, _callback);

    }

    /**
     * Get Document
     * Return a document&#39;s details by url-id
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param urlId the document&#39;s url-id, a unique id identifying a document. (required)
     * @return CMDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public CMDocument document1(String sessionId, String organisationId, String kbId, Integer urlId) throws ApiException {
        ApiResponse<CMDocument> localVarResp = document1WithHttpInfo(sessionId, organisationId, kbId, urlId);
        return localVarResp.getData();
    }

    /**
     * Get Document
     * Return a document&#39;s details by url-id
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param urlId the document&#39;s url-id, a unique id identifying a document. (required)
     * @return ApiResponse&lt;CMDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMDocument> document1WithHttpInfo(String sessionId, String organisationId, String kbId, Integer urlId) throws ApiException {
        okhttp3.Call localVarCall = document1ValidateBeforeCall(sessionId, organisationId, kbId, urlId, null);
        Type localVarReturnType = new TypeToken<CMDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Document (asynchronously)
     * Return a document&#39;s details by url-id
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param urlId the document&#39;s url-id, a unique id identifying a document. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call document1Async(String sessionId, String organisationId, String kbId, Integer urlId, final ApiCallback<CMDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = document1ValidateBeforeCall(sessionId, organisationId, kbId, urlId, _callback);
        Type localVarReturnType = new TypeToken<CMDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentBinary
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url a base64 encoded url (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> document binary response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentBinaryCall(String sessionId, String organisationId, String kbId, String url, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dms/binary/latest/{organisationId}/{kbId}/{url}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "url" + "}", localVarApiClient.escapeString(url.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentBinaryValidateBeforeCall(String sessionId, String organisationId, String kbId, String url, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling documentBinary(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling documentBinary(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling documentBinary(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling documentBinary(Async)");
        }

        return documentBinaryCall(sessionId, organisationId, kbId, url, _callback);

    }

    /**
     * Binary
     * Get the original for a document if available by url (latest version)
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url a base64 encoded url (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> document binary response </td><td>  -  </td></tr>
     </table>
     */
    public byte[] documentBinary(String sessionId, String organisationId, String kbId, String url) throws ApiException {
        ApiResponse<byte[]> localVarResp = documentBinaryWithHttpInfo(sessionId, organisationId, kbId, url);
        return localVarResp.getData();
    }

    /**
     * Binary
     * Get the original for a document if available by url (latest version)
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url a base64 encoded url (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> document binary response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<byte[]> documentBinaryWithHttpInfo(String sessionId, String organisationId, String kbId, String url) throws ApiException {
        okhttp3.Call localVarCall = documentBinaryValidateBeforeCall(sessionId, organisationId, kbId, url, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Binary (asynchronously)
     * Get the original for a document if available by url (latest version)
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url a base64 encoded url (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> document binary response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentBinaryAsync(String sessionId, String organisationId, String kbId, String url, final ApiCallback<byte[]> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentBinaryValidateBeforeCall(sessionId, organisationId, kbId, url, _callback);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentVersion
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url the document&#39;s url, base64 encoded.  A unique id identifying a document. (required)
     * @param version the document&#39;s binary version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> document binary response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentVersionCall(String sessionId, String organisationId, String kbId, String url, Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dms/binary/{organisationId}/{kbId}/{url}/{version}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "url" + "}", localVarApiClient.escapeString(url.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentVersionValidateBeforeCall(String sessionId, String organisationId, String kbId, String url, Integer version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling documentVersion(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling documentVersion(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling documentVersion(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling documentVersion(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling documentVersion(Async)");
        }

        return documentVersionCall(sessionId, organisationId, kbId, url, version, _callback);

    }

    /**
     * Get Binary Document
     * Return a document&#39;s binary by url and version
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url the document&#39;s url, base64 encoded.  A unique id identifying a document. (required)
     * @param version the document&#39;s binary version. (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> document binary response </td><td>  -  </td></tr>
     </table>
     */
    public byte[] documentVersion(String sessionId, String organisationId, String kbId, String url, Integer version) throws ApiException {
        ApiResponse<byte[]> localVarResp = documentVersionWithHttpInfo(sessionId, organisationId, kbId, url, version);
        return localVarResp.getData();
    }

    /**
     * Get Binary Document
     * Return a document&#39;s binary by url and version
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url the document&#39;s url, base64 encoded.  A unique id identifying a document. (required)
     * @param version the document&#39;s binary version. (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> document binary response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<byte[]> documentVersionWithHttpInfo(String sessionId, String organisationId, String kbId, String url, Integer version) throws ApiException {
        okhttp3.Call localVarCall = documentVersionValidateBeforeCall(sessionId, organisationId, kbId, url, version, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Binary Document (asynchronously)
     * Return a document&#39;s binary by url and version
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url the document&#39;s url, base64 encoded.  A unique id identifying a document. (required)
     * @param version the document&#39;s binary version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> document binary response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentVersionAsync(String sessionId, String organisationId, String kbId, String url, Integer version, final ApiCallback<byte[]> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentVersionValidateBeforeCall(sessionId, organisationId, kbId, url, version, _callback);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filterFolders
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param text the text to use to filter (base64 encoded) (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filterFoldersCall(String sessionId, String organisationId, String kbId, String text, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dms/folder/filter/{organisationId}/{kbId}/{text}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "text" + "}", localVarApiClient.escapeString(text.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filterFoldersValidateBeforeCall(String sessionId, String organisationId, String kbId, String text, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling filterFolders(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling filterFolders(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling filterFolders(Async)");
        }

        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling filterFolders(Async)");
        }

        return filterFoldersCall(sessionId, organisationId, kbId, text, apIVersion, _callback);

    }

    /**
     * Filter Folders
     * Filter a set of folders using Search
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param text the text to use to filter (base64 encoded) (required)
     * @param apIVersion  (optional)
     * @return CMDocumentFolder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public CMDocumentFolder filterFolders(String sessionId, String organisationId, String kbId, String text, String apIVersion) throws ApiException {
        ApiResponse<CMDocumentFolder> localVarResp = filterFoldersWithHttpInfo(sessionId, organisationId, kbId, text, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Filter Folders
     * Filter a set of folders using Search
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param text the text to use to filter (base64 encoded) (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMDocumentFolder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMDocumentFolder> filterFoldersWithHttpInfo(String sessionId, String organisationId, String kbId, String text, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = filterFoldersValidateBeforeCall(sessionId, organisationId, kbId, text, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMDocumentFolder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Filter Folders (asynchronously)
     * Filter a set of folders using Search
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param text the text to use to filter (base64 encoded) (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filterFoldersAsync(String sessionId, String organisationId, String kbId, String text, String apIVersion, final ApiCallback<CMDocumentFolder> _callback) throws ApiException {

        okhttp3.Call localVarCall = filterFoldersValidateBeforeCall(sessionId, organisationId, kbId, text, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMDocumentFolder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forceReleaseLock
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param url the base64 encoded url value (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forceReleaseLockCall(String sessionId, String organisationId, String kbId, String userId, String url, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dms/lock/release/{organisationId}/{kbId}/{userId}/{url}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "url" + "}", localVarApiClient.escapeString(url.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forceReleaseLockValidateBeforeCall(String sessionId, String organisationId, String kbId, String userId, String url, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling forceReleaseLock(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling forceReleaseLock(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling forceReleaseLock(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling forceReleaseLock(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling forceReleaseLock(Async)");
        }

        return forceReleaseLockCall(sessionId, organisationId, kbId, userId, url, apIVersion, _callback);

    }

    /**
     * Force-release a lock
     * A system administrator or manager can force-unlock a document.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param url the base64 encoded url value (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage forceReleaseLock(String sessionId, String organisationId, String kbId, String userId, String url, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = forceReleaseLockWithHttpInfo(sessionId, organisationId, kbId, userId, url, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Force-release a lock
     * A system administrator or manager can force-unlock a document.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param url the base64 encoded url value (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> forceReleaseLockWithHttpInfo(String sessionId, String organisationId, String kbId, String userId, String url, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = forceReleaseLockValidateBeforeCall(sessionId, organisationId, kbId, userId, url, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Force-release a lock (asynchronously)
     * A system administrator or manager can force-unlock a document.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param url the base64 encoded url value (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forceReleaseLockAsync(String sessionId, String organisationId, String kbId, String userId, String url, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = forceReleaseLockValidateBeforeCall(sessionId, organisationId, kbId, userId, url, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBookmarkList
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBookmarkListCall(String organisationId, String kbId, String userId, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dms/bookmark/{organisationId}/{kbId}/{userId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBookmarkListValidateBeforeCall(String organisationId, String kbId, String userId, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getBookmarkList(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling getBookmarkList(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getBookmarkList(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getBookmarkList(Async)");
        }

        return getBookmarkListCall(organisationId, kbId, userId, sessionId, apIVersion, _callback);

    }

    /**
     * Get Bookmarks
     * Return a list of bookmarks for a given user
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return List&lt;CMDocumentBookmark&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public List<CMDocumentBookmark> getBookmarkList(String organisationId, String kbId, String userId, String sessionId, String apIVersion) throws ApiException {
        ApiResponse<List<CMDocumentBookmark>> localVarResp = getBookmarkListWithHttpInfo(organisationId, kbId, userId, sessionId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Get Bookmarks
     * Return a list of bookmarks for a given user
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;List&lt;CMDocumentBookmark&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CMDocumentBookmark>> getBookmarkListWithHttpInfo(String organisationId, String kbId, String userId, String sessionId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = getBookmarkListValidateBeforeCall(organisationId, kbId, userId, sessionId, apIVersion, null);
        Type localVarReturnType = new TypeToken<List<CMDocumentBookmark>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Bookmarks (asynchronously)
     * Return a list of bookmarks for a given user
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBookmarkListAsync(String organisationId, String kbId, String userId, String sessionId, String apIVersion, final ApiCallback<List<CMDocumentBookmark>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBookmarkListValidateBeforeCall(organisationId, kbId, userId, sessionId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<CMDocumentBookmark>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeletedDocuments
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param filter an optional text filter for URLs (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeletedDocumentsCall(String sessionId, String organisationId, String kbId, String filter, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dms/deleted/{organisationId}/{kbId}/{filter}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "filter" + "}", localVarApiClient.escapeString(filter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeletedDocumentsValidateBeforeCall(String sessionId, String organisationId, String kbId, String filter, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getDeletedDocuments(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getDeletedDocuments(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling getDeletedDocuments(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling getDeletedDocuments(Async)");
        }

        return getDeletedDocumentsCall(sessionId, organisationId, kbId, filter, apIVersion, _callback);

    }

    /**
     * Deleted records with optional filter
     * Return a list of deleted document records for an administrator (all records) with an optional filter set.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param filter an optional text filter for URLs (required)
     * @param apIVersion  (optional)
     * @return List&lt;DocumentDeleted&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public List<DocumentDeleted> getDeletedDocuments(String sessionId, String organisationId, String kbId, String filter, String apIVersion) throws ApiException {
        ApiResponse<List<DocumentDeleted>> localVarResp = getDeletedDocumentsWithHttpInfo(sessionId, organisationId, kbId, filter, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Deleted records with optional filter
     * Return a list of deleted document records for an administrator (all records) with an optional filter set.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param filter an optional text filter for URLs (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;List&lt;DocumentDeleted&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DocumentDeleted>> getDeletedDocumentsWithHttpInfo(String sessionId, String organisationId, String kbId, String filter, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = getDeletedDocumentsValidateBeforeCall(sessionId, organisationId, kbId, filter, apIVersion, null);
        Type localVarReturnType = new TypeToken<List<DocumentDeleted>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deleted records with optional filter (asynchronously)
     * Return a list of deleted document records for an administrator (all records) with an optional filter set.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param filter an optional text filter for URLs (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeletedDocumentsAsync(String sessionId, String organisationId, String kbId, String filter, String apIVersion, final ApiCallback<List<DocumentDeleted>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeletedDocumentsValidateBeforeCall(sessionId, organisationId, kbId, filter, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<DocumentDeleted>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocumentAudit
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param year the year for the notifications (required)
     * @param month the month for the notifications (required)
     * @param url the document url (base64 encoded) to get audit records for (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentAuditCall(String sessionId, String organisationId, String kbId, Integer year, Integer month, String url, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dms/audit/{organisationId}/{kbId}/{year}/{month}/{url}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()))
            .replace("{" + "month" + "}", localVarApiClient.escapeString(month.toString()))
            .replace("{" + "url" + "}", localVarApiClient.escapeString(url.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentAuditValidateBeforeCall(String sessionId, String organisationId, String kbId, Integer year, Integer month, String url, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getDocumentAudit(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getDocumentAudit(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling getDocumentAudit(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getDocumentAudit(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling getDocumentAudit(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling getDocumentAudit(Async)");
        }

        return getDocumentAuditCall(sessionId, organisationId, kbId, year, month, url, apIVersion, _callback);

    }

    /**
     * Audit records for a document for a month
     * Return document audit records for a user (filtered) or administrator (all records) for a given document / month
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param year the year for the notifications (required)
     * @param month the month for the notifications (required)
     * @param url the document url (base64 encoded) to get audit records for (required)
     * @param apIVersion  (optional)
     * @return List&lt;CMDocumentAudit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public List<CMDocumentAudit> getDocumentAudit(String sessionId, String organisationId, String kbId, Integer year, Integer month, String url, String apIVersion) throws ApiException {
        ApiResponse<List<CMDocumentAudit>> localVarResp = getDocumentAuditWithHttpInfo(sessionId, organisationId, kbId, year, month, url, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Audit records for a document for a month
     * Return document audit records for a user (filtered) or administrator (all records) for a given document / month
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param year the year for the notifications (required)
     * @param month the month for the notifications (required)
     * @param url the document url (base64 encoded) to get audit records for (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;List&lt;CMDocumentAudit&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CMDocumentAudit>> getDocumentAuditWithHttpInfo(String sessionId, String organisationId, String kbId, Integer year, Integer month, String url, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = getDocumentAuditValidateBeforeCall(sessionId, organisationId, kbId, year, month, url, apIVersion, null);
        Type localVarReturnType = new TypeToken<List<CMDocumentAudit>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Audit records for a document for a month (asynchronously)
     * Return document audit records for a user (filtered) or administrator (all records) for a given document / month
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param year the year for the notifications (required)
     * @param month the month for the notifications (required)
     * @param url the document url (base64 encoded) to get audit records for (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentAuditAsync(String sessionId, String organisationId, String kbId, Integer year, Integer month, String url, String apIVersion, final ApiCallback<List<CMDocumentAudit>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentAuditValidateBeforeCall(sessionId, organisationId, kbId, year, month, url, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<CMDocumentAudit>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFolder
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sourceId the owner source&#39;s id (required)
     * @param folderId the folder&#39;s id (required)
     * @param prevUrl pagination, the previous last URL for the page-set (&#39;null&#39; is first page) (required)
     * @param pageSize page-size for a paginated set (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFolderCall(String sessionId, String organisationId, String kbId, Integer sourceId, String folderId, String prevUrl, Integer pageSize, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dms/folder/{organisationId}/{kbId}/{sourceId}/{folderId}/{prevUrl}/{pageSize}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "sourceId" + "}", localVarApiClient.escapeString(sourceId.toString()))
            .replace("{" + "folderId" + "}", localVarApiClient.escapeString(folderId.toString()))
            .replace("{" + "prevUrl" + "}", localVarApiClient.escapeString(prevUrl.toString()))
            .replace("{" + "pageSize" + "}", localVarApiClient.escapeString(pageSize.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFolderValidateBeforeCall(String sessionId, String organisationId, String kbId, Integer sourceId, String folderId, String prevUrl, Integer pageSize, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getFolder(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getFolder(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling getFolder(Async)");
        }

        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling getFolder(Async)");
        }

        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling getFolder(Async)");
        }

        // verify the required parameter 'prevUrl' is set
        if (prevUrl == null) {
            throw new ApiException("Missing the required parameter 'prevUrl' when calling getFolder(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling getFolder(Async)");
        }

        return getFolderCall(sessionId, organisationId, kbId, sourceId, folderId, prevUrl, pageSize, apIVersion, _callback);

    }

    /**
     * Get Folder Content
     * Return a folder&#39;s content
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sourceId the owner source&#39;s id (required)
     * @param folderId the folder&#39;s id (required)
     * @param prevUrl pagination, the previous last URL for the page-set (&#39;null&#39; is first page) (required)
     * @param pageSize page-size for a paginated set (required)
     * @param apIVersion  (optional)
     * @return CMDocumentFolder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public CMDocumentFolder getFolder(String sessionId, String organisationId, String kbId, Integer sourceId, String folderId, String prevUrl, Integer pageSize, String apIVersion) throws ApiException {
        ApiResponse<CMDocumentFolder> localVarResp = getFolderWithHttpInfo(sessionId, organisationId, kbId, sourceId, folderId, prevUrl, pageSize, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Get Folder Content
     * Return a folder&#39;s content
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sourceId the owner source&#39;s id (required)
     * @param folderId the folder&#39;s id (required)
     * @param prevUrl pagination, the previous last URL for the page-set (&#39;null&#39; is first page) (required)
     * @param pageSize page-size for a paginated set (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMDocumentFolder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMDocumentFolder> getFolderWithHttpInfo(String sessionId, String organisationId, String kbId, Integer sourceId, String folderId, String prevUrl, Integer pageSize, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = getFolderValidateBeforeCall(sessionId, organisationId, kbId, sourceId, folderId, prevUrl, pageSize, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMDocumentFolder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Folder Content (asynchronously)
     * Return a folder&#39;s content
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sourceId the owner source&#39;s id (required)
     * @param folderId the folder&#39;s id (required)
     * @param prevUrl pagination, the previous last URL for the page-set (&#39;null&#39; is first page) (required)
     * @param pageSize page-size for a paginated set (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFolderAsync(String sessionId, String organisationId, String kbId, Integer sourceId, String folderId, String prevUrl, Integer pageSize, String apIVersion, final ApiCallback<CMDocumentFolder> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFolderValidateBeforeCall(sessionId, organisationId, kbId, sourceId, folderId, prevUrl, pageSize, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMDocumentFolder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFullAudit
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param year the year for the notifications (required)
     * @param month the month for the notifications (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFullAuditCall(String sessionId, String organisationId, String kbId, Integer year, Integer month, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dms/audit/{organisationId}/{kbId}/{year}/{month}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()))
            .replace("{" + "month" + "}", localVarApiClient.escapeString(month.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFullAuditValidateBeforeCall(String sessionId, String organisationId, String kbId, Integer year, Integer month, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getFullAudit(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getFullAudit(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling getFullAudit(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getFullAudit(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling getFullAudit(Async)");
        }

        return getFullAuditCall(sessionId, organisationId, kbId, year, month, apIVersion, _callback);

    }

    /**
     * Audit records for a month
     * Return document audit records for a user (filtered) or administrator (all records) for a given month
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param year the year for the notifications (required)
     * @param month the month for the notifications (required)
     * @param apIVersion  (optional)
     * @return List&lt;CMDocumentAudit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public List<CMDocumentAudit> getFullAudit(String sessionId, String organisationId, String kbId, Integer year, Integer month, String apIVersion) throws ApiException {
        ApiResponse<List<CMDocumentAudit>> localVarResp = getFullAuditWithHttpInfo(sessionId, organisationId, kbId, year, month, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Audit records for a month
     * Return document audit records for a user (filtered) or administrator (all records) for a given month
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param year the year for the notifications (required)
     * @param month the month for the notifications (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;List&lt;CMDocumentAudit&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CMDocumentAudit>> getFullAuditWithHttpInfo(String sessionId, String organisationId, String kbId, Integer year, Integer month, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = getFullAuditValidateBeforeCall(sessionId, organisationId, kbId, year, month, apIVersion, null);
        Type localVarReturnType = new TypeToken<List<CMDocumentAudit>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Audit records for a month (asynchronously)
     * Return document audit records for a user (filtered) or administrator (all records) for a given month
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param year the year for the notifications (required)
     * @param month the month for the notifications (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFullAuditAsync(String sessionId, String organisationId, String kbId, Integer year, Integer month, String apIVersion, final ApiCallback<List<CMDocumentAudit>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFullAuditValidateBeforeCall(sessionId, organisationId, kbId, year, month, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<CMDocumentAudit>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLockedList
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLockedListCall(String organisationId, String kbId, String userId, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dms/lock/{organisationId}/{kbId}/{userId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLockedListValidateBeforeCall(String organisationId, String kbId, String userId, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getLockedList(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling getLockedList(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getLockedList(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getLockedList(Async)");
        }

        return getLockedListCall(organisationId, kbId, userId, sessionId, apIVersion, _callback);

    }

    /**
     * Get locked documents for user
     * Return a list of locked documents for a given user
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return List&lt;CMDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public List<CMDocument> getLockedList(String organisationId, String kbId, String userId, String sessionId, String apIVersion) throws ApiException {
        ApiResponse<List<CMDocument>> localVarResp = getLockedListWithHttpInfo(organisationId, kbId, userId, sessionId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Get locked documents for user
     * Return a list of locked documents for a given user
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;List&lt;CMDocument&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CMDocument>> getLockedListWithHttpInfo(String organisationId, String kbId, String userId, String sessionId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = getLockedListValidateBeforeCall(organisationId, kbId, userId, sessionId, apIVersion, null);
        Type localVarReturnType = new TypeToken<List<CMDocument>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get locked documents for user (asynchronously)
     * Return a list of locked documents for a given user
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLockedListAsync(String organisationId, String kbId, String userId, String sessionId, String apIVersion, final ApiCallback<List<CMDocument>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLockedListValidateBeforeCall(organisationId, kbId, userId, sessionId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<CMDocument>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNoteList
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url the base64 encoded url value (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNoteListCall(String sessionId, String organisationId, String kbId, String url, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dms/note/{organisationId}/{kbId}/{url}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "url" + "}", localVarApiClient.escapeString(url.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNoteListValidateBeforeCall(String sessionId, String organisationId, String kbId, String url, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getNoteList(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getNoteList(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling getNoteList(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling getNoteList(Async)");
        }

        return getNoteListCall(sessionId, organisationId, kbId, url, apIVersion, _callback);

    }

    /**
     * Get Notes
     * Return a list of notes for a given url
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url the base64 encoded url value (required)
     * @param apIVersion  (optional)
     * @return List&lt;CMDocumentNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public List<CMDocumentNote> getNoteList(String sessionId, String organisationId, String kbId, String url, String apIVersion) throws ApiException {
        ApiResponse<List<CMDocumentNote>> localVarResp = getNoteListWithHttpInfo(sessionId, organisationId, kbId, url, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Get Notes
     * Return a list of notes for a given url
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url the base64 encoded url value (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;List&lt;CMDocumentNote&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CMDocumentNote>> getNoteListWithHttpInfo(String sessionId, String organisationId, String kbId, String url, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = getNoteListValidateBeforeCall(sessionId, organisationId, kbId, url, apIVersion, null);
        Type localVarReturnType = new TypeToken<List<CMDocumentNote>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Notes (asynchronously)
     * Return a list of notes for a given url
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url the base64 encoded url value (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNoteListAsync(String sessionId, String organisationId, String kbId, String url, String apIVersion, final ApiCallback<List<CMDocumentNote>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNoteListValidateBeforeCall(sessionId, organisationId, kbId, url, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<CMDocumentNote>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSavedSearches
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param top how many records to return (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSavedSearchesCall(String sessionId, String organisationId, String kbId, String userId, Integer top, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dms/saved-searches/{organisationId}/{kbId}/{userId}/{top}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "top" + "}", localVarApiClient.escapeString(top.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSavedSearchesValidateBeforeCall(String sessionId, String organisationId, String kbId, String userId, Integer top, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getSavedSearches(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getSavedSearches(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling getSavedSearches(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getSavedSearches(Async)");
        }

        // verify the required parameter 'top' is set
        if (top == null) {
            throw new ApiException("Missing the required parameter 'top' when calling getSavedSearches(Async)");
        }

        return getSavedSearchesCall(sessionId, organisationId, kbId, userId, top, apIVersion, _callback);

    }

    /**
     * User&#39;s saved searches
     * Return a user&#39;s saved searches
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param top how many records to return (required)
     * @param apIVersion  (optional)
     * @return List&lt;CMSavedSearch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public List<CMSavedSearch> getSavedSearches(String sessionId, String organisationId, String kbId, String userId, Integer top, String apIVersion) throws ApiException {
        ApiResponse<List<CMSavedSearch>> localVarResp = getSavedSearchesWithHttpInfo(sessionId, organisationId, kbId, userId, top, apIVersion);
        return localVarResp.getData();
    }

    /**
     * User&#39;s saved searches
     * Return a user&#39;s saved searches
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param top how many records to return (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;List&lt;CMSavedSearch&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CMSavedSearch>> getSavedSearchesWithHttpInfo(String sessionId, String organisationId, String kbId, String userId, Integer top, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = getSavedSearchesValidateBeforeCall(sessionId, organisationId, kbId, userId, top, apIVersion, null);
        Type localVarReturnType = new TypeToken<List<CMSavedSearch>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * User&#39;s saved searches (asynchronously)
     * Return a user&#39;s saved searches
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param top how many records to return (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSavedSearchesAsync(String sessionId, String organisationId, String kbId, String userId, Integer top, String apIVersion, final ApiCallback<List<CMSavedSearch>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSavedSearchesValidateBeforeCall(sessionId, organisationId, kbId, userId, top, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<CMSavedSearch>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSourceFolder
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sourceId the source-id of the item being deleted (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSourceFolderCall(String organisationId, String kbId, Integer sourceId, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dms/source/{organisationId}/{kbId}/{sourceId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "sourceId" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSourceFolderValidateBeforeCall(String organisationId, String kbId, Integer sourceId, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getSourceFolder(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling getSourceFolder(Async)");
        }

        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling getSourceFolder(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getSourceFolder(Async)");
        }

        return getSourceFolderCall(organisationId, kbId, sourceId, sessionId, apIVersion, _callback);

    }

    /**
     * Get source-folder
     * Return the content of a top-level folder (source folder).
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sourceId the source-id of the item being deleted (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return CMDocumentFolder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public CMDocumentFolder getSourceFolder(String organisationId, String kbId, Integer sourceId, String sessionId, String apIVersion) throws ApiException {
        ApiResponse<CMDocumentFolder> localVarResp = getSourceFolderWithHttpInfo(organisationId, kbId, sourceId, sessionId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Get source-folder
     * Return the content of a top-level folder (source folder).
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sourceId the source-id of the item being deleted (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMDocumentFolder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMDocumentFolder> getSourceFolderWithHttpInfo(String organisationId, String kbId, Integer sourceId, String sessionId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = getSourceFolderValidateBeforeCall(organisationId, kbId, sourceId, sessionId, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMDocumentFolder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get source-folder (asynchronously)
     * Return the content of a top-level folder (source folder).
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sourceId the source-id of the item being deleted (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSourceFolderAsync(String organisationId, String kbId, Integer sourceId, String sessionId, String apIVersion, final ApiCallback<CMDocumentFolder> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSourceFolderValidateBeforeCall(organisationId, kbId, sourceId, sessionId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMDocumentFolder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSubscriptionList
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubscriptionListCall(String organisationId, String kbId, String userId, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dms/subscriptions/{organisationId}/{kbId}/{userId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubscriptionListValidateBeforeCall(String organisationId, String kbId, String userId, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getSubscriptionList(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling getSubscriptionList(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getSubscriptionList(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getSubscriptionList(Async)");
        }

        return getSubscriptionListCall(organisationId, kbId, userId, sessionId, apIVersion, _callback);

    }

    /**
     * Get Subscriptions
     * Return a subscriptions object for a given user
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return CMSubscriptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public CMSubscriptions getSubscriptionList(String organisationId, String kbId, String userId, String sessionId, String apIVersion) throws ApiException {
        ApiResponse<CMSubscriptions> localVarResp = getSubscriptionListWithHttpInfo(organisationId, kbId, userId, sessionId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Get Subscriptions
     * Return a subscriptions object for a given user
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMSubscriptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMSubscriptions> getSubscriptionListWithHttpInfo(String organisationId, String kbId, String userId, String sessionId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = getSubscriptionListValidateBeforeCall(organisationId, kbId, userId, sessionId, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMSubscriptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Subscriptions (asynchronously)
     * Return a subscriptions object for a given user
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubscriptionListAsync(String organisationId, String kbId, String userId, String sessionId, String apIVersion, final ApiCallback<CMSubscriptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubscriptionListValidateBeforeCall(organisationId, kbId, userId, sessionId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMSubscriptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserDashboard
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserDashboardCall(String organisationId, String kbId, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dms/dashboard/{organisationId}/{kbId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserDashboardValidateBeforeCall(String organisationId, String kbId, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getUserDashboard(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling getUserDashboard(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getUserDashboard(Async)");
        }

        return getUserDashboardCall(organisationId, kbId, sessionId, apIVersion, _callback);

    }

    /**
     * User Dashboard
     * Return a the user&#39;s DMS dashboard
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return CMDUserDashboard
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public CMDUserDashboard getUserDashboard(String organisationId, String kbId, String sessionId, String apIVersion) throws ApiException {
        ApiResponse<CMDUserDashboard> localVarResp = getUserDashboardWithHttpInfo(organisationId, kbId, sessionId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * User Dashboard
     * Return a the user&#39;s DMS dashboard
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMDUserDashboard&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMDUserDashboard> getUserDashboardWithHttpInfo(String organisationId, String kbId, String sessionId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = getUserDashboardValidateBeforeCall(organisationId, kbId, sessionId, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMDUserDashboard>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * User Dashboard (asynchronously)
     * Return a the user&#39;s DMS dashboard
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserDashboardAsync(String organisationId, String kbId, String sessionId, String apIVersion, final ApiCallback<CMDUserDashboard> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserDashboardValidateBeforeCall(organisationId, kbId, sessionId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMDUserDashboard>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserNotifications
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param year the year for the notifications (required)
     * @param month the month for the notifications (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserNotificationsCall(String sessionId, String organisationId, String kbId, Integer year, Integer month, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dms/notifications/{organisationId}/{kbId}/{year}/{month}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()))
            .replace("{" + "month" + "}", localVarApiClient.escapeString(month.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserNotificationsValidateBeforeCall(String sessionId, String organisationId, String kbId, Integer year, Integer month, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getUserNotifications(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getUserNotifications(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling getUserNotifications(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getUserNotifications(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling getUserNotifications(Async)");
        }

        return getUserNotificationsCall(sessionId, organisationId, kbId, year, month, apIVersion, _callback);

    }

    /**
     * Get User Notifications
     * Return all user notifications from the DMS for a given user by id.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param year the year for the notifications (required)
     * @param month the month for the notifications (required)
     * @param apIVersion  (optional)
     * @return List&lt;CMUserNotification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public List<CMUserNotification> getUserNotifications(String sessionId, String organisationId, String kbId, Integer year, Integer month, String apIVersion) throws ApiException {
        ApiResponse<List<CMUserNotification>> localVarResp = getUserNotificationsWithHttpInfo(sessionId, organisationId, kbId, year, month, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Get User Notifications
     * Return all user notifications from the DMS for a given user by id.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param year the year for the notifications (required)
     * @param month the month for the notifications (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;List&lt;CMUserNotification&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CMUserNotification>> getUserNotificationsWithHttpInfo(String sessionId, String organisationId, String kbId, Integer year, Integer month, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = getUserNotificationsValidateBeforeCall(sessionId, organisationId, kbId, year, month, apIVersion, null);
        Type localVarReturnType = new TypeToken<List<CMUserNotification>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User Notifications (asynchronously)
     * Return all user notifications from the DMS for a given user by id.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param year the year for the notifications (required)
     * @param month the month for the notifications (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserNotificationsAsync(String sessionId, String organisationId, String kbId, Integer year, Integer month, String apIVersion, final ApiCallback<List<CMUserNotification>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserNotificationsValidateBeforeCall(sessionId, organisationId, kbId, year, month, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<CMUserNotification>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lockDocument
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmDocumentLock  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lockDocumentCall(String sessionId, CMDocumentLock cmDocumentLock, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmDocumentLock;

        // create path and map variables
        String localVarPath = "/api/dms/lock";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lockDocumentValidateBeforeCall(String sessionId, CMDocumentLock cmDocumentLock, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling lockDocument(Async)");
        }

        // verify the required parameter 'cmDocumentLock' is set
        if (cmDocumentLock == null) {
            throw new ApiException("Missing the required parameter 'cmDocumentLock' when calling lockDocument(Async)");
        }

        return lockDocumentCall(sessionId, cmDocumentLock, apIVersion, _callback);

    }

    /**
     * Document Lock
     * Lock a document for a user.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmDocumentLock  (required)
     * @param apIVersion  (optional)
     * @return List&lt;CMDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public List<CMDocument> lockDocument(String sessionId, CMDocumentLock cmDocumentLock, String apIVersion) throws ApiException {
        ApiResponse<List<CMDocument>> localVarResp = lockDocumentWithHttpInfo(sessionId, cmDocumentLock, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Document Lock
     * Lock a document for a user.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmDocumentLock  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;List&lt;CMDocument&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CMDocument>> lockDocumentWithHttpInfo(String sessionId, CMDocumentLock cmDocumentLock, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = lockDocumentValidateBeforeCall(sessionId, cmDocumentLock, apIVersion, null);
        Type localVarReturnType = new TypeToken<List<CMDocument>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Document Lock (asynchronously)
     * Lock a document for a user.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmDocumentLock  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lockDocumentAsync(String sessionId, CMDocumentLock cmDocumentLock, String apIVersion, final ApiCallback<List<CMDocument>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lockDocumentValidateBeforeCall(sessionId, cmDocumentLock, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<CMDocument>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for releaseLock
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param url the base64 encoded url value (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releaseLockCall(String sessionId, String organisationId, String kbId, String userId, String url, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dms/lock/{organisationId}/{kbId}/{userId}/{url}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "url" + "}", localVarApiClient.escapeString(url.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releaseLockValidateBeforeCall(String sessionId, String organisationId, String kbId, String userId, String url, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling releaseLock(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling releaseLock(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling releaseLock(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling releaseLock(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling releaseLock(Async)");
        }

        return releaseLockCall(sessionId, organisationId, kbId, userId, url, apIVersion, _callback);

    }

    /**
     * Release a lock
     * The originator of a lock releases a locked document.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param url the base64 encoded url value (required)
     * @param apIVersion  (optional)
     * @return List&lt;CMDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public List<CMDocument> releaseLock(String sessionId, String organisationId, String kbId, String userId, String url, String apIVersion) throws ApiException {
        ApiResponse<List<CMDocument>> localVarResp = releaseLockWithHttpInfo(sessionId, organisationId, kbId, userId, url, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Release a lock
     * The originator of a lock releases a locked document.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param url the base64 encoded url value (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;List&lt;CMDocument&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CMDocument>> releaseLockWithHttpInfo(String sessionId, String organisationId, String kbId, String userId, String url, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = releaseLockValidateBeforeCall(sessionId, organisationId, kbId, userId, url, apIVersion, null);
        Type localVarReturnType = new TypeToken<List<CMDocument>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Release a lock (asynchronously)
     * The originator of a lock releases a locked document.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param userId the user&#39;s id (required)
     * @param url the base64 encoded url value (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releaseLockAsync(String sessionId, String organisationId, String kbId, String userId, String url, String apIVersion, final ApiCallback<List<CMDocument>> _callback) throws ApiException {

        okhttp3.Call localVarCall = releaseLockValidateBeforeCall(sessionId, organisationId, kbId, userId, url, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<CMDocument>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restfulDMSClientQuery
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmClientQuery  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restfulDMSClientQueryCall(String sessionId, CMClientQuery cmClientQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmClientQuery;

        // create path and map variables
        String localVarPath = "/api/dms/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restfulDMSClientQueryValidateBeforeCall(String sessionId, CMClientQuery cmClientQuery, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling restfulDMSClientQuery(Async)");
        }

        // verify the required parameter 'cmClientQuery' is set
        if (cmClientQuery == null) {
            throw new ApiException("Missing the required parameter 'cmClientQuery' when calling restfulDMSClientQuery(Async)");
        }

        return restfulDMSClientQueryCall(sessionId, cmClientQuery, _callback);

    }

    /**
     * DMS Client Query
     * a SimSage DMS client asks a question or performs a keyword-search.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmClientQuery  (required)
     * @return CMClientQueryResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public CMClientQueryResult restfulDMSClientQuery(String sessionId, CMClientQuery cmClientQuery) throws ApiException {
        ApiResponse<CMClientQueryResult> localVarResp = restfulDMSClientQueryWithHttpInfo(sessionId, cmClientQuery);
        return localVarResp.getData();
    }

    /**
     * DMS Client Query
     * a SimSage DMS client asks a question or performs a keyword-search.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmClientQuery  (required)
     * @return ApiResponse&lt;CMClientQueryResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMClientQueryResult> restfulDMSClientQueryWithHttpInfo(String sessionId, CMClientQuery cmClientQuery) throws ApiException {
        okhttp3.Call localVarCall = restfulDMSClientQueryValidateBeforeCall(sessionId, cmClientQuery, null);
        Type localVarReturnType = new TypeToken<CMClientQueryResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DMS Client Query (asynchronously)
     * a SimSage DMS client asks a question or performs a keyword-search.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmClientQuery  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restfulDMSClientQueryAsync(String sessionId, CMClientQuery cmClientQuery, final ApiCallback<CMClientQueryResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = restfulDMSClientQueryValidateBeforeCall(sessionId, cmClientQuery, _callback);
        Type localVarReturnType = new TypeToken<CMClientQueryResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveBookmark
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmDocumentBookmark  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveBookmarkCall(String sessionId, CMDocumentBookmark cmDocumentBookmark, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmDocumentBookmark;

        // create path and map variables
        String localVarPath = "/api/dms/bookmark";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveBookmarkValidateBeforeCall(String sessionId, CMDocumentBookmark cmDocumentBookmark, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling saveBookmark(Async)");
        }

        // verify the required parameter 'cmDocumentBookmark' is set
        if (cmDocumentBookmark == null) {
            throw new ApiException("Missing the required parameter 'cmDocumentBookmark' when calling saveBookmark(Async)");
        }

        return saveBookmarkCall(sessionId, cmDocumentBookmark, apIVersion, _callback);

    }

    /**
     * Save Bookmark
     * Save (create or update) a SimSage Document Bookmark.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmDocumentBookmark  (required)
     * @param apIVersion  (optional)
     * @return List&lt;DocumentBookmark&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public List<DocumentBookmark> saveBookmark(String sessionId, CMDocumentBookmark cmDocumentBookmark, String apIVersion) throws ApiException {
        ApiResponse<List<DocumentBookmark>> localVarResp = saveBookmarkWithHttpInfo(sessionId, cmDocumentBookmark, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Save Bookmark
     * Save (create or update) a SimSage Document Bookmark.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmDocumentBookmark  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;List&lt;DocumentBookmark&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DocumentBookmark>> saveBookmarkWithHttpInfo(String sessionId, CMDocumentBookmark cmDocumentBookmark, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = saveBookmarkValidateBeforeCall(sessionId, cmDocumentBookmark, apIVersion, null);
        Type localVarReturnType = new TypeToken<List<DocumentBookmark>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save Bookmark (asynchronously)
     * Save (create or update) a SimSage Document Bookmark.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmDocumentBookmark  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveBookmarkAsync(String sessionId, CMDocumentBookmark cmDocumentBookmark, String apIVersion, final ApiCallback<List<DocumentBookmark>> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveBookmarkValidateBeforeCall(sessionId, cmDocumentBookmark, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<DocumentBookmark>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveHashTags
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmDocumentHashTag  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveHashTagsCall(String sessionId, CMDocumentHashTag cmDocumentHashTag, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmDocumentHashTag;

        // create path and map variables
        String localVarPath = "/api/dms/hash-tag";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveHashTagsValidateBeforeCall(String sessionId, CMDocumentHashTag cmDocumentHashTag, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling saveHashTags(Async)");
        }

        // verify the required parameter 'cmDocumentHashTag' is set
        if (cmDocumentHashTag == null) {
            throw new ApiException("Missing the required parameter 'cmDocumentHashTag' when calling saveHashTags(Async)");
        }

        return saveHashTagsCall(sessionId, cmDocumentHashTag, apIVersion, _callback);

    }

    /**
     * Save HashTag set for a document
     * Save (create / update / delete) a hashTag set for a document.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmDocumentHashTag  (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage saveHashTags(String sessionId, CMDocumentHashTag cmDocumentHashTag, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = saveHashTagsWithHttpInfo(sessionId, cmDocumentHashTag, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Save HashTag set for a document
     * Save (create / update / delete) a hashTag set for a document.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmDocumentHashTag  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> saveHashTagsWithHttpInfo(String sessionId, CMDocumentHashTag cmDocumentHashTag, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = saveHashTagsValidateBeforeCall(sessionId, cmDocumentHashTag, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save HashTag set for a document (asynchronously)
     * Save (create / update / delete) a hashTag set for a document.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmDocumentHashTag  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveHashTagsAsync(String sessionId, CMDocumentHashTag cmDocumentHashTag, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveHashTagsValidateBeforeCall(sessionId, cmDocumentHashTag, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveNote
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmDocumentNote  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveNoteCall(String sessionId, CMDocumentNote cmDocumentNote, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmDocumentNote;

        // create path and map variables
        String localVarPath = "/api/dms/note";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveNoteValidateBeforeCall(String sessionId, CMDocumentNote cmDocumentNote, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling saveNote(Async)");
        }

        // verify the required parameter 'cmDocumentNote' is set
        if (cmDocumentNote == null) {
            throw new ApiException("Missing the required parameter 'cmDocumentNote' when calling saveNote(Async)");
        }

        return saveNoteCall(sessionId, cmDocumentNote, apIVersion, _callback);

    }

    /**
     * Save Note
     * Save (create or update) a SimSage Document Note.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmDocumentNote  (required)
     * @param apIVersion  (optional)
     * @return List&lt;CMDocumentNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public List<CMDocumentNote> saveNote(String sessionId, CMDocumentNote cmDocumentNote, String apIVersion) throws ApiException {
        ApiResponse<List<CMDocumentNote>> localVarResp = saveNoteWithHttpInfo(sessionId, cmDocumentNote, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Save Note
     * Save (create or update) a SimSage Document Note.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmDocumentNote  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;List&lt;CMDocumentNote&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CMDocumentNote>> saveNoteWithHttpInfo(String sessionId, CMDocumentNote cmDocumentNote, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = saveNoteValidateBeforeCall(sessionId, cmDocumentNote, apIVersion, null);
        Type localVarReturnType = new TypeToken<List<CMDocumentNote>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save Note (asynchronously)
     * Save (create or update) a SimSage Document Note.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmDocumentNote  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveNoteAsync(String sessionId, CMDocumentNote cmDocumentNote, String apIVersion, final ApiCallback<List<CMDocumentNote>> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveNoteValidateBeforeCall(sessionId, cmDocumentNote, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<CMDocumentNote>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveSearch
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSavedSearch  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveSearchCall(String sessionId, CMSavedSearch cmSavedSearch, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmSavedSearch;

        // create path and map variables
        String localVarPath = "/api/dms/save-search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveSearchValidateBeforeCall(String sessionId, CMSavedSearch cmSavedSearch, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling saveSearch(Async)");
        }

        // verify the required parameter 'cmSavedSearch' is set
        if (cmSavedSearch == null) {
            throw new ApiException("Missing the required parameter 'cmSavedSearch' when calling saveSearch(Async)");
        }

        return saveSearchCall(sessionId, cmSavedSearch, apIVersion, _callback);

    }

    /**
     * Save Search
     * Save a user&#39;s search query.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSavedSearch  (required)
     * @param apIVersion  (optional)
     * @return List&lt;CMSavedSearch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public List<CMSavedSearch> saveSearch(String sessionId, CMSavedSearch cmSavedSearch, String apIVersion) throws ApiException {
        ApiResponse<List<CMSavedSearch>> localVarResp = saveSearchWithHttpInfo(sessionId, cmSavedSearch, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Save Search
     * Save a user&#39;s search query.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSavedSearch  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;List&lt;CMSavedSearch&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CMSavedSearch>> saveSearchWithHttpInfo(String sessionId, CMSavedSearch cmSavedSearch, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = saveSearchValidateBeforeCall(sessionId, cmSavedSearch, apIVersion, null);
        Type localVarReturnType = new TypeToken<List<CMSavedSearch>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save Search (asynchronously)
     * Save a user&#39;s search query.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSavedSearch  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveSearchAsync(String sessionId, CMSavedSearch cmSavedSearch, String apIVersion, final ApiCallback<List<CMSavedSearch>> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveSearchValidateBeforeCall(sessionId, cmSavedSearch, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<CMSavedSearch>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveSubscription
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmDocumentSubscription  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveSubscriptionCall(String sessionId, CMDocumentSubscription cmDocumentSubscription, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmDocumentSubscription;

        // create path and map variables
        String localVarPath = "/api/dms/subscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveSubscriptionValidateBeforeCall(String sessionId, CMDocumentSubscription cmDocumentSubscription, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling saveSubscription(Async)");
        }

        // verify the required parameter 'cmDocumentSubscription' is set
        if (cmDocumentSubscription == null) {
            throw new ApiException("Missing the required parameter 'cmDocumentSubscription' when calling saveSubscription(Async)");
        }

        return saveSubscriptionCall(sessionId, cmDocumentSubscription, apIVersion, _callback);

    }

    /**
     * Save Subscription
     * Save (create or update) a SimSage Document subscription.  Returns a subscription object for this user.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmDocumentSubscription  (required)
     * @param apIVersion  (optional)
     * @return CMSubscriptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public CMSubscriptions saveSubscription(String sessionId, CMDocumentSubscription cmDocumentSubscription, String apIVersion) throws ApiException {
        ApiResponse<CMSubscriptions> localVarResp = saveSubscriptionWithHttpInfo(sessionId, cmDocumentSubscription, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Save Subscription
     * Save (create or update) a SimSage Document subscription.  Returns a subscription object for this user.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmDocumentSubscription  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMSubscriptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMSubscriptions> saveSubscriptionWithHttpInfo(String sessionId, CMDocumentSubscription cmDocumentSubscription, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = saveSubscriptionValidateBeforeCall(sessionId, cmDocumentSubscription, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMSubscriptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save Subscription (asynchronously)
     * Save (create or update) a SimSage Document subscription.  Returns a subscription object for this user.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmDocumentSubscription  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveSubscriptionAsync(String sessionId, CMDocumentSubscription cmDocumentSubscription, String apIVersion, final ApiCallback<CMSubscriptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveSubscriptionValidateBeforeCall(sessionId, cmDocumentSubscription, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMSubscriptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for undeleteDocument
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sourceId the item&#39;s source id (required)
     * @param url the document&#39;s url, base64 encoded.  A unique id identifying a document. (required)
     * @param filter an optional text filter for URLs (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call undeleteDocumentCall(String sessionId, String organisationId, String kbId, Integer sourceId, String url, String filter, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dms/un-delete/{organisationId}/{kbId}/{sourceId}/{url}/{filter}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "sourceId" + "}", localVarApiClient.escapeString(sourceId.toString()))
            .replace("{" + "url" + "}", localVarApiClient.escapeString(url.toString()))
            .replace("{" + "filter" + "}", localVarApiClient.escapeString(filter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call undeleteDocumentValidateBeforeCall(String sessionId, String organisationId, String kbId, Integer sourceId, String url, String filter, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling undeleteDocument(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling undeleteDocument(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling undeleteDocument(Async)");
        }

        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling undeleteDocument(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling undeleteDocument(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling undeleteDocument(Async)");
        }

        return undeleteDocumentCall(sessionId, organisationId, kbId, sourceId, url, filter, apIVersion, _callback);

    }

    /**
     * un-delete a record
     * Un-delete a previously deleted document and return a list of deleted document records for an administrator (all records).
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sourceId the item&#39;s source id (required)
     * @param url the document&#39;s url, base64 encoded.  A unique id identifying a document. (required)
     * @param filter an optional text filter for URLs (required)
     * @param apIVersion  (optional)
     * @return List&lt;DocumentDeleted&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public List<DocumentDeleted> undeleteDocument(String sessionId, String organisationId, String kbId, Integer sourceId, String url, String filter, String apIVersion) throws ApiException {
        ApiResponse<List<DocumentDeleted>> localVarResp = undeleteDocumentWithHttpInfo(sessionId, organisationId, kbId, sourceId, url, filter, apIVersion);
        return localVarResp.getData();
    }

    /**
     * un-delete a record
     * Un-delete a previously deleted document and return a list of deleted document records for an administrator (all records).
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sourceId the item&#39;s source id (required)
     * @param url the document&#39;s url, base64 encoded.  A unique id identifying a document. (required)
     * @param filter an optional text filter for URLs (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;List&lt;DocumentDeleted&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DocumentDeleted>> undeleteDocumentWithHttpInfo(String sessionId, String organisationId, String kbId, Integer sourceId, String url, String filter, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = undeleteDocumentValidateBeforeCall(sessionId, organisationId, kbId, sourceId, url, filter, apIVersion, null);
        Type localVarReturnType = new TypeToken<List<DocumentDeleted>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * un-delete a record (asynchronously)
     * Un-delete a previously deleted document and return a list of deleted document records for an administrator (all records).
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sourceId the item&#39;s source id (required)
     * @param url the document&#39;s url, base64 encoded.  A unique id identifying a document. (required)
     * @param filter an optional text filter for URLs (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call undeleteDocumentAsync(String sessionId, String organisationId, String kbId, Integer sourceId, String url, String filter, String apIVersion, final ApiCallback<List<DocumentDeleted>> _callback) throws ApiException {

        okhttp3.Call localVarCall = undeleteDocumentValidateBeforeCall(sessionId, organisationId, kbId, sourceId, url, filter, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<DocumentDeleted>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateACLs
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmUpdateACLs  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateACLsCall(String sessionId, CMUpdateACLs cmUpdateACLs, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmUpdateACLs;

        // create path and map variables
        String localVarPath = "/api/dms/acls";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateACLsValidateBeforeCall(String sessionId, CMUpdateACLs cmUpdateACLs, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling updateACLs(Async)");
        }

        // verify the required parameter 'cmUpdateACLs' is set
        if (cmUpdateACLs == null) {
            throw new ApiException("Missing the required parameter 'cmUpdateACLs' when calling updateACLs(Async)");
        }

        return updateACLsCall(sessionId, cmUpdateACLs, apIVersion, _callback);

    }

    /**
     * Update an item&#39;s ACLs
     * Update the Access Control List of a SimSage DMS item (source, file, or folder).
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmUpdateACLs  (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage updateACLs(String sessionId, CMUpdateACLs cmUpdateACLs, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = updateACLsWithHttpInfo(sessionId, cmUpdateACLs, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Update an item&#39;s ACLs
     * Update the Access Control List of a SimSage DMS item (source, file, or folder).
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmUpdateACLs  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> updateACLsWithHttpInfo(String sessionId, CMUpdateACLs cmUpdateACLs, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = updateACLsValidateBeforeCall(sessionId, cmUpdateACLs, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an item&#39;s ACLs (asynchronously)
     * Update the Access Control List of a SimSage DMS item (source, file, or folder).
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmUpdateACLs  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateACLsAsync(String sessionId, CMUpdateACLs cmUpdateACLs, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateACLsValidateBeforeCall(sessionId, cmUpdateACLs, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadDocument
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sourceId the owner source&#39;s id (required)
     * @param folderId the id of the folder we&#39;re uploading into (required)
     * @param lastModified lastModified unix-date-time (required)
     * @param _file the file to upload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadDocumentCall(String sessionId, String organisationId, String kbId, Integer sourceId, String folderId, String lastModified, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dms/upload/document/{organisationId}/{kbId}/{sourceId}/{folderId}/{lastModified}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "sourceId" + "}", localVarApiClient.escapeString(sourceId.toString()))
            .replace("{" + "folderId" + "}", localVarApiClient.escapeString(folderId.toString()))
            .replace("{" + "lastModified" + "}", localVarApiClient.escapeString(lastModified.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadDocumentValidateBeforeCall(String sessionId, String organisationId, String kbId, Integer sourceId, String folderId, String lastModified, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling uploadDocument(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling uploadDocument(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling uploadDocument(Async)");
        }

        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling uploadDocument(Async)");
        }

        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling uploadDocument(Async)");
        }

        // verify the required parameter 'lastModified' is set
        if (lastModified == null) {
            throw new ApiException("Missing the required parameter 'lastModified' when calling uploadDocument(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling uploadDocument(Async)");
        }

        return uploadDocumentCall(sessionId, organisationId, kbId, sourceId, folderId, lastModified, _file, _callback);

    }

    /**
     * Upload a Document
     * Upload a document into a DMS folder
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sourceId the owner source&#39;s id (required)
     * @param folderId the id of the folder we&#39;re uploading into (required)
     * @param lastModified lastModified unix-date-time (required)
     * @param _file the file to upload (required)
     * @return CMDocumentFolder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public CMDocumentFolder uploadDocument(String sessionId, String organisationId, String kbId, Integer sourceId, String folderId, String lastModified, File _file) throws ApiException {
        ApiResponse<CMDocumentFolder> localVarResp = uploadDocumentWithHttpInfo(sessionId, organisationId, kbId, sourceId, folderId, lastModified, _file);
        return localVarResp.getData();
    }

    /**
     * Upload a Document
     * Upload a document into a DMS folder
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sourceId the owner source&#39;s id (required)
     * @param folderId the id of the folder we&#39;re uploading into (required)
     * @param lastModified lastModified unix-date-time (required)
     * @param _file the file to upload (required)
     * @return ApiResponse&lt;CMDocumentFolder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMDocumentFolder> uploadDocumentWithHttpInfo(String sessionId, String organisationId, String kbId, Integer sourceId, String folderId, String lastModified, File _file) throws ApiException {
        okhttp3.Call localVarCall = uploadDocumentValidateBeforeCall(sessionId, organisationId, kbId, sourceId, folderId, lastModified, _file, null);
        Type localVarReturnType = new TypeToken<CMDocumentFolder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload a Document (asynchronously)
     * Upload a document into a DMS folder
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sourceId the owner source&#39;s id (required)
     * @param folderId the id of the folder we&#39;re uploading into (required)
     * @param lastModified lastModified unix-date-time (required)
     * @param _file the file to upload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadDocumentAsync(String sessionId, String organisationId, String kbId, Integer sourceId, String folderId, String lastModified, File _file, final ApiCallback<CMDocumentFolder> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadDocumentValidateBeforeCall(sessionId, organisationId, kbId, sourceId, folderId, lastModified, _file, _callback);
        Type localVarReturnType = new TypeToken<CMDocumentFolder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
