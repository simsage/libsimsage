/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CMClientQuery;
import org.openapitools.client.model.CMClientQueryResult;
import org.openapitools.client.model.CMDocumentQuestionAndAnswer;
import org.openapitools.client.model.CMShortSummary;
import org.openapitools.client.model.CMShortSummaryResult;
import org.openapitools.client.model.CMTextToSearchConversion;
import org.openapitools.client.model.CMTextToSearchConversionReturn;
import org.openapitools.client.model.CMTextToSearchEdit;
import org.openapitools.client.model.CMTextToSearchPaginated;
import org.openapitools.client.model.CMTextToSearchPaginatedReturn;
import org.openapitools.client.model.CMVersion;
import org.openapitools.client.model.JsonMessage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SemanticApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SemanticApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SemanticApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteTextToSearch
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param word the word of the text-to-search word (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTextToSearchCall(String organisationId, String kbId, String word, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/semantic/text-to-search/{organisationId}/{kbId}/{word}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTextToSearchValidateBeforeCall(String organisationId, String kbId, String word, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling deleteTextToSearch(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling deleteTextToSearch(Async)");
        }

        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling deleteTextToSearch(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling deleteTextToSearch(Async)");
        }

        return deleteTextToSearchCall(organisationId, kbId, word, sessionId, apIVersion, _callback);

    }

    /**
     * Delete text-to-search
     * Remove an existing text-to-search item.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param word the word of the text-to-search word (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage deleteTextToSearch(String organisationId, String kbId, String word, String sessionId, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = deleteTextToSearchWithHttpInfo(organisationId, kbId, word, sessionId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Delete text-to-search
     * Remove an existing text-to-search item.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param word the word of the text-to-search word (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> deleteTextToSearchWithHttpInfo(String organisationId, String kbId, String word, String sessionId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteTextToSearchValidateBeforeCall(organisationId, kbId, word, sessionId, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete text-to-search (asynchronously)
     * Remove an existing text-to-search item.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param word the word of the text-to-search word (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTextToSearchAsync(String organisationId, String kbId, String word, String sessionId, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTextToSearchValidateBeforeCall(organisationId, kbId, word, sessionId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentQuestionAndAnswer
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmDocumentQuestionAndAnswer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentQuestionAndAnswerCall(String sessionId, CMDocumentQuestionAndAnswer cmDocumentQuestionAndAnswer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmDocumentQuestionAndAnswer;

        // create path and map variables
        String localVarPath = "/api/semantic/document-qa";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentQuestionAndAnswerValidateBeforeCall(String sessionId, CMDocumentQuestionAndAnswer cmDocumentQuestionAndAnswer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling documentQuestionAndAnswer(Async)");
        }

        // verify the required parameter 'cmDocumentQuestionAndAnswer' is set
        if (cmDocumentQuestionAndAnswer == null) {
            throw new ApiException("Missing the required parameter 'cmDocumentQuestionAndAnswer' when calling documentQuestionAndAnswer(Async)");
        }

        return documentQuestionAndAnswerCall(sessionId, cmDocumentQuestionAndAnswer, _callback);

    }

    /**
     * Document Q&amp;A
     * Answer a question about a given document
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmDocumentQuestionAndAnswer  (required)
     * @return CMDocumentQuestionAndAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public CMDocumentQuestionAndAnswer documentQuestionAndAnswer(String sessionId, CMDocumentQuestionAndAnswer cmDocumentQuestionAndAnswer) throws ApiException {
        ApiResponse<CMDocumentQuestionAndAnswer> localVarResp = documentQuestionAndAnswerWithHttpInfo(sessionId, cmDocumentQuestionAndAnswer);
        return localVarResp.getData();
    }

    /**
     * Document Q&amp;A
     * Answer a question about a given document
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmDocumentQuestionAndAnswer  (required)
     * @return ApiResponse&lt;CMDocumentQuestionAndAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMDocumentQuestionAndAnswer> documentQuestionAndAnswerWithHttpInfo(String sessionId, CMDocumentQuestionAndAnswer cmDocumentQuestionAndAnswer) throws ApiException {
        okhttp3.Call localVarCall = documentQuestionAndAnswerValidateBeforeCall(sessionId, cmDocumentQuestionAndAnswer, null);
        Type localVarReturnType = new TypeToken<CMDocumentQuestionAndAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Document Q&amp;A (asynchronously)
     * Answer a question about a given document
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmDocumentQuestionAndAnswer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentQuestionAndAnswerAsync(String sessionId, CMDocumentQuestionAndAnswer cmDocumentQuestionAndAnswer, final ApiCallback<CMDocumentQuestionAndAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentQuestionAndAnswerValidateBeforeCall(sessionId, cmDocumentQuestionAndAnswer, _callback);
        Type localVarReturnType = new TypeToken<CMDocumentQuestionAndAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTextToSearchPaginated
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmTextToSearchPaginated  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTextToSearchPaginatedCall(String sessionId, CMTextToSearchPaginated cmTextToSearchPaginated, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmTextToSearchPaginated;

        // create path and map variables
        String localVarPath = "/api/semantic/text-to-search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTextToSearchPaginatedValidateBeforeCall(String sessionId, CMTextToSearchPaginated cmTextToSearchPaginated, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getTextToSearchPaginated(Async)");
        }

        // verify the required parameter 'cmTextToSearchPaginated' is set
        if (cmTextToSearchPaginated == null) {
            throw new ApiException("Missing the required parameter 'cmTextToSearchPaginated' when calling getTextToSearchPaginated(Async)");
        }

        return getTextToSearchPaginatedCall(sessionId, cmTextToSearchPaginated, apIVersion, _callback);

    }

    /**
     * Text to Search mappings
     * Return a paginated list of text-to-search mappings with an optional filter.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmTextToSearchPaginated  (required)
     * @param apIVersion  (optional)
     * @return CMTextToSearchPaginatedReturn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public CMTextToSearchPaginatedReturn getTextToSearchPaginated(String sessionId, CMTextToSearchPaginated cmTextToSearchPaginated, String apIVersion) throws ApiException {
        ApiResponse<CMTextToSearchPaginatedReturn> localVarResp = getTextToSearchPaginatedWithHttpInfo(sessionId, cmTextToSearchPaginated, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Text to Search mappings
     * Return a paginated list of text-to-search mappings with an optional filter.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmTextToSearchPaginated  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMTextToSearchPaginatedReturn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMTextToSearchPaginatedReturn> getTextToSearchPaginatedWithHttpInfo(String sessionId, CMTextToSearchPaginated cmTextToSearchPaginated, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = getTextToSearchPaginatedValidateBeforeCall(sessionId, cmTextToSearchPaginated, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMTextToSearchPaginatedReturn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Text to Search mappings (asynchronously)
     * Return a paginated list of text-to-search mappings with an optional filter.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmTextToSearchPaginated  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTextToSearchPaginatedAsync(String sessionId, CMTextToSearchPaginated cmTextToSearchPaginated, String apIVersion, final ApiCallback<CMTextToSearchPaginatedReturn> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTextToSearchPaginatedValidateBeforeCall(sessionId, cmTextToSearchPaginated, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMTextToSearchPaginatedReturn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restfulClientQuery
     * @param cmClientQuery  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restfulClientQueryCall(CMClientQuery cmClientQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmClientQuery;

        // create path and map variables
        String localVarPath = "/api/semantic/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restfulClientQueryValidateBeforeCall(CMClientQuery cmClientQuery, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cmClientQuery' is set
        if (cmClientQuery == null) {
            throw new ApiException("Missing the required parameter 'cmClientQuery' when calling restfulClientQuery(Async)");
        }

        return restfulClientQueryCall(cmClientQuery, _callback);

    }

    /**
     * Client Query
     * a SimSage client asks a question or performs a keyword-search.
     * @param cmClientQuery  (required)
     * @return CMClientQueryResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public CMClientQueryResult restfulClientQuery(CMClientQuery cmClientQuery) throws ApiException {
        ApiResponse<CMClientQueryResult> localVarResp = restfulClientQueryWithHttpInfo(cmClientQuery);
        return localVarResp.getData();
    }

    /**
     * Client Query
     * a SimSage client asks a question or performs a keyword-search.
     * @param cmClientQuery  (required)
     * @return ApiResponse&lt;CMClientQueryResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMClientQueryResult> restfulClientQueryWithHttpInfo(CMClientQuery cmClientQuery) throws ApiException {
        okhttp3.Call localVarCall = restfulClientQueryValidateBeforeCall(cmClientQuery, null);
        Type localVarReturnType = new TypeToken<CMClientQueryResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Client Query (asynchronously)
     * a SimSage client asks a question or performs a keyword-search.
     * @param cmClientQuery  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restfulClientQueryAsync(CMClientQuery cmClientQuery, final ApiCallback<CMClientQueryResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = restfulClientQueryValidateBeforeCall(cmClientQuery, _callback);
        Type localVarReturnType = new TypeToken<CMClientQueryResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveTextToSearch
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmTextToSearchEdit  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveTextToSearchCall(String organisationId, String kbId, String sessionId, CMTextToSearchEdit cmTextToSearchEdit, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmTextToSearchEdit;

        // create path and map variables
        String localVarPath = "/api/semantic/text-to-search/{organisationId}/{kbId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveTextToSearchValidateBeforeCall(String organisationId, String kbId, String sessionId, CMTextToSearchEdit cmTextToSearchEdit, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling saveTextToSearch(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling saveTextToSearch(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling saveTextToSearch(Async)");
        }

        // verify the required parameter 'cmTextToSearchEdit' is set
        if (cmTextToSearchEdit == null) {
            throw new ApiException("Missing the required parameter 'cmTextToSearchEdit' when calling saveTextToSearch(Async)");
        }

        return saveTextToSearchCall(organisationId, kbId, sessionId, cmTextToSearchEdit, apIVersion, _callback);

    }

    /**
     * Save a text-to-search item
     * Create or update (save) a text-to-search item.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmTextToSearchEdit  (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage saveTextToSearch(String organisationId, String kbId, String sessionId, CMTextToSearchEdit cmTextToSearchEdit, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = saveTextToSearchWithHttpInfo(organisationId, kbId, sessionId, cmTextToSearchEdit, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Save a text-to-search item
     * Create or update (save) a text-to-search item.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmTextToSearchEdit  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> saveTextToSearchWithHttpInfo(String organisationId, String kbId, String sessionId, CMTextToSearchEdit cmTextToSearchEdit, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = saveTextToSearchValidateBeforeCall(organisationId, kbId, sessionId, cmTextToSearchEdit, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save a text-to-search item (asynchronously)
     * Create or update (save) a text-to-search item.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmTextToSearchEdit  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveTextToSearchAsync(String organisationId, String kbId, String sessionId, CMTextToSearchEdit cmTextToSearchEdit, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveTextToSearchValidateBeforeCall(organisationId, kbId, sessionId, cmTextToSearchEdit, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shortSummary
     * @param cmShortSummary  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shortSummaryCall(CMShortSummary cmShortSummary, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmShortSummary;

        // create path and map variables
        String localVarPath = "/api/semantic/short-summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shortSummaryValidateBeforeCall(CMShortSummary cmShortSummary, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cmShortSummary' is set
        if (cmShortSummary == null) {
            throw new ApiException("Missing the required parameter 'cmShortSummary' when calling shortSummary(Async)");
        }

        return shortSummaryCall(cmShortSummary, _callback);

    }

    /**
     * Short summary
     * Create a short summary for a given url / sentence
     * @param cmShortSummary  (required)
     * @return CMShortSummaryResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public CMShortSummaryResult shortSummary(CMShortSummary cmShortSummary) throws ApiException {
        ApiResponse<CMShortSummaryResult> localVarResp = shortSummaryWithHttpInfo(cmShortSummary);
        return localVarResp.getData();
    }

    /**
     * Short summary
     * Create a short summary for a given url / sentence
     * @param cmShortSummary  (required)
     * @return ApiResponse&lt;CMShortSummaryResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMShortSummaryResult> shortSummaryWithHttpInfo(CMShortSummary cmShortSummary) throws ApiException {
        okhttp3.Call localVarCall = shortSummaryValidateBeforeCall(cmShortSummary, null);
        Type localVarReturnType = new TypeToken<CMShortSummaryResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Short summary (asynchronously)
     * Create a short summary for a given url / sentence
     * @param cmShortSummary  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shortSummaryAsync(CMShortSummary cmShortSummary, final ApiCallback<CMShortSummaryResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = shortSummaryValidateBeforeCall(cmShortSummary, _callback);
        Type localVarReturnType = new TypeToken<CMShortSummaryResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tryTextToSearchConversion
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmTextToSearchConversion  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tryTextToSearchConversionCall(String sessionId, CMTextToSearchConversion cmTextToSearchConversion, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmTextToSearchConversion;

        // create path and map variables
        String localVarPath = "/api/semantic/text-to-search-try";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tryTextToSearchConversionValidateBeforeCall(String sessionId, CMTextToSearchConversion cmTextToSearchConversion, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling tryTextToSearchConversion(Async)");
        }

        // verify the required parameter 'cmTextToSearchConversion' is set
        if (cmTextToSearchConversion == null) {
            throw new ApiException("Missing the required parameter 'cmTextToSearchConversion' when calling tryTextToSearchConversion(Async)");
        }

        return tryTextToSearchConversionCall(sessionId, cmTextToSearchConversion, apIVersion, _callback);

    }

    /**
     * try converting text-to-search
     * See the results of a text-to-search conversion
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmTextToSearchConversion  (required)
     * @param apIVersion  (optional)
     * @return CMTextToSearchConversionReturn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public CMTextToSearchConversionReturn tryTextToSearchConversion(String sessionId, CMTextToSearchConversion cmTextToSearchConversion, String apIVersion) throws ApiException {
        ApiResponse<CMTextToSearchConversionReturn> localVarResp = tryTextToSearchConversionWithHttpInfo(sessionId, cmTextToSearchConversion, apIVersion);
        return localVarResp.getData();
    }

    /**
     * try converting text-to-search
     * See the results of a text-to-search conversion
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmTextToSearchConversion  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMTextToSearchConversionReturn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMTextToSearchConversionReturn> tryTextToSearchConversionWithHttpInfo(String sessionId, CMTextToSearchConversion cmTextToSearchConversion, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = tryTextToSearchConversionValidateBeforeCall(sessionId, cmTextToSearchConversion, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMTextToSearchConversionReturn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * try converting text-to-search (asynchronously)
     * See the results of a text-to-search conversion
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmTextToSearchConversion  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tryTextToSearchConversionAsync(String sessionId, CMTextToSearchConversion cmTextToSearchConversion, String apIVersion, final ApiCallback<CMTextToSearchConversionReturn> _callback) throws ApiException {

        okhttp3.Call localVarCall = tryTextToSearchConversionValidateBeforeCall(sessionId, cmTextToSearchConversion, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMTextToSearchConversionReturn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for version1
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get version. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> get the version response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call version1Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/semantic/version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call version1ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return version1Call(_callback);

    }

    /**
     * Version
     * Get the version of SimSage Search Services.
     * @return CMVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get version. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> get the version response </td><td>  -  </td></tr>
     </table>
     */
    public CMVersion version1() throws ApiException {
        ApiResponse<CMVersion> localVarResp = version1WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Version
     * Get the version of SimSage Search Services.
     * @return ApiResponse&lt;CMVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get version. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> get the version response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMVersion> version1WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = version1ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CMVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Version (asynchronously)
     * Get the version of SimSage Search Services.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get version. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> get the version response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call version1Async(final ApiCallback<CMVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = version1ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CMVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
