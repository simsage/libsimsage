/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CMCommandQueueItem;
import org.openapitools.client.model.CMLoggerEntry;
import org.openapitools.client.model.CMReturnStatistics;
import org.openapitools.client.model.CMVersion;
import org.openapitools.client.model.JsonMessage;
import org.openapitools.client.model.OptimizeIndexesGetReportCmd;
import org.openapitools.client.model.OptimizeIndexesGetReportsCmd;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StatsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StatsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StatsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getIndexOptimizationReport
     * @param sessionId a valid session-guid id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param id the id of the report (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> failed </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIndexOptimizationReportCall(String sessionId, String organisationId, String kbId, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/stats/report/{organisationId}/{kbId}/{id}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIndexOptimizationReportValidateBeforeCall(String sessionId, String organisationId, String kbId, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getIndexOptimizationReport(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getIndexOptimizationReport(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling getIndexOptimizationReport(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getIndexOptimizationReport(Async)");
        }

        return getIndexOptimizationReportCall(sessionId, organisationId, kbId, id, _callback);

    }

    /**
     * get an optimization report
     * return an optimization report
     * @param sessionId a valid session-guid id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param id the id of the report (required)
     * @return List&lt;OptimizeIndexesGetReportCmd&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> failed </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public List<OptimizeIndexesGetReportCmd> getIndexOptimizationReport(String sessionId, String organisationId, String kbId, Long id) throws ApiException {
        ApiResponse<List<OptimizeIndexesGetReportCmd>> localVarResp = getIndexOptimizationReportWithHttpInfo(sessionId, organisationId, kbId, id);
        return localVarResp.getData();
    }

    /**
     * get an optimization report
     * return an optimization report
     * @param sessionId a valid session-guid id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param id the id of the report (required)
     * @return ApiResponse&lt;List&lt;OptimizeIndexesGetReportCmd&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> failed </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OptimizeIndexesGetReportCmd>> getIndexOptimizationReportWithHttpInfo(String sessionId, String organisationId, String kbId, Long id) throws ApiException {
        okhttp3.Call localVarCall = getIndexOptimizationReportValidateBeforeCall(sessionId, organisationId, kbId, id, null);
        Type localVarReturnType = new TypeToken<List<OptimizeIndexesGetReportCmd>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get an optimization report (asynchronously)
     * return an optimization report
     * @param sessionId a valid session-guid id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param id the id of the report (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> failed </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIndexOptimizationReportAsync(String sessionId, String organisationId, String kbId, Long id, final ApiCallback<List<OptimizeIndexesGetReportCmd>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIndexOptimizationReportValidateBeforeCall(sessionId, organisationId, kbId, id, _callback);
        Type localVarReturnType = new TypeToken<List<OptimizeIndexesGetReportCmd>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIndexOptimizationReports
     * @param sessionId a valid session-guid id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIndexOptimizationReportsCall(String sessionId, String organisationId, String kbId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/stats/reports/{organisationId}/{kbId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIndexOptimizationReportsValidateBeforeCall(String sessionId, String organisationId, String kbId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getIndexOptimizationReports(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getIndexOptimizationReports(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling getIndexOptimizationReports(Async)");
        }

        return getIndexOptimizationReportsCall(sessionId, organisationId, kbId, _callback);

    }

    /**
     * get optimization report list
     * return a list of optimization reports
     * @param sessionId a valid session-guid id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @return List&lt;OptimizeIndexesGetReportsCmd&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> failed </td><td>  -  </td></tr>
     </table>
     */
    public List<OptimizeIndexesGetReportsCmd> getIndexOptimizationReports(String sessionId, String organisationId, String kbId) throws ApiException {
        ApiResponse<List<OptimizeIndexesGetReportsCmd>> localVarResp = getIndexOptimizationReportsWithHttpInfo(sessionId, organisationId, kbId);
        return localVarResp.getData();
    }

    /**
     * get optimization report list
     * return a list of optimization reports
     * @param sessionId a valid session-guid id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @return ApiResponse&lt;List&lt;OptimizeIndexesGetReportsCmd&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OptimizeIndexesGetReportsCmd>> getIndexOptimizationReportsWithHttpInfo(String sessionId, String organisationId, String kbId) throws ApiException {
        okhttp3.Call localVarCall = getIndexOptimizationReportsValidateBeforeCall(sessionId, organisationId, kbId, null);
        Type localVarReturnType = new TypeToken<List<OptimizeIndexesGetReportsCmd>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get optimization report list (asynchronously)
     * return a list of optimization reports
     * @param sessionId a valid session-guid id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIndexOptimizationReportsAsync(String sessionId, String organisationId, String kbId, final ApiCallback<List<OptimizeIndexesGetReportsCmd>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIndexOptimizationReportsValidateBeforeCall(sessionId, organisationId, kbId, _callback);
        Type localVarReturnType = new TypeToken<List<OptimizeIndexesGetReportsCmd>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStats
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param year the year to get stats for (required)
     * @param month the month to get stats for (required)
     * @param top how many stats to return (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatsCall(String sessionId, String organisationId, String kbId, Integer year, Integer month, Integer top, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/stats/stats/{organisationId}/{kbId}/{year}/{month}/{top}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()))
            .replace("{" + "month" + "}", localVarApiClient.escapeString(month.toString()))
            .replace("{" + "top" + "}", localVarApiClient.escapeString(top.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatsValidateBeforeCall(String sessionId, String organisationId, String kbId, Integer year, Integer month, Integer top, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getStats(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getStats(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling getStats(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getStats(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling getStats(Async)");
        }

        // verify the required parameter 'top' is set
        if (top == null) {
            throw new ApiException("Missing the required parameter 'top' when calling getStats(Async)");
        }

        return getStatsCall(sessionId, organisationId, kbId, year, month, top, apIVersion, _callback);

    }

    /**
     * Get usage Statistics
     * Get all statistics for a given month, including some global ones.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param year the year to get stats for (required)
     * @param month the month to get stats for (required)
     * @param top how many stats to return (required)
     * @param apIVersion  (optional)
     * @return CMReturnStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> failed </td><td>  -  </td></tr>
     </table>
     */
    public CMReturnStatistics getStats(String sessionId, String organisationId, String kbId, Integer year, Integer month, Integer top, String apIVersion) throws ApiException {
        ApiResponse<CMReturnStatistics> localVarResp = getStatsWithHttpInfo(sessionId, organisationId, kbId, year, month, top, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Get usage Statistics
     * Get all statistics for a given month, including some global ones.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param year the year to get stats for (required)
     * @param month the month to get stats for (required)
     * @param top how many stats to return (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMReturnStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMReturnStatistics> getStatsWithHttpInfo(String sessionId, String organisationId, String kbId, Integer year, Integer month, Integer top, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = getStatsValidateBeforeCall(sessionId, organisationId, kbId, year, month, top, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMReturnStatistics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get usage Statistics (asynchronously)
     * Get all statistics for a given month, including some global ones.
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param year the year to get stats for (required)
     * @param month the month to get stats for (required)
     * @param top how many stats to return (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatsAsync(String sessionId, String organisationId, String kbId, Integer year, Integer month, Integer top, String apIVersion, final ApiCallback<CMReturnStatistics> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatsValidateBeforeCall(sessionId, organisationId, kbId, year, month, top, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMReturnStatistics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simSageStatus
     * @param sessionId a valid session-guid id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> failed </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simSageStatusCall(String sessionId, String organisationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/stats/status/{organisationId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simSageStatusValidateBeforeCall(String sessionId, String organisationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling simSageStatus(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling simSageStatus(Async)");
        }

        return simSageStatusCall(sessionId, organisationId, _callback);

    }

    /**
     * SimSage status
     * return SimSage indexer and parser status
     * @param sessionId a valid session-guid id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @return List&lt;CMCommandQueueItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> failed </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public List<CMCommandQueueItem> simSageStatus(String sessionId, String organisationId) throws ApiException {
        ApiResponse<List<CMCommandQueueItem>> localVarResp = simSageStatusWithHttpInfo(sessionId, organisationId);
        return localVarResp.getData();
    }

    /**
     * SimSage status
     * return SimSage indexer and parser status
     * @param sessionId a valid session-guid id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @return ApiResponse&lt;List&lt;CMCommandQueueItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> failed </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CMCommandQueueItem>> simSageStatusWithHttpInfo(String sessionId, String organisationId) throws ApiException {
        okhttp3.Call localVarCall = simSageStatusValidateBeforeCall(sessionId, organisationId, null);
        Type localVarReturnType = new TypeToken<List<CMCommandQueueItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * SimSage status (asynchronously)
     * return SimSage indexer and parser status
     * @param sessionId a valid session-guid id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> failed </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simSageStatusAsync(String sessionId, String organisationId, final ApiCallback<List<CMCommandQueueItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = simSageStatusValidateBeforeCall(sessionId, organisationId, _callback);
        Type localVarReturnType = new TypeToken<List<CMCommandQueueItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for systemLogs
     * @param organisationId the organisation (its guid id) (required)
     * @param year the year to get the log for (required)
     * @param month the month to get the log for (required)
     * @param day the day to get the log for (required)
     * @param hour the hour to get the log for (required)
     * @param hours the number of hours to get the logs for starting at hour (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call systemLogsCall(String organisationId, Integer year, Integer month, Integer day, Integer hour, Integer hours, String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/stats/system-logs/{organisationId}/{year}/{month}/{day}/{hour}/{hours}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()))
            .replace("{" + "month" + "}", localVarApiClient.escapeString(month.toString()))
            .replace("{" + "day" + "}", localVarApiClient.escapeString(day.toString()))
            .replace("{" + "hour" + "}", localVarApiClient.escapeString(hour.toString()))
            .replace("{" + "hours" + "}", localVarApiClient.escapeString(hours.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call systemLogsValidateBeforeCall(String organisationId, Integer year, Integer month, Integer day, Integer hour, Integer hours, String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling systemLogs(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling systemLogs(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling systemLogs(Async)");
        }

        // verify the required parameter 'day' is set
        if (day == null) {
            throw new ApiException("Missing the required parameter 'day' when calling systemLogs(Async)");
        }

        // verify the required parameter 'hour' is set
        if (hour == null) {
            throw new ApiException("Missing the required parameter 'hour' when calling systemLogs(Async)");
        }

        // verify the required parameter 'hours' is set
        if (hours == null) {
            throw new ApiException("Missing the required parameter 'hours' when calling systemLogs(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling systemLogs(Async)");
        }

        return systemLogsCall(organisationId, year, month, day, hour, hours, sessionId, _callback);

    }

    /**
     * System Logs
     * return SimSage System-logs
     * @param organisationId the organisation (its guid id) (required)
     * @param year the year to get the log for (required)
     * @param month the month to get the log for (required)
     * @param day the day to get the log for (required)
     * @param hour the hour to get the log for (required)
     * @param hours the number of hours to get the logs for starting at hour (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return List&lt;CMLoggerEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> failed </td><td>  -  </td></tr>
     </table>
     */
    public List<CMLoggerEntry> systemLogs(String organisationId, Integer year, Integer month, Integer day, Integer hour, Integer hours, String sessionId) throws ApiException {
        ApiResponse<List<CMLoggerEntry>> localVarResp = systemLogsWithHttpInfo(organisationId, year, month, day, hour, hours, sessionId);
        return localVarResp.getData();
    }

    /**
     * System Logs
     * return SimSage System-logs
     * @param organisationId the organisation (its guid id) (required)
     * @param year the year to get the log for (required)
     * @param month the month to get the log for (required)
     * @param day the day to get the log for (required)
     * @param hour the hour to get the log for (required)
     * @param hours the number of hours to get the logs for starting at hour (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return ApiResponse&lt;List&lt;CMLoggerEntry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CMLoggerEntry>> systemLogsWithHttpInfo(String organisationId, Integer year, Integer month, Integer day, Integer hour, Integer hours, String sessionId) throws ApiException {
        okhttp3.Call localVarCall = systemLogsValidateBeforeCall(organisationId, year, month, day, hour, hours, sessionId, null);
        Type localVarReturnType = new TypeToken<List<CMLoggerEntry>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * System Logs (asynchronously)
     * return SimSage System-logs
     * @param organisationId the organisation (its guid id) (required)
     * @param year the year to get the log for (required)
     * @param month the month to get the log for (required)
     * @param day the day to get the log for (required)
     * @param hour the hour to get the log for (required)
     * @param hours the number of hours to get the logs for starting at hour (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call systemLogsAsync(String organisationId, Integer year, Integer month, Integer day, Integer hour, Integer hours, String sessionId, final ApiCallback<List<CMLoggerEntry>> _callback) throws ApiException {

        okhttp3.Call localVarCall = systemLogsValidateBeforeCall(organisationId, year, month, day, hour, hours, sessionId, _callback);
        Type localVarReturnType = new TypeToken<List<CMLoggerEntry>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for version
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get version. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> get the version response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call versionCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/stats/version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call versionValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return versionCall(_callback);

    }

    /**
     * Version
     * Get the version of SimSage Stats Services.
     * @return CMVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get version. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> get the version response </td><td>  -  </td></tr>
     </table>
     */
    public CMVersion version() throws ApiException {
        ApiResponse<CMVersion> localVarResp = versionWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Version
     * Get the version of SimSage Stats Services.
     * @return ApiResponse&lt;CMVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get version. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> get the version response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMVersion> versionWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = versionValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CMVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Version (asynchronously)
     * Get the version of SimSage Stats Services.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get version. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> get the version response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call versionAsync(final ApiCallback<CMVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = versionValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CMVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
