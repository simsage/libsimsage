/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.13.31
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CMDocument;
import org.openapitools.client.model.CMDocumentFolder;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A set of items subscribed to.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-06T16:03:21.377776023Z[Europe/London]")
public class CMSubscriptions {
  public static final String SERIALIZED_NAME_FOLDER_LIST = "folderList";
  @SerializedName(SERIALIZED_NAME_FOLDER_LIST)
  private List<CMDocumentFolder> folderList = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOCUMENT_LIST = "documentList";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_LIST)
  private List<CMDocument> documentList = new ArrayList<>();

  public CMSubscriptions() {
  }

  public CMSubscriptions folderList(List<CMDocumentFolder> folderList) {
    
    this.folderList = folderList;
    return this;
  }

  public CMSubscriptions addFolderListItem(CMDocumentFolder folderListItem) {
    if (this.folderList == null) {
      this.folderList = new ArrayList<>();
    }
    this.folderList.add(folderListItem);
    return this;
  }

   /**
   * list of folders subscribed to
   * @return folderList
  **/
  @javax.annotation.Nonnull
  public List<CMDocumentFolder> getFolderList() {
    return folderList;
  }


  public void setFolderList(List<CMDocumentFolder> folderList) {
    this.folderList = folderList;
  }


  public CMSubscriptions documentList(List<CMDocument> documentList) {
    
    this.documentList = documentList;
    return this;
  }

  public CMSubscriptions addDocumentListItem(CMDocument documentListItem) {
    if (this.documentList == null) {
      this.documentList = new ArrayList<>();
    }
    this.documentList.add(documentListItem);
    return this;
  }

   /**
   * list of documents subscribed to
   * @return documentList
  **/
  @javax.annotation.Nonnull
  public List<CMDocument> getDocumentList() {
    return documentList;
  }


  public void setDocumentList(List<CMDocument> documentList) {
    this.documentList = documentList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CMSubscriptions cmSubscriptions = (CMSubscriptions) o;
    return Objects.equals(this.folderList, cmSubscriptions.folderList) &&
        Objects.equals(this.documentList, cmSubscriptions.documentList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(folderList, documentList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CMSubscriptions {\n");
    sb.append("    folderList: ").append(toIndentedString(folderList)).append("\n");
    sb.append("    documentList: ").append(toIndentedString(documentList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("folderList");
    openapiFields.add("documentList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("folderList");
    openapiRequiredFields.add("documentList");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CMSubscriptions
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CMSubscriptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CMSubscriptions is not found in the empty JSON string", CMSubscriptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CMSubscriptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CMSubscriptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CMSubscriptions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("folderList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `folderList` to be an array in the JSON string but got `%s`", jsonObj.get("folderList").toString()));
      }

      JsonArray jsonArrayfolderList = jsonObj.getAsJsonArray("folderList");
      // validate the required field `folderList` (array)
      for (int i = 0; i < jsonArrayfolderList.size(); i++) {
        CMDocumentFolder.validateJsonElement(jsonArrayfolderList.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("documentList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentList` to be an array in the JSON string but got `%s`", jsonObj.get("documentList").toString()));
      }

      JsonArray jsonArraydocumentList = jsonObj.getAsJsonArray("documentList");
      // validate the required field `documentList` (array)
      for (int i = 0; i < jsonArraydocumentList.size(); i++) {
        CMDocument.validateJsonElement(jsonArraydocumentList.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CMSubscriptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CMSubscriptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CMSubscriptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CMSubscriptions.class));

       return (TypeAdapter<T>) new TypeAdapter<CMSubscriptions>() {
           @Override
           public void write(JsonWriter out, CMSubscriptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CMSubscriptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CMSubscriptions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CMSubscriptions
  * @throws IOException if the JSON string is invalid with respect to CMSubscriptions
  */
  public static CMSubscriptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CMSubscriptions.class);
  }

 /**
  * Convert an instance of CMSubscriptions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

