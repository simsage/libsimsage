/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.11.4
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CMQueryToken;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CMResultsSection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-16T13:18:33.437170740+01:00[Europe/London]")
public class CMResultsSection {
  public static final String SERIALIZED_NAME_QUERY_TOKENS = "queryTokens";
  @SerializedName(SERIALIZED_NAME_QUERY_TOKENS)
  private List<CMQueryToken> queryTokens = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAPTION = "caption";
  @SerializedName(SERIALIZED_NAME_CAPTION)
  private String caption;

  public static final String SERIALIZED_NAME_HAS_SUB_TERMS = "hasSubTerms";
  @SerializedName(SERIALIZED_NAME_HAS_SUB_TERMS)
  private Boolean hasSubTerms;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public CMResultsSection() {
  }

  public CMResultsSection queryTokens(List<CMQueryToken> queryTokens) {
    
    this.queryTokens = queryTokens;
    return this;
  }

  public CMResultsSection addQueryTokensItem(CMQueryToken queryTokensItem) {
    if (this.queryTokens == null) {
      this.queryTokens = new ArrayList<>();
    }
    this.queryTokens.add(queryTokensItem);
    return this;
  }

   /**
   * Get queryTokens
   * @return queryTokens
  **/
  @javax.annotation.Nonnull
  public List<CMQueryToken> getQueryTokens() {
    return queryTokens;
  }


  public void setQueryTokens(List<CMQueryToken> queryTokens) {
    this.queryTokens = queryTokens;
  }


  public CMResultsSection caption(String caption) {
    
    this.caption = caption;
    return this;
  }

   /**
   * Get caption
   * @return caption
  **/
  @javax.annotation.Nonnull
  public String getCaption() {
    return caption;
  }


  public void setCaption(String caption) {
    this.caption = caption;
  }


  public CMResultsSection hasSubTerms(Boolean hasSubTerms) {
    
    this.hasSubTerms = hasSubTerms;
    return this;
  }

   /**
   * Get hasSubTerms
   * @return hasSubTerms
  **/
  @javax.annotation.Nonnull
  public Boolean getHasSubTerms() {
    return hasSubTerms;
  }


  public void setHasSubTerms(Boolean hasSubTerms) {
    this.hasSubTerms = hasSubTerms;
  }


  public CMResultsSection count(Integer count) {
    
    this.count = count;
    return this;
  }

   /**
   * Get count
   * @return count
  **/
  @javax.annotation.Nonnull
  public Integer getCount() {
    return count;
  }


  public void setCount(Integer count) {
    this.count = count;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CMResultsSection cmResultsSection = (CMResultsSection) o;
    return Objects.equals(this.queryTokens, cmResultsSection.queryTokens) &&
        Objects.equals(this.caption, cmResultsSection.caption) &&
        Objects.equals(this.hasSubTerms, cmResultsSection.hasSubTerms) &&
        Objects.equals(this.count, cmResultsSection.count);
  }

  @Override
  public int hashCode() {
    return Objects.hash(queryTokens, caption, hasSubTerms, count);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CMResultsSection {\n");
    sb.append("    queryTokens: ").append(toIndentedString(queryTokens)).append("\n");
    sb.append("    caption: ").append(toIndentedString(caption)).append("\n");
    sb.append("    hasSubTerms: ").append(toIndentedString(hasSubTerms)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("queryTokens");
    openapiFields.add("caption");
    openapiFields.add("hasSubTerms");
    openapiFields.add("count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("queryTokens");
    openapiRequiredFields.add("caption");
    openapiRequiredFields.add("hasSubTerms");
    openapiRequiredFields.add("count");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CMResultsSection
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CMResultsSection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CMResultsSection is not found in the empty JSON string", CMResultsSection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CMResultsSection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CMResultsSection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CMResultsSection.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("queryTokens").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryTokens` to be an array in the JSON string but got `%s`", jsonObj.get("queryTokens").toString()));
      }

      JsonArray jsonArrayqueryTokens = jsonObj.getAsJsonArray("queryTokens");
      // validate the required field `queryTokens` (array)
      for (int i = 0; i < jsonArrayqueryTokens.size(); i++) {
        CMQueryToken.validateJsonElement(jsonArrayqueryTokens.get(i));
      };
      if (!jsonObj.get("caption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caption").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CMResultsSection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CMResultsSection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CMResultsSection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CMResultsSection.class));

       return (TypeAdapter<T>) new TypeAdapter<CMResultsSection>() {
           @Override
           public void write(JsonWriter out, CMResultsSection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CMResultsSection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CMResultsSection given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CMResultsSection
  * @throws IOException if the JSON string is invalid with respect to CMResultsSection
  */
  public static CMResultsSection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CMResultsSection.class);
  }

 /**
  * Convert an instance of CMResultsSection to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

