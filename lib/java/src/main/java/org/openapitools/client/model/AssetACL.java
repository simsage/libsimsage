/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.13.31
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssetACL
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-06T16:03:21.377776023Z[Europe/London]")
public class AssetACL {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ACCESS = "access";
  @SerializedName(SERIALIZED_NAME_ACCESS)
  private String access;

  public static final String SERIALIZED_NAME_IS_USER = "isUser";
  @SerializedName(SERIALIZED_NAME_IS_USER)
  private Boolean isUser;

  public static final String SERIALIZED_NAME_MEMBERSHIP_LIST = "membershipList";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_LIST)
  private List<String> membershipList = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private Boolean user;

  public AssetACL() {
  }

  public AssetACL name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public AssetACL displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @javax.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public AssetACL access(String access) {
    
    this.access = access;
    return this;
  }

   /**
   * Get access
   * @return access
  **/
  @javax.annotation.Nonnull
  public String getAccess() {
    return access;
  }


  public void setAccess(String access) {
    this.access = access;
  }


  public AssetACL isUser(Boolean isUser) {
    
    this.isUser = isUser;
    return this;
  }

   /**
   * Get isUser
   * @return isUser
  **/
  @javax.annotation.Nonnull
  public Boolean getIsUser() {
    return isUser;
  }


  public void setIsUser(Boolean isUser) {
    this.isUser = isUser;
  }


  public AssetACL membershipList(List<String> membershipList) {
    
    this.membershipList = membershipList;
    return this;
  }

  public AssetACL addMembershipListItem(String membershipListItem) {
    if (this.membershipList == null) {
      this.membershipList = new ArrayList<>();
    }
    this.membershipList.add(membershipListItem);
    return this;
  }

   /**
   * Get membershipList
   * @return membershipList
  **/
  @javax.annotation.Nonnull
  public List<String> getMembershipList() {
    return membershipList;
  }


  public void setMembershipList(List<String> membershipList) {
    this.membershipList = membershipList;
  }


  public AssetACL user(Boolean user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  public Boolean getUser() {
    return user;
  }


  public void setUser(Boolean user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetACL assetACL = (AssetACL) o;
    return Objects.equals(this.name, assetACL.name) &&
        Objects.equals(this.displayName, assetACL.displayName) &&
        Objects.equals(this.access, assetACL.access) &&
        Objects.equals(this.isUser, assetACL.isUser) &&
        Objects.equals(this.membershipList, assetACL.membershipList) &&
        Objects.equals(this.user, assetACL.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, displayName, access, isUser, membershipList, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetACL {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("    isUser: ").append(toIndentedString(isUser)).append("\n");
    sb.append("    membershipList: ").append(toIndentedString(membershipList)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("displayName");
    openapiFields.add("access");
    openapiFields.add("isUser");
    openapiFields.add("membershipList");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("access");
    openapiRequiredFields.add("isUser");
    openapiRequiredFields.add("membershipList");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AssetACL
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssetACL.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssetACL is not found in the empty JSON string", AssetACL.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssetACL.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssetACL` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssetACL.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (!jsonObj.get("access").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("membershipList") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("membershipList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `membershipList` to be an array in the JSON string but got `%s`", jsonObj.get("membershipList").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssetACL.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssetACL' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssetACL> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssetACL.class));

       return (TypeAdapter<T>) new TypeAdapter<AssetACL>() {
           @Override
           public void write(JsonWriter out, AssetACL value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssetACL read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AssetACL given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AssetACL
  * @throws IOException if the JSON string is invalid with respect to AssetACL
  */
  public static AssetACL fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssetACL.class);
  }

 /**
  * Convert an instance of AssetACL to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

