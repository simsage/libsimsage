/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.13.31
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CMDocument;
import org.openapitools.client.model.CMDocumentAcl;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A document folder content item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-06T16:03:21.377776023Z[Europe/London]")
public class CMDocumentFolder {
  public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private Integer sourceId;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_PARENT_FOLDER_ID = "parentFolderId";
  @SerializedName(SERIALIZED_NAME_PARENT_FOLDER_ID)
  private String parentFolderId;

  public static final String SERIALIZED_NAME_FOLDER_ID = "folderId";
  @SerializedName(SERIALIZED_NAME_FOLDER_ID)
  private String folderId;

  public static final String SERIALIZED_NAME_URL_ID = "urlId";
  @SerializedName(SERIALIZED_NAME_URL_ID)
  private Integer urlId;

  public static final String SERIALIZED_NAME_FOLDER_NAME = "folderName";
  @SerializedName(SERIALIZED_NAME_FOLDER_NAME)
  private String folderName;

  public static final String SERIALIZED_NAME_ITEM_TYPE = "itemType";
  @SerializedName(SERIALIZED_NAME_ITEM_TYPE)
  private String itemType;

  public static final String SERIALIZED_NAME_FOLDER_LIST = "folderList";
  @SerializedName(SERIALIZED_NAME_FOLDER_LIST)
  private List<CMDocumentFolder> folderList = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILE_LIST = "fileList";
  @SerializedName(SERIALIZED_NAME_FILE_LIST)
  private List<CMDocument> fileList = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACLS = "acls";
  @SerializedName(SERIALIZED_NAME_ACLS)
  private List<CMDocumentAcl> acls = new ArrayList<>();

  public CMDocumentFolder() {
  }

  public CMDocumentFolder sourceId(Integer sourceId) {
    
    this.sourceId = sourceId;
    return this;
  }

   /**
   * the source-id of the owner of this folder
   * @return sourceId
  **/
  @javax.annotation.Nonnull
  public Integer getSourceId() {
    return sourceId;
  }


  public void setSourceId(Integer sourceId) {
    this.sourceId = sourceId;
  }


  public CMDocumentFolder url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * The unique URL of a document or folder.
   * @return url
  **/
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public CMDocumentFolder parentFolderId(String parentFolderId) {
    
    this.parentFolderId = parentFolderId;
    return this;
  }

   /**
   * The id of the parent folder of this folder.
   * @return parentFolderId
  **/
  @javax.annotation.Nonnull
  public String getParentFolderId() {
    return parentFolderId;
  }


  public void setParentFolderId(String parentFolderId) {
    this.parentFolderId = parentFolderId;
  }


  public CMDocumentFolder folderId(String folderId) {
    
    this.folderId = folderId;
    return this;
  }

   /**
   * The id of this folder.
   * @return folderId
  **/
  @javax.annotation.Nonnull
  public String getFolderId() {
    return folderId;
  }


  public void setFolderId(String folderId) {
    this.folderId = folderId;
  }


  public CMDocumentFolder urlId(Integer urlId) {
    
    this.urlId = urlId;
    return this;
  }

   /**
   * the internal SimSage id for this url
   * @return urlId
  **/
  @javax.annotation.Nonnull
  public Integer getUrlId() {
    return urlId;
  }


  public void setUrlId(Integer urlId) {
    this.urlId = urlId;
  }


  public CMDocumentFolder folderName(String folderName) {
    
    this.folderName = folderName;
    return this;
  }

   /**
   * the display name of the folder
   * @return folderName
  **/
  @javax.annotation.Nonnull
  public String getFolderName() {
    return folderName;
  }


  public void setFolderName(String folderName) {
    this.folderName = folderName;
  }


  public CMDocumentFolder itemType(String itemType) {
    
    this.itemType = itemType;
    return this;
  }

   /**
   * the type of folder (crawlerType for sources)
   * @return itemType
  **/
  @javax.annotation.Nonnull
  public String getItemType() {
    return itemType;
  }


  public void setItemType(String itemType) {
    this.itemType = itemType;
  }


  public CMDocumentFolder folderList(List<CMDocumentFolder> folderList) {
    
    this.folderList = folderList;
    return this;
  }

  public CMDocumentFolder addFolderListItem(CMDocumentFolder folderListItem) {
    if (this.folderList == null) {
      this.folderList = new ArrayList<>();
    }
    this.folderList.add(folderListItem);
    return this;
  }

   /**
   * the folder items in this folder
   * @return folderList
  **/
  @javax.annotation.Nonnull
  public List<CMDocumentFolder> getFolderList() {
    return folderList;
  }


  public void setFolderList(List<CMDocumentFolder> folderList) {
    this.folderList = folderList;
  }


  public CMDocumentFolder fileList(List<CMDocument> fileList) {
    
    this.fileList = fileList;
    return this;
  }

  public CMDocumentFolder addFileListItem(CMDocument fileListItem) {
    if (this.fileList == null) {
      this.fileList = new ArrayList<>();
    }
    this.fileList.add(fileListItem);
    return this;
  }

   /**
   * the files in this folder
   * @return fileList
  **/
  @javax.annotation.Nonnull
  public List<CMDocument> getFileList() {
    return fileList;
  }


  public void setFileList(List<CMDocument> fileList) {
    this.fileList = fileList;
  }


  public CMDocumentFolder acls(List<CMDocumentAcl> acls) {
    
    this.acls = acls;
    return this;
  }

  public CMDocumentFolder addAclsItem(CMDocumentAcl aclsItem) {
    if (this.acls == null) {
      this.acls = new ArrayList<>();
    }
    this.acls.add(aclsItem);
    return this;
  }

   /**
   * the security permissions for this item
   * @return acls
  **/
  @javax.annotation.Nonnull
  public List<CMDocumentAcl> getAcls() {
    return acls;
  }


  public void setAcls(List<CMDocumentAcl> acls) {
    this.acls = acls;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CMDocumentFolder cmDocumentFolder = (CMDocumentFolder) o;
    return Objects.equals(this.sourceId, cmDocumentFolder.sourceId) &&
        Objects.equals(this.url, cmDocumentFolder.url) &&
        Objects.equals(this.parentFolderId, cmDocumentFolder.parentFolderId) &&
        Objects.equals(this.folderId, cmDocumentFolder.folderId) &&
        Objects.equals(this.urlId, cmDocumentFolder.urlId) &&
        Objects.equals(this.folderName, cmDocumentFolder.folderName) &&
        Objects.equals(this.itemType, cmDocumentFolder.itemType) &&
        Objects.equals(this.folderList, cmDocumentFolder.folderList) &&
        Objects.equals(this.fileList, cmDocumentFolder.fileList) &&
        Objects.equals(this.acls, cmDocumentFolder.acls);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceId, url, parentFolderId, folderId, urlId, folderName, itemType, folderList, fileList, acls);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CMDocumentFolder {\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    parentFolderId: ").append(toIndentedString(parentFolderId)).append("\n");
    sb.append("    folderId: ").append(toIndentedString(folderId)).append("\n");
    sb.append("    urlId: ").append(toIndentedString(urlId)).append("\n");
    sb.append("    folderName: ").append(toIndentedString(folderName)).append("\n");
    sb.append("    itemType: ").append(toIndentedString(itemType)).append("\n");
    sb.append("    folderList: ").append(toIndentedString(folderList)).append("\n");
    sb.append("    fileList: ").append(toIndentedString(fileList)).append("\n");
    sb.append("    acls: ").append(toIndentedString(acls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sourceId");
    openapiFields.add("url");
    openapiFields.add("parentFolderId");
    openapiFields.add("folderId");
    openapiFields.add("urlId");
    openapiFields.add("folderName");
    openapiFields.add("itemType");
    openapiFields.add("folderList");
    openapiFields.add("fileList");
    openapiFields.add("acls");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sourceId");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("parentFolderId");
    openapiRequiredFields.add("folderId");
    openapiRequiredFields.add("urlId");
    openapiRequiredFields.add("folderName");
    openapiRequiredFields.add("itemType");
    openapiRequiredFields.add("folderList");
    openapiRequiredFields.add("fileList");
    openapiRequiredFields.add("acls");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CMDocumentFolder
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CMDocumentFolder.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CMDocumentFolder is not found in the empty JSON string", CMDocumentFolder.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CMDocumentFolder.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CMDocumentFolder` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CMDocumentFolder.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("parentFolderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentFolderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentFolderId").toString()));
      }
      if (!jsonObj.get("folderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folderId").toString()));
      }
      if (!jsonObj.get("folderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folderName").toString()));
      }
      if (!jsonObj.get("itemType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemType").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("folderList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `folderList` to be an array in the JSON string but got `%s`", jsonObj.get("folderList").toString()));
      }

      JsonArray jsonArrayfolderList = jsonObj.getAsJsonArray("folderList");
      // validate the required field `folderList` (array)
      for (int i = 0; i < jsonArrayfolderList.size(); i++) {
        CMDocumentFolder.validateJsonElement(jsonArrayfolderList.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("fileList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileList` to be an array in the JSON string but got `%s`", jsonObj.get("fileList").toString()));
      }

      JsonArray jsonArrayfileList = jsonObj.getAsJsonArray("fileList");
      // validate the required field `fileList` (array)
      for (int i = 0; i < jsonArrayfileList.size(); i++) {
        CMDocument.validateJsonElement(jsonArrayfileList.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("acls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `acls` to be an array in the JSON string but got `%s`", jsonObj.get("acls").toString()));
      }

      JsonArray jsonArrayacls = jsonObj.getAsJsonArray("acls");
      // validate the required field `acls` (array)
      for (int i = 0; i < jsonArrayacls.size(); i++) {
        CMDocumentAcl.validateJsonElement(jsonArrayacls.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CMDocumentFolder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CMDocumentFolder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CMDocumentFolder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CMDocumentFolder.class));

       return (TypeAdapter<T>) new TypeAdapter<CMDocumentFolder>() {
           @Override
           public void write(JsonWriter out, CMDocumentFolder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CMDocumentFolder read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CMDocumentFolder given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CMDocumentFolder
  * @throws IOException if the JSON string is invalid with respect to CMDocumentFolder
  */
  public static CMDocumentFolder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CMDocumentFolder.class);
  }

 /**
  * Convert an instance of CMDocumentFolder to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

