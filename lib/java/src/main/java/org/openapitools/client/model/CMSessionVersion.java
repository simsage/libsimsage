/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.13.31
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CMOrganisation;
import org.openapitools.client.model.CMSession;
import org.openapitools.client.model.CMUser;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A SimSage combined session / user and version object.  This is the object returned when you&#39;ve signed-in successfully.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-06T16:03:21.377776023Z[Europe/London]")
public class CMSessionVersion {
  public static final String SERIALIZED_NAME_SESSION = "session";
  @SerializedName(SERIALIZED_NAME_SESSION)
  private CMSession session;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private CMUser user;

  public static final String SERIALIZED_NAME_ORGANISATION_LIST = "organisationList";
  @SerializedName(SERIALIZED_NAME_ORGANISATION_LIST)
  private List<CMOrganisation> organisationList = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public CMSessionVersion() {
  }

  public CMSessionVersion session(CMSession session) {
    
    this.session = session;
    return this;
  }

   /**
   * Get session
   * @return session
  **/
  @javax.annotation.Nonnull
  public CMSession getSession() {
    return session;
  }


  public void setSession(CMSession session) {
    this.session = session;
  }


  public CMSessionVersion user(CMUser user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nonnull
  public CMUser getUser() {
    return user;
  }


  public void setUser(CMUser user) {
    this.user = user;
  }


  public CMSessionVersion organisationList(List<CMOrganisation> organisationList) {
    
    this.organisationList = organisationList;
    return this;
  }

  public CMSessionVersion addOrganisationListItem(CMOrganisation organisationListItem) {
    if (this.organisationList == null) {
      this.organisationList = new ArrayList<>();
    }
    this.organisationList.add(organisationListItem);
    return this;
  }

   /**
   * list of organisations for admin users
   * @return organisationList
  **/
  @javax.annotation.Nonnull
  public List<CMOrganisation> getOrganisationList() {
    return organisationList;
  }


  public void setOrganisationList(List<CMOrganisation> organisationList) {
    this.organisationList = organisationList;
  }


  public CMSessionVersion version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * version of this service
   * @return version
  **/
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CMSessionVersion cmSessionVersion = (CMSessionVersion) o;
    return Objects.equals(this.session, cmSessionVersion.session) &&
        Objects.equals(this.user, cmSessionVersion.user) &&
        Objects.equals(this.organisationList, cmSessionVersion.organisationList) &&
        Objects.equals(this.version, cmSessionVersion.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(session, user, organisationList, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CMSessionVersion {\n");
    sb.append("    session: ").append(toIndentedString(session)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    organisationList: ").append(toIndentedString(organisationList)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("session");
    openapiFields.add("user");
    openapiFields.add("organisationList");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("session");
    openapiRequiredFields.add("user");
    openapiRequiredFields.add("organisationList");
    openapiRequiredFields.add("version");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CMSessionVersion
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CMSessionVersion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CMSessionVersion is not found in the empty JSON string", CMSessionVersion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CMSessionVersion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CMSessionVersion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CMSessionVersion.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `session`
      CMSession.validateJsonElement(jsonObj.get("session"));
      // validate the required field `user`
      CMUser.validateJsonElement(jsonObj.get("user"));
      // ensure the json data is an array
      if (!jsonObj.get("organisationList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `organisationList` to be an array in the JSON string but got `%s`", jsonObj.get("organisationList").toString()));
      }

      JsonArray jsonArrayorganisationList = jsonObj.getAsJsonArray("organisationList");
      // validate the required field `organisationList` (array)
      for (int i = 0; i < jsonArrayorganisationList.size(); i++) {
        CMOrganisation.validateJsonElement(jsonArrayorganisationList.get(i));
      };
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CMSessionVersion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CMSessionVersion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CMSessionVersion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CMSessionVersion.class));

       return (TypeAdapter<T>) new TypeAdapter<CMSessionVersion>() {
           @Override
           public void write(JsonWriter out, CMSessionVersion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CMSessionVersion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CMSessionVersion given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CMSessionVersion
  * @throws IOException if the JSON string is invalid with respect to CMSessionVersion
  */
  public static CMSessionVersion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CMSessionVersion.class);
  }

 /**
  * Convert an instance of CMSessionVersion to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

