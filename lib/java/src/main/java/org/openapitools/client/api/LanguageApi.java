/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.11.4
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CMCategorization;
import org.openapitools.client.model.CMCategorizationPaginatedList;
import org.openapitools.client.model.CMOptimizeIndex;
import org.openapitools.client.model.CMSemanticModelEdit;
import org.openapitools.client.model.CMSemanticsPaginated;
import org.openapitools.client.model.CMSemanticsPaginatedResult;
import org.openapitools.client.model.CMSynSet;
import org.openapitools.client.model.CMSynSetFind;
import org.openapitools.client.model.CMSynSetList;
import org.openapitools.client.model.CMSynonym;
import org.openapitools.client.model.CMSynonymsPaginated;
import org.openapitools.client.model.CMSynonymsPaginatedResult;
import org.openapitools.client.model.CMVersion;
import org.openapitools.client.model.JsonMessage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LanguageApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LanguageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LanguageApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addDefaultSynSets
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addDefaultSynSetsCall(String organisationId, String kbId, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/language/default-syn-sets/{organisationId}/{kbId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addDefaultSynSetsValidateBeforeCall(String organisationId, String kbId, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling addDefaultSynSets(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling addDefaultSynSets(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling addDefaultSynSets(Async)");
        }

        return addDefaultSynSetsCall(organisationId, kbId, sessionId, apIVersion, _callback);

    }

    /**
     * Add all default SynSets
     * Add default syn-sets to the given org/kb
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage addDefaultSynSets(String organisationId, String kbId, String sessionId, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = addDefaultSynSetsWithHttpInfo(organisationId, kbId, sessionId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Add all default SynSets
     * Add default syn-sets to the given org/kb
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> addDefaultSynSetsWithHttpInfo(String organisationId, String kbId, String sessionId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = addDefaultSynSetsValidateBeforeCall(organisationId, kbId, sessionId, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add all default SynSets (asynchronously)
     * Add default syn-sets to the given org/kb
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addDefaultSynSetsAsync(String organisationId, String kbId, String sessionId, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = addDefaultSynSetsValidateBeforeCall(organisationId, kbId, sessionId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAllSynonyms
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base to delete/remove (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAllSynonymsCall(String organisationId, String kbId, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/language/delete-all-synonyms/{organisationId}/{kbId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAllSynonymsValidateBeforeCall(String organisationId, String kbId, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling deleteAllSynonyms(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling deleteAllSynonyms(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling deleteAllSynonyms(Async)");
        }

        return deleteAllSynonymsCall(organisationId, kbId, sessionId, apIVersion, _callback);

    }

    /**
     * Delete All Synonyms
     * Delete all synonyms for a given org/kb
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base to delete/remove (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage deleteAllSynonyms(String organisationId, String kbId, String sessionId, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = deleteAllSynonymsWithHttpInfo(organisationId, kbId, sessionId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Delete All Synonyms
     * Delete all synonyms for a given org/kb
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base to delete/remove (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> deleteAllSynonymsWithHttpInfo(String organisationId, String kbId, String sessionId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteAllSynonymsValidateBeforeCall(organisationId, kbId, sessionId, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete All Synonyms (asynchronously)
     * Delete all synonyms for a given org/kb
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base to delete/remove (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAllSynonymsAsync(String organisationId, String kbId, String sessionId, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAllSynonymsValidateBeforeCall(organisationId, kbId, sessionId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCategorization
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param categorizationLabel the metadata (name) to remove (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCategorizationCall(String organisationId, String kbId, String categorizationLabel, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/language/categorization/{organisationId}/{kbId}/{categorizationLabel}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "categorizationLabel" + "}", localVarApiClient.escapeString(categorizationLabel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCategorizationValidateBeforeCall(String organisationId, String kbId, String categorizationLabel, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling deleteCategorization(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling deleteCategorization(Async)");
        }

        // verify the required parameter 'categorizationLabel' is set
        if (categorizationLabel == null) {
            throw new ApiException("Missing the required parameter 'categorizationLabel' when calling deleteCategorization(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling deleteCategorization(Async)");
        }

        return deleteCategorizationCall(organisationId, kbId, categorizationLabel, sessionId, apIVersion, _callback);

    }

    /**
     * remove categorization
     * remove a specific categorization for a given org/kb
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param categorizationLabel the metadata (name) to remove (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage deleteCategorization(String organisationId, String kbId, String categorizationLabel, String sessionId, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = deleteCategorizationWithHttpInfo(organisationId, kbId, categorizationLabel, sessionId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * remove categorization
     * remove a specific categorization for a given org/kb
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param categorizationLabel the metadata (name) to remove (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> deleteCategorizationWithHttpInfo(String organisationId, String kbId, String categorizationLabel, String sessionId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteCategorizationValidateBeforeCall(organisationId, kbId, categorizationLabel, sessionId, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * remove categorization (asynchronously)
     * remove a specific categorization for a given org/kb
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param categorizationLabel the metadata (name) to remove (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCategorizationAsync(String organisationId, String kbId, String categorizationLabel, String sessionId, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCategorizationValidateBeforeCall(organisationId, kbId, categorizationLabel, sessionId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSemantic
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param word the word (more specific item) of the semantic to delete (eg. \&quot;John\&quot;) (required)
     * @param semantic the semantic of the word to delete (eg. \&quot;person\&quot;) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSemanticCall(String organisationId, String kbId, String word, String semantic, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/language/delete-semantic/{organisationId}/{kbId}/{word}/{semantic}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()))
            .replace("{" + "semantic" + "}", localVarApiClient.escapeString(semantic.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSemanticValidateBeforeCall(String organisationId, String kbId, String word, String semantic, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling deleteSemantic(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling deleteSemantic(Async)");
        }

        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling deleteSemantic(Async)");
        }

        // verify the required parameter 'semantic' is set
        if (semantic == null) {
            throw new ApiException("Missing the required parameter 'semantic' when calling deleteSemantic(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling deleteSemantic(Async)");
        }

        return deleteSemanticCall(organisationId, kbId, word, semantic, sessionId, apIVersion, _callback);

    }

    /**
     * Delete Semantic
     * Remove an existing semantic from SimSage.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param word the word (more specific item) of the semantic to delete (eg. \&quot;John\&quot;) (required)
     * @param semantic the semantic of the word to delete (eg. \&quot;person\&quot;) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage deleteSemantic(String organisationId, String kbId, String word, String semantic, String sessionId, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = deleteSemanticWithHttpInfo(organisationId, kbId, word, semantic, sessionId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Delete Semantic
     * Remove an existing semantic from SimSage.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param word the word (more specific item) of the semantic to delete (eg. \&quot;John\&quot;) (required)
     * @param semantic the semantic of the word to delete (eg. \&quot;person\&quot;) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> deleteSemanticWithHttpInfo(String organisationId, String kbId, String word, String semantic, String sessionId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteSemanticValidateBeforeCall(organisationId, kbId, word, semantic, sessionId, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Semantic (asynchronously)
     * Remove an existing semantic from SimSage.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param word the word (more specific item) of the semantic to delete (eg. \&quot;John\&quot;) (required)
     * @param semantic the semantic of the word to delete (eg. \&quot;person\&quot;) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSemanticAsync(String organisationId, String kbId, String word, String semantic, String sessionId, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSemanticValidateBeforeCall(organisationId, kbId, word, semantic, sessionId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSynSet
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param lemma the lemma (base word) of the syn-set to remove. (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSynSetCall(String organisationId, String kbId, String lemma, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/language/delete-syn-set/{organisationId}/{kbId}/{lemma}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "lemma" + "}", localVarApiClient.escapeString(lemma.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSynSetValidateBeforeCall(String organisationId, String kbId, String lemma, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling deleteSynSet(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling deleteSynSet(Async)");
        }

        // verify the required parameter 'lemma' is set
        if (lemma == null) {
            throw new ApiException("Missing the required parameter 'lemma' when calling deleteSynSet(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling deleteSynSet(Async)");
        }

        return deleteSynSetCall(organisationId, kbId, lemma, sessionId, apIVersion, _callback);

    }

    /**
     * Delete SynSet
     * Remove a syn-set from SimSage by lemma.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param lemma the lemma (base word) of the syn-set to remove. (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage deleteSynSet(String organisationId, String kbId, String lemma, String sessionId, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = deleteSynSetWithHttpInfo(organisationId, kbId, lemma, sessionId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Delete SynSet
     * Remove a syn-set from SimSage by lemma.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param lemma the lemma (base word) of the syn-set to remove. (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> deleteSynSetWithHttpInfo(String organisationId, String kbId, String lemma, String sessionId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteSynSetValidateBeforeCall(organisationId, kbId, lemma, sessionId, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete SynSet (asynchronously)
     * Remove a syn-set from SimSage by lemma.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param lemma the lemma (base word) of the syn-set to remove. (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSynSetAsync(String organisationId, String kbId, String lemma, String sessionId, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSynSetValidateBeforeCall(organisationId, kbId, lemma, sessionId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSynonym
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param id the id of the synonym to remove. (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSynonymCall(String organisationId, String kbId, Integer id, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/language/delete-synonym/{organisationId}/{kbId}/{id}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSynonymValidateBeforeCall(String organisationId, String kbId, Integer id, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling deleteSynonym(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling deleteSynonym(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteSynonym(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling deleteSynonym(Async)");
        }

        return deleteSynonymCall(organisationId, kbId, id, sessionId, apIVersion, _callback);

    }

    /**
     * Delete Synonym
     * Delete a synonym using its id.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param id the id of the synonym to remove. (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage deleteSynonym(String organisationId, String kbId, Integer id, String sessionId, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = deleteSynonymWithHttpInfo(organisationId, kbId, id, sessionId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Delete Synonym
     * Delete a synonym using its id.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param id the id of the synonym to remove. (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> deleteSynonymWithHttpInfo(String organisationId, String kbId, Integer id, String sessionId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteSynonymValidateBeforeCall(organisationId, kbId, id, sessionId, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Synonym (asynchronously)
     * Delete a synonym using its id.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param id the id of the synonym to remove. (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSynonymAsync(String organisationId, String kbId, Integer id, String sessionId, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSynonymValidateBeforeCall(organisationId, kbId, id, sessionId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findSynSets
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSynSetFind  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findSynSetsCall(String sessionId, CMSynSetFind cmSynSetFind, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmSynSetFind;

        // create path and map variables
        String localVarPath = "/api/language/find-syn-sets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findSynSetsValidateBeforeCall(String sessionId, CMSynSetFind cmSynSetFind, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling findSynSets(Async)");
        }

        // verify the required parameter 'cmSynSetFind' is set
        if (cmSynSetFind == null) {
            throw new ApiException("Missing the required parameter 'cmSynSetFind' when calling findSynSets(Async)");
        }

        return findSynSetsCall(sessionId, cmSynSetFind, apIVersion, _callback);

    }

    /**
     * Find SynSets
     * Find syn-sets using filters
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSynSetFind  (required)
     * @param apIVersion  (optional)
     * @return CMSynSetList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public CMSynSetList findSynSets(String sessionId, CMSynSetFind cmSynSetFind, String apIVersion) throws ApiException {
        ApiResponse<CMSynSetList> localVarResp = findSynSetsWithHttpInfo(sessionId, cmSynSetFind, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Find SynSets
     * Find syn-sets using filters
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSynSetFind  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMSynSetList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMSynSetList> findSynSetsWithHttpInfo(String sessionId, CMSynSetFind cmSynSetFind, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = findSynSetsValidateBeforeCall(sessionId, cmSynSetFind, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMSynSetList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find SynSets (asynchronously)
     * Find syn-sets using filters
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSynSetFind  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findSynSetsAsync(String sessionId, CMSynSetFind cmSynSetFind, String apIVersion, final ApiCallback<CMSynSetList> _callback) throws ApiException {

        okhttp3.Call localVarCall = findSynSetsValidateBeforeCall(sessionId, cmSynSetFind, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMSynSetList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCategorizationList
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param prevCategorizationLabel the previous categorization label for pagination, or null if first page (required)
     * @param pageSize the size of the page returned (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategorizationListCall(String organisationId, String kbId, String prevCategorizationLabel, Integer pageSize, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/language/categorization/{organisationId}/{kbId}/{prevCategorizationLabel}/{pageSize}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "prevCategorizationLabel" + "}", localVarApiClient.escapeString(prevCategorizationLabel.toString()))
            .replace("{" + "pageSize" + "}", localVarApiClient.escapeString(pageSize.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategorizationListValidateBeforeCall(String organisationId, String kbId, String prevCategorizationLabel, Integer pageSize, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getCategorizationList(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling getCategorizationList(Async)");
        }

        // verify the required parameter 'prevCategorizationLabel' is set
        if (prevCategorizationLabel == null) {
            throw new ApiException("Missing the required parameter 'prevCategorizationLabel' when calling getCategorizationList(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling getCategorizationList(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getCategorizationList(Async)");
        }

        return getCategorizationListCall(organisationId, kbId, prevCategorizationLabel, pageSize, sessionId, apIVersion, _callback);

    }

    /**
     * categorization list
     * get all categorizations for a given org/kb paginated
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param prevCategorizationLabel the previous categorization label for pagination, or null if first page (required)
     * @param pageSize the size of the page returned (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return CMCategorizationPaginatedList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public CMCategorizationPaginatedList getCategorizationList(String organisationId, String kbId, String prevCategorizationLabel, Integer pageSize, String sessionId, String apIVersion) throws ApiException {
        ApiResponse<CMCategorizationPaginatedList> localVarResp = getCategorizationListWithHttpInfo(organisationId, kbId, prevCategorizationLabel, pageSize, sessionId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * categorization list
     * get all categorizations for a given org/kb paginated
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param prevCategorizationLabel the previous categorization label for pagination, or null if first page (required)
     * @param pageSize the size of the page returned (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMCategorizationPaginatedList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMCategorizationPaginatedList> getCategorizationListWithHttpInfo(String organisationId, String kbId, String prevCategorizationLabel, Integer pageSize, String sessionId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = getCategorizationListValidateBeforeCall(organisationId, kbId, prevCategorizationLabel, pageSize, sessionId, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMCategorizationPaginatedList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * categorization list (asynchronously)
     * get all categorizations for a given org/kb paginated
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param prevCategorizationLabel the previous categorization label for pagination, or null if first page (required)
     * @param pageSize the size of the page returned (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategorizationListAsync(String organisationId, String kbId, String prevCategorizationLabel, Integer pageSize, String sessionId, String apIVersion, final ApiCallback<CMCategorizationPaginatedList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategorizationListValidateBeforeCall(organisationId, kbId, prevCategorizationLabel, pageSize, sessionId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMCategorizationPaginatedList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaginated
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSynonymsPaginated  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaginatedCall(String sessionId, CMSynonymsPaginated cmSynonymsPaginated, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmSynonymsPaginated;

        // create path and map variables
        String localVarPath = "/api/language/synonyms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaginatedValidateBeforeCall(String sessionId, CMSynonymsPaginated cmSynonymsPaginated, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getPaginated(Async)");
        }

        // verify the required parameter 'cmSynonymsPaginated' is set
        if (cmSynonymsPaginated == null) {
            throw new ApiException("Missing the required parameter 'cmSynonymsPaginated' when calling getPaginated(Async)");
        }

        return getPaginatedCall(sessionId, cmSynonymsPaginated, apIVersion, _callback);

    }

    /**
     * get Synonyms Paginated
     * return a paginated list of synonyms with optional filtering.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSynonymsPaginated  (required)
     * @param apIVersion  (optional)
     * @return CMSynonymsPaginatedResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public CMSynonymsPaginatedResult getPaginated(String sessionId, CMSynonymsPaginated cmSynonymsPaginated, String apIVersion) throws ApiException {
        ApiResponse<CMSynonymsPaginatedResult> localVarResp = getPaginatedWithHttpInfo(sessionId, cmSynonymsPaginated, apIVersion);
        return localVarResp.getData();
    }

    /**
     * get Synonyms Paginated
     * return a paginated list of synonyms with optional filtering.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSynonymsPaginated  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMSynonymsPaginatedResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMSynonymsPaginatedResult> getPaginatedWithHttpInfo(String sessionId, CMSynonymsPaginated cmSynonymsPaginated, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = getPaginatedValidateBeforeCall(sessionId, cmSynonymsPaginated, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMSynonymsPaginatedResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get Synonyms Paginated (asynchronously)
     * return a paginated list of synonyms with optional filtering.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSynonymsPaginated  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaginatedAsync(String sessionId, CMSynonymsPaginated cmSynonymsPaginated, String apIVersion, final ApiCallback<CMSynonymsPaginatedResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaginatedValidateBeforeCall(sessionId, cmSynonymsPaginated, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMSynonymsPaginatedResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSemanticsPaginated
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSemanticsPaginated  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSemanticsPaginatedCall(String sessionId, CMSemanticsPaginated cmSemanticsPaginated, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmSemanticsPaginated;

        // create path and map variables
        String localVarPath = "/api/language/semantics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSemanticsPaginatedValidateBeforeCall(String sessionId, CMSemanticsPaginated cmSemanticsPaginated, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getSemanticsPaginated(Async)");
        }

        // verify the required parameter 'cmSemanticsPaginated' is set
        if (cmSemanticsPaginated == null) {
            throw new ApiException("Missing the required parameter 'cmSemanticsPaginated' when calling getSemanticsPaginated(Async)");
        }

        return getSemanticsPaginatedCall(sessionId, cmSemanticsPaginated, apIVersion, _callback);

    }

    /**
     * Semantics Paginated
     * Return a paginated list of semantics with an optional filter.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSemanticsPaginated  (required)
     * @param apIVersion  (optional)
     * @return CMSemanticsPaginatedResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public CMSemanticsPaginatedResult getSemanticsPaginated(String sessionId, CMSemanticsPaginated cmSemanticsPaginated, String apIVersion) throws ApiException {
        ApiResponse<CMSemanticsPaginatedResult> localVarResp = getSemanticsPaginatedWithHttpInfo(sessionId, cmSemanticsPaginated, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Semantics Paginated
     * Return a paginated list of semantics with an optional filter.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSemanticsPaginated  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMSemanticsPaginatedResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMSemanticsPaginatedResult> getSemanticsPaginatedWithHttpInfo(String sessionId, CMSemanticsPaginated cmSemanticsPaginated, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = getSemanticsPaginatedValidateBeforeCall(sessionId, cmSemanticsPaginated, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMSemanticsPaginatedResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Semantics Paginated (asynchronously)
     * Return a paginated list of semantics with an optional filter.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSemanticsPaginated  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSemanticsPaginatedAsync(String sessionId, CMSemanticsPaginated cmSemanticsPaginated, String apIVersion, final ApiCallback<CMSemanticsPaginatedResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSemanticsPaginatedValidateBeforeCall(sessionId, cmSemanticsPaginated, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMSemanticsPaginatedResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for optimizeIndexes
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmOptimizeIndex  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call optimizeIndexesCall(String sessionId, CMOptimizeIndex cmOptimizeIndex, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmOptimizeIndex;

        // create path and map variables
        String localVarPath = "/api/language/optimize-indexes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call optimizeIndexesValidateBeforeCall(String sessionId, CMOptimizeIndex cmOptimizeIndex, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling optimizeIndexes(Async)");
        }

        // verify the required parameter 'cmOptimizeIndex' is set
        if (cmOptimizeIndex == null) {
            throw new ApiException("Missing the required parameter 'cmOptimizeIndex' when calling optimizeIndexes(Async)");
        }

        return optimizeIndexesCall(sessionId, cmOptimizeIndex, apIVersion, _callback);

    }

    /**
     * Optimize Indexes
     * Force index optimization for a the given knowledge-base, now.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmOptimizeIndex  (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage optimizeIndexes(String sessionId, CMOptimizeIndex cmOptimizeIndex, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = optimizeIndexesWithHttpInfo(sessionId, cmOptimizeIndex, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Optimize Indexes
     * Force index optimization for a the given knowledge-base, now.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmOptimizeIndex  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> optimizeIndexesWithHttpInfo(String sessionId, CMOptimizeIndex cmOptimizeIndex, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = optimizeIndexesValidateBeforeCall(sessionId, cmOptimizeIndex, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Optimize Indexes (asynchronously)
     * Force index optimization for a the given knowledge-base, now.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmOptimizeIndex  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call optimizeIndexesAsync(String sessionId, CMOptimizeIndex cmOptimizeIndex, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = optimizeIndexesValidateBeforeCall(sessionId, cmOptimizeIndex, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for redactDocument
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url the base-64 encoded (no-prefix) url of the document (required)
     * @param entityCsv a csv list of entities to redact (e.g. person,location) (required)
     * @param wordCsv a csv list of additional words to redact (e.g. John,Markov.  Use null for ignore.) (required)
     * @param allowWordsCsv a csv list of words to not-redact (e.g. John,Markov.  Use null for ignore.) (required)
     * @param sessionId an optional SimSage Session id. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call redactDocumentCall(String organisationId, String kbId, String url, String entityCsv, String wordCsv, String allowWordsCsv, String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/language/redact/{organisationId}/{kbId}/{url}/{entityCsv}/{wordCsv}/{allowWordsCsv}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "url" + "}", localVarApiClient.escapeString(url.toString()))
            .replace("{" + "entityCsv" + "}", localVarApiClient.escapeString(entityCsv.toString()))
            .replace("{" + "wordCsv" + "}", localVarApiClient.escapeString(wordCsv.toString()))
            .replace("{" + "allowWordsCsv" + "}", localVarApiClient.escapeString(allowWordsCsv.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/pdf",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call redactDocumentValidateBeforeCall(String organisationId, String kbId, String url, String entityCsv, String wordCsv, String allowWordsCsv, String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling redactDocument(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling redactDocument(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling redactDocument(Async)");
        }

        // verify the required parameter 'entityCsv' is set
        if (entityCsv == null) {
            throw new ApiException("Missing the required parameter 'entityCsv' when calling redactDocument(Async)");
        }

        // verify the required parameter 'wordCsv' is set
        if (wordCsv == null) {
            throw new ApiException("Missing the required parameter 'wordCsv' when calling redactDocument(Async)");
        }

        // verify the required parameter 'allowWordsCsv' is set
        if (allowWordsCsv == null) {
            throw new ApiException("Missing the required parameter 'allowWordsCsv' when calling redactDocument(Async)");
        }

        return redactDocumentCall(organisationId, kbId, url, entityCsv, wordCsv, allowWordsCsv, sessionId, _callback);

    }

    /**
     * Redact Document
     * Create a redacted version of a document as a PDF given its url.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url the base-64 encoded (no-prefix) url of the document (required)
     * @param entityCsv a csv list of entities to redact (e.g. person,location) (required)
     * @param wordCsv a csv list of additional words to redact (e.g. John,Markov.  Use null for ignore.) (required)
     * @param allowWordsCsv a csv list of words to not-redact (e.g. John,Markov.  Use null for ignore.) (required)
     * @param sessionId an optional SimSage Session id. (optional)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public byte[] redactDocument(String organisationId, String kbId, String url, String entityCsv, String wordCsv, String allowWordsCsv, String sessionId) throws ApiException {
        ApiResponse<byte[]> localVarResp = redactDocumentWithHttpInfo(organisationId, kbId, url, entityCsv, wordCsv, allowWordsCsv, sessionId);
        return localVarResp.getData();
    }

    /**
     * Redact Document
     * Create a redacted version of a document as a PDF given its url.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url the base-64 encoded (no-prefix) url of the document (required)
     * @param entityCsv a csv list of entities to redact (e.g. person,location) (required)
     * @param wordCsv a csv list of additional words to redact (e.g. John,Markov.  Use null for ignore.) (required)
     * @param allowWordsCsv a csv list of words to not-redact (e.g. John,Markov.  Use null for ignore.) (required)
     * @param sessionId an optional SimSage Session id. (optional)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<byte[]> redactDocumentWithHttpInfo(String organisationId, String kbId, String url, String entityCsv, String wordCsv, String allowWordsCsv, String sessionId) throws ApiException {
        okhttp3.Call localVarCall = redactDocumentValidateBeforeCall(organisationId, kbId, url, entityCsv, wordCsv, allowWordsCsv, sessionId, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Redact Document (asynchronously)
     * Create a redacted version of a document as a PDF given its url.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url the base-64 encoded (no-prefix) url of the document (required)
     * @param entityCsv a csv list of entities to redact (e.g. person,location) (required)
     * @param wordCsv a csv list of additional words to redact (e.g. John,Markov.  Use null for ignore.) (required)
     * @param allowWordsCsv a csv list of words to not-redact (e.g. John,Markov.  Use null for ignore.) (required)
     * @param sessionId an optional SimSage Session id. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call redactDocumentAsync(String organisationId, String kbId, String url, String entityCsv, String wordCsv, String allowWordsCsv, String sessionId, final ApiCallback<byte[]> _callback) throws ApiException {

        okhttp3.Call localVarCall = redactDocumentValidateBeforeCall(organisationId, kbId, url, entityCsv, wordCsv, allowWordsCsv, sessionId, _callback);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveCategorization
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmCategorization  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveCategorizationCall(String sessionId, CMCategorization cmCategorization, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmCategorization;

        // create path and map variables
        String localVarPath = "/api/language/categorization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveCategorizationValidateBeforeCall(String sessionId, CMCategorization cmCategorization, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling saveCategorization(Async)");
        }

        // verify the required parameter 'cmCategorization' is set
        if (cmCategorization == null) {
            throw new ApiException("Missing the required parameter 'cmCategorization' when calling saveCategorization(Async)");
        }

        return saveCategorizationCall(sessionId, cmCategorization, apIVersion, _callback);

    }

    /**
     * save categorization
     * create or update a specific categorization for a given org/kb
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmCategorization  (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage saveCategorization(String sessionId, CMCategorization cmCategorization, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = saveCategorizationWithHttpInfo(sessionId, cmCategorization, apIVersion);
        return localVarResp.getData();
    }

    /**
     * save categorization
     * create or update a specific categorization for a given org/kb
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmCategorization  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> saveCategorizationWithHttpInfo(String sessionId, CMCategorization cmCategorization, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = saveCategorizationValidateBeforeCall(sessionId, cmCategorization, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * save categorization (asynchronously)
     * create or update a specific categorization for a given org/kb
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmCategorization  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveCategorizationAsync(String sessionId, CMCategorization cmCategorization, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveCategorizationValidateBeforeCall(sessionId, cmCategorization, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveSemantic
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSemanticModelEdit  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveSemanticCall(String organisationId, String kbId, String sessionId, CMSemanticModelEdit cmSemanticModelEdit, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmSemanticModelEdit;

        // create path and map variables
        String localVarPath = "/api/language/save-semantic/{organisationId}/{kbId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveSemanticValidateBeforeCall(String organisationId, String kbId, String sessionId, CMSemanticModelEdit cmSemanticModelEdit, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling saveSemantic(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling saveSemantic(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling saveSemantic(Async)");
        }

        // verify the required parameter 'cmSemanticModelEdit' is set
        if (cmSemanticModelEdit == null) {
            throw new ApiException("Missing the required parameter 'cmSemanticModelEdit' when calling saveSemantic(Async)");
        }

        return saveSemanticCall(organisationId, kbId, sessionId, cmSemanticModelEdit, apIVersion, _callback);

    }

    /**
     * Save Semantic
     * Create or update (save) a semantic in SimSage.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSemanticModelEdit  (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage saveSemantic(String organisationId, String kbId, String sessionId, CMSemanticModelEdit cmSemanticModelEdit, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = saveSemanticWithHttpInfo(organisationId, kbId, sessionId, cmSemanticModelEdit, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Save Semantic
     * Create or update (save) a semantic in SimSage.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSemanticModelEdit  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> saveSemanticWithHttpInfo(String organisationId, String kbId, String sessionId, CMSemanticModelEdit cmSemanticModelEdit, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = saveSemanticValidateBeforeCall(organisationId, kbId, sessionId, cmSemanticModelEdit, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save Semantic (asynchronously)
     * Create or update (save) a semantic in SimSage.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSemanticModelEdit  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveSemanticAsync(String organisationId, String kbId, String sessionId, CMSemanticModelEdit cmSemanticModelEdit, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveSemanticValidateBeforeCall(organisationId, kbId, sessionId, cmSemanticModelEdit, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveSynSet
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSynSet  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveSynSetCall(String organisationId, String kbId, String sessionId, CMSynSet cmSynSet, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmSynSet;

        // create path and map variables
        String localVarPath = "/api/language/save-syn-set/{organisationId}/{kbId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveSynSetValidateBeforeCall(String organisationId, String kbId, String sessionId, CMSynSet cmSynSet, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling saveSynSet(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling saveSynSet(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling saveSynSet(Async)");
        }

        // verify the required parameter 'cmSynSet' is set
        if (cmSynSet == null) {
            throw new ApiException("Missing the required parameter 'cmSynSet' when calling saveSynSet(Async)");
        }

        return saveSynSetCall(organisationId, kbId, sessionId, cmSynSet, apIVersion, _callback);

    }

    /**
     * Save SynSet
     * Save (update/create) a syn-set in SimSage.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSynSet  (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage saveSynSet(String organisationId, String kbId, String sessionId, CMSynSet cmSynSet, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = saveSynSetWithHttpInfo(organisationId, kbId, sessionId, cmSynSet, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Save SynSet
     * Save (update/create) a syn-set in SimSage.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSynSet  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> saveSynSetWithHttpInfo(String organisationId, String kbId, String sessionId, CMSynSet cmSynSet, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = saveSynSetValidateBeforeCall(organisationId, kbId, sessionId, cmSynSet, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save SynSet (asynchronously)
     * Save (update/create) a syn-set in SimSage.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSynSet  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveSynSetAsync(String organisationId, String kbId, String sessionId, CMSynSet cmSynSet, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveSynSetValidateBeforeCall(organisationId, kbId, sessionId, cmSynSet, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveSynonym
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSynonym  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveSynonymCall(String organisationId, String kbId, String sessionId, CMSynonym cmSynonym, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmSynonym;

        // create path and map variables
        String localVarPath = "/api/language/save-synonym/{organisationId}/{kbId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveSynonymValidateBeforeCall(String organisationId, String kbId, String sessionId, CMSynonym cmSynonym, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling saveSynonym(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling saveSynonym(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling saveSynonym(Async)");
        }

        // verify the required parameter 'cmSynonym' is set
        if (cmSynonym == null) {
            throw new ApiException("Missing the required parameter 'cmSynonym' when calling saveSynonym(Async)");
        }

        return saveSynonymCall(organisationId, kbId, sessionId, cmSynonym, apIVersion, _callback);

    }

    /**
     * Save Synonym
     * Save (update/create) a synonym.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSynonym  (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage saveSynonym(String organisationId, String kbId, String sessionId, CMSynonym cmSynonym, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = saveSynonymWithHttpInfo(organisationId, kbId, sessionId, cmSynonym, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Save Synonym
     * Save (update/create) a synonym.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSynonym  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> saveSynonymWithHttpInfo(String organisationId, String kbId, String sessionId, CMSynonym cmSynonym, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = saveSynonymValidateBeforeCall(organisationId, kbId, sessionId, cmSynonym, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save Synonym (asynchronously)
     * Save (update/create) a synonym.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSynonym  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveSynonymAsync(String organisationId, String kbId, String sessionId, CMSynonym cmSynonym, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveSynonymValidateBeforeCall(organisationId, kbId, sessionId, cmSynonym, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for truncateSlowIndexes
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-bases&#39; id (a guid) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call truncateSlowIndexesCall(String organisationId, String kbId, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/language/truncate-slow-indexes/{organisationId}/{kbId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call truncateSlowIndexesValidateBeforeCall(String organisationId, String kbId, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling truncateSlowIndexes(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling truncateSlowIndexes(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling truncateSlowIndexes(Async)");
        }

        return truncateSlowIndexesCall(organisationId, kbId, sessionId, apIVersion, _callback);

    }

    /**
     * Truncate slow Indexes
     * Force slow-index truncation for a the given knowledge-base, now.
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-bases&#39; id (a guid) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage truncateSlowIndexes(String organisationId, String kbId, String sessionId, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = truncateSlowIndexesWithHttpInfo(organisationId, kbId, sessionId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Truncate slow Indexes
     * Force slow-index truncation for a the given knowledge-base, now.
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-bases&#39; id (a guid) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> truncateSlowIndexesWithHttpInfo(String organisationId, String kbId, String sessionId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = truncateSlowIndexesValidateBeforeCall(organisationId, kbId, sessionId, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Truncate slow Indexes (asynchronously)
     * Force slow-index truncation for a the given knowledge-base, now.
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param kbId the knowledge-bases&#39; id (a guid) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call truncateSlowIndexesAsync(String organisationId, String kbId, String sessionId, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = truncateSlowIndexesValidateBeforeCall(organisationId, kbId, sessionId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tuneLanguageGraph
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tuneLanguageGraphCall(String organisationId, String kbId, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/language/tune-graph/{organisationId}/{kbId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tuneLanguageGraphValidateBeforeCall(String organisationId, String kbId, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling tuneLanguageGraph(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling tuneLanguageGraph(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling tuneLanguageGraph(Async)");
        }

        return tuneLanguageGraphCall(organisationId, kbId, sessionId, apIVersion, _callback);

    }

    /**
     * Tune Graph
     * Create a tuned language graph for a given organisation/knowledge-base.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage tuneLanguageGraph(String organisationId, String kbId, String sessionId, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = tuneLanguageGraphWithHttpInfo(organisationId, kbId, sessionId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Tune Graph
     * Create a tuned language graph for a given organisation/knowledge-base.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> tuneLanguageGraphWithHttpInfo(String organisationId, String kbId, String sessionId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = tuneLanguageGraphValidateBeforeCall(organisationId, kbId, sessionId, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tune Graph (asynchronously)
     * Create a tuned language graph for a given organisation/knowledge-base.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> fail response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tuneLanguageGraphAsync(String organisationId, String kbId, String sessionId, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = tuneLanguageGraphValidateBeforeCall(organisationId, kbId, sessionId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for version2
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get the version response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get version. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call version2Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/language/version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call version2ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return version2Call(_callback);

    }

    /**
     * Version
     * Return the version of the SimSage Language Services.
     * @return CMVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get the version response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get version. </td><td>  -  </td></tr>
     </table>
     */
    public CMVersion version2() throws ApiException {
        ApiResponse<CMVersion> localVarResp = version2WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Version
     * Return the version of the SimSage Language Services.
     * @return ApiResponse&lt;CMVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get the version response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get version. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMVersion> version2WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = version2ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CMVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Version (asynchronously)
     * Return the version of the SimSage Language Services.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get the version response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get version. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call version2Async(final ApiCallback<CMVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = version2ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CMVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
