/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.14.12
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CMSourceBaseInfo;
import org.openapitools.client.model.SearchCategory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Knowledge base-info represents information needed by external UX systems interacting with SimSage.  This object contains information of a SimSage knowledge-base.  The name, and id of, and sources inside this knowledge-base.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-14T16:13:48.547313222+01:00[Europe/London]")
public class CMKnowledgeBaseInfo {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CATEGORY_LIST = "categoryList";
  @SerializedName(SERIALIZED_NAME_CATEGORY_LIST)
  private List<SearchCategory> categoryList = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE_LIST = "sourceList";
  @SerializedName(SERIALIZED_NAME_SOURCE_LIST)
  private List<CMSourceBaseInfo> sourceList = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROJECT_KB = "projectKb";
  @SerializedName(SERIALIZED_NAME_PROJECT_KB)
  private Boolean projectKb;

  public CMKnowledgeBaseInfo() {
  }

  public CMKnowledgeBaseInfo name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * the name of this knowledge-base
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CMKnowledgeBaseInfo id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * the knowledge-base id (its guid id)
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public CMKnowledgeBaseInfo categoryList(List<SearchCategory> categoryList) {
    
    this.categoryList = categoryList;
    return this;
  }

  public CMKnowledgeBaseInfo addCategoryListItem(SearchCategory categoryListItem) {
    if (this.categoryList == null) {
      this.categoryList = new ArrayList<>();
    }
    this.categoryList.add(categoryListItem);
    return this;
  }

   /**
   * a list of metadata-categories present in this source, names and values.
   * @return categoryList
  **/
  @javax.annotation.Nonnull
  public List<SearchCategory> getCategoryList() {
    return categoryList;
  }


  public void setCategoryList(List<SearchCategory> categoryList) {
    this.categoryList = categoryList;
  }


  public CMKnowledgeBaseInfo sourceList(List<CMSourceBaseInfo> sourceList) {
    
    this.sourceList = sourceList;
    return this;
  }

  public CMKnowledgeBaseInfo addSourceListItem(CMSourceBaseInfo sourceListItem) {
    if (this.sourceList == null) {
      this.sourceList = new ArrayList<>();
    }
    this.sourceList.add(sourceListItem);
    return this;
  }

   /**
   * the list of sources that are in this knowledge-base
   * @return sourceList
  **/
  @javax.annotation.Nonnull
  public List<CMSourceBaseInfo> getSourceList() {
    return sourceList;
  }


  public void setSourceList(List<CMSourceBaseInfo> sourceList) {
    this.sourceList = sourceList;
  }


  public CMKnowledgeBaseInfo projectKb(Boolean projectKb) {
    
    this.projectKb = projectKb;
    return this;
  }

   /**
   * Flag to indicate whether this knowledge-base was created for an &#39;Automate&#39; data project
   * @return projectKb
  **/
  @javax.annotation.Nonnull
  public Boolean getProjectKb() {
    return projectKb;
  }


  public void setProjectKb(Boolean projectKb) {
    this.projectKb = projectKb;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CMKnowledgeBaseInfo cmKnowledgeBaseInfo = (CMKnowledgeBaseInfo) o;
    return Objects.equals(this.name, cmKnowledgeBaseInfo.name) &&
        Objects.equals(this.id, cmKnowledgeBaseInfo.id) &&
        Objects.equals(this.categoryList, cmKnowledgeBaseInfo.categoryList) &&
        Objects.equals(this.sourceList, cmKnowledgeBaseInfo.sourceList) &&
        Objects.equals(this.projectKb, cmKnowledgeBaseInfo.projectKb);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, id, categoryList, sourceList, projectKb);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CMKnowledgeBaseInfo {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    categoryList: ").append(toIndentedString(categoryList)).append("\n");
    sb.append("    sourceList: ").append(toIndentedString(sourceList)).append("\n");
    sb.append("    projectKb: ").append(toIndentedString(projectKb)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("id");
    openapiFields.add("categoryList");
    openapiFields.add("sourceList");
    openapiFields.add("projectKb");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("categoryList");
    openapiRequiredFields.add("sourceList");
    openapiRequiredFields.add("projectKb");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CMKnowledgeBaseInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CMKnowledgeBaseInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CMKnowledgeBaseInfo is not found in the empty JSON string", CMKnowledgeBaseInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CMKnowledgeBaseInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CMKnowledgeBaseInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CMKnowledgeBaseInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("categoryList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryList` to be an array in the JSON string but got `%s`", jsonObj.get("categoryList").toString()));
      }

      JsonArray jsonArraycategoryList = jsonObj.getAsJsonArray("categoryList");
      // validate the required field `categoryList` (array)
      for (int i = 0; i < jsonArraycategoryList.size(); i++) {
        SearchCategory.validateJsonElement(jsonArraycategoryList.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("sourceList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceList` to be an array in the JSON string but got `%s`", jsonObj.get("sourceList").toString()));
      }

      JsonArray jsonArraysourceList = jsonObj.getAsJsonArray("sourceList");
      // validate the required field `sourceList` (array)
      for (int i = 0; i < jsonArraysourceList.size(); i++) {
        CMSourceBaseInfo.validateJsonElement(jsonArraysourceList.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CMKnowledgeBaseInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CMKnowledgeBaseInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CMKnowledgeBaseInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CMKnowledgeBaseInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<CMKnowledgeBaseInfo>() {
           @Override
           public void write(JsonWriter out, CMKnowledgeBaseInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CMKnowledgeBaseInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CMKnowledgeBaseInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CMKnowledgeBaseInfo
  * @throws IOException if the JSON string is invalid with respect to CMKnowledgeBaseInfo
  */
  public static CMKnowledgeBaseInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CMKnowledgeBaseInfo.class);
  }

 /**
  * Convert an instance of CMKnowledgeBaseInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

