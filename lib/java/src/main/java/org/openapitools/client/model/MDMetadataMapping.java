/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.14.12
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A SimSage metadata-mapping.  This object represents a map of metadata between an external source and SimSage.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-14T16:13:48.547313222+01:00[Europe/London]")
public class MDMetadataMapping {
  public static final String SERIALIZED_NAME_DATA_TYPE = "dataType";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private String dataType;

  public static final String SERIALIZED_NAME_DISPLAY = "display";
  @SerializedName(SERIALIZED_NAME_DISPLAY)
  private String display;

  public static final String SERIALIZED_NAME_EXT_METADATA = "extMetadata";
  @SerializedName(SERIALIZED_NAME_EXT_METADATA)
  private String extMetadata;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata;

  public static final String SERIALIZED_NAME_STRING_VALUE_LIST = "stringValueList";
  @SerializedName(SERIALIZED_NAME_STRING_VALUE_LIST)
  private String stringValueList;

  public static final String SERIALIZED_NAME_NUMBER_VALUE_LIST = "numberValueList";
  @SerializedName(SERIALIZED_NAME_NUMBER_VALUE_LIST)
  private String numberValueList;

  public MDMetadataMapping() {
  }

  public MDMetadataMapping dataType(String dataType) {
    
    this.dataType = dataType;
    return this;
  }

   /**
   * The SimSage data-type of the item
   * @return dataType
  **/
  @javax.annotation.Nonnull
  public String getDataType() {
    return dataType;
  }


  public void setDataType(String dataType) {
    this.dataType = dataType;
  }


  public MDMetadataMapping display(String display) {
    
    this.display = display;
    return this;
  }

   /**
   * A friendly display name for any UI component rendering this component
   * @return display
  **/
  @javax.annotation.Nonnull
  public String getDisplay() {
    return display;
  }


  public void setDisplay(String display) {
    this.display = display;
  }


  public MDMetadataMapping extMetadata(String extMetadata) {
    
    this.extMetadata = extMetadata;
    return this;
  }

   /**
   * the external metadata item being mapped
   * @return extMetadata
  **/
  @javax.annotation.Nonnull
  public String getExtMetadata() {
    return extMetadata;
  }


  public void setExtMetadata(String extMetadata) {
    this.extMetadata = extMetadata;
  }


  public MDMetadataMapping metadata(String metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * The metadata-name inside SimSage for this item.  Only a..z A..Z 0..9 and - are allowed as characters in this string.
   * @return metadata
  **/
  @javax.annotation.Nonnull
  public String getMetadata() {
    return metadata;
  }


  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }


  public MDMetadataMapping stringValueList(String stringValueList) {
    
    this.stringValueList = stringValueList;
    return this;
  }

   /**
   * A list of string values (if string based) for this metadata category item.  These are the values this document \&quot;belongs to\&quot;
   * @return stringValueList
  **/
  @javax.annotation.Nonnull
  public String getStringValueList() {
    return stringValueList;
  }


  public void setStringValueList(String stringValueList) {
    this.stringValueList = stringValueList;
  }


  public MDMetadataMapping numberValueList(String numberValueList) {
    
    this.numberValueList = numberValueList;
    return this;
  }

   /**
   * Alternatively, a list of numeric values (if number based) for this metadata category item.  These are the values this document \&quot;belongs to\&quot;
   * @return numberValueList
  **/
  @javax.annotation.Nonnull
  public String getNumberValueList() {
    return numberValueList;
  }


  public void setNumberValueList(String numberValueList) {
    this.numberValueList = numberValueList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MDMetadataMapping mdMetadataMapping = (MDMetadataMapping) o;
    return Objects.equals(this.dataType, mdMetadataMapping.dataType) &&
        Objects.equals(this.display, mdMetadataMapping.display) &&
        Objects.equals(this.extMetadata, mdMetadataMapping.extMetadata) &&
        Objects.equals(this.metadata, mdMetadataMapping.metadata) &&
        Objects.equals(this.stringValueList, mdMetadataMapping.stringValueList) &&
        Objects.equals(this.numberValueList, mdMetadataMapping.numberValueList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataType, display, extMetadata, metadata, stringValueList, numberValueList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MDMetadataMapping {\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    extMetadata: ").append(toIndentedString(extMetadata)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    stringValueList: ").append(toIndentedString(stringValueList)).append("\n");
    sb.append("    numberValueList: ").append(toIndentedString(numberValueList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataType");
    openapiFields.add("display");
    openapiFields.add("extMetadata");
    openapiFields.add("metadata");
    openapiFields.add("stringValueList");
    openapiFields.add("numberValueList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dataType");
    openapiRequiredFields.add("display");
    openapiRequiredFields.add("extMetadata");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("stringValueList");
    openapiRequiredFields.add("numberValueList");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MDMetadataMapping
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MDMetadataMapping.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MDMetadataMapping is not found in the empty JSON string", MDMetadataMapping.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MDMetadataMapping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MDMetadataMapping` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MDMetadataMapping.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("dataType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataType").toString()));
      }
      if (!jsonObj.get("display").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display").toString()));
      }
      if (!jsonObj.get("extMetadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extMetadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extMetadata").toString()));
      }
      if (!jsonObj.get("metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
      }
      if (!jsonObj.get("stringValueList").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stringValueList` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stringValueList").toString()));
      }
      if (!jsonObj.get("numberValueList").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numberValueList` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numberValueList").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MDMetadataMapping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MDMetadataMapping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MDMetadataMapping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MDMetadataMapping.class));

       return (TypeAdapter<T>) new TypeAdapter<MDMetadataMapping>() {
           @Override
           public void write(JsonWriter out, MDMetadataMapping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MDMetadataMapping read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MDMetadataMapping given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MDMetadataMapping
  * @throws IOException if the JSON string is invalid with respect to MDMetadataMapping
  */
  public static MDMetadataMapping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MDMetadataMapping.class);
  }

 /**
  * Convert an instance of MDMetadataMapping to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

