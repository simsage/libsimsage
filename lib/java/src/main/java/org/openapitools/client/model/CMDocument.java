/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CMDocumentAcl;
import org.openapitools.client.model.CMDocumentAudit;
import org.openapitools.client.model.CMDocumentNote;
import org.openapitools.client.model.CMDocumentVersion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A document is the main data carrying entity in SimSage.  A document can literally be a document like a pdf file found on a file-server, or a database-record, or something captured from a remote system like a web-page, or an image on a web-page.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-06T16:21:46.672184776Z[Europe/London]")
public class CMDocument {
  public static final String SERIALIZED_NAME_ORGANISATION_ID = "organisationId";
  @SerializedName(SERIALIZED_NAME_ORGANISATION_ID)
  private String organisationId;

  public static final String SERIALIZED_NAME_KB_ID = "kbId";
  @SerializedName(SERIALIZED_NAME_KB_ID)
  private String kbId;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_URL_ID = "urlId";
  @SerializedName(SERIALIZED_NAME_URL_ID)
  private Integer urlId;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private String origin;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private String author;

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "documentType";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  private String documentType;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private Long created;

  public static final String SERIALIZED_NAME_UPLOADED = "uploaded";
  @SerializedName(SERIALIZED_NAME_UPLOADED)
  private Long uploaded;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private Long lastModified;

  public static final String SERIALIZED_NAME_CRAWLED = "crawled";
  @SerializedName(SERIALIZED_NAME_CRAWLED)
  private Long crawled;

  public static final String SERIALIZED_NAME_CONVERTED = "converted";
  @SerializedName(SERIALIZED_NAME_CONVERTED)
  private Long converted;

  public static final String SERIALIZED_NAME_PARSED = "parsed";
  @SerializedName(SERIALIZED_NAME_PARSED)
  private Long parsed;

  public static final String SERIALIZED_NAME_INDEXED = "indexed";
  @SerializedName(SERIALIZED_NAME_INDEXED)
  private Long indexed;

  public static final String SERIALIZED_NAME_PREVIEWED = "previewed";
  @SerializedName(SERIALIZED_NAME_PREVIEWED)
  private Long previewed;

  public static final String SERIALIZED_NAME_CHANGE_HASH = "changeHash";
  @SerializedName(SERIALIZED_NAME_CHANGE_HASH)
  private String changeHash;

  public static final String SERIALIZED_NAME_CONTENT_HASH = "contentHash";
  @SerializedName(SERIALIZED_NAME_CONTENT_HASH)
  private String contentHash;

  public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private Integer sourceId;

  public static final String SERIALIZED_NAME_PARENT_URL = "parentUrl";
  @SerializedName(SERIALIZED_NAME_PARENT_URL)
  private String parentUrl;

  public static final String SERIALIZED_NAME_ACLS = "acls";
  @SerializedName(SERIALIZED_NAME_ACLS)
  private List<CMDocumentAcl> acls = new ArrayList<>();

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_NUM_SENTENCES = "numSentences";
  @SerializedName(SERIALIZED_NAME_NUM_SENTENCES)
  private Integer numSentences;

  public static final String SERIALIZED_NAME_NUM_WORDS = "numWords";
  @SerializedName(SERIALIZED_NAME_NUM_WORDS)
  private Integer numWords;

  public static final String SERIALIZED_NAME_NUM_RELATIONSHIPS = "numRelationships";
  @SerializedName(SERIALIZED_NAME_NUM_RELATIONSHIPS)
  private Integer numRelationships;

  public static final String SERIALIZED_NAME_BINARY_SIZE = "binarySize";
  @SerializedName(SERIALIZED_NAME_BINARY_SIZE)
  private Long binarySize;

  public static final String SERIALIZED_NAME_TEXT_SIZE = "textSize";
  @SerializedName(SERIALIZED_NAME_TEXT_SIZE)
  private Integer textSize;

  public static final String SERIALIZED_NAME_VERSION_LIST = "versionList";
  @SerializedName(SERIALIZED_NAME_VERSION_LIST)
  private List<CMDocumentVersion> versionList = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOTE_LIST = "noteList";
  @SerializedName(SERIALIZED_NAME_NOTE_LIST)
  private List<CMDocumentNote> noteList = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACTIVITY_LIST = "activityList";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_LIST)
  private List<CMDocumentAudit> activityList = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE_DESCRIPTION = "typeDescription";
  @SerializedName(SERIALIZED_NAME_TYPE_DESCRIPTION)
  private String typeDescription;

  public static final String SERIALIZED_NAME_FILENAME = "filename";
  @SerializedName(SERIALIZED_NAME_FILENAME)
  private String filename;

  public static final String SERIALIZED_NAME_FOLDER_ID = "folderId";
  @SerializedName(SERIALIZED_NAME_FOLDER_ID)
  private String folderId;

  public CMDocument() {
  }

  public CMDocument organisationId(String organisationId) {
    
    this.organisationId = organisationId;
    return this;
  }

   /**
   * the organisation (its guid id)
   * @return organisationId
  **/
  @javax.annotation.Nonnull
  public String getOrganisationId() {
    return organisationId;
  }


  public void setOrganisationId(String organisationId) {
    this.organisationId = organisationId;
  }


  public CMDocument kbId(String kbId) {
    
    this.kbId = kbId;
    return this;
  }

   /**
   * the knowledge-base id (its guid id)
   * @return kbId
  **/
  @javax.annotation.Nonnull
  public String getKbId() {
    return kbId;
  }


  public void setKbId(String kbId) {
    this.kbId = kbId;
  }


  public CMDocument url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * A unique URL for this document.
   * @return url
  **/
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public CMDocument urlId(Integer urlId) {
    
    this.urlId = urlId;
    return this;
  }

   /**
   * A unique URL-id for this document.
   * @return urlId
  **/
  @javax.annotation.Nonnull
  public Integer getUrlId() {
    return urlId;
  }


  public void setUrlId(Integer urlId) {
    this.urlId = urlId;
  }


  public CMDocument origin(String origin) {
    
    this.origin = origin;
    return this;
  }

   /**
   * Where the document was sourced from (for external documents).
   * @return origin
  **/
  @javax.annotation.Nonnull
  public String getOrigin() {
    return origin;
  }


  public void setOrigin(String origin) {
    this.origin = origin;
  }


  public CMDocument title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * The title of this document, can be empty.
   * @return title
  **/
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public CMDocument author(String author) {
    
    this.author = author;
    return this;
  }

   /**
   * The author of this document, can be empty.
   * @return author
  **/
  @javax.annotation.Nonnull
  public String getAuthor() {
    return author;
  }


  public void setAuthor(String author) {
    this.author = author;
  }


  public CMDocument documentType(String documentType) {
    
    this.documentType = documentType;
    return this;
  }

   /**
   * The file extension of this document, its type.
   * @return documentType
  **/
  @javax.annotation.Nonnull
  public String getDocumentType() {
    return documentType;
  }


  public void setDocumentType(String documentType) {
    this.documentType = documentType;
  }


  public CMDocument created(Long created) {
    
    this.created = created;
    return this;
  }

   /**
   * a unix-timestamp for the creation date-time of this document
   * @return created
  **/
  @javax.annotation.Nonnull
  public Long getCreated() {
    return created;
  }


  public void setCreated(Long created) {
    this.created = created;
  }


  public CMDocument uploaded(Long uploaded) {
    
    this.uploaded = uploaded;
    return this;
  }

   /**
   * a unix-timestamp for the upload date-time of this document to SimSage
   * @return uploaded
  **/
  @javax.annotation.Nonnull
  public Long getUploaded() {
    return uploaded;
  }


  public void setUploaded(Long uploaded) {
    this.uploaded = uploaded;
  }


  public CMDocument lastModified(Long lastModified) {
    
    this.lastModified = lastModified;
    return this;
  }

   /**
   * a unix-timestamp for the last-modified date-time of this document
   * @return lastModified
  **/
  @javax.annotation.Nonnull
  public Long getLastModified() {
    return lastModified;
  }


  public void setLastModified(Long lastModified) {
    this.lastModified = lastModified;
  }


  public CMDocument crawled(Long crawled) {
    
    this.crawled = crawled;
    return this;
  }

   /**
   * a unix-timestamp for when a SimSage crawler last looked at this document
   * @return crawled
  **/
  @javax.annotation.Nonnull
  public Long getCrawled() {
    return crawled;
  }


  public void setCrawled(Long crawled) {
    this.crawled = crawled;
  }


  public CMDocument converted(Long converted) {
    
    this.converted = converted;
    return this;
  }

   /**
   * a unix-timestamp for when a SimSage converter last looked at this document
   * @return converted
  **/
  @javax.annotation.Nonnull
  public Long getConverted() {
    return converted;
  }


  public void setConverted(Long converted) {
    this.converted = converted;
  }


  public CMDocument parsed(Long parsed) {
    
    this.parsed = parsed;
    return this;
  }

   /**
   * a unix-timestamp for when a SimSage parser last looked at this document
   * @return parsed
  **/
  @javax.annotation.Nonnull
  public Long getParsed() {
    return parsed;
  }


  public void setParsed(Long parsed) {
    this.parsed = parsed;
  }


  public CMDocument indexed(Long indexed) {
    
    this.indexed = indexed;
    return this;
  }

   /**
   * a unix-timestamp for when a SimSage indexer last looked at this document
   * @return indexed
  **/
  @javax.annotation.Nonnull
  public Long getIndexed() {
    return indexed;
  }


  public void setIndexed(Long indexed) {
    this.indexed = indexed;
  }


  public CMDocument previewed(Long previewed) {
    
    this.previewed = previewed;
    return this;
  }

   /**
   * a unix-timestamp for when a SimSage image-converter last looked at this document
   * @return previewed
  **/
  @javax.annotation.Nonnull
  public Long getPreviewed() {
    return previewed;
  }


  public void setPreviewed(Long previewed) {
    this.previewed = previewed;
  }


  public CMDocument changeHash(String changeHash) {
    
    this.changeHash = changeHash;
    return this;
  }

   /**
   * A unique hash-string identifying SimSage changes to this document.  SimSage uses the value to see if the content has changed since last.
   * @return changeHash
  **/
  @javax.annotation.Nonnull
  public String getChangeHash() {
    return changeHash;
  }


  public void setChangeHash(String changeHash) {
    this.changeHash = changeHash;
  }


  public CMDocument contentHash(String contentHash) {
    
    this.contentHash = contentHash;
    return this;
  }

   /**
   * A unique hash-string identifying the content of this document.  SimSage uses this value to find exact duplicates.
   * @return contentHash
  **/
  @javax.annotation.Nonnull
  public String getContentHash() {
    return contentHash;
  }


  public void setContentHash(String contentHash) {
    this.contentHash = contentHash;
  }


  public CMDocument sourceId(Integer sourceId) {
    
    this.sourceId = sourceId;
    return this;
  }

   /**
   * the source-id of this crawler (ie. the crawler&#39;s id)
   * @return sourceId
  **/
  @javax.annotation.Nonnull
  public Integer getSourceId() {
    return sourceId;
  }


  public void setSourceId(Integer sourceId) {
    this.sourceId = sourceId;
  }


  public CMDocument parentUrl(String parentUrl) {
    
    this.parentUrl = parentUrl;
    return this;
  }

   /**
   * a related url if there is parentage to be considered for an item
   * @return parentUrl
  **/
  @javax.annotation.Nonnull
  public String getParentUrl() {
    return parentUrl;
  }


  public void setParentUrl(String parentUrl) {
    this.parentUrl = parentUrl;
  }


  public CMDocument acls(List<CMDocumentAcl> acls) {
    
    this.acls = acls;
    return this;
  }

  public CMDocument addAclsItem(CMDocumentAcl aclsItem) {
    if (this.acls == null) {
      this.acls = new ArrayList<>();
    }
    this.acls.add(aclsItem);
    return this;
  }

   /**
   * a list of the exact ACLs applying to this document (can be empty)
   * @return acls
  **/
  @javax.annotation.Nonnull
  public List<CMDocumentAcl> getAcls() {
    return acls;
  }


  public void setAcls(List<CMDocumentAcl> acls) {
    this.acls = acls;
  }


  public CMDocument metadata(Map<String, String> metadata) {
    
    this.metadata = metadata;
    return this;
  }

  public CMDocument putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

   /**
   * a series of name values for other metadata values found in the container of this document
   * @return metadata
  **/
  @javax.annotation.Nonnull
  public Map<String, String> getMetadata() {
    return metadata;
  }


  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public CMDocument numSentences(Integer numSentences) {
    
    this.numSentences = numSentences;
    return this;
  }

   /**
   * the number of sentences in this document.
   * @return numSentences
  **/
  @javax.annotation.Nonnull
  public Integer getNumSentences() {
    return numSentences;
  }


  public void setNumSentences(Integer numSentences) {
    this.numSentences = numSentences;
  }


  public CMDocument numWords(Integer numWords) {
    
    this.numWords = numWords;
    return this;
  }

   /**
   * the total number of words in this document.
   * @return numWords
  **/
  @javax.annotation.Nonnull
  public Integer getNumWords() {
    return numWords;
  }


  public void setNumWords(Integer numWords) {
    this.numWords = numWords;
  }


  public CMDocument numRelationships(Integer numRelationships) {
    
    this.numRelationships = numRelationships;
    return this;
  }

   /**
   * the total number of relationships in this document.
   * @return numRelationships
  **/
  @javax.annotation.Nonnull
  public Integer getNumRelationships() {
    return numRelationships;
  }


  public void setNumRelationships(Integer numRelationships) {
    this.numRelationships = numRelationships;
  }


  public CMDocument binarySize(Long binarySize) {
    
    this.binarySize = binarySize;
    return this;
  }

   /**
   * the size of the original document&#39;s binary in bytes.
   * @return binarySize
  **/
  @javax.annotation.Nonnull
  public Long getBinarySize() {
    return binarySize;
  }


  public void setBinarySize(Long binarySize) {
    this.binarySize = binarySize;
  }


  public CMDocument textSize(Integer textSize) {
    
    this.textSize = textSize;
    return this;
  }

   /**
   * the size of the converted document&#39;s text in bytes.
   * @return textSize
  **/
  @javax.annotation.Nonnull
  public Integer getTextSize() {
    return textSize;
  }


  public void setTextSize(Integer textSize) {
    this.textSize = textSize;
  }


  public CMDocument versionList(List<CMDocumentVersion> versionList) {
    
    this.versionList = versionList;
    return this;
  }

  public CMDocument addVersionListItem(CMDocumentVersion versionListItem) {
    if (this.versionList == null) {
      this.versionList = new ArrayList<>();
    }
    this.versionList.add(versionListItem);
    return this;
  }

   /**
   * list of binary versions of this document
   * @return versionList
  **/
  @javax.annotation.Nonnull
  public List<CMDocumentVersion> getVersionList() {
    return versionList;
  }


  public void setVersionList(List<CMDocumentVersion> versionList) {
    this.versionList = versionList;
  }


  public CMDocument noteList(List<CMDocumentNote> noteList) {
    
    this.noteList = noteList;
    return this;
  }

  public CMDocument addNoteListItem(CMDocumentNote noteListItem) {
    if (this.noteList == null) {
      this.noteList = new ArrayList<>();
    }
    this.noteList.add(noteListItem);
    return this;
  }

   /**
   * list of checkout notes about this document
   * @return noteList
  **/
  @javax.annotation.Nonnull
  public List<CMDocumentNote> getNoteList() {
    return noteList;
  }


  public void setNoteList(List<CMDocumentNote> noteList) {
    this.noteList = noteList;
  }


  public CMDocument activityList(List<CMDocumentAudit> activityList) {
    
    this.activityList = activityList;
    return this;
  }

  public CMDocument addActivityListItem(CMDocumentAudit activityListItem) {
    if (this.activityList == null) {
      this.activityList = new ArrayList<>();
    }
    this.activityList.add(activityListItem);
    return this;
  }

   /**
   * list of activities for the last two months of this document
   * @return activityList
  **/
  @javax.annotation.Nonnull
  public List<CMDocumentAudit> getActivityList() {
    return activityList;
  }


  public void setActivityList(List<CMDocumentAudit> activityList) {
    this.activityList = activityList;
  }


  public CMDocument typeDescription(String typeDescription) {
    
    this.typeDescription = typeDescription;
    return this;
  }

   /**
   * a description of the type of this document
   * @return typeDescription
  **/
  @javax.annotation.Nonnull
  public String getTypeDescription() {
    return typeDescription;
  }


  public void setTypeDescription(String typeDescription) {
    this.typeDescription = typeDescription;
  }


  public CMDocument filename(String filename) {
    
    this.filename = filename;
    return this;
  }

   /**
   * the filename of this document in the DMS system
   * @return filename
  **/
  @javax.annotation.Nonnull
  public String getFilename() {
    return filename;
  }


  public void setFilename(String filename) {
    this.filename = filename;
  }


  public CMDocument folderId(String folderId) {
    
    this.folderId = folderId;
    return this;
  }

   /**
   * the folderId of this item in the DMS system
   * @return folderId
  **/
  @javax.annotation.Nonnull
  public String getFolderId() {
    return folderId;
  }


  public void setFolderId(String folderId) {
    this.folderId = folderId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CMDocument cmDocument = (CMDocument) o;
    return Objects.equals(this.organisationId, cmDocument.organisationId) &&
        Objects.equals(this.kbId, cmDocument.kbId) &&
        Objects.equals(this.url, cmDocument.url) &&
        Objects.equals(this.urlId, cmDocument.urlId) &&
        Objects.equals(this.origin, cmDocument.origin) &&
        Objects.equals(this.title, cmDocument.title) &&
        Objects.equals(this.author, cmDocument.author) &&
        Objects.equals(this.documentType, cmDocument.documentType) &&
        Objects.equals(this.created, cmDocument.created) &&
        Objects.equals(this.uploaded, cmDocument.uploaded) &&
        Objects.equals(this.lastModified, cmDocument.lastModified) &&
        Objects.equals(this.crawled, cmDocument.crawled) &&
        Objects.equals(this.converted, cmDocument.converted) &&
        Objects.equals(this.parsed, cmDocument.parsed) &&
        Objects.equals(this.indexed, cmDocument.indexed) &&
        Objects.equals(this.previewed, cmDocument.previewed) &&
        Objects.equals(this.changeHash, cmDocument.changeHash) &&
        Objects.equals(this.contentHash, cmDocument.contentHash) &&
        Objects.equals(this.sourceId, cmDocument.sourceId) &&
        Objects.equals(this.parentUrl, cmDocument.parentUrl) &&
        Objects.equals(this.acls, cmDocument.acls) &&
        Objects.equals(this.metadata, cmDocument.metadata) &&
        Objects.equals(this.numSentences, cmDocument.numSentences) &&
        Objects.equals(this.numWords, cmDocument.numWords) &&
        Objects.equals(this.numRelationships, cmDocument.numRelationships) &&
        Objects.equals(this.binarySize, cmDocument.binarySize) &&
        Objects.equals(this.textSize, cmDocument.textSize) &&
        Objects.equals(this.versionList, cmDocument.versionList) &&
        Objects.equals(this.noteList, cmDocument.noteList) &&
        Objects.equals(this.activityList, cmDocument.activityList) &&
        Objects.equals(this.typeDescription, cmDocument.typeDescription) &&
        Objects.equals(this.filename, cmDocument.filename) &&
        Objects.equals(this.folderId, cmDocument.folderId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(organisationId, kbId, url, urlId, origin, title, author, documentType, created, uploaded, lastModified, crawled, converted, parsed, indexed, previewed, changeHash, contentHash, sourceId, parentUrl, acls, metadata, numSentences, numWords, numRelationships, binarySize, textSize, versionList, noteList, activityList, typeDescription, filename, folderId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CMDocument {\n");
    sb.append("    organisationId: ").append(toIndentedString(organisationId)).append("\n");
    sb.append("    kbId: ").append(toIndentedString(kbId)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    urlId: ").append(toIndentedString(urlId)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    uploaded: ").append(toIndentedString(uploaded)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    crawled: ").append(toIndentedString(crawled)).append("\n");
    sb.append("    converted: ").append(toIndentedString(converted)).append("\n");
    sb.append("    parsed: ").append(toIndentedString(parsed)).append("\n");
    sb.append("    indexed: ").append(toIndentedString(indexed)).append("\n");
    sb.append("    previewed: ").append(toIndentedString(previewed)).append("\n");
    sb.append("    changeHash: ").append(toIndentedString(changeHash)).append("\n");
    sb.append("    contentHash: ").append(toIndentedString(contentHash)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    parentUrl: ").append(toIndentedString(parentUrl)).append("\n");
    sb.append("    acls: ").append(toIndentedString(acls)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    numSentences: ").append(toIndentedString(numSentences)).append("\n");
    sb.append("    numWords: ").append(toIndentedString(numWords)).append("\n");
    sb.append("    numRelationships: ").append(toIndentedString(numRelationships)).append("\n");
    sb.append("    binarySize: ").append(toIndentedString(binarySize)).append("\n");
    sb.append("    textSize: ").append(toIndentedString(textSize)).append("\n");
    sb.append("    versionList: ").append(toIndentedString(versionList)).append("\n");
    sb.append("    noteList: ").append(toIndentedString(noteList)).append("\n");
    sb.append("    activityList: ").append(toIndentedString(activityList)).append("\n");
    sb.append("    typeDescription: ").append(toIndentedString(typeDescription)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    folderId: ").append(toIndentedString(folderId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("organisationId");
    openapiFields.add("kbId");
    openapiFields.add("url");
    openapiFields.add("urlId");
    openapiFields.add("origin");
    openapiFields.add("title");
    openapiFields.add("author");
    openapiFields.add("documentType");
    openapiFields.add("created");
    openapiFields.add("uploaded");
    openapiFields.add("lastModified");
    openapiFields.add("crawled");
    openapiFields.add("converted");
    openapiFields.add("parsed");
    openapiFields.add("indexed");
    openapiFields.add("previewed");
    openapiFields.add("changeHash");
    openapiFields.add("contentHash");
    openapiFields.add("sourceId");
    openapiFields.add("parentUrl");
    openapiFields.add("acls");
    openapiFields.add("metadata");
    openapiFields.add("numSentences");
    openapiFields.add("numWords");
    openapiFields.add("numRelationships");
    openapiFields.add("binarySize");
    openapiFields.add("textSize");
    openapiFields.add("versionList");
    openapiFields.add("noteList");
    openapiFields.add("activityList");
    openapiFields.add("typeDescription");
    openapiFields.add("filename");
    openapiFields.add("folderId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("organisationId");
    openapiRequiredFields.add("kbId");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("urlId");
    openapiRequiredFields.add("origin");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("author");
    openapiRequiredFields.add("documentType");
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("uploaded");
    openapiRequiredFields.add("lastModified");
    openapiRequiredFields.add("crawled");
    openapiRequiredFields.add("converted");
    openapiRequiredFields.add("parsed");
    openapiRequiredFields.add("indexed");
    openapiRequiredFields.add("previewed");
    openapiRequiredFields.add("changeHash");
    openapiRequiredFields.add("contentHash");
    openapiRequiredFields.add("sourceId");
    openapiRequiredFields.add("parentUrl");
    openapiRequiredFields.add("acls");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("numSentences");
    openapiRequiredFields.add("numWords");
    openapiRequiredFields.add("numRelationships");
    openapiRequiredFields.add("binarySize");
    openapiRequiredFields.add("textSize");
    openapiRequiredFields.add("versionList");
    openapiRequiredFields.add("noteList");
    openapiRequiredFields.add("activityList");
    openapiRequiredFields.add("typeDescription");
    openapiRequiredFields.add("filename");
    openapiRequiredFields.add("folderId");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CMDocument
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CMDocument.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CMDocument is not found in the empty JSON string", CMDocument.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CMDocument.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CMDocument` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CMDocument.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("organisationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organisationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organisationId").toString()));
      }
      if (!jsonObj.get("kbId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kbId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kbId").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("author").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author").toString()));
      }
      if (!jsonObj.get("documentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentType").toString()));
      }
      if (!jsonObj.get("changeHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changeHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changeHash").toString()));
      }
      if (!jsonObj.get("contentHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentHash").toString()));
      }
      if (!jsonObj.get("parentUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentUrl").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("acls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `acls` to be an array in the JSON string but got `%s`", jsonObj.get("acls").toString()));
      }

      JsonArray jsonArrayacls = jsonObj.getAsJsonArray("acls");
      // validate the required field `acls` (array)
      for (int i = 0; i < jsonArrayacls.size(); i++) {
        CMDocumentAcl.validateJsonElement(jsonArrayacls.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("versionList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionList` to be an array in the JSON string but got `%s`", jsonObj.get("versionList").toString()));
      }

      JsonArray jsonArrayversionList = jsonObj.getAsJsonArray("versionList");
      // validate the required field `versionList` (array)
      for (int i = 0; i < jsonArrayversionList.size(); i++) {
        CMDocumentVersion.validateJsonElement(jsonArrayversionList.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("noteList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `noteList` to be an array in the JSON string but got `%s`", jsonObj.get("noteList").toString()));
      }

      JsonArray jsonArraynoteList = jsonObj.getAsJsonArray("noteList");
      // validate the required field `noteList` (array)
      for (int i = 0; i < jsonArraynoteList.size(); i++) {
        CMDocumentNote.validateJsonElement(jsonArraynoteList.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("activityList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `activityList` to be an array in the JSON string but got `%s`", jsonObj.get("activityList").toString()));
      }

      JsonArray jsonArrayactivityList = jsonObj.getAsJsonArray("activityList");
      // validate the required field `activityList` (array)
      for (int i = 0; i < jsonArrayactivityList.size(); i++) {
        CMDocumentAudit.validateJsonElement(jsonArrayactivityList.get(i));
      };
      if (!jsonObj.get("typeDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeDescription").toString()));
      }
      if (!jsonObj.get("filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filename").toString()));
      }
      if (!jsonObj.get("folderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folderId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CMDocument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CMDocument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CMDocument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CMDocument.class));

       return (TypeAdapter<T>) new TypeAdapter<CMDocument>() {
           @Override
           public void write(JsonWriter out, CMDocument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CMDocument read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CMDocument given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CMDocument
  * @throws IOException if the JSON string is invalid with respect to CMDocument
  */
  public static CMDocument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CMDocument.class);
  }

 /**
  * Convert an instance of CMDocument to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

