/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CMQueueItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-06T16:21:46.672184776Z[Europe/London]")
public class CMQueueItem {
  public static final String SERIALIZED_NAME_ORGANISATION_ID = "organisationId";
  @SerializedName(SERIALIZED_NAME_ORGANISATION_ID)
  private String organisationId;

  public static final String SERIALIZED_NAME_PROCESS_ID = "processId";
  @SerializedName(SERIALIZED_NAME_PROCESS_ID)
  private String processId;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_TASK_ID = "taskId";
  @SerializedName(SERIALIZED_NAME_TASK_ID)
  private String taskId;

  public static final String SERIALIZED_NAME_PROJECT_TYPE = "projectType";
  @SerializedName(SERIALIZED_NAME_PROJECT_TYPE)
  private String projectType;

  public static final String SERIALIZED_NAME_TASK_TYPE = "taskType";
  @SerializedName(SERIALIZED_NAME_TASK_TYPE)
  private String taskType;

  public static final String SERIALIZED_NAME_TASK_SCREEN = "taskScreen";
  @SerializedName(SERIALIZED_NAME_TASK_SCREEN)
  private String taskScreen;

  public static final String SERIALIZED_NAME_PROJECT_CREATED = "projectCreated";
  @SerializedName(SERIALIZED_NAME_PROJECT_CREATED)
  private OffsetDateTime projectCreated;

  public static final String SERIALIZED_NAME_DATE_TASK_CREATED = "dateTaskCreated";
  @SerializedName(SERIALIZED_NAME_DATE_TASK_CREATED)
  private OffsetDateTime dateTaskCreated;

  public static final String SERIALIZED_NAME_PROJECT_TITLE = "projectTitle";
  @SerializedName(SERIALIZED_NAME_PROJECT_TITLE)
  private String projectTitle;

  public static final String SERIALIZED_NAME_TASK_NAME = "taskName";
  @SerializedName(SERIALIZED_NAME_TASK_NAME)
  private String taskName;

  public static final String SERIALIZED_NAME_ASSIGNED_USER = "assignedUser";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_USER)
  private String assignedUser;

  public static final String SERIALIZED_NAME_POTENTIAL_USERS = "potentialUsers";
  @SerializedName(SERIALIZED_NAME_POTENTIAL_USERS)
  private List<String> potentialUsers = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCLUDED_USERS = "excludedUsers";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_USERS)
  private List<String> excludedUsers = new ArrayList<>();

  public static final String SERIALIZED_NAME_POTENTIAL_GROUPS = "potentialGroups";
  @SerializedName(SERIALIZED_NAME_POTENTIAL_GROUPS)
  private List<String> potentialGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_OWNS_ITEM = "ownsItem";
  @SerializedName(SERIALIZED_NAME_OWNS_ITEM)
  private Boolean ownsItem;

  public static final String SERIALIZED_NAME_CAN_CLAIM = "canClaim";
  @SerializedName(SERIALIZED_NAME_CAN_CLAIM)
  private Boolean canClaim;

  public static final String SERIALIZED_NAME_CAN_RELEASE = "canRelease";
  @SerializedName(SERIALIZED_NAME_CAN_RELEASE)
  private Boolean canRelease;

  public static final String SERIALIZED_NAME_LOCK_TYPE = "lockType";
  @SerializedName(SERIALIZED_NAME_LOCK_TYPE)
  private String lockType;

  public CMQueueItem() {
  }

  public CMQueueItem organisationId(String organisationId) {
    
    this.organisationId = organisationId;
    return this;
  }

   /**
   * Get organisationId
   * @return organisationId
  **/
  @javax.annotation.Nonnull
  public String getOrganisationId() {
    return organisationId;
  }


  public void setOrganisationId(String organisationId) {
    this.organisationId = organisationId;
  }


  public CMQueueItem processId(String processId) {
    
    this.processId = processId;
    return this;
  }

   /**
   * Get processId
   * @return processId
  **/
  @javax.annotation.Nonnull
  public String getProcessId() {
    return processId;
  }


  public void setProcessId(String processId) {
    this.processId = processId;
  }


  public CMQueueItem projectId(String projectId) {
    
    this.projectId = projectId;
    return this;
  }

   /**
   * Get projectId
   * @return projectId
  **/
  @javax.annotation.Nonnull
  public String getProjectId() {
    return projectId;
  }


  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  public CMQueueItem taskId(String taskId) {
    
    this.taskId = taskId;
    return this;
  }

   /**
   * Get taskId
   * @return taskId
  **/
  @javax.annotation.Nonnull
  public String getTaskId() {
    return taskId;
  }


  public void setTaskId(String taskId) {
    this.taskId = taskId;
  }


  public CMQueueItem projectType(String projectType) {
    
    this.projectType = projectType;
    return this;
  }

   /**
   * Get projectType
   * @return projectType
  **/
  @javax.annotation.Nonnull
  public String getProjectType() {
    return projectType;
  }


  public void setProjectType(String projectType) {
    this.projectType = projectType;
  }


  public CMQueueItem taskType(String taskType) {
    
    this.taskType = taskType;
    return this;
  }

   /**
   * Get taskType
   * @return taskType
  **/
  @javax.annotation.Nonnull
  public String getTaskType() {
    return taskType;
  }


  public void setTaskType(String taskType) {
    this.taskType = taskType;
  }


  public CMQueueItem taskScreen(String taskScreen) {
    
    this.taskScreen = taskScreen;
    return this;
  }

   /**
   * Get taskScreen
   * @return taskScreen
  **/
  @javax.annotation.Nonnull
  public String getTaskScreen() {
    return taskScreen;
  }


  public void setTaskScreen(String taskScreen) {
    this.taskScreen = taskScreen;
  }


  public CMQueueItem projectCreated(OffsetDateTime projectCreated) {
    
    this.projectCreated = projectCreated;
    return this;
  }

   /**
   * Get projectCreated
   * @return projectCreated
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getProjectCreated() {
    return projectCreated;
  }


  public void setProjectCreated(OffsetDateTime projectCreated) {
    this.projectCreated = projectCreated;
  }


  public CMQueueItem dateTaskCreated(OffsetDateTime dateTaskCreated) {
    
    this.dateTaskCreated = dateTaskCreated;
    return this;
  }

   /**
   * Get dateTaskCreated
   * @return dateTaskCreated
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getDateTaskCreated() {
    return dateTaskCreated;
  }


  public void setDateTaskCreated(OffsetDateTime dateTaskCreated) {
    this.dateTaskCreated = dateTaskCreated;
  }


  public CMQueueItem projectTitle(String projectTitle) {
    
    this.projectTitle = projectTitle;
    return this;
  }

   /**
   * Get projectTitle
   * @return projectTitle
  **/
  @javax.annotation.Nonnull
  public String getProjectTitle() {
    return projectTitle;
  }


  public void setProjectTitle(String projectTitle) {
    this.projectTitle = projectTitle;
  }


  public CMQueueItem taskName(String taskName) {
    
    this.taskName = taskName;
    return this;
  }

   /**
   * Get taskName
   * @return taskName
  **/
  @javax.annotation.Nonnull
  public String getTaskName() {
    return taskName;
  }


  public void setTaskName(String taskName) {
    this.taskName = taskName;
  }


  public CMQueueItem assignedUser(String assignedUser) {
    
    this.assignedUser = assignedUser;
    return this;
  }

   /**
   * Get assignedUser
   * @return assignedUser
  **/
  @javax.annotation.Nonnull
  public String getAssignedUser() {
    return assignedUser;
  }


  public void setAssignedUser(String assignedUser) {
    this.assignedUser = assignedUser;
  }


  public CMQueueItem potentialUsers(List<String> potentialUsers) {
    
    this.potentialUsers = potentialUsers;
    return this;
  }

  public CMQueueItem addPotentialUsersItem(String potentialUsersItem) {
    if (this.potentialUsers == null) {
      this.potentialUsers = new ArrayList<>();
    }
    this.potentialUsers.add(potentialUsersItem);
    return this;
  }

   /**
   * Get potentialUsers
   * @return potentialUsers
  **/
  @javax.annotation.Nonnull
  public List<String> getPotentialUsers() {
    return potentialUsers;
  }


  public void setPotentialUsers(List<String> potentialUsers) {
    this.potentialUsers = potentialUsers;
  }


  public CMQueueItem excludedUsers(List<String> excludedUsers) {
    
    this.excludedUsers = excludedUsers;
    return this;
  }

  public CMQueueItem addExcludedUsersItem(String excludedUsersItem) {
    if (this.excludedUsers == null) {
      this.excludedUsers = new ArrayList<>();
    }
    this.excludedUsers.add(excludedUsersItem);
    return this;
  }

   /**
   * Get excludedUsers
   * @return excludedUsers
  **/
  @javax.annotation.Nonnull
  public List<String> getExcludedUsers() {
    return excludedUsers;
  }


  public void setExcludedUsers(List<String> excludedUsers) {
    this.excludedUsers = excludedUsers;
  }


  public CMQueueItem potentialGroups(List<String> potentialGroups) {
    
    this.potentialGroups = potentialGroups;
    return this;
  }

  public CMQueueItem addPotentialGroupsItem(String potentialGroupsItem) {
    if (this.potentialGroups == null) {
      this.potentialGroups = new ArrayList<>();
    }
    this.potentialGroups.add(potentialGroupsItem);
    return this;
  }

   /**
   * Get potentialGroups
   * @return potentialGroups
  **/
  @javax.annotation.Nonnull
  public List<String> getPotentialGroups() {
    return potentialGroups;
  }


  public void setPotentialGroups(List<String> potentialGroups) {
    this.potentialGroups = potentialGroups;
  }


  public CMQueueItem ownsItem(Boolean ownsItem) {
    
    this.ownsItem = ownsItem;
    return this;
  }

   /**
   * Get ownsItem
   * @return ownsItem
  **/
  @javax.annotation.Nonnull
  public Boolean getOwnsItem() {
    return ownsItem;
  }


  public void setOwnsItem(Boolean ownsItem) {
    this.ownsItem = ownsItem;
  }


  public CMQueueItem canClaim(Boolean canClaim) {
    
    this.canClaim = canClaim;
    return this;
  }

   /**
   * Get canClaim
   * @return canClaim
  **/
  @javax.annotation.Nonnull
  public Boolean getCanClaim() {
    return canClaim;
  }


  public void setCanClaim(Boolean canClaim) {
    this.canClaim = canClaim;
  }


  public CMQueueItem canRelease(Boolean canRelease) {
    
    this.canRelease = canRelease;
    return this;
  }

   /**
   * Get canRelease
   * @return canRelease
  **/
  @javax.annotation.Nonnull
  public Boolean getCanRelease() {
    return canRelease;
  }


  public void setCanRelease(Boolean canRelease) {
    this.canRelease = canRelease;
  }


  public CMQueueItem lockType(String lockType) {
    
    this.lockType = lockType;
    return this;
  }

   /**
   * Get lockType
   * @return lockType
  **/
  @javax.annotation.Nonnull
  public String getLockType() {
    return lockType;
  }


  public void setLockType(String lockType) {
    this.lockType = lockType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CMQueueItem cmQueueItem = (CMQueueItem) o;
    return Objects.equals(this.organisationId, cmQueueItem.organisationId) &&
        Objects.equals(this.processId, cmQueueItem.processId) &&
        Objects.equals(this.projectId, cmQueueItem.projectId) &&
        Objects.equals(this.taskId, cmQueueItem.taskId) &&
        Objects.equals(this.projectType, cmQueueItem.projectType) &&
        Objects.equals(this.taskType, cmQueueItem.taskType) &&
        Objects.equals(this.taskScreen, cmQueueItem.taskScreen) &&
        Objects.equals(this.projectCreated, cmQueueItem.projectCreated) &&
        Objects.equals(this.dateTaskCreated, cmQueueItem.dateTaskCreated) &&
        Objects.equals(this.projectTitle, cmQueueItem.projectTitle) &&
        Objects.equals(this.taskName, cmQueueItem.taskName) &&
        Objects.equals(this.assignedUser, cmQueueItem.assignedUser) &&
        Objects.equals(this.potentialUsers, cmQueueItem.potentialUsers) &&
        Objects.equals(this.excludedUsers, cmQueueItem.excludedUsers) &&
        Objects.equals(this.potentialGroups, cmQueueItem.potentialGroups) &&
        Objects.equals(this.ownsItem, cmQueueItem.ownsItem) &&
        Objects.equals(this.canClaim, cmQueueItem.canClaim) &&
        Objects.equals(this.canRelease, cmQueueItem.canRelease) &&
        Objects.equals(this.lockType, cmQueueItem.lockType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(organisationId, processId, projectId, taskId, projectType, taskType, taskScreen, projectCreated, dateTaskCreated, projectTitle, taskName, assignedUser, potentialUsers, excludedUsers, potentialGroups, ownsItem, canClaim, canRelease, lockType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CMQueueItem {\n");
    sb.append("    organisationId: ").append(toIndentedString(organisationId)).append("\n");
    sb.append("    processId: ").append(toIndentedString(processId)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    projectType: ").append(toIndentedString(projectType)).append("\n");
    sb.append("    taskType: ").append(toIndentedString(taskType)).append("\n");
    sb.append("    taskScreen: ").append(toIndentedString(taskScreen)).append("\n");
    sb.append("    projectCreated: ").append(toIndentedString(projectCreated)).append("\n");
    sb.append("    dateTaskCreated: ").append(toIndentedString(dateTaskCreated)).append("\n");
    sb.append("    projectTitle: ").append(toIndentedString(projectTitle)).append("\n");
    sb.append("    taskName: ").append(toIndentedString(taskName)).append("\n");
    sb.append("    assignedUser: ").append(toIndentedString(assignedUser)).append("\n");
    sb.append("    potentialUsers: ").append(toIndentedString(potentialUsers)).append("\n");
    sb.append("    excludedUsers: ").append(toIndentedString(excludedUsers)).append("\n");
    sb.append("    potentialGroups: ").append(toIndentedString(potentialGroups)).append("\n");
    sb.append("    ownsItem: ").append(toIndentedString(ownsItem)).append("\n");
    sb.append("    canClaim: ").append(toIndentedString(canClaim)).append("\n");
    sb.append("    canRelease: ").append(toIndentedString(canRelease)).append("\n");
    sb.append("    lockType: ").append(toIndentedString(lockType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("organisationId");
    openapiFields.add("processId");
    openapiFields.add("projectId");
    openapiFields.add("taskId");
    openapiFields.add("projectType");
    openapiFields.add("taskType");
    openapiFields.add("taskScreen");
    openapiFields.add("projectCreated");
    openapiFields.add("dateTaskCreated");
    openapiFields.add("projectTitle");
    openapiFields.add("taskName");
    openapiFields.add("assignedUser");
    openapiFields.add("potentialUsers");
    openapiFields.add("excludedUsers");
    openapiFields.add("potentialGroups");
    openapiFields.add("ownsItem");
    openapiFields.add("canClaim");
    openapiFields.add("canRelease");
    openapiFields.add("lockType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("organisationId");
    openapiRequiredFields.add("processId");
    openapiRequiredFields.add("projectId");
    openapiRequiredFields.add("taskId");
    openapiRequiredFields.add("projectType");
    openapiRequiredFields.add("taskType");
    openapiRequiredFields.add("taskScreen");
    openapiRequiredFields.add("projectCreated");
    openapiRequiredFields.add("dateTaskCreated");
    openapiRequiredFields.add("projectTitle");
    openapiRequiredFields.add("taskName");
    openapiRequiredFields.add("assignedUser");
    openapiRequiredFields.add("potentialUsers");
    openapiRequiredFields.add("excludedUsers");
    openapiRequiredFields.add("potentialGroups");
    openapiRequiredFields.add("ownsItem");
    openapiRequiredFields.add("canClaim");
    openapiRequiredFields.add("canRelease");
    openapiRequiredFields.add("lockType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CMQueueItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CMQueueItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CMQueueItem is not found in the empty JSON string", CMQueueItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CMQueueItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CMQueueItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CMQueueItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("organisationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organisationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organisationId").toString()));
      }
      if (!jsonObj.get("processId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processId").toString()));
      }
      if (!jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if (!jsonObj.get("taskId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskId").toString()));
      }
      if (!jsonObj.get("projectType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectType").toString()));
      }
      if (!jsonObj.get("taskType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskType").toString()));
      }
      if (!jsonObj.get("taskScreen").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskScreen` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskScreen").toString()));
      }
      if (!jsonObj.get("projectTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectTitle").toString()));
      }
      if (!jsonObj.get("taskName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskName").toString()));
      }
      if (!jsonObj.get("assignedUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignedUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assignedUser").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("potentialUsers") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("potentialUsers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `potentialUsers` to be an array in the JSON string but got `%s`", jsonObj.get("potentialUsers").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("excludedUsers") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("excludedUsers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedUsers` to be an array in the JSON string but got `%s`", jsonObj.get("excludedUsers").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("potentialGroups") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("potentialGroups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `potentialGroups` to be an array in the JSON string but got `%s`", jsonObj.get("potentialGroups").toString()));
      }
      if (!jsonObj.get("lockType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lockType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lockType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CMQueueItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CMQueueItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CMQueueItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CMQueueItem.class));

       return (TypeAdapter<T>) new TypeAdapter<CMQueueItem>() {
           @Override
           public void write(JsonWriter out, CMQueueItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CMQueueItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CMQueueItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CMQueueItem
  * @throws IOException if the JSON string is invalid with respect to CMQueueItem
  */
  public static CMQueueItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CMQueueItem.class);
  }

 /**
  * Convert an instance of CMQueueItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

