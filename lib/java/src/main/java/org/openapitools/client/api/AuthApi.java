/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.14.12
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CMGroup;
import org.openapitools.client.model.CMGroupEditInfo;
import org.openapitools.client.model.CMGroupList;
import org.openapitools.client.model.CMImportUsers;
import org.openapitools.client.model.CMOrganisation;
import org.openapitools.client.model.CMPasswordResetRequest;
import org.openapitools.client.model.CMSessionVersion;
import org.openapitools.client.model.CMSignInParameters;
import org.openapitools.client.model.CMUserList;
import org.openapitools.client.model.CMUserPasswordReset;
import org.openapitools.client.model.CMUserWithExtras;
import org.openapitools.client.model.JsonMessage;
import org.openapitools.client.model.SignInAdmin;
import org.openapitools.client.model.SignInCmd;
import org.openapitools.client.model.SignInDmsCmd;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteGroup
     * @param organisationId the organisation (its guid id) (required)
     * @param name the name of the group to remove. (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete group OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not delete group </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupCall(String organisationId, String name, String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/auth/group/{organisationId}/{name}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGroupValidateBeforeCall(String organisationId, String name, String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling deleteGroup(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteGroup(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling deleteGroup(Async)");
        }

        return deleteGroupCall(organisationId, name, sessionId, _callback);

    }

    /**
     * Delete Group
     * Delete a group by name.
     * @param organisationId the organisation (its guid id) (required)
     * @param name the name of the group to remove. (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete group OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not delete group </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage deleteGroup(String organisationId, String name, String sessionId) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = deleteGroupWithHttpInfo(organisationId, name, sessionId);
        return localVarResp.getData();
    }

    /**
     * Delete Group
     * Delete a group by name.
     * @param organisationId the organisation (its guid id) (required)
     * @param name the name of the group to remove. (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete group OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not delete group </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> deleteGroupWithHttpInfo(String organisationId, String name, String sessionId) throws ApiException {
        okhttp3.Call localVarCall = deleteGroupValidateBeforeCall(organisationId, name, sessionId, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Group (asynchronously)
     * Delete a group by name.
     * @param organisationId the organisation (its guid id) (required)
     * @param name the name of the group to remove. (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete group OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not delete group </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupAsync(String organisationId, String name, String sessionId, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGroupValidateBeforeCall(organisationId, name, sessionId, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisation
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not remove organisation </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> remove organisation OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationCall(String organisationId, String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/auth/organisation/{organisationId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationValidateBeforeCall(String organisationId, String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling deleteOrganisation(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling deleteOrganisation(Async)");
        }

        return deleteOrganisationCall(organisationId, sessionId, _callback);

    }

    /**
     * Delete Organisation
     * Delete / remove an organisation and its knowledge bases.
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not remove organisation </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> remove organisation OK response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage deleteOrganisation(String organisationId, String sessionId) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = deleteOrganisationWithHttpInfo(organisationId, sessionId);
        return localVarResp.getData();
    }

    /**
     * Delete Organisation
     * Delete / remove an organisation and its knowledge bases.
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not remove organisation </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> remove organisation OK response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> deleteOrganisationWithHttpInfo(String organisationId, String sessionId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationValidateBeforeCall(organisationId, sessionId, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Organisation (asynchronously)
     * Delete / remove an organisation and its knowledge bases.
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not remove organisation </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> remove organisation OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationAsync(String organisationId, String sessionId, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationValidateBeforeCall(organisationId, sessionId, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroups
     * @param organisationId the main organisation (its guid id) to get users for (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get group list </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> get a list of groups </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupsCall(String organisationId, String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/auth/groups/{organisationId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupsValidateBeforeCall(String organisationId, String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getGroups(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getGroups(Async)");
        }

        return getGroupsCall(organisationId, sessionId, _callback);

    }

    /**
     * Get Groups
     * Return a paginated, filtered list of groups for a given organisation.
     * @param organisationId the main organisation (its guid id) to get users for (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return CMGroupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get group list </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> get a list of groups </td><td>  -  </td></tr>
     </table>
     */
    public CMGroupList getGroups(String organisationId, String sessionId) throws ApiException {
        ApiResponse<CMGroupList> localVarResp = getGroupsWithHttpInfo(organisationId, sessionId);
        return localVarResp.getData();
    }

    /**
     * Get Groups
     * Return a paginated, filtered list of groups for a given organisation.
     * @param organisationId the main organisation (its guid id) to get users for (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return ApiResponse&lt;CMGroupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get group list </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> get a list of groups </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMGroupList> getGroupsWithHttpInfo(String organisationId, String sessionId) throws ApiException {
        okhttp3.Call localVarCall = getGroupsValidateBeforeCall(organisationId, sessionId, null);
        Type localVarReturnType = new TypeToken<CMGroupList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Groups (asynchronously)
     * Return a paginated, filtered list of groups for a given organisation.
     * @param organisationId the main organisation (its guid id) to get users for (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get group list </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> get a list of groups </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupsAsync(String organisationId, String sessionId, final ApiCallback<CMGroupList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupsValidateBeforeCall(organisationId, sessionId, _callback);
        Type localVarReturnType = new TypeToken<CMGroupList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOTT
     * @param organisationId the organisation (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get the one-time token as a string. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not create a one-time token. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOTTCall(String organisationId, String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/auth/ott/{organisationId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOTTValidateBeforeCall(String organisationId, String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getOTT(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getOTT(Async)");
        }

        return getOTTCall(organisationId, sessionId, _callback);

    }

    /**
     * Get a one-time token.
     * Get a one-time token associated with your session.  Can be used for download items.
     * @param organisationId the organisation (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get the one-time token as a string. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not create a one-time token. </td><td>  -  </td></tr>
     </table>
     */
    public String getOTT(String organisationId, String sessionId) throws ApiException {
        ApiResponse<String> localVarResp = getOTTWithHttpInfo(organisationId, sessionId);
        return localVarResp.getData();
    }

    /**
     * Get a one-time token.
     * Get a one-time token associated with your session.  Can be used for download items.
     * @param organisationId the organisation (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get the one-time token as a string. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not create a one-time token. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getOTTWithHttpInfo(String organisationId, String sessionId) throws ApiException {
        okhttp3.Call localVarCall = getOTTValidateBeforeCall(organisationId, sessionId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a one-time token. (asynchronously)
     * Get a one-time token associated with your session.  Can be used for download items.
     * @param organisationId the organisation (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get the one-time token as a string. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not create a one-time token. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOTTAsync(String organisationId, String sessionId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOTTValidateBeforeCall(organisationId, sessionId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserOrganisationList
     * @param filter a text filter for partial string matching organisations (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get organisation list </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> get a list of organisations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserOrganisationListCall(String filter, String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/auth/user/organisations/{filter}"
            .replace("{" + "filter" + "}", localVarApiClient.escapeString(filter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserOrganisationListValidateBeforeCall(String filter, String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling getUserOrganisationList(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getUserOrganisationList(Async)");
        }

        return getUserOrganisationListCall(filter, sessionId, _callback);

    }

    /**
     * Get a list of Organisations
     * Return all organisations that a user has access to (read-only or write).
     * @param filter a text filter for partial string matching organisations (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return List&lt;CMOrganisation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get organisation list </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> get a list of organisations </td><td>  -  </td></tr>
     </table>
     */
    public List<CMOrganisation> getUserOrganisationList(String filter, String sessionId) throws ApiException {
        ApiResponse<List<CMOrganisation>> localVarResp = getUserOrganisationListWithHttpInfo(filter, sessionId);
        return localVarResp.getData();
    }

    /**
     * Get a list of Organisations
     * Return all organisations that a user has access to (read-only or write).
     * @param filter a text filter for partial string matching organisations (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return ApiResponse&lt;List&lt;CMOrganisation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get organisation list </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> get a list of organisations </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CMOrganisation>> getUserOrganisationListWithHttpInfo(String filter, String sessionId) throws ApiException {
        okhttp3.Call localVarCall = getUserOrganisationListValidateBeforeCall(filter, sessionId, null);
        Type localVarReturnType = new TypeToken<List<CMOrganisation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of Organisations (asynchronously)
     * Return all organisations that a user has access to (read-only or write).
     * @param filter a text filter for partial string matching organisations (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get organisation list </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> get a list of organisations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserOrganisationListAsync(String filter, String sessionId, final ApiCallback<List<CMOrganisation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserOrganisationListValidateBeforeCall(filter, sessionId, _callback);
        Type localVarReturnType = new TypeToken<List<CMOrganisation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsersPaginated
     * @param organisationId the main organisation (its guid id) to get users for (required)
     * @param page the starting page, starting at zero (required)
     * @param pageSize the number of users per page (required)
     * @param filter a text filter for partial string matching users (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get users paginated response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get users paginated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersPaginatedCall(String organisationId, Integer page, Integer pageSize, String filter, String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/auth/users-paginated/{organisationId}/{page}/{pageSize}/{filter}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()))
            .replace("{" + "pageSize" + "}", localVarApiClient.escapeString(pageSize.toString()))
            .replace("{" + "filter" + "}", localVarApiClient.escapeString(filter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersPaginatedValidateBeforeCall(String organisationId, Integer page, Integer pageSize, String filter, String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getUsersPaginated(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getUsersPaginated(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling getUsersPaginated(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling getUsersPaginated(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getUsersPaginated(Async)");
        }

        return getUsersPaginatedCall(organisationId, page, pageSize, filter, sessionId, _callback);

    }

    /**
     * Get Users paginated
     * Return a paginated, filtered list of users for a given organisation.
     * @param organisationId the main organisation (its guid id) to get users for (required)
     * @param page the starting page, starting at zero (required)
     * @param pageSize the number of users per page (required)
     * @param filter a text filter for partial string matching users (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return CMUserList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get users paginated response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get users paginated </td><td>  -  </td></tr>
     </table>
     */
    public CMUserList getUsersPaginated(String organisationId, Integer page, Integer pageSize, String filter, String sessionId) throws ApiException {
        ApiResponse<CMUserList> localVarResp = getUsersPaginatedWithHttpInfo(organisationId, page, pageSize, filter, sessionId);
        return localVarResp.getData();
    }

    /**
     * Get Users paginated
     * Return a paginated, filtered list of users for a given organisation.
     * @param organisationId the main organisation (its guid id) to get users for (required)
     * @param page the starting page, starting at zero (required)
     * @param pageSize the number of users per page (required)
     * @param filter a text filter for partial string matching users (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return ApiResponse&lt;CMUserList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get users paginated response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get users paginated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMUserList> getUsersPaginatedWithHttpInfo(String organisationId, Integer page, Integer pageSize, String filter, String sessionId) throws ApiException {
        okhttp3.Call localVarCall = getUsersPaginatedValidateBeforeCall(organisationId, page, pageSize, filter, sessionId, null);
        Type localVarReturnType = new TypeToken<CMUserList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Users paginated (asynchronously)
     * Return a paginated, filtered list of users for a given organisation.
     * @param organisationId the main organisation (its guid id) to get users for (required)
     * @param page the starting page, starting at zero (required)
     * @param pageSize the number of users per page (required)
     * @param filter a text filter for partial string matching users (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get users paginated response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get users paginated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersPaginatedAsync(String organisationId, Integer page, Integer pageSize, String filter, String sessionId, final ApiCallback<CMUserList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersPaginatedValidateBeforeCall(organisationId, page, pageSize, filter, sessionId, _callback);
        Type localVarReturnType = new TypeToken<CMUserList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupEditInfo
     * @param organisationId the main organisation (its guid id) to get users for (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmGroupEditInfo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not return group edit information </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> return group edit information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupEditInfoCall(String organisationId, String sessionId, CMGroupEditInfo cmGroupEditInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmGroupEditInfo;

        // create path and map variables
        String localVarPath = "/api/auth/group-edit-info/{organisationId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupEditInfoValidateBeforeCall(String organisationId, String sessionId, CMGroupEditInfo cmGroupEditInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling groupEditInfo(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling groupEditInfo(Async)");
        }

        // verify the required parameter 'cmGroupEditInfo' is set
        if (cmGroupEditInfo == null) {
            throw new ApiException("Missing the required parameter 'cmGroupEditInfo' when calling groupEditInfo(Async)");
        }

        return groupEditInfoCall(organisationId, sessionId, cmGroupEditInfo, _callback);

    }

    /**
     * Get Group edit information
     * Return the information needed for the admin UX editing a group
     * @param organisationId the main organisation (its guid id) to get users for (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmGroupEditInfo  (required)
     * @return CMGroupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not return group edit information </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> return group edit information </td><td>  -  </td></tr>
     </table>
     */
    public CMGroupList groupEditInfo(String organisationId, String sessionId, CMGroupEditInfo cmGroupEditInfo) throws ApiException {
        ApiResponse<CMGroupList> localVarResp = groupEditInfoWithHttpInfo(organisationId, sessionId, cmGroupEditInfo);
        return localVarResp.getData();
    }

    /**
     * Get Group edit information
     * Return the information needed for the admin UX editing a group
     * @param organisationId the main organisation (its guid id) to get users for (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmGroupEditInfo  (required)
     * @return ApiResponse&lt;CMGroupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not return group edit information </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> return group edit information </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMGroupList> groupEditInfoWithHttpInfo(String organisationId, String sessionId, CMGroupEditInfo cmGroupEditInfo) throws ApiException {
        okhttp3.Call localVarCall = groupEditInfoValidateBeforeCall(organisationId, sessionId, cmGroupEditInfo, null);
        Type localVarReturnType = new TypeToken<CMGroupList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Group edit information (asynchronously)
     * Return the information needed for the admin UX editing a group
     * @param organisationId the main organisation (its guid id) to get users for (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmGroupEditInfo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not return group edit information </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> return group edit information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupEditInfoAsync(String organisationId, String sessionId, CMGroupEditInfo cmGroupEditInfo, final ApiCallback<CMGroupList> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupEditInfoValidateBeforeCall(organisationId, sessionId, cmGroupEditInfo, _callback);
        Type localVarReturnType = new TypeToken<CMGroupList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importUsersAndGroups
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmImportUsers  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not import users </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> import user OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importUsersAndGroupsCall(String sessionId, CMImportUsers cmImportUsers, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmImportUsers;

        // create path and map variables
        String localVarPath = "/api/auth/user/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importUsersAndGroupsValidateBeforeCall(String sessionId, CMImportUsers cmImportUsers, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling importUsersAndGroups(Async)");
        }

        // verify the required parameter 'cmImportUsers' is set
        if (cmImportUsers == null) {
            throw new ApiException("Missing the required parameter 'cmImportUsers' when calling importUsersAndGroups(Async)");
        }

        return importUsersAndGroupsCall(sessionId, cmImportUsers, apIVersion, _callback);

    }

    /**
     * 
     * Import users and groups.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmImportUsers  (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not import users </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> import user OK response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage importUsersAndGroups(String sessionId, CMImportUsers cmImportUsers, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = importUsersAndGroupsWithHttpInfo(sessionId, cmImportUsers, apIVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Import users and groups.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmImportUsers  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not import users </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> import user OK response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> importUsersAndGroupsWithHttpInfo(String sessionId, CMImportUsers cmImportUsers, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = importUsersAndGroupsValidateBeforeCall(sessionId, cmImportUsers, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Import users and groups.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmImportUsers  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not import users </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> import user OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importUsersAndGroupsAsync(String sessionId, CMImportUsers cmImportUsers, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = importUsersAndGroupsValidateBeforeCall(sessionId, cmImportUsers, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for myRoles
     * @param organisationId the organisation (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> project-type list response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get role list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call myRolesCall(String organisationId, String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/auth/myroles/{organisationId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call myRolesValidateBeforeCall(String organisationId, String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling myRoles(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling myRoles(Async)");
        }

        return myRolesCall(organisationId, sessionId, _callback);

    }

    /**
     * Get users application roles
     * Get Roles of logged in user for the logged in Organisation
     * @param organisationId the organisation (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> project-type list response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get role list. </td><td>  -  </td></tr>
     </table>
     */
    public List<String> myRoles(String organisationId, String sessionId) throws ApiException {
        ApiResponse<List<String>> localVarResp = myRolesWithHttpInfo(organisationId, sessionId);
        return localVarResp.getData();
    }

    /**
     * Get users application roles
     * Get Roles of logged in user for the logged in Organisation
     * @param organisationId the organisation (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> project-type list response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get role list. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> myRolesWithHttpInfo(String organisationId, String sessionId) throws ApiException {
        okhttp3.Call localVarCall = myRolesValidateBeforeCall(organisationId, sessionId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get users application roles (asynchronously)
     * Get Roles of logged in user for the logged in Organisation
     * @param organisationId the organisation (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> project-type list response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get role list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call myRolesAsync(String organisationId, String sessionId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = myRolesValidateBeforeCall(organisationId, sessionId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeUserFromOrganisation
     * @param userId the user&#39;s id (a guid) (required)
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not remove user from organisation </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> remove user from organisation OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeUserFromOrganisationCall(String userId, String organisationId, String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/auth/organisation/user/{userId}/{organisationId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeUserFromOrganisationValidateBeforeCall(String userId, String organisationId, String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeUserFromOrganisation(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling removeUserFromOrganisation(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling removeUserFromOrganisation(Async)");
        }

        return removeUserFromOrganisationCall(userId, organisationId, sessionId, _callback);

    }

    /**
     * Remove User from Organisation
     * Remove an existing user from an existing Organisation.
     * @param userId the user&#39;s id (a guid) (required)
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not remove user from organisation </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> remove user from organisation OK response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage removeUserFromOrganisation(String userId, String organisationId, String sessionId) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = removeUserFromOrganisationWithHttpInfo(userId, organisationId, sessionId);
        return localVarResp.getData();
    }

    /**
     * Remove User from Organisation
     * Remove an existing user from an existing Organisation.
     * @param userId the user&#39;s id (a guid) (required)
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not remove user from organisation </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> remove user from organisation OK response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> removeUserFromOrganisationWithHttpInfo(String userId, String organisationId, String sessionId) throws ApiException {
        okhttp3.Call localVarCall = removeUserFromOrganisationValidateBeforeCall(userId, organisationId, sessionId, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove User from Organisation (asynchronously)
     * Remove an existing user from an existing Organisation.
     * @param userId the user&#39;s id (a guid) (required)
     * @param organisationId the organisation&#39;s id (a guid) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not remove user from organisation </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> remove user from organisation OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeUserFromOrganisationAsync(String userId, String organisationId, String sessionId, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeUserFromOrganisationValidateBeforeCall(userId, organisationId, sessionId, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetPassword
     * @param cmUserPasswordReset  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> an reset password OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not reset-password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetPasswordCall(CMUserPasswordReset cmUserPasswordReset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmUserPasswordReset;

        // create path and map variables
        String localVarPath = "/api/auth/reset-password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetPasswordValidateBeforeCall(CMUserPasswordReset cmUserPasswordReset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cmUserPasswordReset' is set
        if (cmUserPasswordReset == null) {
            throw new ApiException("Missing the required parameter 'cmUserPasswordReset' when calling resetPassword(Async)");
        }

        return resetPasswordCall(cmUserPasswordReset, _callback);

    }

    /**
     * Perform a password-reset request.
     * Reset Password
     * @param cmUserPasswordReset  (required)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> an reset password OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not reset-password </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage resetPassword(CMUserPasswordReset cmUserPasswordReset) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = resetPasswordWithHttpInfo(cmUserPasswordReset);
        return localVarResp.getData();
    }

    /**
     * Perform a password-reset request.
     * Reset Password
     * @param cmUserPasswordReset  (required)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> an reset password OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not reset-password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> resetPasswordWithHttpInfo(CMUserPasswordReset cmUserPasswordReset) throws ApiException {
        okhttp3.Call localVarCall = resetPasswordValidateBeforeCall(cmUserPasswordReset, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Perform a password-reset request. (asynchronously)
     * Reset Password
     * @param cmUserPasswordReset  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> an reset password OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not reset-password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetPasswordAsync(CMUserPasswordReset cmUserPasswordReset, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetPasswordValidateBeforeCall(cmUserPasswordReset, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetPasswordRequest
     * @param cmPasswordResetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not start password-reset </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> an email reset OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetPasswordRequestCall(CMPasswordResetRequest cmPasswordResetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmPasswordResetRequest;

        // create path and map variables
        String localVarPath = "/api/auth/reset-password-request";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetPasswordRequestValidateBeforeCall(CMPasswordResetRequest cmPasswordResetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cmPasswordResetRequest' is set
        if (cmPasswordResetRequest == null) {
            throw new ApiException("Missing the required parameter 'cmPasswordResetRequest' when calling resetPasswordRequest(Async)");
        }

        return resetPasswordRequestCall(cmPasswordResetRequest, _callback);

    }

    /**
     * Password Reset Request
     * Start a password-reset request.
     * @param cmPasswordResetRequest  (required)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not start password-reset </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> an email reset OK response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage resetPasswordRequest(CMPasswordResetRequest cmPasswordResetRequest) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = resetPasswordRequestWithHttpInfo(cmPasswordResetRequest);
        return localVarResp.getData();
    }

    /**
     * Password Reset Request
     * Start a password-reset request.
     * @param cmPasswordResetRequest  (required)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not start password-reset </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> an email reset OK response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> resetPasswordRequestWithHttpInfo(CMPasswordResetRequest cmPasswordResetRequest) throws ApiException {
        okhttp3.Call localVarCall = resetPasswordRequestValidateBeforeCall(cmPasswordResetRequest, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Password Reset Request (asynchronously)
     * Start a password-reset request.
     * @param cmPasswordResetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not start password-reset </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> an email reset OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetPasswordRequestAsync(CMPasswordResetRequest cmPasswordResetRequest, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetPasswordRequestValidateBeforeCall(cmPasswordResetRequest, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveGroup
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmGroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not save group </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> save a group OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveGroupCall(String sessionId, CMGroup cmGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmGroup;

        // create path and map variables
        String localVarPath = "/api/auth/group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveGroupValidateBeforeCall(String sessionId, CMGroup cmGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling saveGroup(Async)");
        }

        // verify the required parameter 'cmGroup' is set
        if (cmGroup == null) {
            throw new ApiException("Missing the required parameter 'cmGroup' when calling saveGroup(Async)");
        }

        return saveGroupCall(sessionId, cmGroup, _callback);

    }

    /**
     * Save Group
     * Save (update/create) a group.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmGroup  (required)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not save group </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> save a group OK response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage saveGroup(String sessionId, CMGroup cmGroup) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = saveGroupWithHttpInfo(sessionId, cmGroup);
        return localVarResp.getData();
    }

    /**
     * Save Group
     * Save (update/create) a group.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmGroup  (required)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not save group </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> save a group OK response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> saveGroupWithHttpInfo(String sessionId, CMGroup cmGroup) throws ApiException {
        okhttp3.Call localVarCall = saveGroupValidateBeforeCall(sessionId, cmGroup, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save Group (asynchronously)
     * Save (update/create) a group.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmGroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not save group </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> save a group OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveGroupAsync(String sessionId, CMGroup cmGroup, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveGroupValidateBeforeCall(sessionId, cmGroup, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signIn
     * @param cmSignInParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a sign-in response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not sign-in username/password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signInCall(CMSignInParameters cmSignInParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmSignInParameters;

        // create path and map variables
        String localVarPath = "/api/auth/sign-in";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signInValidateBeforeCall(CMSignInParameters cmSignInParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cmSignInParameters' is set
        if (cmSignInParameters == null) {
            throw new ApiException("Missing the required parameter 'cmSignInParameters' when calling signIn(Async)");
        }

        return signInCall(cmSignInParameters, _callback);

    }

    /**
     * Sign In
     * Administrator Sign-in of an existing user using username/password.
     * @param cmSignInParameters  (required)
     * @return CMSessionVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a sign-in response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not sign-in username/password </td><td>  -  </td></tr>
     </table>
     */
    public CMSessionVersion signIn(CMSignInParameters cmSignInParameters) throws ApiException {
        ApiResponse<CMSessionVersion> localVarResp = signInWithHttpInfo(cmSignInParameters);
        return localVarResp.getData();
    }

    /**
     * Sign In
     * Administrator Sign-in of an existing user using username/password.
     * @param cmSignInParameters  (required)
     * @return ApiResponse&lt;CMSessionVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a sign-in response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not sign-in username/password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMSessionVersion> signInWithHttpInfo(CMSignInParameters cmSignInParameters) throws ApiException {
        okhttp3.Call localVarCall = signInValidateBeforeCall(cmSignInParameters, null);
        Type localVarReturnType = new TypeToken<CMSessionVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sign In (asynchronously)
     * Administrator Sign-in of an existing user using username/password.
     * @param cmSignInParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a sign-in response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not sign-in username/password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signInAsync(CMSignInParameters cmSignInParameters, final ApiCallback<CMSessionVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = signInValidateBeforeCall(cmSignInParameters, _callback);
        Type localVarReturnType = new TypeToken<CMSessionVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signInAdminUsingJWTMsal
     * @param jwt a valid JWT token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a sign-in admin response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not sign-in </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signInAdminUsingJWTMsalCall(String jwt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/auth/admin/authenticate/msal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (jwt != null) {
            localVarHeaderParams.put("jwt", localVarApiClient.parameterToString(jwt));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signInAdminUsingJWTMsalValidateBeforeCall(String jwt, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jwt' is set
        if (jwt == null) {
            throw new ApiException("Missing the required parameter 'jwt' when calling signInAdminUsingJWTMsal(Async)");
        }

        return signInAdminUsingJWTMsalCall(jwt, _callback);

    }

    /**
     * JWT MSal Sign In
     * Sign-in a user using an Msal JWT.
     * @param jwt a valid JWT token. (required)
     * @return SignInAdmin
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a sign-in admin response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not sign-in </td><td>  -  </td></tr>
     </table>
     */
    public SignInAdmin signInAdminUsingJWTMsal(String jwt) throws ApiException {
        ApiResponse<SignInAdmin> localVarResp = signInAdminUsingJWTMsalWithHttpInfo(jwt);
        return localVarResp.getData();
    }

    /**
     * JWT MSal Sign In
     * Sign-in a user using an Msal JWT.
     * @param jwt a valid JWT token. (required)
     * @return ApiResponse&lt;SignInAdmin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a sign-in admin response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not sign-in </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignInAdmin> signInAdminUsingJWTMsalWithHttpInfo(String jwt) throws ApiException {
        okhttp3.Call localVarCall = signInAdminUsingJWTMsalValidateBeforeCall(jwt, null);
        Type localVarReturnType = new TypeToken<SignInAdmin>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * JWT MSal Sign In (asynchronously)
     * Sign-in a user using an Msal JWT.
     * @param jwt a valid JWT token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a sign-in admin response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not sign-in </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signInAdminUsingJWTMsalAsync(String jwt, final ApiCallback<SignInAdmin> _callback) throws ApiException {

        okhttp3.Call localVarCall = signInAdminUsingJWTMsalValidateBeforeCall(jwt, _callback);
        Type localVarReturnType = new TypeToken<SignInAdmin>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signInAdminUsingSessionId
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not sign-in </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> a sign-in response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signInAdminUsingSessionIdCall(String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/auth/admin/authenticate/session-id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signInAdminUsingSessionIdValidateBeforeCall(String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling signInAdminUsingSessionId(Async)");
        }

        return signInAdminUsingSessionIdCall(sessionId, _callback);

    }

    /**
     * session-id Sign-in
     * Sign-in a user using an existing session-id.
     * @param sessionId a valid SimSage Session id. (required)
     * @return SignInAdmin
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not sign-in </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> a sign-in response </td><td>  -  </td></tr>
     </table>
     */
    public SignInAdmin signInAdminUsingSessionId(String sessionId) throws ApiException {
        ApiResponse<SignInAdmin> localVarResp = signInAdminUsingSessionIdWithHttpInfo(sessionId);
        return localVarResp.getData();
    }

    /**
     * session-id Sign-in
     * Sign-in a user using an existing session-id.
     * @param sessionId a valid SimSage Session id. (required)
     * @return ApiResponse&lt;SignInAdmin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not sign-in </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> a sign-in response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignInAdmin> signInAdminUsingSessionIdWithHttpInfo(String sessionId) throws ApiException {
        okhttp3.Call localVarCall = signInAdminUsingSessionIdValidateBeforeCall(sessionId, null);
        Type localVarReturnType = new TypeToken<SignInAdmin>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * session-id Sign-in (asynchronously)
     * Sign-in a user using an existing session-id.
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not sign-in </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> a sign-in response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signInAdminUsingSessionIdAsync(String sessionId, final ApiCallback<SignInAdmin> _callback) throws ApiException {

        okhttp3.Call localVarCall = signInAdminUsingSessionIdValidateBeforeCall(sessionId, _callback);
        Type localVarReturnType = new TypeToken<SignInAdmin>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signInDmsUsingJWTMsal
     * @param jwt a valid JWT token. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not sign-in </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> a sign-in dms response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signInDmsUsingJWTMsalCall(String jwt, String organisationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/auth/dms/authenticate/msal/{organisationId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (jwt != null) {
            localVarHeaderParams.put("jwt", localVarApiClient.parameterToString(jwt));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signInDmsUsingJWTMsalValidateBeforeCall(String jwt, String organisationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jwt' is set
        if (jwt == null) {
            throw new ApiException("Missing the required parameter 'jwt' when calling signInDmsUsingJWTMsal(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling signInDmsUsingJWTMsal(Async)");
        }

        return signInDmsUsingJWTMsalCall(jwt, organisationId, _callback);

    }

    /**
     * JWT MSal Sign In
     * Sign-in a user using an Msal JWT.
     * @param jwt a valid JWT token. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @return SignInDmsCmd
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not sign-in </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> a sign-in dms response </td><td>  -  </td></tr>
     </table>
     */
    public SignInDmsCmd signInDmsUsingJWTMsal(String jwt, String organisationId) throws ApiException {
        ApiResponse<SignInDmsCmd> localVarResp = signInDmsUsingJWTMsalWithHttpInfo(jwt, organisationId);
        return localVarResp.getData();
    }

    /**
     * JWT MSal Sign In
     * Sign-in a user using an Msal JWT.
     * @param jwt a valid JWT token. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @return ApiResponse&lt;SignInDmsCmd&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not sign-in </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> a sign-in dms response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignInDmsCmd> signInDmsUsingJWTMsalWithHttpInfo(String jwt, String organisationId) throws ApiException {
        okhttp3.Call localVarCall = signInDmsUsingJWTMsalValidateBeforeCall(jwt, organisationId, null);
        Type localVarReturnType = new TypeToken<SignInDmsCmd>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * JWT MSal Sign In (asynchronously)
     * Sign-in a user using an Msal JWT.
     * @param jwt a valid JWT token. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not sign-in </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> a sign-in dms response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signInDmsUsingJWTMsalAsync(String jwt, String organisationId, final ApiCallback<SignInDmsCmd> _callback) throws ApiException {

        okhttp3.Call localVarCall = signInDmsUsingJWTMsalValidateBeforeCall(jwt, organisationId, _callback);
        Type localVarReturnType = new TypeToken<SignInDmsCmd>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signInEvolveUsingJWTMsal
     * @param jwt a valid JWT token. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not sign-in </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> a sign-in Evolve response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signInEvolveUsingJWTMsalCall(String jwt, String organisationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/auth/evolve/authenticate/msal/{organisationId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (jwt != null) {
            localVarHeaderParams.put("jwt", localVarApiClient.parameterToString(jwt));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signInEvolveUsingJWTMsalValidateBeforeCall(String jwt, String organisationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jwt' is set
        if (jwt == null) {
            throw new ApiException("Missing the required parameter 'jwt' when calling signInEvolveUsingJWTMsal(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling signInEvolveUsingJWTMsal(Async)");
        }

        return signInEvolveUsingJWTMsalCall(jwt, organisationId, _callback);

    }

    /**
     * JWT MSal Sign In
     * Sign-in an Evolve user using an Msal JWT...
     * @param jwt a valid JWT token. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @return SignInDmsCmd
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not sign-in </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> a sign-in Evolve response </td><td>  -  </td></tr>
     </table>
     */
    public SignInDmsCmd signInEvolveUsingJWTMsal(String jwt, String organisationId) throws ApiException {
        ApiResponse<SignInDmsCmd> localVarResp = signInEvolveUsingJWTMsalWithHttpInfo(jwt, organisationId);
        return localVarResp.getData();
    }

    /**
     * JWT MSal Sign In
     * Sign-in an Evolve user using an Msal JWT...
     * @param jwt a valid JWT token. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @return ApiResponse&lt;SignInDmsCmd&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not sign-in </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> a sign-in Evolve response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignInDmsCmd> signInEvolveUsingJWTMsalWithHttpInfo(String jwt, String organisationId) throws ApiException {
        okhttp3.Call localVarCall = signInEvolveUsingJWTMsalValidateBeforeCall(jwt, organisationId, null);
        Type localVarReturnType = new TypeToken<SignInDmsCmd>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * JWT MSal Sign In (asynchronously)
     * Sign-in an Evolve user using an Msal JWT...
     * @param jwt a valid JWT token. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not sign-in </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> a sign-in Evolve response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signInEvolveUsingJWTMsalAsync(String jwt, String organisationId, final ApiCallback<SignInDmsCmd> _callback) throws ApiException {

        okhttp3.Call localVarCall = signInEvolveUsingJWTMsalValidateBeforeCall(jwt, organisationId, _callback);
        Type localVarReturnType = new TypeToken<SignInDmsCmd>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signInSearchUsingJWTMsal
     * @param jwt Schema valid JWT token. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not sign-in </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> a sign-in search response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signInSearchUsingJWTMsalCall(String jwt, String organisationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/auth/search/authenticate/msal/{organisationId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (jwt != null) {
            localVarHeaderParams.put("jwt", localVarApiClient.parameterToString(jwt));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signInSearchUsingJWTMsalValidateBeforeCall(String jwt, String organisationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jwt' is set
        if (jwt == null) {
            throw new ApiException("Missing the required parameter 'jwt' when calling signInSearchUsingJWTMsal(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling signInSearchUsingJWTMsal(Async)");
        }

        return signInSearchUsingJWTMsalCall(jwt, organisationId, _callback);

    }

    /**
     * JWT MSal Sign In
     * Sign-in a user using an Msal JWT.
     * @param jwt Schema valid JWT token. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @return SignInCmd
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not sign-in </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> a sign-in search response </td><td>  -  </td></tr>
     </table>
     */
    public SignInCmd signInSearchUsingJWTMsal(String jwt, String organisationId) throws ApiException {
        ApiResponse<SignInCmd> localVarResp = signInSearchUsingJWTMsalWithHttpInfo(jwt, organisationId);
        return localVarResp.getData();
    }

    /**
     * JWT MSal Sign In
     * Sign-in a user using an Msal JWT.
     * @param jwt Schema valid JWT token. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @return ApiResponse&lt;SignInCmd&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not sign-in </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> a sign-in search response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignInCmd> signInSearchUsingJWTMsalWithHttpInfo(String jwt, String organisationId) throws ApiException {
        okhttp3.Call localVarCall = signInSearchUsingJWTMsalValidateBeforeCall(jwt, organisationId, null);
        Type localVarReturnType = new TypeToken<SignInCmd>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * JWT MSal Sign In (asynchronously)
     * Sign-in a user using an Msal JWT.
     * @param jwt Schema valid JWT token. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not sign-in </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> a sign-in search response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signInSearchUsingJWTMsalAsync(String jwt, String organisationId, final ApiCallback<SignInCmd> _callback) throws ApiException {

        okhttp3.Call localVarCall = signInSearchUsingJWTMsalValidateBeforeCall(jwt, organisationId, _callback);
        Type localVarReturnType = new TypeToken<SignInCmd>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signOut
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not sign-out </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> a sign-out OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signOutCall(String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/auth/sign-out";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signOutValidateBeforeCall(String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling signOut(Async)");
        }

        return signOutCall(sessionId, apIVersion, _callback);

    }

    /**
     * Sign Out
     * Sign-out any signed-in user (owner of the session object only).
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not sign-out </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> a sign-out OK response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage signOut(String sessionId, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = signOutWithHttpInfo(sessionId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Sign Out
     * Sign-out any signed-in user (owner of the session object only).
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not sign-out </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> a sign-out OK response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> signOutWithHttpInfo(String sessionId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = signOutValidateBeforeCall(sessionId, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sign Out (asynchronously)
     * Sign-out any signed-in user (owner of the session object only).
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not sign-out </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> a sign-out OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signOutAsync(String sessionId, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = signOutValidateBeforeCall(sessionId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganisation
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmOrganisation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> save organisation response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not save organisation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganisationCall(String sessionId, CMOrganisation cmOrganisation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmOrganisation;

        // create path and map variables
        String localVarPath = "/api/auth/organisation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganisationValidateBeforeCall(String sessionId, CMOrganisation cmOrganisation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling updateOrganisation(Async)");
        }

        // verify the required parameter 'cmOrganisation' is set
        if (cmOrganisation == null) {
            throw new ApiException("Missing the required parameter 'cmOrganisation' when calling updateOrganisation(Async)");
        }

        return updateOrganisationCall(sessionId, cmOrganisation, _callback);

    }

    /**
     * Save Organisation
     * Update or Create an organisation (save an organisation).
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmOrganisation  (required)
     * @return CMOrganisation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> save organisation response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not save organisation </td><td>  -  </td></tr>
     </table>
     */
    public CMOrganisation updateOrganisation(String sessionId, CMOrganisation cmOrganisation) throws ApiException {
        ApiResponse<CMOrganisation> localVarResp = updateOrganisationWithHttpInfo(sessionId, cmOrganisation);
        return localVarResp.getData();
    }

    /**
     * Save Organisation
     * Update or Create an organisation (save an organisation).
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmOrganisation  (required)
     * @return ApiResponse&lt;CMOrganisation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> save organisation response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not save organisation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMOrganisation> updateOrganisationWithHttpInfo(String sessionId, CMOrganisation cmOrganisation) throws ApiException {
        okhttp3.Call localVarCall = updateOrganisationValidateBeforeCall(sessionId, cmOrganisation, null);
        Type localVarReturnType = new TypeToken<CMOrganisation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save Organisation (asynchronously)
     * Update or Create an organisation (save an organisation).
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmOrganisation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> save organisation response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not save organisation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganisationAsync(String sessionId, CMOrganisation cmOrganisation, final ApiCallback<CMOrganisation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganisationValidateBeforeCall(sessionId, cmOrganisation, _callback);
        Type localVarReturnType = new TypeToken<CMOrganisation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUser
     * @param organisationId the main organisation (its guid id) to update a user in. (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmUserWithExtras  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not save user </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> save user response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserCall(String organisationId, String sessionId, CMUserWithExtras cmUserWithExtras, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmUserWithExtras;

        // create path and map variables
        String localVarPath = "/api/auth/user/{organisationId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserValidateBeforeCall(String organisationId, String sessionId, CMUserWithExtras cmUserWithExtras, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling updateUser(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling updateUser(Async)");
        }

        // verify the required parameter 'cmUserWithExtras' is set
        if (cmUserWithExtras == null) {
            throw new ApiException("Missing the required parameter 'cmUserWithExtras' when calling updateUser(Async)");
        }

        return updateUserCall(organisationId, sessionId, cmUserWithExtras, _callback);

    }

    /**
     * 
     * Update or Create a user (save a user).
     * @param organisationId the main organisation (its guid id) to update a user in. (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmUserWithExtras  (required)
     * @return CMUserWithExtras
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not save user </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> save user response </td><td>  -  </td></tr>
     </table>
     */
    public CMUserWithExtras updateUser(String organisationId, String sessionId, CMUserWithExtras cmUserWithExtras) throws ApiException {
        ApiResponse<CMUserWithExtras> localVarResp = updateUserWithHttpInfo(organisationId, sessionId, cmUserWithExtras);
        return localVarResp.getData();
    }

    /**
     * 
     * Update or Create a user (save a user).
     * @param organisationId the main organisation (its guid id) to update a user in. (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmUserWithExtras  (required)
     * @return ApiResponse&lt;CMUserWithExtras&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not save user </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> save user response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMUserWithExtras> updateUserWithHttpInfo(String organisationId, String sessionId, CMUserWithExtras cmUserWithExtras) throws ApiException {
        okhttp3.Call localVarCall = updateUserValidateBeforeCall(organisationId, sessionId, cmUserWithExtras, null);
        Type localVarReturnType = new TypeToken<CMUserWithExtras>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update or Create a user (save a user).
     * @param organisationId the main organisation (its guid id) to update a user in. (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmUserWithExtras  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not save user </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> save user response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserAsync(String organisationId, String sessionId, CMUserWithExtras cmUserWithExtras, final ApiCallback<CMUserWithExtras> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserValidateBeforeCall(organisationId, sessionId, cmUserWithExtras, _callback);
        Type localVarReturnType = new TypeToken<CMUserWithExtras>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for version8
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the version response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get version </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call version8Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/auth/version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call version8ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return version8Call(_callback);

    }

    /**
     * Get Version
     * Get the version of SimSage Auth Services.
     * @return SignInCmd
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the version response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get version </td><td>  -  </td></tr>
     </table>
     */
    public SignInCmd version8() throws ApiException {
        ApiResponse<SignInCmd> localVarResp = version8WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Version
     * Get the version of SimSage Auth Services.
     * @return ApiResponse&lt;SignInCmd&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the version response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get version </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignInCmd> version8WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = version8ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SignInCmd>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Version (asynchronously)
     * Get the version of SimSage Auth Services.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the version response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get version </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call version8Async(final ApiCallback<SignInCmd> _callback) throws ApiException {

        okhttp3.Call localVarCall = version8ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SignInCmd>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
