/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.11.4
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CMDocument;
import org.openapitools.client.model.CMDocumentTypeFrequency;
import org.openapitools.client.model.CMGetHtml;
import org.openapitools.client.model.CMInventorizeParameters;
import org.openapitools.client.model.CMParquetTimeList;
import org.openapitools.client.model.CMQueryFocussedSummarization;
import org.openapitools.client.model.CMQueryFocussedSummarizationRequest;
import org.openapitools.client.model.CMSingleDocumentSummary;
import org.openapitools.client.model.CMSingleDocumentSummaryRequest;
import org.openapitools.client.model.CMVersion;
import org.openapitools.client.model.CMZipSource;
import org.openapitools.client.model.JsonMessage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DocumentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DocumentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DocumentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for document
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url the document&#39;s url, base64 encoded, a unique id identifying a document. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get document. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> document object response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentCall(String sessionId, String organisationId, String kbId, String url, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/document/document/{organisationId}/{kbId}/{url}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "url" + "}", localVarApiClient.escapeString(url.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentValidateBeforeCall(String sessionId, String organisationId, String kbId, String url, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling document(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling document(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling document(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling document(Async)");
        }

        return documentCall(sessionId, organisationId, kbId, url, _callback);

    }

    /**
     * get Document
     * return a document&#39;s details given a base64 encoded url
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url the document&#39;s url, base64 encoded, a unique id identifying a document. (required)
     * @return CMDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get document. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> document object response </td><td>  -  </td></tr>
     </table>
     */
    public CMDocument document(String sessionId, String organisationId, String kbId, String url) throws ApiException {
        ApiResponse<CMDocument> localVarResp = documentWithHttpInfo(sessionId, organisationId, kbId, url);
        return localVarResp.getData();
    }

    /**
     * get Document
     * return a document&#39;s details given a base64 encoded url
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url the document&#39;s url, base64 encoded, a unique id identifying a document. (required)
     * @return ApiResponse&lt;CMDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get document. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> document object response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMDocument> documentWithHttpInfo(String sessionId, String organisationId, String kbId, String url) throws ApiException {
        okhttp3.Call localVarCall = documentValidateBeforeCall(sessionId, organisationId, kbId, url, null);
        Type localVarReturnType = new TypeToken<CMDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get Document (asynchronously)
     * return a document&#39;s details given a base64 encoded url
     * @param sessionId a valid SimSage Session id. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url the document&#39;s url, base64 encoded, a unique id identifying a document. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get document. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> document object response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentAsync(String sessionId, String organisationId, String kbId, String url, final ApiCallback<CMDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentValidateBeforeCall(sessionId, organisationId, kbId, url, _callback);
        Type localVarReturnType = new TypeToken<CMDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getParquetFile
     * @param ott a one-time token for downloading data. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param dateTime a unix date-time specifying the exact snapshot to download (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get parquet download. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> parquet download response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getParquetFileCall(String ott, String organisationId, String kbId, Long dateTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/document/parquet/{organisationId}/{kbId}/{dateTime}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "dateTime" + "}", localVarApiClient.escapeString(dateTime.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ott != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ott", ott));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getParquetFileValidateBeforeCall(String ott, String organisationId, String kbId, Long dateTime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ott' is set
        if (ott == null) {
            throw new ApiException("Missing the required parameter 'ott' when calling getParquetFile(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getParquetFile(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling getParquetFile(Async)");
        }

        // verify the required parameter 'dateTime' is set
        if (dateTime == null) {
            throw new ApiException("Missing the required parameter 'dateTime' when calling getParquetFile(Async)");
        }

        return getParquetFileCall(ott, organisationId, kbId, dateTime, _callback);

    }

    /**
     * Download Parquet File
     * Download an inventory parquet file.
     * @param ott a one-time token for downloading data. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param dateTime a unix date-time specifying the exact snapshot to download (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get parquet download. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> parquet download response </td><td>  -  </td></tr>
     </table>
     */
    public byte[] getParquetFile(String ott, String organisationId, String kbId, Long dateTime) throws ApiException {
        ApiResponse<byte[]> localVarResp = getParquetFileWithHttpInfo(ott, organisationId, kbId, dateTime);
        return localVarResp.getData();
    }

    /**
     * Download Parquet File
     * Download an inventory parquet file.
     * @param ott a one-time token for downloading data. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param dateTime a unix date-time specifying the exact snapshot to download (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get parquet download. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> parquet download response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<byte[]> getParquetFileWithHttpInfo(String ott, String organisationId, String kbId, Long dateTime) throws ApiException {
        okhttp3.Call localVarCall = getParquetFileValidateBeforeCall(ott, organisationId, kbId, dateTime, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download Parquet File (asynchronously)
     * Download an inventory parquet file.
     * @param ott a one-time token for downloading data. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param dateTime a unix date-time specifying the exact snapshot to download (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get parquet download. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> parquet download response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getParquetFileAsync(String ott, String organisationId, String kbId, Long dateTime, final ApiCallback<byte[]> _callback) throws ApiException {

        okhttp3.Call localVarCall = getParquetFileValidateBeforeCall(ott, organisationId, kbId, dateTime, _callback);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getParquetList
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param page pagination control, the page index (required)
     * @param pageSize pagination control, the size of a page (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get parquet list. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> parquet list response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getParquetListCall(String organisationId, String kbId, Integer page, Integer pageSize, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/document/parquets/{organisationId}/{kbId}/{page}/{pageSize}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()))
            .replace("{" + "pageSize" + "}", localVarApiClient.escapeString(pageSize.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getParquetListValidateBeforeCall(String organisationId, String kbId, Integer page, Integer pageSize, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getParquetList(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling getParquetList(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getParquetList(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling getParquetList(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getParquetList(Async)");
        }

        return getParquetListCall(organisationId, kbId, page, pageSize, sessionId, apIVersion, _callback);

    }

    /**
     * Parquet available time list
     * Return a list of inventory times available for download.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param page pagination control, the page index (required)
     * @param pageSize pagination control, the size of a page (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return CMParquetTimeList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get parquet list. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> parquet list response </td><td>  -  </td></tr>
     </table>
     */
    public CMParquetTimeList getParquetList(String organisationId, String kbId, Integer page, Integer pageSize, String sessionId, String apIVersion) throws ApiException {
        ApiResponse<CMParquetTimeList> localVarResp = getParquetListWithHttpInfo(organisationId, kbId, page, pageSize, sessionId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Parquet available time list
     * Return a list of inventory times available for download.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param page pagination control, the page index (required)
     * @param pageSize pagination control, the size of a page (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMParquetTimeList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get parquet list. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> parquet list response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMParquetTimeList> getParquetListWithHttpInfo(String organisationId, String kbId, Integer page, Integer pageSize, String sessionId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = getParquetListValidateBeforeCall(organisationId, kbId, page, pageSize, sessionId, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMParquetTimeList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Parquet available time list (asynchronously)
     * Return a list of inventory times available for download.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param page pagination control, the page index (required)
     * @param pageSize pagination control, the size of a page (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get parquet list. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> parquet list response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getParquetListAsync(String organisationId, String kbId, Integer page, Integer pageSize, String sessionId, String apIVersion, final ApiCallback<CMParquetTimeList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getParquetListValidateBeforeCall(organisationId, kbId, page, pageSize, sessionId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMParquetTimeList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSpreadsheet
     * @param ott a one-time token for downloading data. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param dateTime a unix date-time specifying the exact snapshot to download (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get inventory spreadsheet. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> inventory spreadsheet response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpreadsheetCall(String ott, String organisationId, String kbId, Long dateTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/document/spreadsheet/{organisationId}/{kbId}/{dateTime}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "dateTime" + "}", localVarApiClient.escapeString(dateTime.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ott != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ott", ott));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpreadsheetValidateBeforeCall(String ott, String organisationId, String kbId, Long dateTime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ott' is set
        if (ott == null) {
            throw new ApiException("Missing the required parameter 'ott' when calling getSpreadsheet(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getSpreadsheet(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling getSpreadsheet(Async)");
        }

        // verify the required parameter 'dateTime' is set
        if (dateTime == null) {
            throw new ApiException("Missing the required parameter 'dateTime' when calling getSpreadsheet(Async)");
        }

        return getSpreadsheetCall(ott, organisationId, kbId, dateTime, _callback);

    }

    /**
     * Inventory breakdown Spreadsheet
     * Download an inventory breakdown spreadsheet for a given date-time.
     * @param ott a one-time token for downloading data. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param dateTime a unix date-time specifying the exact snapshot to download (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get inventory spreadsheet. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> inventory spreadsheet response </td><td>  -  </td></tr>
     </table>
     */
    public byte[] getSpreadsheet(String ott, String organisationId, String kbId, Long dateTime) throws ApiException {
        ApiResponse<byte[]> localVarResp = getSpreadsheetWithHttpInfo(ott, organisationId, kbId, dateTime);
        return localVarResp.getData();
    }

    /**
     * Inventory breakdown Spreadsheet
     * Download an inventory breakdown spreadsheet for a given date-time.
     * @param ott a one-time token for downloading data. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param dateTime a unix date-time specifying the exact snapshot to download (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get inventory spreadsheet. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> inventory spreadsheet response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<byte[]> getSpreadsheetWithHttpInfo(String ott, String organisationId, String kbId, Long dateTime) throws ApiException {
        okhttp3.Call localVarCall = getSpreadsheetValidateBeforeCall(ott, organisationId, kbId, dateTime, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Inventory breakdown Spreadsheet (asynchronously)
     * Download an inventory breakdown spreadsheet for a given date-time.
     * @param ott a one-time token for downloading data. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param dateTime a unix date-time specifying the exact snapshot to download (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get inventory spreadsheet. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> inventory spreadsheet response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpreadsheetAsync(String ott, String organisationId, String kbId, Long dateTime, final ApiCallback<byte[]> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpreadsheetValidateBeforeCall(ott, organisationId, kbId, dateTime, _callback);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStats1
     * @param ott a one-time token for downloading data. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param dateTime a unix date-time specifying the exact snapshot to download (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get document statistics. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> document statistic response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStats1Call(String ott, String organisationId, String kbId, Long dateTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/document/stats/frequencies/{organisationId}/{kbId}/{dateTime}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "dateTime" + "}", localVarApiClient.escapeString(dateTime.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ott != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ott", ott));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStats1ValidateBeforeCall(String ott, String organisationId, String kbId, Long dateTime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ott' is set
        if (ott == null) {
            throw new ApiException("Missing the required parameter 'ott' when calling getStats1(Async)");
        }

        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getStats1(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling getStats1(Async)");
        }

        // verify the required parameter 'dateTime' is set
        if (dateTime == null) {
            throw new ApiException("Missing the required parameter 'dateTime' when calling getStats1(Async)");
        }

        return getStats1Call(ott, organisationId, kbId, dateTime, _callback);

    }

    /**
     * Document Frequency Statistics
     * Return a document frequency statistics report - frequencies of different document types
     * @param ott a one-time token for downloading data. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param dateTime a unix date-time specifying the exact snapshot to download (required)
     * @return List&lt;CMDocumentTypeFrequency&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get document statistics. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> document statistic response </td><td>  -  </td></tr>
     </table>
     */
    public List<CMDocumentTypeFrequency> getStats1(String ott, String organisationId, String kbId, Long dateTime) throws ApiException {
        ApiResponse<List<CMDocumentTypeFrequency>> localVarResp = getStats1WithHttpInfo(ott, organisationId, kbId, dateTime);
        return localVarResp.getData();
    }

    /**
     * Document Frequency Statistics
     * Return a document frequency statistics report - frequencies of different document types
     * @param ott a one-time token for downloading data. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param dateTime a unix date-time specifying the exact snapshot to download (required)
     * @return ApiResponse&lt;List&lt;CMDocumentTypeFrequency&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get document statistics. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> document statistic response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CMDocumentTypeFrequency>> getStats1WithHttpInfo(String ott, String organisationId, String kbId, Long dateTime) throws ApiException {
        okhttp3.Call localVarCall = getStats1ValidateBeforeCall(ott, organisationId, kbId, dateTime, null);
        Type localVarReturnType = new TypeToken<List<CMDocumentTypeFrequency>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Document Frequency Statistics (asynchronously)
     * Return a document frequency statistics report - frequencies of different document types
     * @param ott a one-time token for downloading data. (required)
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param dateTime a unix date-time specifying the exact snapshot to download (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get document statistics. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> document statistic response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStats1Async(String ott, String organisationId, String kbId, Long dateTime, final ApiCallback<List<CMDocumentTypeFrequency>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStats1ValidateBeforeCall(ott, organisationId, kbId, dateTime, _callback);
        Type localVarReturnType = new TypeToken<List<CMDocumentTypeFrequency>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inventorizeDocuments
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmInventorizeParameters  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> document inventory process OK result </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not start inventory process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inventorizeDocumentsCall(String sessionId, CMInventorizeParameters cmInventorizeParameters, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmInventorizeParameters;

        // create path and map variables
        String localVarPath = "/api/document/inventorize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inventorizeDocumentsValidateBeforeCall(String sessionId, CMInventorizeParameters cmInventorizeParameters, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling inventorizeDocuments(Async)");
        }

        // verify the required parameter 'cmInventorizeParameters' is set
        if (cmInventorizeParameters == null) {
            throw new ApiException("Missing the required parameter 'cmInventorizeParameters' when calling inventorizeDocuments(Async)");
        }

        return inventorizeDocumentsCall(sessionId, cmInventorizeParameters, apIVersion, _callback);

    }

    /**
     * Document Inventory
     * Start the async inventorize process for documents of a given organisation/kb.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmInventorizeParameters  (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> document inventory process OK result </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not start inventory process. </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage inventorizeDocuments(String sessionId, CMInventorizeParameters cmInventorizeParameters, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = inventorizeDocumentsWithHttpInfo(sessionId, cmInventorizeParameters, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Document Inventory
     * Start the async inventorize process for documents of a given organisation/kb.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmInventorizeParameters  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> document inventory process OK result </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not start inventory process. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> inventorizeDocumentsWithHttpInfo(String sessionId, CMInventorizeParameters cmInventorizeParameters, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = inventorizeDocumentsValidateBeforeCall(sessionId, cmInventorizeParameters, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Document Inventory (asynchronously)
     * Start the async inventorize process for documents of a given organisation/kb.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmInventorizeParameters  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> document inventory process OK result </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not start inventory process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inventorizeDocumentsAsync(String sessionId, CMInventorizeParameters cmInventorizeParameters, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = inventorizeDocumentsValidateBeforeCall(sessionId, cmInventorizeParameters, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inventorizeIndexes
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmInventorizeParameters  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not start inventorize. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> start inventorize indexes OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inventorizeIndexesCall(String sessionId, CMInventorizeParameters cmInventorizeParameters, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmInventorizeParameters;

        // create path and map variables
        String localVarPath = "/api/document/inventorize-indexes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inventorizeIndexesValidateBeforeCall(String sessionId, CMInventorizeParameters cmInventorizeParameters, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling inventorizeIndexes(Async)");
        }

        // verify the required parameter 'cmInventorizeParameters' is set
        if (cmInventorizeParameters == null) {
            throw new ApiException("Missing the required parameter 'cmInventorizeParameters' when calling inventorizeIndexes(Async)");
        }

        return inventorizeIndexesCall(sessionId, cmInventorizeParameters, apIVersion, _callback);

    }

    /**
     * Index Inventory
     * Start the async inventorize process for the optimized-indexes of a given organisation/kb.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmInventorizeParameters  (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not start inventorize. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> start inventorize indexes OK response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage inventorizeIndexes(String sessionId, CMInventorizeParameters cmInventorizeParameters, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = inventorizeIndexesWithHttpInfo(sessionId, cmInventorizeParameters, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Index Inventory
     * Start the async inventorize process for the optimized-indexes of a given organisation/kb.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmInventorizeParameters  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not start inventorize. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> start inventorize indexes OK response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> inventorizeIndexesWithHttpInfo(String sessionId, CMInventorizeParameters cmInventorizeParameters, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = inventorizeIndexesValidateBeforeCall(sessionId, cmInventorizeParameters, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Index Inventory (asynchronously)
     * Start the async inventorize process for the optimized-indexes of a given organisation/kb.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmInventorizeParameters  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not start inventorize. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> start inventorize indexes OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inventorizeIndexesAsync(String sessionId, CMInventorizeParameters cmInventorizeParameters, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = inventorizeIndexesValidateBeforeCall(sessionId, cmInventorizeParameters, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for preview
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param clientId the client-id, a persistent id identifying the remote client making this request. (required)
     * @param sessionId the session-id, the security required for making this request. (required)
     * @param urlId the SimSage id for this url (required)
     * @param page what page to render (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> image response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get image. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call previewCall(String organisationId, String kbId, String clientId, String sessionId, Integer urlId, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/document/preview/{organisationId}/{kbId}/{clientId}/{sessionId}/{urlId}/{page}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()))
            .replace("{" + "sessionId" + "}", localVarApiClient.escapeString(sessionId.toString()))
            .replace("{" + "urlId" + "}", localVarApiClient.escapeString(urlId.toString()))
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/jpeg",
            "image/svg+xml",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call previewValidateBeforeCall(String organisationId, String kbId, String clientId, String sessionId, Integer urlId, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling preview(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling preview(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling preview(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling preview(Async)");
        }

        // verify the required parameter 'urlId' is set
        if (urlId == null) {
            throw new ApiException("Missing the required parameter 'urlId' when calling preview(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling preview(Async)");
        }

        return previewCall(organisationId, kbId, clientId, sessionId, urlId, page, _callback);

    }

    /**
     * get Preview
     * get a preview for a document if available by url
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param clientId the client-id, a persistent id identifying the remote client making this request. (required)
     * @param sessionId the session-id, the security required for making this request. (required)
     * @param urlId the SimSage id for this url (required)
     * @param page what page to render (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> image response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get image. </td><td>  -  </td></tr>
     </table>
     */
    public byte[] preview(String organisationId, String kbId, String clientId, String sessionId, Integer urlId, Integer page) throws ApiException {
        ApiResponse<byte[]> localVarResp = previewWithHttpInfo(organisationId, kbId, clientId, sessionId, urlId, page);
        return localVarResp.getData();
    }

    /**
     * get Preview
     * get a preview for a document if available by url
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param clientId the client-id, a persistent id identifying the remote client making this request. (required)
     * @param sessionId the session-id, the security required for making this request. (required)
     * @param urlId the SimSage id for this url (required)
     * @param page what page to render (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> image response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get image. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<byte[]> previewWithHttpInfo(String organisationId, String kbId, String clientId, String sessionId, Integer urlId, Integer page) throws ApiException {
        okhttp3.Call localVarCall = previewValidateBeforeCall(organisationId, kbId, clientId, sessionId, urlId, page, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get Preview (asynchronously)
     * get a preview for a document if available by url
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param clientId the client-id, a persistent id identifying the remote client making this request. (required)
     * @param sessionId the session-id, the security required for making this request. (required)
     * @param urlId the SimSage id for this url (required)
     * @param page what page to render (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> image response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get image. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call previewAsync(String organisationId, String kbId, String clientId, String sessionId, Integer urlId, Integer page, final ApiCallback<byte[]> _callback) throws ApiException {

        okhttp3.Call localVarCall = previewValidateBeforeCall(organisationId, kbId, clientId, sessionId, urlId, page, _callback);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for previewHtml
     * @param sessionId a valid session-guid id or a anonymous user-id. (required)
     * @param cmGetHtml  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get preview HTML. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> get preview HTML response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call previewHtmlCall(String sessionId, CMGetHtml cmGetHtml, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmGetHtml;

        // create path and map variables
        String localVarPath = "/api/document/preview/html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call previewHtmlValidateBeforeCall(String sessionId, CMGetHtml cmGetHtml, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling previewHtml(Async)");
        }

        // verify the required parameter 'cmGetHtml' is set
        if (cmGetHtml == null) {
            throw new ApiException("Missing the required parameter 'cmGetHtml' when calling previewHtml(Async)");
        }

        return previewHtmlCall(sessionId, cmGetHtml, _callback);

    }

    /**
     * Preview HTML
     * get a preview HTML page for a document if available by url
     * @param sessionId a valid session-guid id or a anonymous user-id. (required)
     * @param cmGetHtml  (required)
     * @return CMGetHtml
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get preview HTML. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> get preview HTML response </td><td>  -  </td></tr>
     </table>
     */
    public CMGetHtml previewHtml(String sessionId, CMGetHtml cmGetHtml) throws ApiException {
        ApiResponse<CMGetHtml> localVarResp = previewHtmlWithHttpInfo(sessionId, cmGetHtml);
        return localVarResp.getData();
    }

    /**
     * Preview HTML
     * get a preview HTML page for a document if available by url
     * @param sessionId a valid session-guid id or a anonymous user-id. (required)
     * @param cmGetHtml  (required)
     * @return ApiResponse&lt;CMGetHtml&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get preview HTML. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> get preview HTML response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMGetHtml> previewHtmlWithHttpInfo(String sessionId, CMGetHtml cmGetHtml) throws ApiException {
        okhttp3.Call localVarCall = previewHtmlValidateBeforeCall(sessionId, cmGetHtml, null);
        Type localVarReturnType = new TypeToken<CMGetHtml>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Preview HTML (asynchronously)
     * get a preview HTML page for a document if available by url
     * @param sessionId a valid session-guid id or a anonymous user-id. (required)
     * @param cmGetHtml  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get preview HTML. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> get preview HTML response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call previewHtmlAsync(String sessionId, CMGetHtml cmGetHtml, final ApiCallback<CMGetHtml> _callback) throws ApiException {

        okhttp3.Call localVarCall = previewHtmlValidateBeforeCall(sessionId, cmGetHtml, _callback);
        Type localVarReturnType = new TypeToken<CMGetHtml>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryFocussedSummarization
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmQueryFocussedSummarizationRequest  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get focussed summarization. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> query focussed summarization response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryFocussedSummarizationCall(String sessionId, CMQueryFocussedSummarizationRequest cmQueryFocussedSummarizationRequest, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmQueryFocussedSummarizationRequest;

        // create path and map variables
        String localVarPath = "/api/document/qfs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryFocussedSummarizationValidateBeforeCall(String sessionId, CMQueryFocussedSummarizationRequest cmQueryFocussedSummarizationRequest, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling queryFocussedSummarization(Async)");
        }

        // verify the required parameter 'cmQueryFocussedSummarizationRequest' is set
        if (cmQueryFocussedSummarizationRequest == null) {
            throw new ApiException("Missing the required parameter 'cmQueryFocussedSummarizationRequest' when calling queryFocussedSummarization(Async)");
        }

        return queryFocussedSummarizationCall(sessionId, cmQueryFocussedSummarizationRequest, apIVersion, _callback);

    }

    /**
     * Summarize Documents for Query
     * Summarize a set of documents given a list of urls and a query.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmQueryFocussedSummarizationRequest  (required)
     * @param apIVersion  (optional)
     * @return CMQueryFocussedSummarization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get focussed summarization. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> query focussed summarization response </td><td>  -  </td></tr>
     </table>
     */
    public CMQueryFocussedSummarization queryFocussedSummarization(String sessionId, CMQueryFocussedSummarizationRequest cmQueryFocussedSummarizationRequest, String apIVersion) throws ApiException {
        ApiResponse<CMQueryFocussedSummarization> localVarResp = queryFocussedSummarizationWithHttpInfo(sessionId, cmQueryFocussedSummarizationRequest, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Summarize Documents for Query
     * Summarize a set of documents given a list of urls and a query.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmQueryFocussedSummarizationRequest  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMQueryFocussedSummarization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get focussed summarization. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> query focussed summarization response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMQueryFocussedSummarization> queryFocussedSummarizationWithHttpInfo(String sessionId, CMQueryFocussedSummarizationRequest cmQueryFocussedSummarizationRequest, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = queryFocussedSummarizationValidateBeforeCall(sessionId, cmQueryFocussedSummarizationRequest, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMQueryFocussedSummarization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summarize Documents for Query (asynchronously)
     * Summarize a set of documents given a list of urls and a query.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmQueryFocussedSummarizationRequest  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get focussed summarization. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> query focussed summarization response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryFocussedSummarizationAsync(String sessionId, CMQueryFocussedSummarizationRequest cmQueryFocussedSummarizationRequest, String apIVersion, final ApiCallback<CMQueryFocussedSummarization> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryFocussedSummarizationValidateBeforeCall(sessionId, cmQueryFocussedSummarizationRequest, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMQueryFocussedSummarization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeDocument
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url the base-64 encoded (no-prefix) url of the document (required)
     * @param sourceId the source-id of the crawler this document belongs to (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not remove document. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> remove document OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeDocumentCall(String organisationId, String kbId, String url, Integer sourceId, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/document/document/{organisationId}/{kbId}/{url}/{sourceId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "url" + "}", localVarApiClient.escapeString(url.toString()))
            .replace("{" + "sourceId" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeDocumentValidateBeforeCall(String organisationId, String kbId, String url, Integer sourceId, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling removeDocument(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling removeDocument(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling removeDocument(Async)");
        }

        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling removeDocument(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling removeDocument(Async)");
        }

        return removeDocumentCall(organisationId, kbId, url, sourceId, sessionId, apIVersion, _callback);

    }

    /**
     * Remove Document
     * Remove/delete a document by its url.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url the base-64 encoded (no-prefix) url of the document (required)
     * @param sourceId the source-id of the crawler this document belongs to (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not remove document. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> remove document OK response </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage removeDocument(String organisationId, String kbId, String url, Integer sourceId, String sessionId, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = removeDocumentWithHttpInfo(organisationId, kbId, url, sourceId, sessionId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Remove Document
     * Remove/delete a document by its url.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url the base-64 encoded (no-prefix) url of the document (required)
     * @param sourceId the source-id of the crawler this document belongs to (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not remove document. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> remove document OK response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> removeDocumentWithHttpInfo(String organisationId, String kbId, String url, Integer sourceId, String sessionId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = removeDocumentValidateBeforeCall(organisationId, kbId, url, sourceId, sessionId, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Document (asynchronously)
     * Remove/delete a document by its url.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param url the base-64 encoded (no-prefix) url of the document (required)
     * @param sourceId the source-id of the crawler this document belongs to (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not remove document. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> remove document OK response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeDocumentAsync(String organisationId, String kbId, String url, Integer sourceId, String sessionId, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeDocumentValidateBeforeCall(organisationId, kbId, url, sourceId, sessionId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeParquetFile
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param dateTime a unix date-time specifying the exact snapshot to remove (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete parquet OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get delete parquet. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeParquetFileCall(String organisationId, String kbId, Long dateTime, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/document/parquet/{organisationId}/{kbId}/{dateTime}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "dateTime" + "}", localVarApiClient.escapeString(dateTime.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeParquetFileValidateBeforeCall(String organisationId, String kbId, Long dateTime, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling removeParquetFile(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling removeParquetFile(Async)");
        }

        // verify the required parameter 'dateTime' is set
        if (dateTime == null) {
            throw new ApiException("Missing the required parameter 'dateTime' when calling removeParquetFile(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling removeParquetFile(Async)");
        }

        return removeParquetFileCall(organisationId, kbId, dateTime, sessionId, apIVersion, _callback);

    }

    /**
     * Delete Parquet File
     * Remove an inventory breakdown spreadsheet/parquet file from the system
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param dateTime a unix date-time specifying the exact snapshot to remove (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return List&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete parquet OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get delete parquet. </td><td>  -  </td></tr>
     </table>
     */
    public List<JsonMessage> removeParquetFile(String organisationId, String kbId, Long dateTime, String sessionId, String apIVersion) throws ApiException {
        ApiResponse<List<JsonMessage>> localVarResp = removeParquetFileWithHttpInfo(organisationId, kbId, dateTime, sessionId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Delete Parquet File
     * Remove an inventory breakdown spreadsheet/parquet file from the system
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param dateTime a unix date-time specifying the exact snapshot to remove (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;List&lt;JsonMessage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete parquet OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get delete parquet. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<JsonMessage>> removeParquetFileWithHttpInfo(String organisationId, String kbId, Long dateTime, String sessionId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = removeParquetFileValidateBeforeCall(organisationId, kbId, dateTime, sessionId, apIVersion, null);
        Type localVarReturnType = new TypeToken<List<JsonMessage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Parquet File (asynchronously)
     * Remove an inventory breakdown spreadsheet/parquet file from the system
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base (its guid id) (required)
     * @param dateTime a unix date-time specifying the exact snapshot to remove (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete parquet OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get delete parquet. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeParquetFileAsync(String organisationId, String kbId, Long dateTime, String sessionId, String apIVersion, final ApiCallback<List<JsonMessage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeParquetFileValidateBeforeCall(organisationId, kbId, dateTime, sessionId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<JsonMessage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for summarizeDocument
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSingleDocumentSummaryRequest  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> summarization response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get summarization. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call summarizeDocumentCall(String sessionId, CMSingleDocumentSummaryRequest cmSingleDocumentSummaryRequest, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmSingleDocumentSummaryRequest;

        // create path and map variables
        String localVarPath = "/api/document/summarize/document";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call summarizeDocumentValidateBeforeCall(String sessionId, CMSingleDocumentSummaryRequest cmSingleDocumentSummaryRequest, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling summarizeDocument(Async)");
        }

        // verify the required parameter 'cmSingleDocumentSummaryRequest' is set
        if (cmSingleDocumentSummaryRequest == null) {
            throw new ApiException("Missing the required parameter 'cmSingleDocumentSummaryRequest' when calling summarizeDocument(Async)");
        }

        return summarizeDocumentCall(sessionId, cmSingleDocumentSummaryRequest, apIVersion, _callback);

    }

    /**
     * Summarize a document
     * Summarize a single document using an extractive summarization.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSingleDocumentSummaryRequest  (required)
     * @param apIVersion  (optional)
     * @return CMSingleDocumentSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> summarization response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get summarization. </td><td>  -  </td></tr>
     </table>
     */
    public CMSingleDocumentSummary summarizeDocument(String sessionId, CMSingleDocumentSummaryRequest cmSingleDocumentSummaryRequest, String apIVersion) throws ApiException {
        ApiResponse<CMSingleDocumentSummary> localVarResp = summarizeDocumentWithHttpInfo(sessionId, cmSingleDocumentSummaryRequest, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Summarize a document
     * Summarize a single document using an extractive summarization.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSingleDocumentSummaryRequest  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMSingleDocumentSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> summarization response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get summarization. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMSingleDocumentSummary> summarizeDocumentWithHttpInfo(String sessionId, CMSingleDocumentSummaryRequest cmSingleDocumentSummaryRequest, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = summarizeDocumentValidateBeforeCall(sessionId, cmSingleDocumentSummaryRequest, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMSingleDocumentSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summarize a document (asynchronously)
     * Summarize a single document using an extractive summarization.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmSingleDocumentSummaryRequest  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> summarization response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get summarization. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call summarizeDocumentAsync(String sessionId, CMSingleDocumentSummaryRequest cmSingleDocumentSummaryRequest, String apIVersion, final ApiCallback<CMSingleDocumentSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = summarizeDocumentValidateBeforeCall(sessionId, cmSingleDocumentSummaryRequest, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMSingleDocumentSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for version4
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get the version response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get version. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call version4Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/document/version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call version4ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return version4Call(_callback);

    }

    /**
     * Version
     * Get the version of SimSage Document Services.
     * @return CMVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get the version response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get version. </td><td>  -  </td></tr>
     </table>
     */
    public CMVersion version4() throws ApiException {
        ApiResponse<CMVersion> localVarResp = version4WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Version
     * Get the version of SimSage Document Services.
     * @return ApiResponse&lt;CMVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get the version response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get version. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMVersion> version4WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = version4ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CMVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Version (asynchronously)
     * Get the version of SimSage Document Services.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get the version response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get version. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call version4Async(final ApiCallback<CMVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = version4ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CMVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zipSource
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmZipSource  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> zip source documents OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not create source document zip. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zipSourceCall(String sessionId, CMZipSource cmZipSource, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmZipSource;

        // create path and map variables
        String localVarPath = "/api/document/zip/source";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zipSourceValidateBeforeCall(String sessionId, CMZipSource cmZipSource, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling zipSource(Async)");
        }

        // verify the required parameter 'cmZipSource' is set
        if (cmZipSource == null) {
            throw new ApiException("Missing the required parameter 'cmZipSource' when calling zipSource(Async)");
        }

        return zipSourceCall(sessionId, cmZipSource, apIVersion, _callback);

    }

    /**
     * Zip source documents
     * Zip all documents in a source on the local server.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmZipSource  (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> zip source documents OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not create source document zip. </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage zipSource(String sessionId, CMZipSource cmZipSource, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = zipSourceWithHttpInfo(sessionId, cmZipSource, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Zip source documents
     * Zip all documents in a source on the local server.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmZipSource  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> zip source documents OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not create source document zip. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> zipSourceWithHttpInfo(String sessionId, CMZipSource cmZipSource, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = zipSourceValidateBeforeCall(sessionId, cmZipSource, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Zip source documents (asynchronously)
     * Zip all documents in a source on the local server.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmZipSource  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> zip source documents OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not create source document zip. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zipSourceAsync(String sessionId, CMZipSource cmZipSource, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = zipSourceValidateBeforeCall(sessionId, cmZipSource, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
