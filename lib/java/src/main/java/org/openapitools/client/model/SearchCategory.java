/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.12.19
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NameCounterLevel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Search categories / metadata searching
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-06T16:21:46.672184776Z[Europe/London]")
public class SearchCategory {
  /**
   * Gets or Sets scType
   */
  @JsonAdapter(ScTypeEnum.Adapter.class)
  public enum ScTypeEnum {
    PLAIN("SCT_PLAIN"),
    
    TWO_LEVEL("SCT_TWO_LEVEL"),
    
    NUMBER("SCT_NUMBER");

    private String value;

    ScTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScTypeEnum fromValue(String value) {
      for (ScTypeEnum b : ScTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SC_TYPE = "scType";
  @SerializedName(SERIALIZED_NAME_SC_TYPE)
  private ScTypeEnum scType;

  public static final String SERIALIZED_NAME_CATEGORY_TYPE = "categoryType";
  @SerializedName(SERIALIZED_NAME_CATEGORY_TYPE)
  private String categoryType;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Integer order;

  public static final String SERIALIZED_NAME_SORT_DEFAULT = "sortDefault";
  @SerializedName(SERIALIZED_NAME_SORT_DEFAULT)
  private String sortDefault;

  public static final String SERIALIZED_NAME_SORT_ASC_TEXT = "sortAscText";
  @SerializedName(SERIALIZED_NAME_SORT_ASC_TEXT)
  private String sortAscText;

  public static final String SERIALIZED_NAME_SORT_DESC_TEXT = "sortDescText";
  @SerializedName(SERIALIZED_NAME_SORT_DESC_TEXT)
  private String sortDescText;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private Boolean sort;

  public static final String SERIALIZED_NAME_MIN_VALUE = "minValue";
  @SerializedName(SERIALIZED_NAME_MIN_VALUE)
  private Long minValue;

  public static final String SERIALIZED_NAME_MAX_VALUE = "maxValue";
  @SerializedName(SERIALIZED_NAME_MAX_VALUE)
  private Long maxValue;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<NameCounterLevel> items = new ArrayList<>();

  public SearchCategory() {
  }

  public SearchCategory scType(ScTypeEnum scType) {
    
    this.scType = scType;
    return this;
  }

   /**
   * Get scType
   * @return scType
  **/
  @javax.annotation.Nonnull
  public ScTypeEnum getScType() {
    return scType;
  }


  public void setScType(ScTypeEnum scType) {
    this.scType = scType;
  }


  public SearchCategory categoryType(String categoryType) {
    
    this.categoryType = categoryType;
    return this;
  }

   /**
   * Get categoryType
   * @return categoryType
  **/
  @javax.annotation.Nonnull
  public String getCategoryType() {
    return categoryType;
  }


  public void setCategoryType(String categoryType) {
    this.categoryType = categoryType;
  }


  public SearchCategory order(Integer order) {
    
    this.order = order;
    return this;
  }

   /**
   * Get order
   * @return order
  **/
  @javax.annotation.Nonnull
  public Integer getOrder() {
    return order;
  }


  public void setOrder(Integer order) {
    this.order = order;
  }


  public SearchCategory sortDefault(String sortDefault) {
    
    this.sortDefault = sortDefault;
    return this;
  }

   /**
   * Get sortDefault
   * @return sortDefault
  **/
  @javax.annotation.Nonnull
  public String getSortDefault() {
    return sortDefault;
  }


  public void setSortDefault(String sortDefault) {
    this.sortDefault = sortDefault;
  }


  public SearchCategory sortAscText(String sortAscText) {
    
    this.sortAscText = sortAscText;
    return this;
  }

   /**
   * Get sortAscText
   * @return sortAscText
  **/
  @javax.annotation.Nonnull
  public String getSortAscText() {
    return sortAscText;
  }


  public void setSortAscText(String sortAscText) {
    this.sortAscText = sortAscText;
  }


  public SearchCategory sortDescText(String sortDescText) {
    
    this.sortDescText = sortDescText;
    return this;
  }

   /**
   * Get sortDescText
   * @return sortDescText
  **/
  @javax.annotation.Nonnull
  public String getSortDescText() {
    return sortDescText;
  }


  public void setSortDescText(String sortDescText) {
    this.sortDescText = sortDescText;
  }


  public SearchCategory metadata(String metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nonnull
  public String getMetadata() {
    return metadata;
  }


  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }


  public SearchCategory displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @javax.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public SearchCategory sort(Boolean sort) {
    
    this.sort = sort;
    return this;
  }

   /**
   * Get sort
   * @return sort
  **/
  @javax.annotation.Nonnull
  public Boolean getSort() {
    return sort;
  }


  public void setSort(Boolean sort) {
    this.sort = sort;
  }


  public SearchCategory minValue(Long minValue) {
    
    this.minValue = minValue;
    return this;
  }

   /**
   * Get minValue
   * @return minValue
  **/
  @javax.annotation.Nonnull
  public Long getMinValue() {
    return minValue;
  }


  public void setMinValue(Long minValue) {
    this.minValue = minValue;
  }


  public SearchCategory maxValue(Long maxValue) {
    
    this.maxValue = maxValue;
    return this;
  }

   /**
   * Get maxValue
   * @return maxValue
  **/
  @javax.annotation.Nonnull
  public Long getMaxValue() {
    return maxValue;
  }


  public void setMaxValue(Long maxValue) {
    this.maxValue = maxValue;
  }


  public SearchCategory items(List<NameCounterLevel> items) {
    
    this.items = items;
    return this;
  }

  public SearchCategory addItemsItem(NameCounterLevel itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @javax.annotation.Nonnull
  public List<NameCounterLevel> getItems() {
    return items;
  }


  public void setItems(List<NameCounterLevel> items) {
    this.items = items;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchCategory searchCategory = (SearchCategory) o;
    return Objects.equals(this.scType, searchCategory.scType) &&
        Objects.equals(this.categoryType, searchCategory.categoryType) &&
        Objects.equals(this.order, searchCategory.order) &&
        Objects.equals(this.sortDefault, searchCategory.sortDefault) &&
        Objects.equals(this.sortAscText, searchCategory.sortAscText) &&
        Objects.equals(this.sortDescText, searchCategory.sortDescText) &&
        Objects.equals(this.metadata, searchCategory.metadata) &&
        Objects.equals(this.displayName, searchCategory.displayName) &&
        Objects.equals(this.sort, searchCategory.sort) &&
        Objects.equals(this.minValue, searchCategory.minValue) &&
        Objects.equals(this.maxValue, searchCategory.maxValue) &&
        Objects.equals(this.items, searchCategory.items);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scType, categoryType, order, sortDefault, sortAscText, sortDescText, metadata, displayName, sort, minValue, maxValue, items);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchCategory {\n");
    sb.append("    scType: ").append(toIndentedString(scType)).append("\n");
    sb.append("    categoryType: ").append(toIndentedString(categoryType)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    sortDefault: ").append(toIndentedString(sortDefault)).append("\n");
    sb.append("    sortAscText: ").append(toIndentedString(sortAscText)).append("\n");
    sb.append("    sortDescText: ").append(toIndentedString(sortDescText)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    minValue: ").append(toIndentedString(minValue)).append("\n");
    sb.append("    maxValue: ").append(toIndentedString(maxValue)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("scType");
    openapiFields.add("categoryType");
    openapiFields.add("order");
    openapiFields.add("sortDefault");
    openapiFields.add("sortAscText");
    openapiFields.add("sortDescText");
    openapiFields.add("metadata");
    openapiFields.add("displayName");
    openapiFields.add("sort");
    openapiFields.add("minValue");
    openapiFields.add("maxValue");
    openapiFields.add("items");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("scType");
    openapiRequiredFields.add("categoryType");
    openapiRequiredFields.add("order");
    openapiRequiredFields.add("sortDefault");
    openapiRequiredFields.add("sortAscText");
    openapiRequiredFields.add("sortDescText");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("sort");
    openapiRequiredFields.add("minValue");
    openapiRequiredFields.add("maxValue");
    openapiRequiredFields.add("items");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SearchCategory
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchCategory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchCategory is not found in the empty JSON string", SearchCategory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchCategory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchCategory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchCategory.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("scType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scType").toString()));
      }
      if (!jsonObj.get("categoryType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryType").toString()));
      }
      if (!jsonObj.get("sortDefault").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortDefault` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortDefault").toString()));
      }
      if (!jsonObj.get("sortAscText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortAscText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortAscText").toString()));
      }
      if (!jsonObj.get("sortDescText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortDescText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortDescText").toString()));
      }
      if (!jsonObj.get("metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
      }

      JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
      // validate the required field `items` (array)
      for (int i = 0; i < jsonArrayitems.size(); i++) {
        NameCounterLevel.validateJsonElement(jsonArrayitems.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchCategory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchCategory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchCategory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchCategory.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchCategory>() {
           @Override
           public void write(JsonWriter out, SearchCategory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchCategory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SearchCategory given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SearchCategory
  * @throws IOException if the JSON string is invalid with respect to SearchCategory
  */
  public static SearchCategory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchCategory.class);
  }

 /**
  * Convert an instance of SearchCategory to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

