// tslint:disable
/**
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.11.4
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    CMCreateGdprProject,
    CMDeleteProjectCmd,
    CMExportRedactedDocument,
    CMRedactionData,
    CMUpdateDocumentSet,
    CMVersion,
    JsonMessage,
} from '../models';

export interface AllGdprProjectsRequest {
    organisationId: string;
    kbId: string;
    page: number;
    pageSize: number;
    textFilter: string;
    statusFilter: string;
    sortColumn: string;
    sortDirection: number;
    sessionId: string;
}

export interface ApplyRedactionsRequest {
    sessionId: string;
    cMRedactionData: CMRedactionData;
}

export interface CreateGdprProjectRequest {
    sessionId: string;
    cMCreateGdprProject: CMCreateGdprProject;
}

export interface DeleteProjectRequest {
    sessionId: string;
    cMDeleteProjectCmd: CMDeleteProjectCmd;
}

export interface ExportRedactedDocRequest {
    sessionId: string;
    cMExportRedactedDocument: CMExportRedactedDocument;
}

export interface GetGdprDocumentRequest {
    organisationId: string;
    kbId: string;
    projectId: string;
    url: string;
    sessionId: string;
}

export interface GetPagedProjectDocumentsRequest {
    organisationId: string;
    kbId: string;
    projectId: string;
    page: number;
    pageSize: number;
    textFilter: string;
    typeFilter: string;
    statusFilter: string;
    sortColumn: string;
    sortDirection: number;
    sessionId: string;
}

export interface GrowthPerMonthRequest {
    organisationId: string;
    kbId: string;
    sessionId: string;
}

export interface PdfBinaryRequest {
    organisationId: string;
    kbId: string;
    url: string;
    sessionId?: string;
}

export interface SetdocumentredactionsRequest {
    sessionId: string;
    cMRedactionData: CMRedactionData;
}

export interface StorageBySourceRequest {
    organisationId: string;
    kbId: string;
    sessionId: string;
}

export interface SummaryByDocumentTypeRequest {
    organisationId: string;
    kbId: string;
    sessionId: string;
}

export interface UpdateDocumentSetRequest {
    sessionId: string;
    cMUpdateDocumentSet: CMUpdateDocumentSet;
}

/**
 * no description
 */
export class DiscoveryApi extends BaseAPI {

    /**
     */
    allGdprProjects({ organisationId, kbId, page, pageSize, textFilter, statusFilter, sortColumn, sortDirection, sessionId }: AllGdprProjectsRequest): Observable<object>
    allGdprProjects({ organisationId, kbId, page, pageSize, textFilter, statusFilter, sortColumn, sortDirection, sessionId }: AllGdprProjectsRequest, opts?: OperationOpts): Observable<AjaxResponse<object>>
    allGdprProjects({ organisationId, kbId, page, pageSize, textFilter, statusFilter, sortColumn, sortDirection, sessionId }: AllGdprProjectsRequest, opts?: OperationOpts): Observable<object | AjaxResponse<object>> {
        throwIfNullOrUndefined(organisationId, 'organisationId', 'allGdprProjects');
        throwIfNullOrUndefined(kbId, 'kbId', 'allGdprProjects');
        throwIfNullOrUndefined(page, 'page', 'allGdprProjects');
        throwIfNullOrUndefined(pageSize, 'pageSize', 'allGdprProjects');
        throwIfNullOrUndefined(textFilter, 'textFilter', 'allGdprProjects');
        throwIfNullOrUndefined(statusFilter, 'statusFilter', 'allGdprProjects');
        throwIfNullOrUndefined(sortColumn, 'sortColumn', 'allGdprProjects');
        throwIfNullOrUndefined(sortDirection, 'sortDirection', 'allGdprProjects');
        throwIfNullOrUndefined(sessionId, 'sessionId', 'allGdprProjects');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<object>({
            url: '/api/discovery/gdprproject/{organisationId}/{kbId}/{page}/{pageSize}/{textFilter}/{statusFilter}/{sortColumn}/{sortDirection}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{page}', encodeURI(page)).replace('{pageSize}', encodeURI(pageSize)).replace('{textFilter}', encodeURI(textFilter)).replace('{statusFilter}', encodeURI(statusFilter)).replace('{sortColumn}', encodeURI(sortColumn)).replace('{sortDirection}', encodeURI(sortDirection)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    applyRedactions({ sessionId, cMRedactionData }: ApplyRedactionsRequest): Observable<object>
    applyRedactions({ sessionId, cMRedactionData }: ApplyRedactionsRequest, opts?: OperationOpts): Observable<AjaxResponse<object>>
    applyRedactions({ sessionId, cMRedactionData }: ApplyRedactionsRequest, opts?: OperationOpts): Observable<object | AjaxResponse<object>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'applyRedactions');
        throwIfNullOrUndefined(cMRedactionData, 'cMRedactionData', 'applyRedactions');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<object>({
            url: '/api/discovery/applyredactions',
            method: 'POST',
            headers,
            body: cMRedactionData,
        }, opts?.responseOpts);
    };

    /**
     */
    createGdprProject({ sessionId, cMCreateGdprProject }: CreateGdprProjectRequest): Observable<object>
    createGdprProject({ sessionId, cMCreateGdprProject }: CreateGdprProjectRequest, opts?: OperationOpts): Observable<AjaxResponse<object>>
    createGdprProject({ sessionId, cMCreateGdprProject }: CreateGdprProjectRequest, opts?: OperationOpts): Observable<object | AjaxResponse<object>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'createGdprProject');
        throwIfNullOrUndefined(cMCreateGdprProject, 'cMCreateGdprProject', 'createGdprProject');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<object>({
            url: '/api/discovery/createproject',
            method: 'POST',
            headers,
            body: cMCreateGdprProject,
        }, opts?.responseOpts);
    };

    /**
     */
    deleteProject({ sessionId, cMDeleteProjectCmd }: DeleteProjectRequest): Observable<object>
    deleteProject({ sessionId, cMDeleteProjectCmd }: DeleteProjectRequest, opts?: OperationOpts): Observable<AjaxResponse<object>>
    deleteProject({ sessionId, cMDeleteProjectCmd }: DeleteProjectRequest, opts?: OperationOpts): Observable<object | AjaxResponse<object>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'deleteProject');
        throwIfNullOrUndefined(cMDeleteProjectCmd, 'cMDeleteProjectCmd', 'deleteProject');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<object>({
            url: '/api/discovery/deleteproject',
            method: 'DELETE',
            headers,
            body: cMDeleteProjectCmd,
        }, opts?.responseOpts);
    };

    /**
     */
    exportRedactedDoc({ sessionId, cMExportRedactedDocument }: ExportRedactedDocRequest): Observable<object>
    exportRedactedDoc({ sessionId, cMExportRedactedDocument }: ExportRedactedDocRequest, opts?: OperationOpts): Observable<AjaxResponse<object>>
    exportRedactedDoc({ sessionId, cMExportRedactedDocument }: ExportRedactedDocRequest, opts?: OperationOpts): Observable<object | AjaxResponse<object>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'exportRedactedDoc');
        throwIfNullOrUndefined(cMExportRedactedDocument, 'cMExportRedactedDocument', 'exportRedactedDoc');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<object>({
            url: '/api/discovery/exportredacteddoc',
            method: 'POST',
            headers,
            body: cMExportRedactedDocument,
        }, opts?.responseOpts);
    };

    /**
     */
    getGdprDocument({ organisationId, kbId, projectId, url, sessionId }: GetGdprDocumentRequest): Observable<object>
    getGdprDocument({ organisationId, kbId, projectId, url, sessionId }: GetGdprDocumentRequest, opts?: OperationOpts): Observable<AjaxResponse<object>>
    getGdprDocument({ organisationId, kbId, projectId, url, sessionId }: GetGdprDocumentRequest, opts?: OperationOpts): Observable<object | AjaxResponse<object>> {
        throwIfNullOrUndefined(organisationId, 'organisationId', 'getGdprDocument');
        throwIfNullOrUndefined(kbId, 'kbId', 'getGdprDocument');
        throwIfNullOrUndefined(projectId, 'projectId', 'getGdprDocument');
        throwIfNullOrUndefined(url, 'url', 'getGdprDocument');
        throwIfNullOrUndefined(sessionId, 'sessionId', 'getGdprDocument');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<object>({
            url: '/api/discovery/gdprdocument/{organisationId}/{kbId}/{projectId}/{url}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{projectId}', encodeURI(projectId)).replace('{url}', encodeURI(url)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    getPagedProjectDocuments({ organisationId, kbId, projectId, page, pageSize, textFilter, typeFilter, statusFilter, sortColumn, sortDirection, sessionId }: GetPagedProjectDocumentsRequest): Observable<object>
    getPagedProjectDocuments({ organisationId, kbId, projectId, page, pageSize, textFilter, typeFilter, statusFilter, sortColumn, sortDirection, sessionId }: GetPagedProjectDocumentsRequest, opts?: OperationOpts): Observable<AjaxResponse<object>>
    getPagedProjectDocuments({ organisationId, kbId, projectId, page, pageSize, textFilter, typeFilter, statusFilter, sortColumn, sortDirection, sessionId }: GetPagedProjectDocumentsRequest, opts?: OperationOpts): Observable<object | AjaxResponse<object>> {
        throwIfNullOrUndefined(organisationId, 'organisationId', 'getPagedProjectDocuments');
        throwIfNullOrUndefined(kbId, 'kbId', 'getPagedProjectDocuments');
        throwIfNullOrUndefined(projectId, 'projectId', 'getPagedProjectDocuments');
        throwIfNullOrUndefined(page, 'page', 'getPagedProjectDocuments');
        throwIfNullOrUndefined(pageSize, 'pageSize', 'getPagedProjectDocuments');
        throwIfNullOrUndefined(textFilter, 'textFilter', 'getPagedProjectDocuments');
        throwIfNullOrUndefined(typeFilter, 'typeFilter', 'getPagedProjectDocuments');
        throwIfNullOrUndefined(statusFilter, 'statusFilter', 'getPagedProjectDocuments');
        throwIfNullOrUndefined(sortColumn, 'sortColumn', 'getPagedProjectDocuments');
        throwIfNullOrUndefined(sortDirection, 'sortDirection', 'getPagedProjectDocuments');
        throwIfNullOrUndefined(sessionId, 'sessionId', 'getPagedProjectDocuments');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<object>({
            url: '/api/discovery/projectdocument/{organisationId}/{kbId}/{projectId}/{page}/{pageSize}/{textFilter}/{typeFilter}/{statusFilter}/{sortColumn}/{sortDirection}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{projectId}', encodeURI(projectId)).replace('{page}', encodeURI(page)).replace('{pageSize}', encodeURI(pageSize)).replace('{textFilter}', encodeURI(textFilter)).replace('{typeFilter}', encodeURI(typeFilter)).replace('{statusFilter}', encodeURI(statusFilter)).replace('{sortColumn}', encodeURI(sortColumn)).replace('{sortDirection}', encodeURI(sortDirection)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get the storage growth delta per month
     * growth
     */
    growthPerMonth({ organisationId, kbId, sessionId }: GrowthPerMonthRequest): Observable<object>
    growthPerMonth({ organisationId, kbId, sessionId }: GrowthPerMonthRequest, opts?: OperationOpts): Observable<AjaxResponse<object>>
    growthPerMonth({ organisationId, kbId, sessionId }: GrowthPerMonthRequest, opts?: OperationOpts): Observable<object | AjaxResponse<object>> {
        throwIfNullOrUndefined(organisationId, 'organisationId', 'growthPerMonth');
        throwIfNullOrUndefined(kbId, 'kbId', 'growthPerMonth');
        throwIfNullOrUndefined(sessionId, 'sessionId', 'growthPerMonth');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<object>({
            url: '/api/discovery/growth/{organisationId}/{kbId}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get the original for a document if available by url (latest version)
     * Binary
     */
    pdfBinary({ organisationId, kbId, url, sessionId }: PdfBinaryRequest): Observable<object>
    pdfBinary({ organisationId, kbId, url, sessionId }: PdfBinaryRequest, opts?: OperationOpts): Observable<AjaxResponse<object>>
    pdfBinary({ organisationId, kbId, url, sessionId }: PdfBinaryRequest, opts?: OperationOpts): Observable<object | AjaxResponse<object>> {
        throwIfNullOrUndefined(organisationId, 'organisationId', 'pdfBinary');
        throwIfNullOrUndefined(kbId, 'kbId', 'pdfBinary');
        throwIfNullOrUndefined(url, 'url', 'pdfBinary');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<object>({
            url: '/api/discovery/pdf/latest/{organisationId}/{kbId}/{url}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)).replace('{url}', encodeURI(url)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    setdocumentredactions({ sessionId, cMRedactionData }: SetdocumentredactionsRequest): Observable<object>
    setdocumentredactions({ sessionId, cMRedactionData }: SetdocumentredactionsRequest, opts?: OperationOpts): Observable<AjaxResponse<object>>
    setdocumentredactions({ sessionId, cMRedactionData }: SetdocumentredactionsRequest, opts?: OperationOpts): Observable<object | AjaxResponse<object>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'setdocumentredactions');
        throwIfNullOrUndefined(cMRedactionData, 'cMRedactionData', 'setdocumentredactions');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<object>({
            url: '/api/discovery/updategdprdocument',
            method: 'PUT',
            headers,
            body: cMRedactionData,
        }, opts?.responseOpts);
    };

    /**
     * Get the current amount of storage used by source
     * storage
     */
    storageBySource({ organisationId, kbId, sessionId }: StorageBySourceRequest): Observable<object>
    storageBySource({ organisationId, kbId, sessionId }: StorageBySourceRequest, opts?: OperationOpts): Observable<AjaxResponse<object>>
    storageBySource({ organisationId, kbId, sessionId }: StorageBySourceRequest, opts?: OperationOpts): Observable<object | AjaxResponse<object>> {
        throwIfNullOrUndefined(organisationId, 'organisationId', 'storageBySource');
        throwIfNullOrUndefined(kbId, 'kbId', 'storageBySource');
        throwIfNullOrUndefined(sessionId, 'sessionId', 'storageBySource');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<object>({
            url: '/api/discovery/storage/{organisationId}/{kbId}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get the current amount of storage used by source and document type
     * storage
     */
    summaryByDocumentType({ organisationId, kbId, sessionId }: SummaryByDocumentTypeRequest): Observable<object>
    summaryByDocumentType({ organisationId, kbId, sessionId }: SummaryByDocumentTypeRequest, opts?: OperationOpts): Observable<AjaxResponse<object>>
    summaryByDocumentType({ organisationId, kbId, sessionId }: SummaryByDocumentTypeRequest, opts?: OperationOpts): Observable<object | AjaxResponse<object>> {
        throwIfNullOrUndefined(organisationId, 'organisationId', 'summaryByDocumentType');
        throwIfNullOrUndefined(kbId, 'kbId', 'summaryByDocumentType');
        throwIfNullOrUndefined(sessionId, 'sessionId', 'summaryByDocumentType');

        const headers: HttpHeaders = {
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<object>({
            url: '/api/discovery/doctypesummary/{organisationId}/{kbId}'.replace('{organisationId}', encodeURI(organisationId)).replace('{kbId}', encodeURI(kbId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    updateDocumentSet({ sessionId, cMUpdateDocumentSet }: UpdateDocumentSetRequest): Observable<object>
    updateDocumentSet({ sessionId, cMUpdateDocumentSet }: UpdateDocumentSetRequest, opts?: OperationOpts): Observable<AjaxResponse<object>>
    updateDocumentSet({ sessionId, cMUpdateDocumentSet }: UpdateDocumentSetRequest, opts?: OperationOpts): Observable<object | AjaxResponse<object>> {
        throwIfNullOrUndefined(sessionId, 'sessionId', 'updateDocumentSet');
        throwIfNullOrUndefined(cMUpdateDocumentSet, 'cMUpdateDocumentSet', 'updateDocumentSet');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(sessionId != null ? { 'session-id': String(sessionId) } : undefined),
        };

        return this.request<object>({
            url: '/api/discovery/updatedocumentset',
            method: 'POST',
            headers,
            body: cMUpdateDocumentSet,
        }, opts?.responseOpts);
    };

    /**
     * Get the version of SimSage Discovery Services.
     * Version
     */
    version5(): Observable<CMVersion>
    version5(opts?: OperationOpts): Observable<AjaxResponse<CMVersion>>
    version5(opts?: OperationOpts): Observable<CMVersion | AjaxResponse<CMVersion>> {
        return this.request<CMVersion>({
            url: '/api/discovery/version',
            method: 'GET',
        }, opts?.responseOpts);
    };

}
