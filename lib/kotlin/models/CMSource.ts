// tslint:disable
/**
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.13.31
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
    CMDocumentAcl,
} from './';

/**
 * A SimSage source object used for updating and creating SimSage crawlers/connections to external silos like Sharepoint, OneDrive, Exchange, DropBox, Box, iManage, and others.
 * @export
 * @interface CMSource
 */
export interface CMSource {
    /**
     * the source-id, primary key of the source
     * @type {number}
     * @memberof CMSource
     */
    sourceId: number;
    /**
     * the main organisation (its guid id) for this source/crawler
     * @type {string}
     * @memberof CMSource
     */
    organisationId: string;
    /**
     * the knowledge-base id (its guid id) for this source/crawler
     * @type {string}
     * @memberof CMSource
     */
    kbId: string;
    /**
     * the system\'s node id of this source (what kubernetes-node to run on, starting with zero, set NODE_ID in env to manipulate this value).  Sources will only run on machines with a matching node-id
     * @type {number}
     * @memberof CMSource
     */
    nodeId: number;
    /**
     * the display-name (descriptive name) of this source.  The source\'s name must be unique within a knowledge-base.
     * @type {string}
     * @memberof CMSource
     */
    name: string;
    /**
     * the type of this source
     * @type {string}
     * @memberof CMSource
     */
    crawlerType: string;
    /**
     * the time-schedule of this crawler, when active and when not repeating in a weekly-per hour cycle in GMT time.  Empty string means not active at all
     * @type {string}
     * @memberof CMSource
     */
    schedule: string;
    /**
     * Should this crawler remove files that are no longer visible after a crawl completes without errors?  Used for sources that cannot report on file/data removal.
     * @type {boolean}
     * @memberof CMSource
     */
    deleteFiles: boolean;
    /**
     * Is the content of this crawler accessible anonymously (ie. no permissions/ACLs required).  Some crawlers like the web crawler always have this value as true.  NB.  Setting this flag to \"true\" will bypass any security on the source\'s own ACLs and make all its content available to everyone.
     * @type {boolean}
     * @memberof CMSource
     */
    allowAnonymous: boolean;
    /**
     * How much processing should SimSage give each file of this source.  As defined internally in ProcessingLevel.  level 1, CONVERT: convert all document binaries to text (creates metadata text).  level 2, PARSE: NLP process the files (creates sentences and tokens for all text).  level 3, INDEX: create inverted indexes for files (creates indexes).
     * @type {string}
     * @memberof CMSource
     */
    processingLevel: string;
    /**
     * Generate per-document image-preview information as well as full HTML previews if set to \"true\".
     * @type {boolean}
     * @memberof CMSource
     */
    enablePreview: boolean;
    /**
     * Any value greater than 0 will cause the crawler to sleep for as many milliseconds between file uploads.
     * @type {number}
     * @memberof CMSource
     */
    filesPerSecond: number;
    /**
     * A json string with specific values for this type of source.  Generated by the SimSage administrative system.
     * @type {string}
     * @memberof CMSource
     */
    specificJson: string;
    /**
     * a valid session-guid id.
     * @type {string}
     * @memberof CMSource
     */
    sessionId: string;
    /**
     * Set a content limit for the maximum number of items to contain for this source.  A value of zero (0) indicates no limits.
     * @type {number}
     * @memberof CMSource
     */
    maxItems: number;
    /**
     * Set a Question and Answer content limit for the maximum number of deep-learning Q&A items this source can contain.  A value of zero (0) indicates no limits.
     * @type {number}
     * @memberof CMSource
     */
    maxBotItems: number;
    /**
     * Does this source require custom render templates or use ordinary search-results?
     * @type {boolean}
     * @memberof CMSource
     */
    customRender: boolean;
    /**
     * The associated Edge device for this source (or empty string if not associated with one)
     * @type {string}
     * @memberof CMSource
     */
    edgeDeviceId: string;
    /**
     * the default threshold for matching deep-learning vector matching results (value should be between 0.7 and 0.99)
     * @type {number}
     * @memberof CMSource
     */
    qaMatchStrength: number;
    /**
     * the default number of search results to return from the semantic-search system
     * @type {number}
     * @memberof CMSource
     */
    numResults: number;
    /**
     * the number of fragments to return per search-result from the semantic-search system.  Affects accuracy, a value of \"1\" will only look at the first match.  Higher values look for more matches inside a single document.  Too high a value will affect performance.  Default value \"3\".
     * @type {number}
     * @memberof CMSource
     */
    numFragments: number;
    /**
     * the number of errors from the last source-run
     * @type {number}
     * @memberof CMSource
     */
    numErrors: number;
    /**
     * the number of errors allowed before failing the source and not force-removing any files at the end of a run through an external source.
     * @type {number}
     * @memberof CMSource
     */
    errorThreshold: number;
    /**
     * when the last run of this source started
     * @type {number}
     * @memberof CMSource
     */
    startTime: number;
    /**
     * when the last run of this source finished
     * @type {number}
     * @memberof CMSource
     */
    endTime: number;
    /**
     * A list for overwriting security permission for a source.  Can be empty.  Use this to override security on external systems.
     * @type {Array<CMDocumentAcl>}
     * @memberof CMSource
     */
    acls: Array<CMDocumentAcl>;
    /**
     * \"true\" if this source busy/active.
     * @type {boolean}
     * @memberof CMSource
     */
    isCrawling: boolean;
    /**
     * the number of documents seen by the crawler thus-far.
     * @type {number}
     * @memberof CMSource
     */
    numCrawledDocuments: number;
    /**
     * the number of documents converted by SimSage thus-far.
     * @type {number}
     * @memberof CMSource
     */
    numConvertedDocuments: number;
    /**
     * the number of documents parsed by SimSage thus-far.
     * @type {number}
     * @memberof CMSource
     */
    numParsedDocuments: number;
    /**
     * the number of documents indexed by SimSage thus-far.
     * @type {number}
     * @memberof CMSource
     */
    numIndexedDocuments: number;
    /**
     * the number of finished (fully processed) by SimSage thus-far.
     * @type {number}
     * @memberof CMSource
     */
    numFinishedDocuments: number;
    /**
     * the number of errored documents by SimSage thus-far.
     * @type {number}
     * @memberof CMSource
     */
    numErroredDocuments: number;
    /**
     * the total number of documents for this source in SimSage.
     * @type {number}
     * @memberof CMSource
     */
    numTotalDocuments: number;
    /**
     * the total number of documents for this source marked as errored in SimSage.
     * @type {number}
     * @memberof CMSource
     */
    numTotalErroredDocuments: number;
    /**
     * \"true\" if this source is to use the default (built-in) SimSage relationships.  All user-defined relationships and language-entities will be used regardless of the value of this flag.
     * @type {boolean}
     * @memberof CMSource
     */
    useDefaultRelationships: boolean;
    /**
     * \"true\" if this source is currently being optimized / processed by the index-optimizer.
     * @type {boolean}
     * @memberof CMSource
     */
    isBusy: boolean;
    /**
     * Do we run the index-optimizer automatically after this source finishes crawling?
     * @type {boolean}
     * @memberof CMSource
     */
    autoOptimize: boolean;
    /**
     * \"true\" if this source is to store all documents locally on the SimSage platform
     * @type {boolean}
     * @memberof CMSource
     */
    storeBinary: boolean;
    /**
     * \"true\" if this source is to store all versions of documents locally on the SimSage platform
     * @type {boolean}
     * @memberof CMSource
     */
    versioned: boolean;
    /**
     * \"true\" if this source is to write any changes direct to Cassandra, otherwise this source will collect indexes on disk first (for initial loading)
     * @type {boolean}
     * @memberof CMSource
     */
    writeToCassandra: boolean;
    /**
     * Json string defining any optional processors configured on the source
     * @type {string}
     * @memberof CMSource
     */
    processorConfig: string;
    /**
     * enable document similarity calculations.
     * @type {boolean}
     * @memberof CMSource
     */
    enableDocumentSimilarity: boolean;
    /**
     * the document similarity threshold for grouping documents, a value between 0.75 and 1.0
     * @type {number}
     * @memberof CMSource
     */
    documentSimilarityThreshold: number;
    /**
     * is this crawler to be connected as an external source using our external crawler software?
     * @type {boolean}
     * @memberof CMSource
     */
    isExternal: boolean;
    /**
     * enable OCR processing for files in this source?
     * @type {boolean}
     * @memberof CMSource
     */
    useOCR: boolean;
    /**
     * enable Speech-to-text processing for files in this source?
     * @type {boolean}
     * @memberof CMSource
     */
    useSTT: boolean;
    /**
     * A saved value indicating last crawler state
     * @type {string}
     * @memberof CMSource
     */
    deltaIndicator: string;
    /**
     * enabling sending of logs to SimSage for external crawlers
     * @type {boolean}
     * @memberof CMSource
     */
    transmitExternalLogs: boolean;
    /**
     * @type {boolean}
     * @memberof CMSource
     */
    external?: boolean;
    /**
     * @type {boolean}
     * @memberof CMSource
     */
    crawling?: boolean;
    /**
     * @type {boolean}
     * @memberof CMSource
     */
    busy?: boolean;
}
