/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.CMDeleteDocument
import org.openapitools.client.models.CMDocumentUnChanged
import org.openapitools.client.models.CMExternalCrawler
import org.openapitools.client.models.CMExternalCrawlerDeleteFolder
import org.openapitools.client.models.CMExternalCrawlerDeleteUrl
import org.openapitools.client.models.CMExternalCrawlerRenameFolder
import org.openapitools.client.models.CMExternalCrawlerSetDeltaToken
import org.openapitools.client.models.CMExternalCrawlerStart
import org.openapitools.client.models.CMExternalCrawlerStop
import org.openapitools.client.models.CMFailedSourceDocument
import org.openapitools.client.models.CMSource
import org.openapitools.client.models.CMStartCrawler
import org.openapitools.client.models.CMUploadDocument
import org.openapitools.client.models.CMUploadImage
import org.openapitools.client.models.CMVersion
import org.openapitools.client.models.JsonMessage

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class CrawlerApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://demo.simsage.ai")
        }
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionCrawlerDeleteFolder(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Delete document folder
     * An external crawler removes a document folder.
     * @param cmExternalCrawlerDeleteFolder 
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun crawlerDeleteFolder(cmExternalCrawlerDeleteFolder: CMExternalCrawlerDeleteFolder, apIVersion: ApIVersionCrawlerDeleteFolder? = null) : JsonMessage {
        val localVarResponse = crawlerDeleteFolderWithHttpInfo(cmExternalCrawlerDeleteFolder = cmExternalCrawlerDeleteFolder, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete document folder
     * An external crawler removes a document folder.
     * @param cmExternalCrawlerDeleteFolder 
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun crawlerDeleteFolderWithHttpInfo(cmExternalCrawlerDeleteFolder: CMExternalCrawlerDeleteFolder, apIVersion: ApIVersionCrawlerDeleteFolder?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = crawlerDeleteFolderRequestConfig(cmExternalCrawlerDeleteFolder = cmExternalCrawlerDeleteFolder, apIVersion = apIVersion)

        return request<CMExternalCrawlerDeleteFolder, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation crawlerDeleteFolder
     *
     * @param cmExternalCrawlerDeleteFolder 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun crawlerDeleteFolderRequestConfig(cmExternalCrawlerDeleteFolder: CMExternalCrawlerDeleteFolder, apIVersion: ApIVersionCrawlerDeleteFolder?) : RequestConfig<CMExternalCrawlerDeleteFolder> {
        val localVariableBody = cmExternalCrawlerDeleteFolder
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/crawler/external/crawler/delete-folder",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionCrawlerDeleteUrl(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Delete document
     * An external crawler removes a document.
     * @param cmExternalCrawlerDeleteUrl 
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun crawlerDeleteUrl(cmExternalCrawlerDeleteUrl: CMExternalCrawlerDeleteUrl, apIVersion: ApIVersionCrawlerDeleteUrl? = null) : JsonMessage {
        val localVarResponse = crawlerDeleteUrlWithHttpInfo(cmExternalCrawlerDeleteUrl = cmExternalCrawlerDeleteUrl, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete document
     * An external crawler removes a document.
     * @param cmExternalCrawlerDeleteUrl 
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun crawlerDeleteUrlWithHttpInfo(cmExternalCrawlerDeleteUrl: CMExternalCrawlerDeleteUrl, apIVersion: ApIVersionCrawlerDeleteUrl?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = crawlerDeleteUrlRequestConfig(cmExternalCrawlerDeleteUrl = cmExternalCrawlerDeleteUrl, apIVersion = apIVersion)

        return request<CMExternalCrawlerDeleteUrl, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation crawlerDeleteUrl
     *
     * @param cmExternalCrawlerDeleteUrl 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun crawlerDeleteUrlRequestConfig(cmExternalCrawlerDeleteUrl: CMExternalCrawlerDeleteUrl, apIVersion: ApIVersionCrawlerDeleteUrl?) : RequestConfig<CMExternalCrawlerDeleteUrl> {
        val localVariableBody = cmExternalCrawlerDeleteUrl
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/crawler/external/crawler/delete-url",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionCrawlerExternalDocumentDelete(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Remove an External Document
     * Remove an external crawler document from SimSage.
     * @param cmDeleteDocument 
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun crawlerExternalDocumentDelete(cmDeleteDocument: CMDeleteDocument, apIVersion: ApIVersionCrawlerExternalDocumentDelete? = null) : JsonMessage {
        val localVarResponse = crawlerExternalDocumentDeleteWithHttpInfo(cmDeleteDocument = cmDeleteDocument, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Remove an External Document
     * Remove an external crawler document from SimSage.
     * @param cmDeleteDocument 
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun crawlerExternalDocumentDeleteWithHttpInfo(cmDeleteDocument: CMDeleteDocument, apIVersion: ApIVersionCrawlerExternalDocumentDelete?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = crawlerExternalDocumentDeleteRequestConfig(cmDeleteDocument = cmDeleteDocument, apIVersion = apIVersion)

        return request<CMDeleteDocument, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation crawlerExternalDocumentDelete
     *
     * @param cmDeleteDocument 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun crawlerExternalDocumentDeleteRequestConfig(cmDeleteDocument: CMDeleteDocument, apIVersion: ApIVersionCrawlerExternalDocumentDelete?) : RequestConfig<CMDeleteDocument> {
        val localVariableBody = cmDeleteDocument
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/crawler/external/document/delete",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionCrawlerExternalDocumentFailed(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Upload External Document
     * An external crawler document wants to upload a document to SimSage.
     * @param cmFailedSourceDocument 
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun crawlerExternalDocumentFailed(cmFailedSourceDocument: CMFailedSourceDocument, apIVersion: ApIVersionCrawlerExternalDocumentFailed? = null) : JsonMessage {
        val localVarResponse = crawlerExternalDocumentFailedWithHttpInfo(cmFailedSourceDocument = cmFailedSourceDocument, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Upload External Document
     * An external crawler document wants to upload a document to SimSage.
     * @param cmFailedSourceDocument 
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun crawlerExternalDocumentFailedWithHttpInfo(cmFailedSourceDocument: CMFailedSourceDocument, apIVersion: ApIVersionCrawlerExternalDocumentFailed?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = crawlerExternalDocumentFailedRequestConfig(cmFailedSourceDocument = cmFailedSourceDocument, apIVersion = apIVersion)

        return request<CMFailedSourceDocument, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation crawlerExternalDocumentFailed
     *
     * @param cmFailedSourceDocument 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun crawlerExternalDocumentFailedRequestConfig(cmFailedSourceDocument: CMFailedSourceDocument, apIVersion: ApIVersionCrawlerExternalDocumentFailed?) : RequestConfig<CMFailedSourceDocument> {
        val localVariableBody = cmFailedSourceDocument
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/crawler/external/document/recordfailure",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionCrawlerExternalDocumentUnChanged(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Mark External Document Unchanged
     * An external crawler document marks a document as not having changed.
     * @param cmDocumentUnChanged 
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun crawlerExternalDocumentUnChanged(cmDocumentUnChanged: CMDocumentUnChanged, apIVersion: ApIVersionCrawlerExternalDocumentUnChanged? = null) : JsonMessage {
        val localVarResponse = crawlerExternalDocumentUnChangedWithHttpInfo(cmDocumentUnChanged = cmDocumentUnChanged, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Mark External Document Unchanged
     * An external crawler document marks a document as not having changed.
     * @param cmDocumentUnChanged 
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun crawlerExternalDocumentUnChangedWithHttpInfo(cmDocumentUnChanged: CMDocumentUnChanged, apIVersion: ApIVersionCrawlerExternalDocumentUnChanged?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = crawlerExternalDocumentUnChangedRequestConfig(cmDocumentUnChanged = cmDocumentUnChanged, apIVersion = apIVersion)

        return request<CMDocumentUnChanged, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation crawlerExternalDocumentUnChanged
     *
     * @param cmDocumentUnChanged 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun crawlerExternalDocumentUnChangedRequestConfig(cmDocumentUnChanged: CMDocumentUnChanged, apIVersion: ApIVersionCrawlerExternalDocumentUnChanged?) : RequestConfig<CMDocumentUnChanged> {
        val localVariableBody = cmDocumentUnChanged
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/crawler/external/document/un-changed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionCrawlerExternalDocumentUpload(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Upload External Document
     * An external crawler document wants to upload a document to SimSage.
     * @param cmUploadDocument 
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun crawlerExternalDocumentUpload(cmUploadDocument: CMUploadDocument, apIVersion: ApIVersionCrawlerExternalDocumentUpload? = null) : JsonMessage {
        val localVarResponse = crawlerExternalDocumentUploadWithHttpInfo(cmUploadDocument = cmUploadDocument, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Upload External Document
     * An external crawler document wants to upload a document to SimSage.
     * @param cmUploadDocument 
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun crawlerExternalDocumentUploadWithHttpInfo(cmUploadDocument: CMUploadDocument, apIVersion: ApIVersionCrawlerExternalDocumentUpload?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = crawlerExternalDocumentUploadRequestConfig(cmUploadDocument = cmUploadDocument, apIVersion = apIVersion)

        return request<CMUploadDocument, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation crawlerExternalDocumentUpload
     *
     * @param cmUploadDocument 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun crawlerExternalDocumentUploadRequestConfig(cmUploadDocument: CMUploadDocument, apIVersion: ApIVersionCrawlerExternalDocumentUpload?) : RequestConfig<CMUploadDocument> {
        val localVariableBody = cmUploadDocument
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/crawler/external/document/upload",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionCrawlerExternalImageUpload(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Upload External Image
     * An external crawler uploads an image for a document.
     * @param cmUploadImage 
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun crawlerExternalImageUpload(cmUploadImage: CMUploadImage, apIVersion: ApIVersionCrawlerExternalImageUpload? = null) : JsonMessage {
        val localVarResponse = crawlerExternalImageUploadWithHttpInfo(cmUploadImage = cmUploadImage, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Upload External Image
     * An external crawler uploads an image for a document.
     * @param cmUploadImage 
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun crawlerExternalImageUploadWithHttpInfo(cmUploadImage: CMUploadImage, apIVersion: ApIVersionCrawlerExternalImageUpload?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = crawlerExternalImageUploadRequestConfig(cmUploadImage = cmUploadImage, apIVersion = apIVersion)

        return request<CMUploadImage, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation crawlerExternalImageUpload
     *
     * @param cmUploadImage 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun crawlerExternalImageUploadRequestConfig(cmUploadImage: CMUploadImage, apIVersion: ApIVersionCrawlerExternalImageUpload?) : RequestConfig<CMUploadImage> {
        val localVariableBody = cmUploadImage
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/crawler/external/document/upload/image",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionCrawlerRenameFolder(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Rename document folder
     * An external crawler renames a document folder.
     * @param cmExternalCrawlerRenameFolder 
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun crawlerRenameFolder(cmExternalCrawlerRenameFolder: CMExternalCrawlerRenameFolder, apIVersion: ApIVersionCrawlerRenameFolder? = null) : JsonMessage {
        val localVarResponse = crawlerRenameFolderWithHttpInfo(cmExternalCrawlerRenameFolder = cmExternalCrawlerRenameFolder, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Rename document folder
     * An external crawler renames a document folder.
     * @param cmExternalCrawlerRenameFolder 
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun crawlerRenameFolderWithHttpInfo(cmExternalCrawlerRenameFolder: CMExternalCrawlerRenameFolder, apIVersion: ApIVersionCrawlerRenameFolder?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = crawlerRenameFolderRequestConfig(cmExternalCrawlerRenameFolder = cmExternalCrawlerRenameFolder, apIVersion = apIVersion)

        return request<CMExternalCrawlerRenameFolder, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation crawlerRenameFolder
     *
     * @param cmExternalCrawlerRenameFolder 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun crawlerRenameFolderRequestConfig(cmExternalCrawlerRenameFolder: CMExternalCrawlerRenameFolder, apIVersion: ApIVersionCrawlerRenameFolder?) : RequestConfig<CMExternalCrawlerRenameFolder> {
        val localVariableBody = cmExternalCrawlerRenameFolder
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/crawler/external/crawler/rename-folder",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionCrawlerUpdateDeltaToken(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Update delta token
     * An external crawler updates a delta-token.
     * @param cmExternalCrawlerSetDeltaToken 
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun crawlerUpdateDeltaToken(cmExternalCrawlerSetDeltaToken: CMExternalCrawlerSetDeltaToken, apIVersion: ApIVersionCrawlerUpdateDeltaToken? = null) : JsonMessage {
        val localVarResponse = crawlerUpdateDeltaTokenWithHttpInfo(cmExternalCrawlerSetDeltaToken = cmExternalCrawlerSetDeltaToken, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update delta token
     * An external crawler updates a delta-token.
     * @param cmExternalCrawlerSetDeltaToken 
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun crawlerUpdateDeltaTokenWithHttpInfo(cmExternalCrawlerSetDeltaToken: CMExternalCrawlerSetDeltaToken, apIVersion: ApIVersionCrawlerUpdateDeltaToken?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = crawlerUpdateDeltaTokenRequestConfig(cmExternalCrawlerSetDeltaToken = cmExternalCrawlerSetDeltaToken, apIVersion = apIVersion)

        return request<CMExternalCrawlerSetDeltaToken, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation crawlerUpdateDeltaToken
     *
     * @param cmExternalCrawlerSetDeltaToken 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun crawlerUpdateDeltaTokenRequestConfig(cmExternalCrawlerSetDeltaToken: CMExternalCrawlerSetDeltaToken, apIVersion: ApIVersionCrawlerUpdateDeltaToken?) : RequestConfig<CMExternalCrawlerSetDeltaToken> {
        val localVariableBody = cmExternalCrawlerSetDeltaToken
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/crawler/external/crawler/delta-token",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionDelete(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Delete source
     * Remove a source and all its content by its source-id.
     * @param organisationId the organisation&#39;s id (a guid)
     * @param kbId the knowledge-base&#39;s id (a guid)
     * @param sessionId a valid SimSage Session id.
     * @param sourceId the crawler&#39;s id
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun delete(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String, sourceId: kotlin.Int, apIVersion: ApIVersionDelete? = null) : JsonMessage {
        val localVarResponse = deleteWithHttpInfo(organisationId = organisationId, kbId = kbId, sessionId = sessionId, sourceId = sourceId, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete source
     * Remove a source and all its content by its source-id.
     * @param organisationId the organisation&#39;s id (a guid)
     * @param kbId the knowledge-base&#39;s id (a guid)
     * @param sessionId a valid SimSage Session id.
     * @param sourceId the crawler&#39;s id
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String, sourceId: kotlin.Int, apIVersion: ApIVersionDelete?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = deleteRequestConfig(organisationId = organisationId, kbId = kbId, sessionId = sessionId, sourceId = sourceId, apIVersion = apIVersion)

        return request<Unit, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation delete
     *
     * @param organisationId the organisation&#39;s id (a guid)
     * @param kbId the knowledge-base&#39;s id (a guid)
     * @param sessionId a valid SimSage Session id.
     * @param sourceId the crawler&#39;s id
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun deleteRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String, sourceId: kotlin.Int, apIVersion: ApIVersionDelete?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/crawler/crawler/{organisationId}/{kbId}/{sourceId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"sourceId"+"}", encodeURIComponent(sourceId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionDeleteDocuments(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Delete source&#39;s documents
     * Remove a source&#39;s documents and stop the crawler if it&#39;s running.  Return an updated sources.
     * @param organisationId the organisation&#39;s id (a guid)
     * @param kbId the knowledge-base&#39;s id (a guid)
     * @param sessionId a valid SimSage Session id.
     * @param sourceId the crawler&#39;s id
     * @param apIVersion  (optional)
     * @return CMSource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteDocuments(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String, sourceId: kotlin.Int, apIVersion: ApIVersionDeleteDocuments? = null) : CMSource {
        val localVarResponse = deleteDocumentsWithHttpInfo(organisationId = organisationId, kbId = kbId, sessionId = sessionId, sourceId = sourceId, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMSource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete source&#39;s documents
     * Remove a source&#39;s documents and stop the crawler if it&#39;s running.  Return an updated sources.
     * @param organisationId the organisation&#39;s id (a guid)
     * @param kbId the knowledge-base&#39;s id (a guid)
     * @param sessionId a valid SimSage Session id.
     * @param sourceId the crawler&#39;s id
     * @param apIVersion  (optional)
     * @return ApiResponse<CMSource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteDocumentsWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String, sourceId: kotlin.Int, apIVersion: ApIVersionDeleteDocuments?) : ApiResponse<CMSource?> {
        val localVariableConfig = deleteDocumentsRequestConfig(organisationId = organisationId, kbId = kbId, sessionId = sessionId, sourceId = sourceId, apIVersion = apIVersion)

        return request<Unit, CMSource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteDocuments
     *
     * @param organisationId the organisation&#39;s id (a guid)
     * @param kbId the knowledge-base&#39;s id (a guid)
     * @param sessionId a valid SimSage Session id.
     * @param sourceId the crawler&#39;s id
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun deleteDocumentsRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String, sourceId: kotlin.Int, apIVersion: ApIVersionDeleteDocuments?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/crawler/crawler/document/{organisationId}/{kbId}/{sourceId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"sourceId"+"}", encodeURIComponent(sourceId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionEncryptedCommunications(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Secure Communication
     * Secure Communications end-point.  Send encrypted messages from external crawlers and edge devices to this end-point.
     * @param seed a random integer used for the communications
     * @param body 
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun encryptedCommunications(seed: kotlin.Int, body: kotlin.String, apIVersion: ApIVersionEncryptedCommunications? = null) : JsonMessage {
        val localVarResponse = encryptedCommunicationsWithHttpInfo(seed = seed, body = body, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Secure Communication
     * Secure Communications end-point.  Send encrypted messages from external crawlers and edge devices to this end-point.
     * @param seed a random integer used for the communications
     * @param body 
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun encryptedCommunicationsWithHttpInfo(seed: kotlin.Int, body: kotlin.String, apIVersion: ApIVersionEncryptedCommunications?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = encryptedCommunicationsRequestConfig(seed = seed, body = body, apIVersion = apIVersion)

        return request<kotlin.String, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation encryptedCommunications
     *
     * @param seed a random integer used for the communications
     * @param body 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun encryptedCommunicationsRequestConfig(seed: kotlin.Int, body: kotlin.String, apIVersion: ApIVersionEncryptedCommunications?) : RequestConfig<kotlin.String> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/crawler/external/secure/{seed}".replace("{"+"seed"+"}", encodeURIComponent(seed.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionExternalCrawler(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * External Crawler
     * Retrieve a crawler data-structure by orgId/kbId/sid and sourceId.  Used by External Crawlers to do their job.
     * @param cmExternalCrawler 
     * @param apIVersion  (optional)
     * @return CMSource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun externalCrawler(cmExternalCrawler: CMExternalCrawler, apIVersion: ApIVersionExternalCrawler? = null) : CMSource {
        val localVarResponse = externalCrawlerWithHttpInfo(cmExternalCrawler = cmExternalCrawler, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMSource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * External Crawler
     * Retrieve a crawler data-structure by orgId/kbId/sid and sourceId.  Used by External Crawlers to do their job.
     * @param cmExternalCrawler 
     * @param apIVersion  (optional)
     * @return ApiResponse<CMSource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun externalCrawlerWithHttpInfo(cmExternalCrawler: CMExternalCrawler, apIVersion: ApIVersionExternalCrawler?) : ApiResponse<CMSource?> {
        val localVariableConfig = externalCrawlerRequestConfig(cmExternalCrawler = cmExternalCrawler, apIVersion = apIVersion)

        return request<CMExternalCrawler, CMSource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation externalCrawler
     *
     * @param cmExternalCrawler 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun externalCrawlerRequestConfig(cmExternalCrawler: CMExternalCrawler, apIVersion: ApIVersionExternalCrawler?) : RequestConfig<CMExternalCrawler> {
        val localVariableBody = cmExternalCrawler
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/crawler/external/crawler",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionExternalCrawlerFinished(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Stop External Crawler
     * An external crawler notifies SimSage it has finished its job, its run through the data once.
     * @param cmExternalCrawlerStop 
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun externalCrawlerFinished(cmExternalCrawlerStop: CMExternalCrawlerStop, apIVersion: ApIVersionExternalCrawlerFinished? = null) : JsonMessage {
        val localVarResponse = externalCrawlerFinishedWithHttpInfo(cmExternalCrawlerStop = cmExternalCrawlerStop, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Stop External Crawler
     * An external crawler notifies SimSage it has finished its job, its run through the data once.
     * @param cmExternalCrawlerStop 
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun externalCrawlerFinishedWithHttpInfo(cmExternalCrawlerStop: CMExternalCrawlerStop, apIVersion: ApIVersionExternalCrawlerFinished?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = externalCrawlerFinishedRequestConfig(cmExternalCrawlerStop = cmExternalCrawlerStop, apIVersion = apIVersion)

        return request<CMExternalCrawlerStop, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation externalCrawlerFinished
     *
     * @param cmExternalCrawlerStop 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun externalCrawlerFinishedRequestConfig(cmExternalCrawlerStop: CMExternalCrawlerStop, apIVersion: ApIVersionExternalCrawlerFinished?) : RequestConfig<CMExternalCrawlerStop> {
        val localVariableBody = cmExternalCrawlerStop
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/crawler/external/crawler/finish",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionExternalCrawlerStart(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Start External Crawler
     * An external crawler notifies SimSage is it starting a new run.
     * @param cmExternalCrawlerStart 
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun externalCrawlerStart(cmExternalCrawlerStart: CMExternalCrawlerStart, apIVersion: ApIVersionExternalCrawlerStart? = null) : JsonMessage {
        val localVarResponse = externalCrawlerStartWithHttpInfo(cmExternalCrawlerStart = cmExternalCrawlerStart, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Start External Crawler
     * An external crawler notifies SimSage is it starting a new run.
     * @param cmExternalCrawlerStart 
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun externalCrawlerStartWithHttpInfo(cmExternalCrawlerStart: CMExternalCrawlerStart, apIVersion: ApIVersionExternalCrawlerStart?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = externalCrawlerStartRequestConfig(cmExternalCrawlerStart = cmExternalCrawlerStart, apIVersion = apIVersion)

        return request<CMExternalCrawlerStart, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation externalCrawlerStart
     *
     * @param cmExternalCrawlerStart 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun externalCrawlerStartRequestConfig(cmExternalCrawlerStart: CMExternalCrawlerStart, apIVersion: ApIVersionExternalCrawlerStart?) : RequestConfig<CMExternalCrawlerStart> {
        val localVariableBody = cmExternalCrawlerStart
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/crawler/external/crawler/start",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionGetCrawler(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Get source
     * Return the data-structure for a source by id.
     * @param organisationId the organisation&#39;s id (a guid)
     * @param kbId the knowledge-base&#39;s id (a guid)
     * @param sourceId the crawler&#39;s id
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return CMSource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCrawler(organisationId: kotlin.String, kbId: kotlin.String, sourceId: kotlin.Int, sessionId: kotlin.String, apIVersion: ApIVersionGetCrawler? = null) : CMSource {
        val localVarResponse = getCrawlerWithHttpInfo(organisationId = organisationId, kbId = kbId, sourceId = sourceId, sessionId = sessionId, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMSource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get source
     * Return the data-structure for a source by id.
     * @param organisationId the organisation&#39;s id (a guid)
     * @param kbId the knowledge-base&#39;s id (a guid)
     * @param sourceId the crawler&#39;s id
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return ApiResponse<CMSource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCrawlerWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, sourceId: kotlin.Int, sessionId: kotlin.String, apIVersion: ApIVersionGetCrawler?) : ApiResponse<CMSource?> {
        val localVariableConfig = getCrawlerRequestConfig(organisationId = organisationId, kbId = kbId, sourceId = sourceId, sessionId = sessionId, apIVersion = apIVersion)

        return request<Unit, CMSource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCrawler
     *
     * @param organisationId the organisation&#39;s id (a guid)
     * @param kbId the knowledge-base&#39;s id (a guid)
     * @param sourceId the crawler&#39;s id
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun getCrawlerRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, sourceId: kotlin.Int, sessionId: kotlin.String, apIVersion: ApIVersionGetCrawler?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/crawler/crawler/{organisationId}/{kbId}/{sourceId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"sourceId"+"}", encodeURIComponent(sourceId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionGetFailedDocuments(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Get source List
     * Get a list of failed documents for a source.
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation&#39;s id (a guid)
     * @param kbId the knowledge-base&#39;s id (a guid)
     * @param sourceId the source  id (a number)
     * @param page the page number for the list
     * @param pageSize the page size for the list
     * @param apIVersion  (optional)
     * @return kotlin.collections.List<CMSource>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getFailedDocuments(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, sourceId: kotlin.String, page: kotlin.Int, pageSize: kotlin.Int, apIVersion: ApIVersionGetFailedDocuments? = null) : kotlin.collections.List<CMSource> {
        val localVarResponse = getFailedDocumentsWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, sourceId = sourceId, page = page, pageSize = pageSize, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CMSource>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get source List
     * Get a list of failed documents for a source.
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation&#39;s id (a guid)
     * @param kbId the knowledge-base&#39;s id (a guid)
     * @param sourceId the source  id (a number)
     * @param page the page number for the list
     * @param pageSize the page size for the list
     * @param apIVersion  (optional)
     * @return ApiResponse<kotlin.collections.List<CMSource>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getFailedDocumentsWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, sourceId: kotlin.String, page: kotlin.Int, pageSize: kotlin.Int, apIVersion: ApIVersionGetFailedDocuments?) : ApiResponse<kotlin.collections.List<CMSource>?> {
        val localVariableConfig = getFailedDocumentsRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, sourceId = sourceId, page = page, pageSize = pageSize, apIVersion = apIVersion)

        return request<Unit, kotlin.collections.List<CMSource>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getFailedDocuments
     *
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation&#39;s id (a guid)
     * @param kbId the knowledge-base&#39;s id (a guid)
     * @param sourceId the source  id (a number)
     * @param page the page number for the list
     * @param pageSize the page size for the list
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun getFailedDocumentsRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, sourceId: kotlin.String, page: kotlin.Int, pageSize: kotlin.Int, apIVersion: ApIVersionGetFailedDocuments?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/crawler/faileddocs/{organisationId}/{kbId}/{sourceId}/{page}/{pageSize}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"sourceId"+"}", encodeURIComponent(sourceId.toString())).replace("{"+"page"+"}", encodeURIComponent(page.toString())).replace("{"+"pageSize"+"}", encodeURIComponent(pageSize.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionGetSourceList(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Get source List
     * Get a list of sources for a given organisation / knowledge base.
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation&#39;s id (a guid)
     * @param kbId the knowledge-base&#39;s id (a guid)
     * @param apIVersion  (optional)
     * @return kotlin.collections.List<CMSource>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSourceList(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, apIVersion: ApIVersionGetSourceList? = null) : kotlin.collections.List<CMSource> {
        val localVarResponse = getSourceListWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CMSource>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get source List
     * Get a list of sources for a given organisation / knowledge base.
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation&#39;s id (a guid)
     * @param kbId the knowledge-base&#39;s id (a guid)
     * @param apIVersion  (optional)
     * @return ApiResponse<kotlin.collections.List<CMSource>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSourceListWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, apIVersion: ApIVersionGetSourceList?) : ApiResponse<kotlin.collections.List<CMSource>?> {
        val localVariableConfig = getSourceListRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, apIVersion = apIVersion)

        return request<Unit, kotlin.collections.List<CMSource>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSourceList
     *
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation&#39;s id (a guid)
     * @param kbId the knowledge-base&#39;s id (a guid)
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun getSourceListRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, apIVersion: ApIVersionGetSourceList?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/crawler/crawlers/{organisationId}/{kbId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * OIDC code receiver
     * used for OIDC systems to receive codes
     * @param oidcKey the Dropbox OIDC key
     * @param allRequestParams 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun oidcCode(oidcKey: kotlin.String, allRequestParams: kotlin.collections.Map<kotlin.String, kotlin.String>) : Unit {
        val localVarResponse = oidcCodeWithHttpInfo(oidcKey = oidcKey, allRequestParams = allRequestParams)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * OIDC code receiver
     * used for OIDC systems to receive codes
     * @param oidcKey the Dropbox OIDC key
     * @param allRequestParams 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun oidcCodeWithHttpInfo(oidcKey: kotlin.String, allRequestParams: kotlin.collections.Map<kotlin.String, kotlin.String>) : ApiResponse<Unit?> {
        val localVariableConfig = oidcCodeRequestConfig(oidcKey = oidcKey, allRequestParams = allRequestParams)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation oidcCode
     *
     * @param oidcKey the Dropbox OIDC key
     * @param allRequestParams 
     * @return RequestConfig
     */
    fun oidcCodeRequestConfig(oidcKey: kotlin.String, allRequestParams: kotlin.collections.Map<kotlin.String, kotlin.String>) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("allRequestParams", toMultiValue(allRequestParams.toList(), ""))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/crawler/dropbox-oidc-code/{oidcKey}".replace("{"+"oidcKey"+"}", encodeURIComponent(oidcKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionProcessAllFiles(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Process all files of crawler/source
     * Start and force processing all files for a crawler/source
     * @param sessionId a valid SimSage Session id.
     * @param cmStartCrawler 
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun processAllFiles(sessionId: kotlin.String, cmStartCrawler: CMStartCrawler, apIVersion: ApIVersionProcessAllFiles? = null) : JsonMessage {
        val localVarResponse = processAllFilesWithHttpInfo(sessionId = sessionId, cmStartCrawler = cmStartCrawler, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Process all files of crawler/source
     * Start and force processing all files for a crawler/source
     * @param sessionId a valid SimSage Session id.
     * @param cmStartCrawler 
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun processAllFilesWithHttpInfo(sessionId: kotlin.String, cmStartCrawler: CMStartCrawler, apIVersion: ApIVersionProcessAllFiles?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = processAllFilesRequestConfig(sessionId = sessionId, cmStartCrawler = cmStartCrawler, apIVersion = apIVersion)

        return request<CMStartCrawler, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation processAllFiles
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmStartCrawler 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun processAllFilesRequestConfig(sessionId: kotlin.String, cmStartCrawler: CMStartCrawler, apIVersion: ApIVersionProcessAllFiles?) : RequestConfig<CMStartCrawler> {
        val localVariableBody = cmStartCrawler
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/crawler/process-all-files",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionResetSourceDelta(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Reset Source delta-token
     * reset a SimSage source&#39;s delta token.
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation&#39;s id (a guid)
     * @param kbId the knowledge-base&#39;s id (a guid)
     * @param sourceId the crawler&#39;s id
     * @param apIVersion  (optional)
     * @return CMSource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun resetSourceDelta(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, sourceId: kotlin.Int, apIVersion: ApIVersionResetSourceDelta? = null) : CMSource {
        val localVarResponse = resetSourceDeltaWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, sourceId = sourceId, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMSource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Reset Source delta-token
     * reset a SimSage source&#39;s delta token.
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation&#39;s id (a guid)
     * @param kbId the knowledge-base&#39;s id (a guid)
     * @param sourceId the crawler&#39;s id
     * @param apIVersion  (optional)
     * @return ApiResponse<CMSource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun resetSourceDeltaWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, sourceId: kotlin.Int, apIVersion: ApIVersionResetSourceDelta?) : ApiResponse<CMSource?> {
        val localVariableConfig = resetSourceDeltaRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, sourceId = sourceId, apIVersion = apIVersion)

        return request<Unit, CMSource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation resetSourceDelta
     *
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation&#39;s id (a guid)
     * @param kbId the knowledge-base&#39;s id (a guid)
     * @param sourceId the crawler&#39;s id
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun resetSourceDeltaRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, sourceId: kotlin.Int, apIVersion: ApIVersionResetSourceDelta?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/crawler/crawler/reset-delta/{organisationId}/{kbId}/{sourceId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"sourceId"+"}", encodeURIComponent(sourceId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionStartCrawler(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Start crawler
     * Start a crawler by source-id if after it has stopped.
     * @param sessionId a valid SimSage Session id.
     * @param cmStartCrawler 
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun startCrawler(sessionId: kotlin.String, cmStartCrawler: CMStartCrawler, apIVersion: ApIVersionStartCrawler? = null) : JsonMessage {
        val localVarResponse = startCrawlerWithHttpInfo(sessionId = sessionId, cmStartCrawler = cmStartCrawler, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Start crawler
     * Start a crawler by source-id if after it has stopped.
     * @param sessionId a valid SimSage Session id.
     * @param cmStartCrawler 
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun startCrawlerWithHttpInfo(sessionId: kotlin.String, cmStartCrawler: CMStartCrawler, apIVersion: ApIVersionStartCrawler?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = startCrawlerRequestConfig(sessionId = sessionId, cmStartCrawler = cmStartCrawler, apIVersion = apIVersion)

        return request<CMStartCrawler, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation startCrawler
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmStartCrawler 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun startCrawlerRequestConfig(sessionId: kotlin.String, cmStartCrawler: CMStartCrawler, apIVersion: ApIVersionStartCrawler?) : RequestConfig<CMStartCrawler> {
        val localVariableBody = cmStartCrawler
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/crawler/start",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionTestCrawler(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Test Crawler
     * Some crawlers (platform crawlers, not external crawlers) can check if the given information is enough for it to operator.
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation&#39;s id (a guid)
     * @param kbId the knowledge-base&#39;s id (a guid)
     * @param sourceId the crawler&#39;s id
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun testCrawler(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, sourceId: kotlin.Int, apIVersion: ApIVersionTestCrawler? = null) : JsonMessage {
        val localVarResponse = testCrawlerWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, sourceId = sourceId, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Test Crawler
     * Some crawlers (platform crawlers, not external crawlers) can check if the given information is enough for it to operator.
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation&#39;s id (a guid)
     * @param kbId the knowledge-base&#39;s id (a guid)
     * @param sourceId the crawler&#39;s id
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun testCrawlerWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, sourceId: kotlin.Int, apIVersion: ApIVersionTestCrawler?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = testCrawlerRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, sourceId = sourceId, apIVersion = apIVersion)

        return request<Unit, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation testCrawler
     *
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation&#39;s id (a guid)
     * @param kbId the knowledge-base&#39;s id (a guid)
     * @param sourceId the crawler&#39;s id
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun testCrawlerRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, sourceId: kotlin.Int, apIVersion: ApIVersionTestCrawler?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/crawler/crawler/test/{organisationId}/{kbId}/{sourceId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"sourceId"+"}", encodeURIComponent(sourceId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionUpdateCrawler(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Update Source
     * Save (create or update) a SimSage source.
     * @param sessionId a valid SimSage Session id.
     * @param cmSource 
     * @param apIVersion  (optional)
     * @return CMSource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateCrawler(sessionId: kotlin.String, cmSource: CMSource, apIVersion: ApIVersionUpdateCrawler? = null) : CMSource {
        val localVarResponse = updateCrawlerWithHttpInfo(sessionId = sessionId, cmSource = cmSource, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMSource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update Source
     * Save (create or update) a SimSage source.
     * @param sessionId a valid SimSage Session id.
     * @param cmSource 
     * @param apIVersion  (optional)
     * @return ApiResponse<CMSource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateCrawlerWithHttpInfo(sessionId: kotlin.String, cmSource: CMSource, apIVersion: ApIVersionUpdateCrawler?) : ApiResponse<CMSource?> {
        val localVariableConfig = updateCrawlerRequestConfig(sessionId = sessionId, cmSource = cmSource, apIVersion = apIVersion)

        return request<CMSource, CMSource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateCrawler
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmSource 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun updateCrawlerRequestConfig(sessionId: kotlin.String, cmSource: CMSource, apIVersion: ApIVersionUpdateCrawler?) : RequestConfig<CMSource> {
        val localVariableBody = cmSource
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/crawler/crawler",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Version
     * Get the version of SimSage crawler-services.
     * @return CMVersion
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun version6() : CMVersion {
        val localVarResponse = version6WithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMVersion
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Version
     * Get the version of SimSage crawler-services.
     * @return ApiResponse<CMVersion?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun version6WithHttpInfo() : ApiResponse<CMVersion?> {
        val localVariableConfig = version6RequestConfig()

        return request<Unit, CMVersion>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation version6
     *
     * @return RequestConfig
     */
    fun version6RequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/crawler/version",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
