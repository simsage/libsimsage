/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.CMDocument
import org.openapitools.client.models.CMDocumentTypeFrequency
import org.openapitools.client.models.CMGetHtml
import org.openapitools.client.models.CMInventorizeParameters
import org.openapitools.client.models.CMParquetTimeList
import org.openapitools.client.models.CMQueryFocussedSummarization
import org.openapitools.client.models.CMQueryFocussedSummarizationRequest
import org.openapitools.client.models.CMSingleDocumentSummary
import org.openapitools.client.models.CMSingleDocumentSummaryRequest
import org.openapitools.client.models.CMVersion
import org.openapitools.client.models.CMZipSource
import org.openapitools.client.models.JsonMessage

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class DocumentApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://test.simsage.ai")
        }
    }

    /**
     * get Document
     * return a document&#39;s details given a base64 encoded url
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param url the document&#39;s url, base64 encoded, a unique id identifying a document.
     * @return CMDocument
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun document(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, url: kotlin.String) : CMDocument {
        val localVarResponse = documentWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, url = url)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * get Document
     * return a document&#39;s details given a base64 encoded url
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param url the document&#39;s url, base64 encoded, a unique id identifying a document.
     * @return ApiResponse<CMDocument?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun documentWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, url: kotlin.String) : ApiResponse<CMDocument?> {
        val localVariableConfig = documentRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, url = url)

        return request<Unit, CMDocument>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation document
     *
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param url the document&#39;s url, base64 encoded, a unique id identifying a document.
     * @return RequestConfig
     */
    fun documentRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, url: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/document/document/{organisationId}/{kbId}/{url}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"url"+"}", encodeURIComponent(url.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Download Parquet File
     * Download an inventory parquet file.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param dateTime a unix date-time specifying the exact snapshot to download
     * @param ott a one-time token for downloading data.
     * @return kotlin.ByteArray
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getParquetFile(organisationId: kotlin.String, kbId: kotlin.String, dateTime: kotlin.Long, ott: kotlin.String) : kotlin.ByteArray {
        val localVarResponse = getParquetFileWithHttpInfo(organisationId = organisationId, kbId = kbId, dateTime = dateTime, ott = ott)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.ByteArray
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Download Parquet File
     * Download an inventory parquet file.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param dateTime a unix date-time specifying the exact snapshot to download
     * @param ott a one-time token for downloading data.
     * @return ApiResponse<kotlin.ByteArray?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getParquetFileWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, dateTime: kotlin.Long, ott: kotlin.String) : ApiResponse<kotlin.ByteArray?> {
        val localVariableConfig = getParquetFileRequestConfig(organisationId = organisationId, kbId = kbId, dateTime = dateTime, ott = ott)

        return request<Unit, kotlin.ByteArray>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getParquetFile
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param dateTime a unix date-time specifying the exact snapshot to download
     * @param ott a one-time token for downloading data.
     * @return RequestConfig
     */
    fun getParquetFileRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, dateTime: kotlin.Long, ott: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("ott", listOf(ott.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/octet-stream, application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/document/parquet/{organisationId}/{kbId}/{dateTime}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"dateTime"+"}", encodeURIComponent(dateTime.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionGetParquetList(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Parquet available time list
     * Return a list of inventory times available for download.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param page pagination control, the page index
     * @param pageSize pagination control, the size of a page
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return CMParquetTimeList
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getParquetList(organisationId: kotlin.String, kbId: kotlin.String, page: kotlin.Int, pageSize: kotlin.Int, sessionId: kotlin.String, apIVersion: ApIVersionGetParquetList? = null) : CMParquetTimeList {
        val localVarResponse = getParquetListWithHttpInfo(organisationId = organisationId, kbId = kbId, page = page, pageSize = pageSize, sessionId = sessionId, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMParquetTimeList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Parquet available time list
     * Return a list of inventory times available for download.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param page pagination control, the page index
     * @param pageSize pagination control, the size of a page
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return ApiResponse<CMParquetTimeList?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getParquetListWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, page: kotlin.Int, pageSize: kotlin.Int, sessionId: kotlin.String, apIVersion: ApIVersionGetParquetList?) : ApiResponse<CMParquetTimeList?> {
        val localVariableConfig = getParquetListRequestConfig(organisationId = organisationId, kbId = kbId, page = page, pageSize = pageSize, sessionId = sessionId, apIVersion = apIVersion)

        return request<Unit, CMParquetTimeList>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getParquetList
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param page pagination control, the page index
     * @param pageSize pagination control, the size of a page
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun getParquetListRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, page: kotlin.Int, pageSize: kotlin.Int, sessionId: kotlin.String, apIVersion: ApIVersionGetParquetList?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/document/parquets/{organisationId}/{kbId}/{page}/{pageSize}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"page"+"}", encodeURIComponent(page.toString())).replace("{"+"pageSize"+"}", encodeURIComponent(pageSize.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Inventory breakdown Spreadsheet
     * Download an inventory breakdown spreadsheet for a given date-time.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param dateTime a unix date-time specifying the exact snapshot to download
     * @param ott a one-time token for downloading data.
     * @return kotlin.ByteArray
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSpreadsheet(organisationId: kotlin.String, kbId: kotlin.String, dateTime: kotlin.Long, ott: kotlin.String) : kotlin.ByteArray {
        val localVarResponse = getSpreadsheetWithHttpInfo(organisationId = organisationId, kbId = kbId, dateTime = dateTime, ott = ott)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.ByteArray
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Inventory breakdown Spreadsheet
     * Download an inventory breakdown spreadsheet for a given date-time.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param dateTime a unix date-time specifying the exact snapshot to download
     * @param ott a one-time token for downloading data.
     * @return ApiResponse<kotlin.ByteArray?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSpreadsheetWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, dateTime: kotlin.Long, ott: kotlin.String) : ApiResponse<kotlin.ByteArray?> {
        val localVariableConfig = getSpreadsheetRequestConfig(organisationId = organisationId, kbId = kbId, dateTime = dateTime, ott = ott)

        return request<Unit, kotlin.ByteArray>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSpreadsheet
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param dateTime a unix date-time specifying the exact snapshot to download
     * @param ott a one-time token for downloading data.
     * @return RequestConfig
     */
    fun getSpreadsheetRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, dateTime: kotlin.Long, ott: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("ott", listOf(ott.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/document/spreadsheet/{organisationId}/{kbId}/{dateTime}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"dateTime"+"}", encodeURIComponent(dateTime.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Document Frequency Statistics
     * Return a document frequency statistics report - frequencies of different document types
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param dateTime a unix date-time specifying the exact snapshot to download
     * @param ott a one-time token for downloading data.
     * @return kotlin.collections.List<CMDocumentTypeFrequency>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getStats1(organisationId: kotlin.String, kbId: kotlin.String, dateTime: kotlin.Long, ott: kotlin.String) : kotlin.collections.List<CMDocumentTypeFrequency> {
        val localVarResponse = getStats1WithHttpInfo(organisationId = organisationId, kbId = kbId, dateTime = dateTime, ott = ott)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CMDocumentTypeFrequency>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Document Frequency Statistics
     * Return a document frequency statistics report - frequencies of different document types
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param dateTime a unix date-time specifying the exact snapshot to download
     * @param ott a one-time token for downloading data.
     * @return ApiResponse<kotlin.collections.List<CMDocumentTypeFrequency>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getStats1WithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, dateTime: kotlin.Long, ott: kotlin.String) : ApiResponse<kotlin.collections.List<CMDocumentTypeFrequency>?> {
        val localVariableConfig = getStats1RequestConfig(organisationId = organisationId, kbId = kbId, dateTime = dateTime, ott = ott)

        return request<Unit, kotlin.collections.List<CMDocumentTypeFrequency>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getStats1
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param dateTime a unix date-time specifying the exact snapshot to download
     * @param ott a one-time token for downloading data.
     * @return RequestConfig
     */
    fun getStats1RequestConfig(organisationId: kotlin.String, kbId: kotlin.String, dateTime: kotlin.Long, ott: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("ott", listOf(ott.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/document/stats/frequencies/{organisationId}/{kbId}/{dateTime}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"dateTime"+"}", encodeURIComponent(dateTime.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionInventorizeDocuments(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Document Inventory
     * Start the async inventorize process for documents of a given organisation/kb.
     * @param sessionId a valid SimSage Session id.
     * @param cmInventorizeParameters 
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun inventorizeDocuments(sessionId: kotlin.String, cmInventorizeParameters: CMInventorizeParameters, apIVersion: ApIVersionInventorizeDocuments? = null) : JsonMessage {
        val localVarResponse = inventorizeDocumentsWithHttpInfo(sessionId = sessionId, cmInventorizeParameters = cmInventorizeParameters, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Document Inventory
     * Start the async inventorize process for documents of a given organisation/kb.
     * @param sessionId a valid SimSage Session id.
     * @param cmInventorizeParameters 
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun inventorizeDocumentsWithHttpInfo(sessionId: kotlin.String, cmInventorizeParameters: CMInventorizeParameters, apIVersion: ApIVersionInventorizeDocuments?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = inventorizeDocumentsRequestConfig(sessionId = sessionId, cmInventorizeParameters = cmInventorizeParameters, apIVersion = apIVersion)

        return request<CMInventorizeParameters, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation inventorizeDocuments
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmInventorizeParameters 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun inventorizeDocumentsRequestConfig(sessionId: kotlin.String, cmInventorizeParameters: CMInventorizeParameters, apIVersion: ApIVersionInventorizeDocuments?) : RequestConfig<CMInventorizeParameters> {
        val localVariableBody = cmInventorizeParameters
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/document/inventorize",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionInventorizeIndexes(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Index Inventory
     * Start the async inventorize process for the optimized-indexes of a given organisation/kb.
     * @param sessionId a valid SimSage Session id.
     * @param cmInventorizeParameters 
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun inventorizeIndexes(sessionId: kotlin.String, cmInventorizeParameters: CMInventorizeParameters, apIVersion: ApIVersionInventorizeIndexes? = null) : JsonMessage {
        val localVarResponse = inventorizeIndexesWithHttpInfo(sessionId = sessionId, cmInventorizeParameters = cmInventorizeParameters, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Index Inventory
     * Start the async inventorize process for the optimized-indexes of a given organisation/kb.
     * @param sessionId a valid SimSage Session id.
     * @param cmInventorizeParameters 
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun inventorizeIndexesWithHttpInfo(sessionId: kotlin.String, cmInventorizeParameters: CMInventorizeParameters, apIVersion: ApIVersionInventorizeIndexes?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = inventorizeIndexesRequestConfig(sessionId = sessionId, cmInventorizeParameters = cmInventorizeParameters, apIVersion = apIVersion)

        return request<CMInventorizeParameters, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation inventorizeIndexes
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmInventorizeParameters 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun inventorizeIndexesRequestConfig(sessionId: kotlin.String, cmInventorizeParameters: CMInventorizeParameters, apIVersion: ApIVersionInventorizeIndexes?) : RequestConfig<CMInventorizeParameters> {
        val localVariableBody = cmInventorizeParameters
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/document/inventorize-indexes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * get Preview
     * get a preview for a document if available by url
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param clientId the client-id, a persistent id identifying the remote client making this request.
     * @param sessionId the session-id, the security required for making this request.
     * @param urlId the SimSage id for this url
     * @param page what page to render
     * @return kotlin.ByteArray
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun preview(organisationId: kotlin.String, kbId: kotlin.String, clientId: kotlin.String, sessionId: kotlin.String, urlId: kotlin.Int, page: kotlin.Int) : kotlin.ByteArray {
        val localVarResponse = previewWithHttpInfo(organisationId = organisationId, kbId = kbId, clientId = clientId, sessionId = sessionId, urlId = urlId, page = page)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.ByteArray
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * get Preview
     * get a preview for a document if available by url
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param clientId the client-id, a persistent id identifying the remote client making this request.
     * @param sessionId the session-id, the security required for making this request.
     * @param urlId the SimSage id for this url
     * @param page what page to render
     * @return ApiResponse<kotlin.ByteArray?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun previewWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, clientId: kotlin.String, sessionId: kotlin.String, urlId: kotlin.Int, page: kotlin.Int) : ApiResponse<kotlin.ByteArray?> {
        val localVariableConfig = previewRequestConfig(organisationId = organisationId, kbId = kbId, clientId = clientId, sessionId = sessionId, urlId = urlId, page = page)

        return request<Unit, kotlin.ByteArray>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation preview
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param clientId the client-id, a persistent id identifying the remote client making this request.
     * @param sessionId the session-id, the security required for making this request.
     * @param urlId the SimSage id for this url
     * @param page what page to render
     * @return RequestConfig
     */
    fun previewRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, clientId: kotlin.String, sessionId: kotlin.String, urlId: kotlin.Int, page: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/document/preview/{organisationId}/{kbId}/{clientId}/{sessionId}/{urlId}/{page}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"clientId"+"}", encodeURIComponent(clientId.toString())).replace("{"+"sessionId"+"}", encodeURIComponent(sessionId.toString())).replace("{"+"urlId"+"}", encodeURIComponent(urlId.toString())).replace("{"+"page"+"}", encodeURIComponent(page.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Preview HTML
     * get a preview HTML page for a document if available by url
     * @param sessionId a valid session-guid id or a anonymous user-id.
     * @param cmGetHtml 
     * @return CMGetHtml
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun previewHtml(sessionId: kotlin.String, cmGetHtml: CMGetHtml) : CMGetHtml {
        val localVarResponse = previewHtmlWithHttpInfo(sessionId = sessionId, cmGetHtml = cmGetHtml)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMGetHtml
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Preview HTML
     * get a preview HTML page for a document if available by url
     * @param sessionId a valid session-guid id or a anonymous user-id.
     * @param cmGetHtml 
     * @return ApiResponse<CMGetHtml?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun previewHtmlWithHttpInfo(sessionId: kotlin.String, cmGetHtml: CMGetHtml) : ApiResponse<CMGetHtml?> {
        val localVariableConfig = previewHtmlRequestConfig(sessionId = sessionId, cmGetHtml = cmGetHtml)

        return request<CMGetHtml, CMGetHtml>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation previewHtml
     *
     * @param sessionId a valid session-guid id or a anonymous user-id.
     * @param cmGetHtml 
     * @return RequestConfig
     */
    fun previewHtmlRequestConfig(sessionId: kotlin.String, cmGetHtml: CMGetHtml) : RequestConfig<CMGetHtml> {
        val localVariableBody = cmGetHtml
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/document/preview/html",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionQueryFocussedSummarization(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Summarize Documents for Query
     * Summarize a set of documents given a list of urls and a query.
     * @param sessionId a valid SimSage Session id.
     * @param cmQueryFocussedSummarizationRequest 
     * @param apIVersion  (optional)
     * @return CMQueryFocussedSummarization
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun queryFocussedSummarization(sessionId: kotlin.String, cmQueryFocussedSummarizationRequest: CMQueryFocussedSummarizationRequest, apIVersion: ApIVersionQueryFocussedSummarization? = null) : CMQueryFocussedSummarization {
        val localVarResponse = queryFocussedSummarizationWithHttpInfo(sessionId = sessionId, cmQueryFocussedSummarizationRequest = cmQueryFocussedSummarizationRequest, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMQueryFocussedSummarization
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Summarize Documents for Query
     * Summarize a set of documents given a list of urls and a query.
     * @param sessionId a valid SimSage Session id.
     * @param cmQueryFocussedSummarizationRequest 
     * @param apIVersion  (optional)
     * @return ApiResponse<CMQueryFocussedSummarization?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun queryFocussedSummarizationWithHttpInfo(sessionId: kotlin.String, cmQueryFocussedSummarizationRequest: CMQueryFocussedSummarizationRequest, apIVersion: ApIVersionQueryFocussedSummarization?) : ApiResponse<CMQueryFocussedSummarization?> {
        val localVariableConfig = queryFocussedSummarizationRequestConfig(sessionId = sessionId, cmQueryFocussedSummarizationRequest = cmQueryFocussedSummarizationRequest, apIVersion = apIVersion)

        return request<CMQueryFocussedSummarizationRequest, CMQueryFocussedSummarization>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation queryFocussedSummarization
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmQueryFocussedSummarizationRequest 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun queryFocussedSummarizationRequestConfig(sessionId: kotlin.String, cmQueryFocussedSummarizationRequest: CMQueryFocussedSummarizationRequest, apIVersion: ApIVersionQueryFocussedSummarization?) : RequestConfig<CMQueryFocussedSummarizationRequest> {
        val localVariableBody = cmQueryFocussedSummarizationRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/document/qfs",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionRemoveDocument(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Remove Document
     * Remove/delete a document by its url.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param url the base-64 encoded (no-prefix) url of the document
     * @param sourceId the source-id of the crawler this document belongs to
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun removeDocument(organisationId: kotlin.String, kbId: kotlin.String, url: kotlin.String, sourceId: kotlin.Int, sessionId: kotlin.String, apIVersion: ApIVersionRemoveDocument? = null) : JsonMessage {
        val localVarResponse = removeDocumentWithHttpInfo(organisationId = organisationId, kbId = kbId, url = url, sourceId = sourceId, sessionId = sessionId, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Remove Document
     * Remove/delete a document by its url.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param url the base-64 encoded (no-prefix) url of the document
     * @param sourceId the source-id of the crawler this document belongs to
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun removeDocumentWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, url: kotlin.String, sourceId: kotlin.Int, sessionId: kotlin.String, apIVersion: ApIVersionRemoveDocument?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = removeDocumentRequestConfig(organisationId = organisationId, kbId = kbId, url = url, sourceId = sourceId, sessionId = sessionId, apIVersion = apIVersion)

        return request<Unit, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation removeDocument
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param url the base-64 encoded (no-prefix) url of the document
     * @param sourceId the source-id of the crawler this document belongs to
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun removeDocumentRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, url: kotlin.String, sourceId: kotlin.Int, sessionId: kotlin.String, apIVersion: ApIVersionRemoveDocument?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/document/document/{organisationId}/{kbId}/{url}/{sourceId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"url"+"}", encodeURIComponent(url.toString())).replace("{"+"sourceId"+"}", encodeURIComponent(sourceId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionRemoveParquetFile(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Delete Parquet File
     * Remove an inventory breakdown spreadsheet/parquet file from the system
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param dateTime a unix date-time specifying the exact snapshot to remove
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return kotlin.collections.List<JsonMessage>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun removeParquetFile(organisationId: kotlin.String, kbId: kotlin.String, dateTime: kotlin.Long, sessionId: kotlin.String, apIVersion: ApIVersionRemoveParquetFile? = null) : kotlin.collections.List<JsonMessage> {
        val localVarResponse = removeParquetFileWithHttpInfo(organisationId = organisationId, kbId = kbId, dateTime = dateTime, sessionId = sessionId, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<JsonMessage>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete Parquet File
     * Remove an inventory breakdown spreadsheet/parquet file from the system
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param dateTime a unix date-time specifying the exact snapshot to remove
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return ApiResponse<kotlin.collections.List<JsonMessage>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun removeParquetFileWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, dateTime: kotlin.Long, sessionId: kotlin.String, apIVersion: ApIVersionRemoveParquetFile?) : ApiResponse<kotlin.collections.List<JsonMessage>?> {
        val localVariableConfig = removeParquetFileRequestConfig(organisationId = organisationId, kbId = kbId, dateTime = dateTime, sessionId = sessionId, apIVersion = apIVersion)

        return request<Unit, kotlin.collections.List<JsonMessage>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation removeParquetFile
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param dateTime a unix date-time specifying the exact snapshot to remove
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun removeParquetFileRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, dateTime: kotlin.Long, sessionId: kotlin.String, apIVersion: ApIVersionRemoveParquetFile?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/document/parquet/{organisationId}/{kbId}/{dateTime}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"dateTime"+"}", encodeURIComponent(dateTime.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionSummarizeDocument(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Summarize a document
     * Summarize a single document using an extractive summarization.
     * @param sessionId a valid SimSage Session id.
     * @param cmSingleDocumentSummaryRequest 
     * @param apIVersion  (optional)
     * @return CMSingleDocumentSummary
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun summarizeDocument(sessionId: kotlin.String, cmSingleDocumentSummaryRequest: CMSingleDocumentSummaryRequest, apIVersion: ApIVersionSummarizeDocument? = null) : CMSingleDocumentSummary {
        val localVarResponse = summarizeDocumentWithHttpInfo(sessionId = sessionId, cmSingleDocumentSummaryRequest = cmSingleDocumentSummaryRequest, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMSingleDocumentSummary
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Summarize a document
     * Summarize a single document using an extractive summarization.
     * @param sessionId a valid SimSage Session id.
     * @param cmSingleDocumentSummaryRequest 
     * @param apIVersion  (optional)
     * @return ApiResponse<CMSingleDocumentSummary?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun summarizeDocumentWithHttpInfo(sessionId: kotlin.String, cmSingleDocumentSummaryRequest: CMSingleDocumentSummaryRequest, apIVersion: ApIVersionSummarizeDocument?) : ApiResponse<CMSingleDocumentSummary?> {
        val localVariableConfig = summarizeDocumentRequestConfig(sessionId = sessionId, cmSingleDocumentSummaryRequest = cmSingleDocumentSummaryRequest, apIVersion = apIVersion)

        return request<CMSingleDocumentSummaryRequest, CMSingleDocumentSummary>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation summarizeDocument
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmSingleDocumentSummaryRequest 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun summarizeDocumentRequestConfig(sessionId: kotlin.String, cmSingleDocumentSummaryRequest: CMSingleDocumentSummaryRequest, apIVersion: ApIVersionSummarizeDocument?) : RequestConfig<CMSingleDocumentSummaryRequest> {
        val localVariableBody = cmSingleDocumentSummaryRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/document/summarize/document",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Version
     * Get the version of SimSage Document Services.
     * @return CMVersion
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun version4() : CMVersion {
        val localVarResponse = version4WithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMVersion
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Version
     * Get the version of SimSage Document Services.
     * @return ApiResponse<CMVersion?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun version4WithHttpInfo() : ApiResponse<CMVersion?> {
        val localVariableConfig = version4RequestConfig()

        return request<Unit, CMVersion>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation version4
     *
     * @return RequestConfig
     */
    fun version4RequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/document/version",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionZipSource(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Zip source documents
     * Zip all documents in a source on the local server.
     * @param sessionId a valid SimSage Session id.
     * @param cmZipSource 
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun zipSource(sessionId: kotlin.String, cmZipSource: CMZipSource, apIVersion: ApIVersionZipSource? = null) : JsonMessage {
        val localVarResponse = zipSourceWithHttpInfo(sessionId = sessionId, cmZipSource = cmZipSource, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Zip source documents
     * Zip all documents in a source on the local server.
     * @param sessionId a valid SimSage Session id.
     * @param cmZipSource 
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun zipSourceWithHttpInfo(sessionId: kotlin.String, cmZipSource: CMZipSource, apIVersion: ApIVersionZipSource?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = zipSourceRequestConfig(sessionId = sessionId, cmZipSource = cmZipSource, apIVersion = apIVersion)

        return request<CMZipSource, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation zipSource
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmZipSource 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun zipSourceRequestConfig(sessionId: kotlin.String, cmZipSource: CMZipSource, apIVersion: ApIVersionZipSource?) : RequestConfig<CMZipSource> {
        val localVariableBody = cmZipSource
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/document/zip/source",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
