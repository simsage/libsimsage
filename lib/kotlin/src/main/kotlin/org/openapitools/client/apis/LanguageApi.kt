/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.CMCategorization
import org.openapitools.client.models.CMCategorizationPaginatedList
import org.openapitools.client.models.CMOptimizeIndex
import org.openapitools.client.models.CMSemanticModelEdit
import org.openapitools.client.models.CMSemanticsPaginated
import org.openapitools.client.models.CMSemanticsPaginatedResult
import org.openapitools.client.models.CMSynSet
import org.openapitools.client.models.CMSynSetFind
import org.openapitools.client.models.CMSynSetList
import org.openapitools.client.models.CMSynonym
import org.openapitools.client.models.CMSynonymsPaginated
import org.openapitools.client.models.CMSynonymsPaginatedResult
import org.openapitools.client.models.CMVersion
import org.openapitools.client.models.JsonMessage

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class LanguageApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://training.simsage.ai")
        }
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionAddDefaultSynSets(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Add all default SynSets
     * Add default syn-sets to the given org/kb
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun addDefaultSynSets(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionAddDefaultSynSets? = null) : JsonMessage {
        val localVarResponse = addDefaultSynSetsWithHttpInfo(organisationId = organisationId, kbId = kbId, sessionId = sessionId, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Add all default SynSets
     * Add default syn-sets to the given org/kb
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun addDefaultSynSetsWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionAddDefaultSynSets?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = addDefaultSynSetsRequestConfig(organisationId = organisationId, kbId = kbId, sessionId = sessionId, apIVersion = apIVersion)

        return request<Unit, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation addDefaultSynSets
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun addDefaultSynSetsRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionAddDefaultSynSets?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/language/default-syn-sets/{organisationId}/{kbId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionDeleteAllSynonyms(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Delete All Synonyms
     * Delete all synonyms for a given org/kb
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base to delete/remove (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteAllSynonyms(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionDeleteAllSynonyms? = null) : JsonMessage {
        val localVarResponse = deleteAllSynonymsWithHttpInfo(organisationId = organisationId, kbId = kbId, sessionId = sessionId, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete All Synonyms
     * Delete all synonyms for a given org/kb
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base to delete/remove (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteAllSynonymsWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionDeleteAllSynonyms?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = deleteAllSynonymsRequestConfig(organisationId = organisationId, kbId = kbId, sessionId = sessionId, apIVersion = apIVersion)

        return request<Unit, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteAllSynonyms
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base to delete/remove (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun deleteAllSynonymsRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionDeleteAllSynonyms?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/language/delete-all-synonyms/{organisationId}/{kbId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionDeleteCategorization(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * remove categorization
     * remove a specific categorization for a given org/kb
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param categorizationLabel the metadata (name) to remove
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteCategorization(organisationId: kotlin.String, kbId: kotlin.String, categorizationLabel: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionDeleteCategorization? = null) : JsonMessage {
        val localVarResponse = deleteCategorizationWithHttpInfo(organisationId = organisationId, kbId = kbId, categorizationLabel = categorizationLabel, sessionId = sessionId, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * remove categorization
     * remove a specific categorization for a given org/kb
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param categorizationLabel the metadata (name) to remove
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteCategorizationWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, categorizationLabel: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionDeleteCategorization?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = deleteCategorizationRequestConfig(organisationId = organisationId, kbId = kbId, categorizationLabel = categorizationLabel, sessionId = sessionId, apIVersion = apIVersion)

        return request<Unit, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteCategorization
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param categorizationLabel the metadata (name) to remove
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun deleteCategorizationRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, categorizationLabel: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionDeleteCategorization?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/language/categorization/{organisationId}/{kbId}/{categorizationLabel}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"categorizationLabel"+"}", encodeURIComponent(categorizationLabel.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionDeleteSemantic(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Delete Semantic
     * Remove an existing semantic from SimSage.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param word the word (more specific item) of the semantic to delete (eg. \&quot;John\&quot;)
     * @param semantic the semantic of the word to delete (eg. \&quot;person\&quot;)
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteSemantic(organisationId: kotlin.String, kbId: kotlin.String, word: kotlin.String, semantic: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionDeleteSemantic? = null) : JsonMessage {
        val localVarResponse = deleteSemanticWithHttpInfo(organisationId = organisationId, kbId = kbId, word = word, semantic = semantic, sessionId = sessionId, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete Semantic
     * Remove an existing semantic from SimSage.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param word the word (more specific item) of the semantic to delete (eg. \&quot;John\&quot;)
     * @param semantic the semantic of the word to delete (eg. \&quot;person\&quot;)
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteSemanticWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, word: kotlin.String, semantic: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionDeleteSemantic?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = deleteSemanticRequestConfig(organisationId = organisationId, kbId = kbId, word = word, semantic = semantic, sessionId = sessionId, apIVersion = apIVersion)

        return request<Unit, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteSemantic
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param word the word (more specific item) of the semantic to delete (eg. \&quot;John\&quot;)
     * @param semantic the semantic of the word to delete (eg. \&quot;person\&quot;)
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun deleteSemanticRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, word: kotlin.String, semantic: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionDeleteSemantic?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/language/delete-semantic/{organisationId}/{kbId}/{word}/{semantic}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"word"+"}", encodeURIComponent(word.toString())).replace("{"+"semantic"+"}", encodeURIComponent(semantic.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionDeleteSynSet(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Delete SynSet
     * Remove a syn-set from SimSage by lemma.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param lemma the lemma (base word) of the syn-set to remove.
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteSynSet(organisationId: kotlin.String, kbId: kotlin.String, lemma: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionDeleteSynSet? = null) : JsonMessage {
        val localVarResponse = deleteSynSetWithHttpInfo(organisationId = organisationId, kbId = kbId, lemma = lemma, sessionId = sessionId, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete SynSet
     * Remove a syn-set from SimSage by lemma.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param lemma the lemma (base word) of the syn-set to remove.
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteSynSetWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, lemma: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionDeleteSynSet?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = deleteSynSetRequestConfig(organisationId = organisationId, kbId = kbId, lemma = lemma, sessionId = sessionId, apIVersion = apIVersion)

        return request<Unit, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteSynSet
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param lemma the lemma (base word) of the syn-set to remove.
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun deleteSynSetRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, lemma: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionDeleteSynSet?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/language/delete-syn-set/{organisationId}/{kbId}/{lemma}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"lemma"+"}", encodeURIComponent(lemma.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionDeleteSynonym(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Delete Synonym
     * Delete a synonym using its id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param id the id of the synonym to remove.
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteSynonym(organisationId: kotlin.String, kbId: kotlin.String, id: kotlin.Int, sessionId: kotlin.String, apIVersion: ApIVersionDeleteSynonym? = null) : JsonMessage {
        val localVarResponse = deleteSynonymWithHttpInfo(organisationId = organisationId, kbId = kbId, id = id, sessionId = sessionId, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete Synonym
     * Delete a synonym using its id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param id the id of the synonym to remove.
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteSynonymWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, id: kotlin.Int, sessionId: kotlin.String, apIVersion: ApIVersionDeleteSynonym?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = deleteSynonymRequestConfig(organisationId = organisationId, kbId = kbId, id = id, sessionId = sessionId, apIVersion = apIVersion)

        return request<Unit, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteSynonym
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param id the id of the synonym to remove.
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun deleteSynonymRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, id: kotlin.Int, sessionId: kotlin.String, apIVersion: ApIVersionDeleteSynonym?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/language/delete-synonym/{organisationId}/{kbId}/{id}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionFindSynSets(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Find SynSets
     * Find syn-sets using filters
     * @param sessionId a valid SimSage Session id.
     * @param cmSynSetFind 
     * @param apIVersion  (optional)
     * @return CMSynSetList
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findSynSets(sessionId: kotlin.String, cmSynSetFind: CMSynSetFind, apIVersion: ApIVersionFindSynSets? = null) : CMSynSetList {
        val localVarResponse = findSynSetsWithHttpInfo(sessionId = sessionId, cmSynSetFind = cmSynSetFind, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMSynSetList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Find SynSets
     * Find syn-sets using filters
     * @param sessionId a valid SimSage Session id.
     * @param cmSynSetFind 
     * @param apIVersion  (optional)
     * @return ApiResponse<CMSynSetList?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findSynSetsWithHttpInfo(sessionId: kotlin.String, cmSynSetFind: CMSynSetFind, apIVersion: ApIVersionFindSynSets?) : ApiResponse<CMSynSetList?> {
        val localVariableConfig = findSynSetsRequestConfig(sessionId = sessionId, cmSynSetFind = cmSynSetFind, apIVersion = apIVersion)

        return request<CMSynSetFind, CMSynSetList>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation findSynSets
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmSynSetFind 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun findSynSetsRequestConfig(sessionId: kotlin.String, cmSynSetFind: CMSynSetFind, apIVersion: ApIVersionFindSynSets?) : RequestConfig<CMSynSetFind> {
        val localVariableBody = cmSynSetFind
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/language/find-syn-sets",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionGetCategorizationList(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * categorization list
     * get all categorizations for a given org/kb paginated
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param prevCategorizationLabel the previous categorization label for pagination, or null if first page
     * @param pageSize the size of the page returned
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return CMCategorizationPaginatedList
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCategorizationList(organisationId: kotlin.String, kbId: kotlin.String, prevCategorizationLabel: kotlin.String, pageSize: kotlin.Int, sessionId: kotlin.String, apIVersion: ApIVersionGetCategorizationList? = null) : CMCategorizationPaginatedList {
        val localVarResponse = getCategorizationListWithHttpInfo(organisationId = organisationId, kbId = kbId, prevCategorizationLabel = prevCategorizationLabel, pageSize = pageSize, sessionId = sessionId, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMCategorizationPaginatedList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * categorization list
     * get all categorizations for a given org/kb paginated
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param prevCategorizationLabel the previous categorization label for pagination, or null if first page
     * @param pageSize the size of the page returned
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return ApiResponse<CMCategorizationPaginatedList?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCategorizationListWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, prevCategorizationLabel: kotlin.String, pageSize: kotlin.Int, sessionId: kotlin.String, apIVersion: ApIVersionGetCategorizationList?) : ApiResponse<CMCategorizationPaginatedList?> {
        val localVariableConfig = getCategorizationListRequestConfig(organisationId = organisationId, kbId = kbId, prevCategorizationLabel = prevCategorizationLabel, pageSize = pageSize, sessionId = sessionId, apIVersion = apIVersion)

        return request<Unit, CMCategorizationPaginatedList>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCategorizationList
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param prevCategorizationLabel the previous categorization label for pagination, or null if first page
     * @param pageSize the size of the page returned
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun getCategorizationListRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, prevCategorizationLabel: kotlin.String, pageSize: kotlin.Int, sessionId: kotlin.String, apIVersion: ApIVersionGetCategorizationList?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/language/categorization/{organisationId}/{kbId}/{prevCategorizationLabel}/{pageSize}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"prevCategorizationLabel"+"}", encodeURIComponent(prevCategorizationLabel.toString())).replace("{"+"pageSize"+"}", encodeURIComponent(pageSize.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionGetPaginated(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * get Synonyms Paginated
     * return a paginated list of synonyms with optional filtering.
     * @param sessionId a valid SimSage Session id.
     * @param cmSynonymsPaginated 
     * @param apIVersion  (optional)
     * @return CMSynonymsPaginatedResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getPaginated(sessionId: kotlin.String, cmSynonymsPaginated: CMSynonymsPaginated, apIVersion: ApIVersionGetPaginated? = null) : CMSynonymsPaginatedResult {
        val localVarResponse = getPaginatedWithHttpInfo(sessionId = sessionId, cmSynonymsPaginated = cmSynonymsPaginated, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMSynonymsPaginatedResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * get Synonyms Paginated
     * return a paginated list of synonyms with optional filtering.
     * @param sessionId a valid SimSage Session id.
     * @param cmSynonymsPaginated 
     * @param apIVersion  (optional)
     * @return ApiResponse<CMSynonymsPaginatedResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getPaginatedWithHttpInfo(sessionId: kotlin.String, cmSynonymsPaginated: CMSynonymsPaginated, apIVersion: ApIVersionGetPaginated?) : ApiResponse<CMSynonymsPaginatedResult?> {
        val localVariableConfig = getPaginatedRequestConfig(sessionId = sessionId, cmSynonymsPaginated = cmSynonymsPaginated, apIVersion = apIVersion)

        return request<CMSynonymsPaginated, CMSynonymsPaginatedResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getPaginated
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmSynonymsPaginated 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun getPaginatedRequestConfig(sessionId: kotlin.String, cmSynonymsPaginated: CMSynonymsPaginated, apIVersion: ApIVersionGetPaginated?) : RequestConfig<CMSynonymsPaginated> {
        val localVariableBody = cmSynonymsPaginated
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/language/synonyms",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionGetSemanticsPaginated(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Semantics Paginated
     * Return a paginated list of semantics with an optional filter.
     * @param sessionId a valid SimSage Session id.
     * @param cmSemanticsPaginated 
     * @param apIVersion  (optional)
     * @return CMSemanticsPaginatedResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSemanticsPaginated(sessionId: kotlin.String, cmSemanticsPaginated: CMSemanticsPaginated, apIVersion: ApIVersionGetSemanticsPaginated? = null) : CMSemanticsPaginatedResult {
        val localVarResponse = getSemanticsPaginatedWithHttpInfo(sessionId = sessionId, cmSemanticsPaginated = cmSemanticsPaginated, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMSemanticsPaginatedResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Semantics Paginated
     * Return a paginated list of semantics with an optional filter.
     * @param sessionId a valid SimSage Session id.
     * @param cmSemanticsPaginated 
     * @param apIVersion  (optional)
     * @return ApiResponse<CMSemanticsPaginatedResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSemanticsPaginatedWithHttpInfo(sessionId: kotlin.String, cmSemanticsPaginated: CMSemanticsPaginated, apIVersion: ApIVersionGetSemanticsPaginated?) : ApiResponse<CMSemanticsPaginatedResult?> {
        val localVariableConfig = getSemanticsPaginatedRequestConfig(sessionId = sessionId, cmSemanticsPaginated = cmSemanticsPaginated, apIVersion = apIVersion)

        return request<CMSemanticsPaginated, CMSemanticsPaginatedResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSemanticsPaginated
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmSemanticsPaginated 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun getSemanticsPaginatedRequestConfig(sessionId: kotlin.String, cmSemanticsPaginated: CMSemanticsPaginated, apIVersion: ApIVersionGetSemanticsPaginated?) : RequestConfig<CMSemanticsPaginated> {
        val localVariableBody = cmSemanticsPaginated
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/language/semantics",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionOptimizeIndexes(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Optimize Indexes
     * Force index optimization for a the given knowledge-base, now.
     * @param sessionId a valid SimSage Session id.
     * @param cmOptimizeIndex 
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun optimizeIndexes(sessionId: kotlin.String, cmOptimizeIndex: CMOptimizeIndex, apIVersion: ApIVersionOptimizeIndexes? = null) : JsonMessage {
        val localVarResponse = optimizeIndexesWithHttpInfo(sessionId = sessionId, cmOptimizeIndex = cmOptimizeIndex, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Optimize Indexes
     * Force index optimization for a the given knowledge-base, now.
     * @param sessionId a valid SimSage Session id.
     * @param cmOptimizeIndex 
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun optimizeIndexesWithHttpInfo(sessionId: kotlin.String, cmOptimizeIndex: CMOptimizeIndex, apIVersion: ApIVersionOptimizeIndexes?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = optimizeIndexesRequestConfig(sessionId = sessionId, cmOptimizeIndex = cmOptimizeIndex, apIVersion = apIVersion)

        return request<CMOptimizeIndex, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation optimizeIndexes
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmOptimizeIndex 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun optimizeIndexesRequestConfig(sessionId: kotlin.String, cmOptimizeIndex: CMOptimizeIndex, apIVersion: ApIVersionOptimizeIndexes?) : RequestConfig<CMOptimizeIndex> {
        val localVariableBody = cmOptimizeIndex
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/language/optimize-indexes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionOptimizeIndexesAbort(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Abort Index Optimization
     * Force index optimizer to abort a job.
     * @param sessionId a valid SimSage Session id.
     * @param cmOptimizeIndex 
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun optimizeIndexesAbort(sessionId: kotlin.String, cmOptimizeIndex: CMOptimizeIndex, apIVersion: ApIVersionOptimizeIndexesAbort? = null) : JsonMessage {
        val localVarResponse = optimizeIndexesAbortWithHttpInfo(sessionId = sessionId, cmOptimizeIndex = cmOptimizeIndex, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Abort Index Optimization
     * Force index optimizer to abort a job.
     * @param sessionId a valid SimSage Session id.
     * @param cmOptimizeIndex 
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun optimizeIndexesAbortWithHttpInfo(sessionId: kotlin.String, cmOptimizeIndex: CMOptimizeIndex, apIVersion: ApIVersionOptimizeIndexesAbort?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = optimizeIndexesAbortRequestConfig(sessionId = sessionId, cmOptimizeIndex = cmOptimizeIndex, apIVersion = apIVersion)

        return request<CMOptimizeIndex, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation optimizeIndexesAbort
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmOptimizeIndex 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun optimizeIndexesAbortRequestConfig(sessionId: kotlin.String, cmOptimizeIndex: CMOptimizeIndex, apIVersion: ApIVersionOptimizeIndexesAbort?) : RequestConfig<CMOptimizeIndex> {
        val localVariableBody = cmOptimizeIndex
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/language/optimize-indexes-abort",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Redact Document
     * Create a redacted version of a document as a PDF given its url.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param url the base-64 encoded (no-prefix) url of the document
     * @param entityCsv a csv list of entities to redact (e.g. person,location)
     * @param wordCsv a csv list of additional words to redact (e.g. John,Markov.  Use null for ignore.)
     * @param allowWordsCsv a csv list of words to not-redact (e.g. John,Markov.  Use null for ignore.)
     * @param sessionId an optional SimSage Session id. (optional)
     * @return kotlin.ByteArray
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun redactDocument(organisationId: kotlin.String, kbId: kotlin.String, url: kotlin.String, entityCsv: kotlin.String, wordCsv: kotlin.String, allowWordsCsv: kotlin.String, sessionId: kotlin.String? = null) : kotlin.ByteArray {
        val localVarResponse = redactDocumentWithHttpInfo(organisationId = organisationId, kbId = kbId, url = url, entityCsv = entityCsv, wordCsv = wordCsv, allowWordsCsv = allowWordsCsv, sessionId = sessionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.ByteArray
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Redact Document
     * Create a redacted version of a document as a PDF given its url.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param url the base-64 encoded (no-prefix) url of the document
     * @param entityCsv a csv list of entities to redact (e.g. person,location)
     * @param wordCsv a csv list of additional words to redact (e.g. John,Markov.  Use null for ignore.)
     * @param allowWordsCsv a csv list of words to not-redact (e.g. John,Markov.  Use null for ignore.)
     * @param sessionId an optional SimSage Session id. (optional)
     * @return ApiResponse<kotlin.ByteArray?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun redactDocumentWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, url: kotlin.String, entityCsv: kotlin.String, wordCsv: kotlin.String, allowWordsCsv: kotlin.String, sessionId: kotlin.String?) : ApiResponse<kotlin.ByteArray?> {
        val localVariableConfig = redactDocumentRequestConfig(organisationId = organisationId, kbId = kbId, url = url, entityCsv = entityCsv, wordCsv = wordCsv, allowWordsCsv = allowWordsCsv, sessionId = sessionId)

        return request<Unit, kotlin.ByteArray>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation redactDocument
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param url the base-64 encoded (no-prefix) url of the document
     * @param entityCsv a csv list of entities to redact (e.g. person,location)
     * @param wordCsv a csv list of additional words to redact (e.g. John,Markov.  Use null for ignore.)
     * @param allowWordsCsv a csv list of words to not-redact (e.g. John,Markov.  Use null for ignore.)
     * @param sessionId an optional SimSage Session id. (optional)
     * @return RequestConfig
     */
    fun redactDocumentRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, url: kotlin.String, entityCsv: kotlin.String, wordCsv: kotlin.String, allowWordsCsv: kotlin.String, sessionId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId?.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/language/redact/{organisationId}/{kbId}/{url}/{entityCsv}/{wordCsv}/{allowWordsCsv}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"url"+"}", encodeURIComponent(url.toString())).replace("{"+"entityCsv"+"}", encodeURIComponent(entityCsv.toString())).replace("{"+"wordCsv"+"}", encodeURIComponent(wordCsv.toString())).replace("{"+"allowWordsCsv"+"}", encodeURIComponent(allowWordsCsv.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionSaveCategorization(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * save categorization
     * create or update a specific categorization for a given org/kb
     * @param sessionId a valid SimSage Session id.
     * @param cmCategorization 
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun saveCategorization(sessionId: kotlin.String, cmCategorization: CMCategorization, apIVersion: ApIVersionSaveCategorization? = null) : JsonMessage {
        val localVarResponse = saveCategorizationWithHttpInfo(sessionId = sessionId, cmCategorization = cmCategorization, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * save categorization
     * create or update a specific categorization for a given org/kb
     * @param sessionId a valid SimSage Session id.
     * @param cmCategorization 
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun saveCategorizationWithHttpInfo(sessionId: kotlin.String, cmCategorization: CMCategorization, apIVersion: ApIVersionSaveCategorization?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = saveCategorizationRequestConfig(sessionId = sessionId, cmCategorization = cmCategorization, apIVersion = apIVersion)

        return request<CMCategorization, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation saveCategorization
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmCategorization 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun saveCategorizationRequestConfig(sessionId: kotlin.String, cmCategorization: CMCategorization, apIVersion: ApIVersionSaveCategorization?) : RequestConfig<CMCategorization> {
        val localVariableBody = cmCategorization
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/language/categorization",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionSaveSemantic(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Save Semantic
     * Create or update (save) a semantic in SimSage.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @param cmSemanticModelEdit 
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun saveSemantic(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String, cmSemanticModelEdit: CMSemanticModelEdit, apIVersion: ApIVersionSaveSemantic? = null) : JsonMessage {
        val localVarResponse = saveSemanticWithHttpInfo(organisationId = organisationId, kbId = kbId, sessionId = sessionId, cmSemanticModelEdit = cmSemanticModelEdit, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Save Semantic
     * Create or update (save) a semantic in SimSage.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @param cmSemanticModelEdit 
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun saveSemanticWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String, cmSemanticModelEdit: CMSemanticModelEdit, apIVersion: ApIVersionSaveSemantic?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = saveSemanticRequestConfig(organisationId = organisationId, kbId = kbId, sessionId = sessionId, cmSemanticModelEdit = cmSemanticModelEdit, apIVersion = apIVersion)

        return request<CMSemanticModelEdit, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation saveSemantic
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @param cmSemanticModelEdit 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun saveSemanticRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String, cmSemanticModelEdit: CMSemanticModelEdit, apIVersion: ApIVersionSaveSemantic?) : RequestConfig<CMSemanticModelEdit> {
        val localVariableBody = cmSemanticModelEdit
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/language/save-semantic/{organisationId}/{kbId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionSaveSynSet(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Save SynSet
     * Save (update/create) a syn-set in SimSage.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @param cmSynSet 
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun saveSynSet(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String, cmSynSet: CMSynSet, apIVersion: ApIVersionSaveSynSet? = null) : JsonMessage {
        val localVarResponse = saveSynSetWithHttpInfo(organisationId = organisationId, kbId = kbId, sessionId = sessionId, cmSynSet = cmSynSet, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Save SynSet
     * Save (update/create) a syn-set in SimSage.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @param cmSynSet 
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun saveSynSetWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String, cmSynSet: CMSynSet, apIVersion: ApIVersionSaveSynSet?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = saveSynSetRequestConfig(organisationId = organisationId, kbId = kbId, sessionId = sessionId, cmSynSet = cmSynSet, apIVersion = apIVersion)

        return request<CMSynSet, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation saveSynSet
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @param cmSynSet 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun saveSynSetRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String, cmSynSet: CMSynSet, apIVersion: ApIVersionSaveSynSet?) : RequestConfig<CMSynSet> {
        val localVariableBody = cmSynSet
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/language/save-syn-set/{organisationId}/{kbId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionSaveSynonym(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Save Synonym
     * Save (update/create) a synonym.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @param cmSynonym 
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun saveSynonym(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String, cmSynonym: CMSynonym, apIVersion: ApIVersionSaveSynonym? = null) : JsonMessage {
        val localVarResponse = saveSynonymWithHttpInfo(organisationId = organisationId, kbId = kbId, sessionId = sessionId, cmSynonym = cmSynonym, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Save Synonym
     * Save (update/create) a synonym.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @param cmSynonym 
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun saveSynonymWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String, cmSynonym: CMSynonym, apIVersion: ApIVersionSaveSynonym?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = saveSynonymRequestConfig(organisationId = organisationId, kbId = kbId, sessionId = sessionId, cmSynonym = cmSynonym, apIVersion = apIVersion)

        return request<CMSynonym, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation saveSynonym
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @param cmSynonym 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun saveSynonymRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String, cmSynonym: CMSynonym, apIVersion: ApIVersionSaveSynonym?) : RequestConfig<CMSynonym> {
        val localVariableBody = cmSynonym
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/language/save-synonym/{organisationId}/{kbId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionTuneLanguageGraph(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Tune Graph
     * Create a tuned language graph for a given organisation/knowledge-base.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tuneLanguageGraph(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionTuneLanguageGraph? = null) : JsonMessage {
        val localVarResponse = tuneLanguageGraphWithHttpInfo(organisationId = organisationId, kbId = kbId, sessionId = sessionId, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Tune Graph
     * Create a tuned language graph for a given organisation/knowledge-base.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun tuneLanguageGraphWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionTuneLanguageGraph?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = tuneLanguageGraphRequestConfig(organisationId = organisationId, kbId = kbId, sessionId = sessionId, apIVersion = apIVersion)

        return request<Unit, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation tuneLanguageGraph
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun tuneLanguageGraphRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionTuneLanguageGraph?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/language/tune-graph/{organisationId}/{kbId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Version
     * Return the version of the SimSage Language Services.
     * @return CMVersion
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun version2() : CMVersion {
        val localVarResponse = version2WithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMVersion
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Version
     * Return the version of the SimSage Language Services.
     * @return ApiResponse<CMVersion?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun version2WithHttpInfo() : ApiResponse<CMVersion?> {
        val localVariableConfig = version2RequestConfig()

        return request<Unit, CMVersion>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation version2
     *
     * @return RequestConfig
     */
    fun version2RequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/language/version",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
