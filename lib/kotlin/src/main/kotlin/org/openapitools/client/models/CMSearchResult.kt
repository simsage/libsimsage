/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.CMDocumentRelationship
import org.openapitools.client.models.CMSimilarDocument

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * A single search result from the Semantic Search engine.  This presents a hit inside a SimSage document.
 *
 * @param kbId the knowledge-base id (its guid id)
 * @param url the url of the document that matched
 * @param urlId the internal SimSage id for this url (unique only within a knowledge-base)
 * @param sourceId the source-id of this result (ie. the source's id)
 * @param title the title of this document/record (can be empty)
 * @param author the author of this document/record (can be empty)
 * @param textList A list of matching fragments in this document, with highlight markers.
 * @param textIndex in case of multiple matches in textList, the best match index of these items starting at zero (0)
 * @param score the relative score of this match, the bigger, the better
 * @param sortDesc was this document along with any others sorted ascending or descending?
 * @param qnaResult is this item a Q&A result or a search result?
 * @param firstSentence the id of the first sentence in this result
 * @param created document creation date-time as a unix date-time
 * @param uploaded document uploaded to SimSage date-time as a unix date-time
 * @param lastModified document last-modified date-time as a unix date-time
 * @param documentType the type of this document/record as a three or four letter file extension
 * @param numSentences the total number of sentences in the body of this document
 * @param numWords the total number of words and tokens (eg. '.') in the body of this document
 * @param numRelationships the total number of relationships expanded from the words in this document
 * @param binarySize the binary-size of the original document in bytes
 * @param textSize the text-size of the original document in number of characters
 * @param fileType the DROID file-type of this document/record (can be empty)
 * @param crawled document crawled (ie. picked up by SimSage) date-time as a unix date-time
 * @param converted document conversion (ie. turned into text by SimSage) date-time as a unix date-time
 * @param parsed document parsed (ie. language analyzed by SimSage) date-time as a unix date-time
 * @param indexed document indexed (ie. creation of inverted indices by SimSage) date-time as a unix date-time
 * @param previewed document preview generated (ie. creation of thumb-nail images for this document by SimSage) date-time as a unix date-time
 * @param similarDocumentList A list of similar documents matched by this query.
 * @param relatedList A list of similar documents matched by this query.
 * @param metadata A set of name-values of metadata associated with this document
 * @param filename the filename of this document in the DMS system
 * @param folderId the folderId of this item in the DMS system
 * @param renderType how should this item be rendered? (default \"rt search\")
 */


data class CMSearchResult (

    /* the knowledge-base id (its guid id) */
    @Json(name = "kbId")
    val kbId: kotlin.String,

    /* the url of the document that matched */
    @Json(name = "url")
    val url: kotlin.String,

    /* the internal SimSage id for this url (unique only within a knowledge-base) */
    @Json(name = "urlId")
    val urlId: kotlin.Int,

    /* the source-id of this result (ie. the source's id) */
    @Json(name = "sourceId")
    val sourceId: kotlin.Int,

    /* the title of this document/record (can be empty) */
    @Json(name = "title")
    val title: kotlin.String,

    /* the author of this document/record (can be empty) */
    @Json(name = "author")
    val author: kotlin.String,

    /* A list of matching fragments in this document, with highlight markers. */
    @Json(name = "textList")
    val textList: kotlin.collections.List<kotlin.String>,

    /* in case of multiple matches in textList, the best match index of these items starting at zero (0) */
    @Json(name = "textIndex")
    val textIndex: kotlin.Int,

    /* the relative score of this match, the bigger, the better */
    @Json(name = "score")
    val score: kotlin.Float,

    /* was this document along with any others sorted ascending or descending? */
    @Json(name = "sortDesc")
    val sortDesc: kotlin.Boolean,

    /* is this item a Q&A result or a search result? */
    @Json(name = "qnaResult")
    val qnaResult: kotlin.Boolean,

    /* the id of the first sentence in this result */
    @Json(name = "firstSentence")
    val firstSentence: kotlin.Int,

    /* document creation date-time as a unix date-time */
    @Json(name = "created")
    val created: kotlin.Long,

    /* document uploaded to SimSage date-time as a unix date-time */
    @Json(name = "uploaded")
    val uploaded: kotlin.Long,

    /* document last-modified date-time as a unix date-time */
    @Json(name = "lastModified")
    val lastModified: kotlin.Long,

    /* the type of this document/record as a three or four letter file extension */
    @Json(name = "documentType")
    val documentType: kotlin.String,

    /* the total number of sentences in the body of this document */
    @Json(name = "numSentences")
    val numSentences: kotlin.Int,

    /* the total number of words and tokens (eg. '.') in the body of this document */
    @Json(name = "numWords")
    val numWords: kotlin.Int,

    /* the total number of relationships expanded from the words in this document */
    @Json(name = "numRelationships")
    val numRelationships: kotlin.Int,

    /* the binary-size of the original document in bytes */
    @Json(name = "binarySize")
    val binarySize: kotlin.Long,

    /* the text-size of the original document in number of characters */
    @Json(name = "textSize")
    val textSize: kotlin.Int,

    /* the DROID file-type of this document/record (can be empty) */
    @Json(name = "fileType")
    val fileType: kotlin.String,

    /* document crawled (ie. picked up by SimSage) date-time as a unix date-time */
    @Json(name = "crawled")
    val crawled: kotlin.Long,

    /* document conversion (ie. turned into text by SimSage) date-time as a unix date-time */
    @Json(name = "converted")
    val converted: kotlin.Long,

    /* document parsed (ie. language analyzed by SimSage) date-time as a unix date-time */
    @Json(name = "parsed")
    val parsed: kotlin.Long,

    /* document indexed (ie. creation of inverted indices by SimSage) date-time as a unix date-time */
    @Json(name = "indexed")
    val indexed: kotlin.Long,

    /* document preview generated (ie. creation of thumb-nail images for this document by SimSage) date-time as a unix date-time */
    @Json(name = "previewed")
    val previewed: kotlin.Long,

    /* A list of similar documents matched by this query. */
    @Json(name = "similarDocumentList")
    val similarDocumentList: kotlin.collections.List<CMSimilarDocument>,

    /* A list of similar documents matched by this query. */
    @Json(name = "relatedList")
    val relatedList: kotlin.collections.List<CMDocumentRelationship>,

    /* A set of name-values of metadata associated with this document */
    @Json(name = "metadata")
    val metadata: kotlin.collections.Map<kotlin.String, kotlin.String>,

    /* the filename of this document in the DMS system */
    @Json(name = "filename")
    val filename: kotlin.String,

    /* the folderId of this item in the DMS system */
    @Json(name = "folderId")
    val folderId: kotlin.String,

    /* how should this item be rendered? (default \"rt search\") */
    @Json(name = "renderType")
    val renderType: kotlin.String

)

