/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.CMGroup
import org.openapitools.client.models.CMGroupList
import org.openapitools.client.models.CMImportUsers
import org.openapitools.client.models.CMOrganisation
import org.openapitools.client.models.CMPasswordResetRequest
import org.openapitools.client.models.CMSessionVersion
import org.openapitools.client.models.CMSignInParameters
import org.openapitools.client.models.CMUserList
import org.openapitools.client.models.CMUserPasswordReset
import org.openapitools.client.models.CMUserWithExtras
import org.openapitools.client.models.JsonMessage
import org.openapitools.client.models.SignInAdmin
import org.openapitools.client.models.SignInCmd
import org.openapitools.client.models.SignInDmsCmd

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class AuthApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://demo.simsage.ai")
        }
    }

    /**
     * Delete Group
     * Delete a group by name.
     * @param organisationId the organisation (its guid id)
     * @param name the name of the group to remove.
     * @param sessionId a valid SimSage Session id.
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteGroup(organisationId: kotlin.String, name: kotlin.String, sessionId: kotlin.String) : JsonMessage {
        val localVarResponse = deleteGroupWithHttpInfo(organisationId = organisationId, name = name, sessionId = sessionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete Group
     * Delete a group by name.
     * @param organisationId the organisation (its guid id)
     * @param name the name of the group to remove.
     * @param sessionId a valid SimSage Session id.
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteGroupWithHttpInfo(organisationId: kotlin.String, name: kotlin.String, sessionId: kotlin.String) : ApiResponse<JsonMessage?> {
        val localVariableConfig = deleteGroupRequestConfig(organisationId = organisationId, name = name, sessionId = sessionId)

        return request<Unit, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteGroup
     *
     * @param organisationId the organisation (its guid id)
     * @param name the name of the group to remove.
     * @param sessionId a valid SimSage Session id.
     * @return RequestConfig
     */
    fun deleteGroupRequestConfig(organisationId: kotlin.String, name: kotlin.String, sessionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/auth/group/{organisationId}/{name}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"name"+"}", encodeURIComponent(name.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Delete Organisation
     * Delete / remove an organisation and its knowledge bases.
     * @param organisationId the organisation&#39;s id (a guid)
     * @param sessionId a valid SimSage Session id.
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteOrganisation(organisationId: kotlin.String, sessionId: kotlin.String) : JsonMessage {
        val localVarResponse = deleteOrganisationWithHttpInfo(organisationId = organisationId, sessionId = sessionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete Organisation
     * Delete / remove an organisation and its knowledge bases.
     * @param organisationId the organisation&#39;s id (a guid)
     * @param sessionId a valid SimSage Session id.
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteOrganisationWithHttpInfo(organisationId: kotlin.String, sessionId: kotlin.String) : ApiResponse<JsonMessage?> {
        val localVariableConfig = deleteOrganisationRequestConfig(organisationId = organisationId, sessionId = sessionId)

        return request<Unit, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteOrganisation
     *
     * @param organisationId the organisation&#39;s id (a guid)
     * @param sessionId a valid SimSage Session id.
     * @return RequestConfig
     */
    fun deleteOrganisationRequestConfig(organisationId: kotlin.String, sessionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/auth/organisation/{organisationId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get Groups
     * Return a paginated, filtered list of groups for a given organisation.
     * @param organisationId the main organisation (its guid id) to get users for
     * @param sessionId a valid SimSage Session id.
     * @return CMGroupList
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getGroups(organisationId: kotlin.String, sessionId: kotlin.String) : CMGroupList {
        val localVarResponse = getGroupsWithHttpInfo(organisationId = organisationId, sessionId = sessionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMGroupList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Groups
     * Return a paginated, filtered list of groups for a given organisation.
     * @param organisationId the main organisation (its guid id) to get users for
     * @param sessionId a valid SimSage Session id.
     * @return ApiResponse<CMGroupList?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getGroupsWithHttpInfo(organisationId: kotlin.String, sessionId: kotlin.String) : ApiResponse<CMGroupList?> {
        val localVariableConfig = getGroupsRequestConfig(organisationId = organisationId, sessionId = sessionId)

        return request<Unit, CMGroupList>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getGroups
     *
     * @param organisationId the main organisation (its guid id) to get users for
     * @param sessionId a valid SimSage Session id.
     * @return RequestConfig
     */
    fun getGroupsRequestConfig(organisationId: kotlin.String, sessionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/auth/groups/{organisationId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get a one-time token.
     * Get a one-time token associated with your session.  Can be used for download items.
     * @param organisationId the organisation (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getOTT(organisationId: kotlin.String, sessionId: kotlin.String) : kotlin.String {
        val localVarResponse = getOTTWithHttpInfo(organisationId = organisationId, sessionId = sessionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get a one-time token.
     * Get a one-time token associated with your session.  Can be used for download items.
     * @param organisationId the organisation (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getOTTWithHttpInfo(organisationId: kotlin.String, sessionId: kotlin.String) : ApiResponse<kotlin.String?> {
        val localVariableConfig = getOTTRequestConfig(organisationId = organisationId, sessionId = sessionId)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getOTT
     *
     * @param organisationId the organisation (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @return RequestConfig
     */
    fun getOTTRequestConfig(organisationId: kotlin.String, sessionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/auth/ott/{organisationId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get a list of Organisations
     * Return all organisations that a user has access to (read-only or write).
     * @param filter a text filter for partial string matching organisations
     * @param sessionId a valid SimSage Session id.
     * @return kotlin.collections.List<CMOrganisation>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getUserOrganisationList(filter: kotlin.String, sessionId: kotlin.String) : kotlin.collections.List<CMOrganisation> {
        val localVarResponse = getUserOrganisationListWithHttpInfo(filter = filter, sessionId = sessionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CMOrganisation>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get a list of Organisations
     * Return all organisations that a user has access to (read-only or write).
     * @param filter a text filter for partial string matching organisations
     * @param sessionId a valid SimSage Session id.
     * @return ApiResponse<kotlin.collections.List<CMOrganisation>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getUserOrganisationListWithHttpInfo(filter: kotlin.String, sessionId: kotlin.String) : ApiResponse<kotlin.collections.List<CMOrganisation>?> {
        val localVariableConfig = getUserOrganisationListRequestConfig(filter = filter, sessionId = sessionId)

        return request<Unit, kotlin.collections.List<CMOrganisation>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUserOrganisationList
     *
     * @param filter a text filter for partial string matching organisations
     * @param sessionId a valid SimSage Session id.
     * @return RequestConfig
     */
    fun getUserOrganisationListRequestConfig(filter: kotlin.String, sessionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/auth/user/organisations/{filter}".replace("{"+"filter"+"}", encodeURIComponent(filter.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get Users paginated
     * Return a paginated, filtered list of users for a given organisation.
     * @param organisationId the main organisation (its guid id) to get users for
     * @param page the starting page, starting at zero
     * @param pageSize the number of users per page
     * @param filter a text filter for partial string matching users
     * @param sessionId a valid SimSage Session id.
     * @return CMUserList
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getUsersPaginated(organisationId: kotlin.String, page: kotlin.Int, pageSize: kotlin.Int, filter: kotlin.String, sessionId: kotlin.String) : CMUserList {
        val localVarResponse = getUsersPaginatedWithHttpInfo(organisationId = organisationId, page = page, pageSize = pageSize, filter = filter, sessionId = sessionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMUserList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Users paginated
     * Return a paginated, filtered list of users for a given organisation.
     * @param organisationId the main organisation (its guid id) to get users for
     * @param page the starting page, starting at zero
     * @param pageSize the number of users per page
     * @param filter a text filter for partial string matching users
     * @param sessionId a valid SimSage Session id.
     * @return ApiResponse<CMUserList?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getUsersPaginatedWithHttpInfo(organisationId: kotlin.String, page: kotlin.Int, pageSize: kotlin.Int, filter: kotlin.String, sessionId: kotlin.String) : ApiResponse<CMUserList?> {
        val localVariableConfig = getUsersPaginatedRequestConfig(organisationId = organisationId, page = page, pageSize = pageSize, filter = filter, sessionId = sessionId)

        return request<Unit, CMUserList>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUsersPaginated
     *
     * @param organisationId the main organisation (its guid id) to get users for
     * @param page the starting page, starting at zero
     * @param pageSize the number of users per page
     * @param filter a text filter for partial string matching users
     * @param sessionId a valid SimSage Session id.
     * @return RequestConfig
     */
    fun getUsersPaginatedRequestConfig(organisationId: kotlin.String, page: kotlin.Int, pageSize: kotlin.Int, filter: kotlin.String, sessionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/auth/users-paginated/{organisationId}/{page}/{pageSize}/{filter}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"page"+"}", encodeURIComponent(page.toString())).replace("{"+"pageSize"+"}", encodeURIComponent(pageSize.toString())).replace("{"+"filter"+"}", encodeURIComponent(filter.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionImportUsersAndGroups(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * 
     * Import users and groups.
     * @param sessionId a valid SimSage Session id.
     * @param cmImportUsers 
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun importUsersAndGroups(sessionId: kotlin.String, cmImportUsers: CMImportUsers, apIVersion: ApIVersionImportUsersAndGroups? = null) : JsonMessage {
        val localVarResponse = importUsersAndGroupsWithHttpInfo(sessionId = sessionId, cmImportUsers = cmImportUsers, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Import users and groups.
     * @param sessionId a valid SimSage Session id.
     * @param cmImportUsers 
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun importUsersAndGroupsWithHttpInfo(sessionId: kotlin.String, cmImportUsers: CMImportUsers, apIVersion: ApIVersionImportUsersAndGroups?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = importUsersAndGroupsRequestConfig(sessionId = sessionId, cmImportUsers = cmImportUsers, apIVersion = apIVersion)

        return request<CMImportUsers, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation importUsersAndGroups
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmImportUsers 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun importUsersAndGroupsRequestConfig(sessionId: kotlin.String, cmImportUsers: CMImportUsers, apIVersion: ApIVersionImportUsersAndGroups?) : RequestConfig<CMImportUsers> {
        val localVariableBody = cmImportUsers
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/auth/user/import",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get users application roles
     * Get Roles of logged in user for the logged in Organisation
     * @param organisationId the organisation (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @return kotlin.collections.List<kotlin.String>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun myRoles(organisationId: kotlin.String, sessionId: kotlin.String) : kotlin.collections.List<kotlin.String> {
        val localVarResponse = myRolesWithHttpInfo(organisationId = organisationId, sessionId = sessionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<kotlin.String>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get users application roles
     * Get Roles of logged in user for the logged in Organisation
     * @param organisationId the organisation (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @return ApiResponse<kotlin.collections.List<kotlin.String>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun myRolesWithHttpInfo(organisationId: kotlin.String, sessionId: kotlin.String) : ApiResponse<kotlin.collections.List<kotlin.String>?> {
        val localVariableConfig = myRolesRequestConfig(organisationId = organisationId, sessionId = sessionId)

        return request<Unit, kotlin.collections.List<kotlin.String>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation myRoles
     *
     * @param organisationId the organisation (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @return RequestConfig
     */
    fun myRolesRequestConfig(organisationId: kotlin.String, sessionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/auth/myroles/{organisationId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Remove User from Organisation
     * Remove an existing user from an existing Organisation.
     * @param userId the user&#39;s id (a guid)
     * @param organisationId the organisation&#39;s id (a guid)
     * @param sessionId a valid SimSage Session id.
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun removeUserFromOrganisation(userId: kotlin.String, organisationId: kotlin.String, sessionId: kotlin.String) : JsonMessage {
        val localVarResponse = removeUserFromOrganisationWithHttpInfo(userId = userId, organisationId = organisationId, sessionId = sessionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Remove User from Organisation
     * Remove an existing user from an existing Organisation.
     * @param userId the user&#39;s id (a guid)
     * @param organisationId the organisation&#39;s id (a guid)
     * @param sessionId a valid SimSage Session id.
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun removeUserFromOrganisationWithHttpInfo(userId: kotlin.String, organisationId: kotlin.String, sessionId: kotlin.String) : ApiResponse<JsonMessage?> {
        val localVariableConfig = removeUserFromOrganisationRequestConfig(userId = userId, organisationId = organisationId, sessionId = sessionId)

        return request<Unit, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation removeUserFromOrganisation
     *
     * @param userId the user&#39;s id (a guid)
     * @param organisationId the organisation&#39;s id (a guid)
     * @param sessionId a valid SimSage Session id.
     * @return RequestConfig
     */
    fun removeUserFromOrganisationRequestConfig(userId: kotlin.String, organisationId: kotlin.String, sessionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/auth/organisation/user/{userId}/{organisationId}".replace("{"+"userId"+"}", encodeURIComponent(userId.toString())).replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Perform a password-reset request.
     * Reset Password
     * @param cmUserPasswordReset 
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun resetPassword(cmUserPasswordReset: CMUserPasswordReset) : JsonMessage {
        val localVarResponse = resetPasswordWithHttpInfo(cmUserPasswordReset = cmUserPasswordReset)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Perform a password-reset request.
     * Reset Password
     * @param cmUserPasswordReset 
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun resetPasswordWithHttpInfo(cmUserPasswordReset: CMUserPasswordReset) : ApiResponse<JsonMessage?> {
        val localVariableConfig = resetPasswordRequestConfig(cmUserPasswordReset = cmUserPasswordReset)

        return request<CMUserPasswordReset, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation resetPassword
     *
     * @param cmUserPasswordReset 
     * @return RequestConfig
     */
    fun resetPasswordRequestConfig(cmUserPasswordReset: CMUserPasswordReset) : RequestConfig<CMUserPasswordReset> {
        val localVariableBody = cmUserPasswordReset
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/auth/reset-password",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Password Reset Request
     * Start a password-reset request.
     * @param cmPasswordResetRequest 
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun resetPasswordRequest(cmPasswordResetRequest: CMPasswordResetRequest) : JsonMessage {
        val localVarResponse = resetPasswordRequestWithHttpInfo(cmPasswordResetRequest = cmPasswordResetRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Password Reset Request
     * Start a password-reset request.
     * @param cmPasswordResetRequest 
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun resetPasswordRequestWithHttpInfo(cmPasswordResetRequest: CMPasswordResetRequest) : ApiResponse<JsonMessage?> {
        val localVariableConfig = resetPasswordRequestRequestConfig(cmPasswordResetRequest = cmPasswordResetRequest)

        return request<CMPasswordResetRequest, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation resetPasswordRequest
     *
     * @param cmPasswordResetRequest 
     * @return RequestConfig
     */
    fun resetPasswordRequestRequestConfig(cmPasswordResetRequest: CMPasswordResetRequest) : RequestConfig<CMPasswordResetRequest> {
        val localVariableBody = cmPasswordResetRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/auth/reset-password-request",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Save Group
     * Save (update/create) a group.
     * @param sessionId a valid SimSage Session id.
     * @param cmGroup 
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun saveGroup(sessionId: kotlin.String, cmGroup: CMGroup) : JsonMessage {
        val localVarResponse = saveGroupWithHttpInfo(sessionId = sessionId, cmGroup = cmGroup)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Save Group
     * Save (update/create) a group.
     * @param sessionId a valid SimSage Session id.
     * @param cmGroup 
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun saveGroupWithHttpInfo(sessionId: kotlin.String, cmGroup: CMGroup) : ApiResponse<JsonMessage?> {
        val localVariableConfig = saveGroupRequestConfig(sessionId = sessionId, cmGroup = cmGroup)

        return request<CMGroup, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation saveGroup
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmGroup 
     * @return RequestConfig
     */
    fun saveGroupRequestConfig(sessionId: kotlin.String, cmGroup: CMGroup) : RequestConfig<CMGroup> {
        val localVariableBody = cmGroup
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/auth/group",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Sign In
     * Administrator Sign-in of an existing user using username/password.
     * @param cmSignInParameters 
     * @return CMSessionVersion
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun signIn(cmSignInParameters: CMSignInParameters) : CMSessionVersion {
        val localVarResponse = signInWithHttpInfo(cmSignInParameters = cmSignInParameters)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMSessionVersion
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Sign In
     * Administrator Sign-in of an existing user using username/password.
     * @param cmSignInParameters 
     * @return ApiResponse<CMSessionVersion?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun signInWithHttpInfo(cmSignInParameters: CMSignInParameters) : ApiResponse<CMSessionVersion?> {
        val localVariableConfig = signInRequestConfig(cmSignInParameters = cmSignInParameters)

        return request<CMSignInParameters, CMSessionVersion>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation signIn
     *
     * @param cmSignInParameters 
     * @return RequestConfig
     */
    fun signInRequestConfig(cmSignInParameters: CMSignInParameters) : RequestConfig<CMSignInParameters> {
        val localVariableBody = cmSignInParameters
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/auth/sign-in",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * JWT MSal Sign In
     * Sign-in a user using an Msal JWT.
     * @param jwt a valid JWT token.
     * @return SignInAdmin
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun signInAdminUsingJWTMsal(jwt: kotlin.String) : SignInAdmin {
        val localVarResponse = signInAdminUsingJWTMsalWithHttpInfo(jwt = jwt)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SignInAdmin
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * JWT MSal Sign In
     * Sign-in a user using an Msal JWT.
     * @param jwt a valid JWT token.
     * @return ApiResponse<SignInAdmin?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun signInAdminUsingJWTMsalWithHttpInfo(jwt: kotlin.String) : ApiResponse<SignInAdmin?> {
        val localVariableConfig = signInAdminUsingJWTMsalRequestConfig(jwt = jwt)

        return request<Unit, SignInAdmin>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation signInAdminUsingJWTMsal
     *
     * @param jwt a valid JWT token.
     * @return RequestConfig
     */
    fun signInAdminUsingJWTMsalRequestConfig(jwt: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        jwt.apply { localVariableHeaders["jwt"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/auth/admin/authenticate/msal",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * JWT MSal Sign In
     * Sign-in a user using an Msal JWT.
     * @param jwt a valid JWT token.
     * @param organisationId the organisation (its guid id)
     * @return SignInDmsCmd
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun signInDmsUsingJWTMsal(jwt: kotlin.String, organisationId: kotlin.String) : SignInDmsCmd {
        val localVarResponse = signInDmsUsingJWTMsalWithHttpInfo(jwt = jwt, organisationId = organisationId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SignInDmsCmd
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * JWT MSal Sign In
     * Sign-in a user using an Msal JWT.
     * @param jwt a valid JWT token.
     * @param organisationId the organisation (its guid id)
     * @return ApiResponse<SignInDmsCmd?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun signInDmsUsingJWTMsalWithHttpInfo(jwt: kotlin.String, organisationId: kotlin.String) : ApiResponse<SignInDmsCmd?> {
        val localVariableConfig = signInDmsUsingJWTMsalRequestConfig(jwt = jwt, organisationId = organisationId)

        return request<Unit, SignInDmsCmd>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation signInDmsUsingJWTMsal
     *
     * @param jwt a valid JWT token.
     * @param organisationId the organisation (its guid id)
     * @return RequestConfig
     */
    fun signInDmsUsingJWTMsalRequestConfig(jwt: kotlin.String, organisationId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        jwt.apply { localVariableHeaders["jwt"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/auth/dms/authenticate/msal/{organisationId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * JWT MSal Sign In
     * Sign-in an Evolve user using an Msal JWT...
     * @param jwt a valid JWT token.
     * @param organisationId the organisation (its guid id)
     * @return SignInDmsCmd
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun signInEvolveUsingJWTMsal(jwt: kotlin.String, organisationId: kotlin.String) : SignInDmsCmd {
        val localVarResponse = signInEvolveUsingJWTMsalWithHttpInfo(jwt = jwt, organisationId = organisationId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SignInDmsCmd
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * JWT MSal Sign In
     * Sign-in an Evolve user using an Msal JWT...
     * @param jwt a valid JWT token.
     * @param organisationId the organisation (its guid id)
     * @return ApiResponse<SignInDmsCmd?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun signInEvolveUsingJWTMsalWithHttpInfo(jwt: kotlin.String, organisationId: kotlin.String) : ApiResponse<SignInDmsCmd?> {
        val localVariableConfig = signInEvolveUsingJWTMsalRequestConfig(jwt = jwt, organisationId = organisationId)

        return request<Unit, SignInDmsCmd>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation signInEvolveUsingJWTMsal
     *
     * @param jwt a valid JWT token.
     * @param organisationId the organisation (its guid id)
     * @return RequestConfig
     */
    fun signInEvolveUsingJWTMsalRequestConfig(jwt: kotlin.String, organisationId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        jwt.apply { localVariableHeaders["jwt"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/auth/evolve/authenticate/msal/{organisationId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * JWT MSal Sign In
     * Sign-in a user using an Msal JWT.
     * @param jwt Schema valid JWT token.
     * @param organisationId the organisation (its guid id)
     * @return SignInCmd
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun signInSearchUsingJWTMsal(jwt: kotlin.String, organisationId: kotlin.String) : SignInCmd {
        val localVarResponse = signInSearchUsingJWTMsalWithHttpInfo(jwt = jwt, organisationId = organisationId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SignInCmd
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * JWT MSal Sign In
     * Sign-in a user using an Msal JWT.
     * @param jwt Schema valid JWT token.
     * @param organisationId the organisation (its guid id)
     * @return ApiResponse<SignInCmd?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun signInSearchUsingJWTMsalWithHttpInfo(jwt: kotlin.String, organisationId: kotlin.String) : ApiResponse<SignInCmd?> {
        val localVariableConfig = signInSearchUsingJWTMsalRequestConfig(jwt = jwt, organisationId = organisationId)

        return request<Unit, SignInCmd>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation signInSearchUsingJWTMsal
     *
     * @param jwt Schema valid JWT token.
     * @param organisationId the organisation (its guid id)
     * @return RequestConfig
     */
    fun signInSearchUsingJWTMsalRequestConfig(jwt: kotlin.String, organisationId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        jwt.apply { localVariableHeaders["jwt"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/auth/search/authenticate/msal/{organisationId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionSignOut(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Sign Out
     * Sign-out any signed-in user (owner of the session object only).
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun signOut(sessionId: kotlin.String, apIVersion: ApIVersionSignOut? = null) : JsonMessage {
        val localVarResponse = signOutWithHttpInfo(sessionId = sessionId, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Sign Out
     * Sign-out any signed-in user (owner of the session object only).
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun signOutWithHttpInfo(sessionId: kotlin.String, apIVersion: ApIVersionSignOut?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = signOutRequestConfig(sessionId = sessionId, apIVersion = apIVersion)

        return request<Unit, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation signOut
     *
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun signOutRequestConfig(sessionId: kotlin.String, apIVersion: ApIVersionSignOut?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/auth/sign-out",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Save Organisation
     * Update or Create an organisation (save an organisation).
     * @param sessionId a valid SimSage Session id.
     * @param cmOrganisation 
     * @return CMOrganisation
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateOrganisation(sessionId: kotlin.String, cmOrganisation: CMOrganisation) : CMOrganisation {
        val localVarResponse = updateOrganisationWithHttpInfo(sessionId = sessionId, cmOrganisation = cmOrganisation)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMOrganisation
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Save Organisation
     * Update or Create an organisation (save an organisation).
     * @param sessionId a valid SimSage Session id.
     * @param cmOrganisation 
     * @return ApiResponse<CMOrganisation?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateOrganisationWithHttpInfo(sessionId: kotlin.String, cmOrganisation: CMOrganisation) : ApiResponse<CMOrganisation?> {
        val localVariableConfig = updateOrganisationRequestConfig(sessionId = sessionId, cmOrganisation = cmOrganisation)

        return request<CMOrganisation, CMOrganisation>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateOrganisation
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmOrganisation 
     * @return RequestConfig
     */
    fun updateOrganisationRequestConfig(sessionId: kotlin.String, cmOrganisation: CMOrganisation) : RequestConfig<CMOrganisation> {
        val localVariableBody = cmOrganisation
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/auth/organisation",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * Update or Create a user (save a user).
     * @param organisationId the main organisation (its guid id) to update a user in.
     * @param sessionId a valid SimSage Session id.
     * @param cmUserWithExtras 
     * @return CMUserWithExtras
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateUser(organisationId: kotlin.String, sessionId: kotlin.String, cmUserWithExtras: CMUserWithExtras) : CMUserWithExtras {
        val localVarResponse = updateUserWithHttpInfo(organisationId = organisationId, sessionId = sessionId, cmUserWithExtras = cmUserWithExtras)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMUserWithExtras
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Update or Create a user (save a user).
     * @param organisationId the main organisation (its guid id) to update a user in.
     * @param sessionId a valid SimSage Session id.
     * @param cmUserWithExtras 
     * @return ApiResponse<CMUserWithExtras?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateUserWithHttpInfo(organisationId: kotlin.String, sessionId: kotlin.String, cmUserWithExtras: CMUserWithExtras) : ApiResponse<CMUserWithExtras?> {
        val localVariableConfig = updateUserRequestConfig(organisationId = organisationId, sessionId = sessionId, cmUserWithExtras = cmUserWithExtras)

        return request<CMUserWithExtras, CMUserWithExtras>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateUser
     *
     * @param organisationId the main organisation (its guid id) to update a user in.
     * @param sessionId a valid SimSage Session id.
     * @param cmUserWithExtras 
     * @return RequestConfig
     */
    fun updateUserRequestConfig(organisationId: kotlin.String, sessionId: kotlin.String, cmUserWithExtras: CMUserWithExtras) : RequestConfig<CMUserWithExtras> {
        val localVariableBody = cmUserWithExtras
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/auth/user/{organisationId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get Version
     * Get the version of SimSage Auth Services.
     * @return SignInCmd
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun version8() : SignInCmd {
        val localVarResponse = version8WithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SignInCmd
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Version
     * Get the version of SimSage Auth Services.
     * @return ApiResponse<SignInCmd?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun version8WithHttpInfo() : ApiResponse<SignInCmd?> {
        val localVariableConfig = version8RequestConfig()

        return request<Unit, SignInCmd>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation version8
     *
     * @return RequestConfig
     */
    fun version8RequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/auth/version",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
