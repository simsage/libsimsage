/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.CMCommandQueueItem
import org.openapitools.client.models.CMLoggerEntry
import org.openapitools.client.models.CMReturnStatistics
import org.openapitools.client.models.CMVersion
import org.openapitools.client.models.JsonMessage
import org.openapitools.client.models.OptimizeIndexesGetReportCmd
import org.openapitools.client.models.OptimizeIndexesGetReportsCmd

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class StatsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://test.simsage.ai")
        }
    }

    /**
     * get an optimization report
     * return an optimization report
     * @param sessionId a valid session-guid id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param id the id of the report
     * @return kotlin.collections.List<OptimizeIndexesGetReportCmd>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getIndexOptimizationReport(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, id: kotlin.Long) : kotlin.collections.List<OptimizeIndexesGetReportCmd> {
        val localVarResponse = getIndexOptimizationReportWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<OptimizeIndexesGetReportCmd>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * get an optimization report
     * return an optimization report
     * @param sessionId a valid session-guid id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param id the id of the report
     * @return ApiResponse<kotlin.collections.List<OptimizeIndexesGetReportCmd>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getIndexOptimizationReportWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, id: kotlin.Long) : ApiResponse<kotlin.collections.List<OptimizeIndexesGetReportCmd>?> {
        val localVariableConfig = getIndexOptimizationReportRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, id = id)

        return request<Unit, kotlin.collections.List<OptimizeIndexesGetReportCmd>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getIndexOptimizationReport
     *
     * @param sessionId a valid session-guid id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param id the id of the report
     * @return RequestConfig
     */
    fun getIndexOptimizationReportRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, id: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/stats/report/{organisationId}/{kbId}/{id}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * get optimization report list
     * return a list of optimization reports
     * @param sessionId a valid session-guid id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @return kotlin.collections.List<OptimizeIndexesGetReportsCmd>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getIndexOptimizationReports(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String) : kotlin.collections.List<OptimizeIndexesGetReportsCmd> {
        val localVarResponse = getIndexOptimizationReportsWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<OptimizeIndexesGetReportsCmd>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * get optimization report list
     * return a list of optimization reports
     * @param sessionId a valid session-guid id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @return ApiResponse<kotlin.collections.List<OptimizeIndexesGetReportsCmd>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getIndexOptimizationReportsWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String) : ApiResponse<kotlin.collections.List<OptimizeIndexesGetReportsCmd>?> {
        val localVariableConfig = getIndexOptimizationReportsRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId)

        return request<Unit, kotlin.collections.List<OptimizeIndexesGetReportsCmd>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getIndexOptimizationReports
     *
     * @param sessionId a valid session-guid id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @return RequestConfig
     */
    fun getIndexOptimizationReportsRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/stats/reports/{organisationId}/{kbId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionGetStats(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Get usage Statistics
     * Get all statistics for a given month, including some global ones.
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param year the year to get stats for
     * @param month the month to get stats for
     * @param top how many stats to return
     * @param apIVersion  (optional)
     * @return CMReturnStatistics
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getStats(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, year: kotlin.Int, month: kotlin.Int, top: kotlin.Int, apIVersion: ApIVersionGetStats? = null) : CMReturnStatistics {
        val localVarResponse = getStatsWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, year = year, month = month, top = top, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMReturnStatistics
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get usage Statistics
     * Get all statistics for a given month, including some global ones.
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param year the year to get stats for
     * @param month the month to get stats for
     * @param top how many stats to return
     * @param apIVersion  (optional)
     * @return ApiResponse<CMReturnStatistics?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getStatsWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, year: kotlin.Int, month: kotlin.Int, top: kotlin.Int, apIVersion: ApIVersionGetStats?) : ApiResponse<CMReturnStatistics?> {
        val localVariableConfig = getStatsRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, year = year, month = month, top = top, apIVersion = apIVersion)

        return request<Unit, CMReturnStatistics>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getStats
     *
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param year the year to get stats for
     * @param month the month to get stats for
     * @param top how many stats to return
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun getStatsRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, year: kotlin.Int, month: kotlin.Int, top: kotlin.Int, apIVersion: ApIVersionGetStats?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/stats/stats/{organisationId}/{kbId}/{year}/{month}/{top}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"year"+"}", encodeURIComponent(year.toString())).replace("{"+"month"+"}", encodeURIComponent(month.toString())).replace("{"+"top"+"}", encodeURIComponent(top.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * SimSage status
     * return SimSage indexer and parser status
     * @param sessionId a valid session-guid id.
     * @param organisationId the organisation (its guid id)
     * @return kotlin.collections.List<CMCommandQueueItem>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun simSageStatus(sessionId: kotlin.String, organisationId: kotlin.String) : kotlin.collections.List<CMCommandQueueItem> {
        val localVarResponse = simSageStatusWithHttpInfo(sessionId = sessionId, organisationId = organisationId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CMCommandQueueItem>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * SimSage status
     * return SimSage indexer and parser status
     * @param sessionId a valid session-guid id.
     * @param organisationId the organisation (its guid id)
     * @return ApiResponse<kotlin.collections.List<CMCommandQueueItem>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun simSageStatusWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String) : ApiResponse<kotlin.collections.List<CMCommandQueueItem>?> {
        val localVariableConfig = simSageStatusRequestConfig(sessionId = sessionId, organisationId = organisationId)

        return request<Unit, kotlin.collections.List<CMCommandQueueItem>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation simSageStatus
     *
     * @param sessionId a valid session-guid id.
     * @param organisationId the organisation (its guid id)
     * @return RequestConfig
     */
    fun simSageStatusRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/stats/status/{organisationId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * System Logs
     * return SimSage System-logs
     * @param organisationId the organisation (its guid id)
     * @param service the service to get the log for
     * @param numLines the maximum number of lines to return if &gt; 0
     * @param sessionId a valid SimSage Session id.
     * @return kotlin.collections.List<CMLoggerEntry>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun systemLogs(organisationId: kotlin.String, service: kotlin.String, numLines: kotlin.Int, sessionId: kotlin.String) : kotlin.collections.List<CMLoggerEntry> {
        val localVarResponse = systemLogsWithHttpInfo(organisationId = organisationId, service = service, numLines = numLines, sessionId = sessionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CMLoggerEntry>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * System Logs
     * return SimSage System-logs
     * @param organisationId the organisation (its guid id)
     * @param service the service to get the log for
     * @param numLines the maximum number of lines to return if &gt; 0
     * @param sessionId a valid SimSage Session id.
     * @return ApiResponse<kotlin.collections.List<CMLoggerEntry>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun systemLogsWithHttpInfo(organisationId: kotlin.String, service: kotlin.String, numLines: kotlin.Int, sessionId: kotlin.String) : ApiResponse<kotlin.collections.List<CMLoggerEntry>?> {
        val localVariableConfig = systemLogsRequestConfig(organisationId = organisationId, service = service, numLines = numLines, sessionId = sessionId)

        return request<Unit, kotlin.collections.List<CMLoggerEntry>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation systemLogs
     *
     * @param organisationId the organisation (its guid id)
     * @param service the service to get the log for
     * @param numLines the maximum number of lines to return if &gt; 0
     * @param sessionId a valid SimSage Session id.
     * @return RequestConfig
     */
    fun systemLogsRequestConfig(organisationId: kotlin.String, service: kotlin.String, numLines: kotlin.Int, sessionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/stats/system-logs/{organisationId}/{service}/{numLines}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"service"+"}", encodeURIComponent(service.toString())).replace("{"+"numLines"+"}", encodeURIComponent(numLines.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Version
     * Get the version of SimSage Stats Services.
     * @return CMVersion
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun version() : CMVersion {
        val localVarResponse = versionWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMVersion
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Version
     * Get the version of SimSage Stats Services.
     * @return ApiResponse<CMVersion?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun versionWithHttpInfo() : ApiResponse<CMVersion?> {
        val localVariableConfig = versionRequestConfig()

        return request<Unit, CMVersion>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation version
     *
     * @return RequestConfig
     */
    fun versionRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/stats/version",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
