/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.CMChangeTaskPhase
import org.openapitools.client.models.CMClaimDocument
import org.openapitools.client.models.CMCommentFilter
import org.openapitools.client.models.CMCrawlerStatusTask
import org.openapitools.client.models.CMCreatedProject
import org.openapitools.client.models.CMDocumentsByToken
import org.openapitools.client.models.CMNewComment
import org.openapitools.client.models.CMNextDocument
import org.openapitools.client.models.CMPagedProjectDocuments
import org.openapitools.client.models.CMPagedQueueItems
import org.openapitools.client.models.CMProjectDefinition
import org.openapitools.client.models.CMProjectDefinitionTask
import org.openapitools.client.models.CMProjectInfo
import org.openapitools.client.models.CMProjectReview
import org.openapitools.client.models.CMProjectSliceTask
import org.openapitools.client.models.CMQueueFilter
import org.openapitools.client.models.CMReassignSliceDocument
import org.openapitools.client.models.CMRecordedComment
import org.openapitools.client.models.CMRedactionDetails
import org.openapitools.client.models.CMRemoveSliceDocument
import org.openapitools.client.models.CMSearchResultSummary
import org.openapitools.client.models.CMSearchResultSummaryTask
import org.openapitools.client.models.CMSetSliceDefinitions
import org.openapitools.client.models.CMSlicedDocumentListAndTotals
import org.openapitools.client.models.CMSlicedDocumentRequest
import org.openapitools.client.models.CMStartProject
import org.openapitools.client.models.CMUpdateDocumentStatus
import org.openapitools.client.models.CMUpdateRedactions
import org.openapitools.client.models.JsonMessage
import org.openapitools.client.models.LocatedRedaction
import org.openapitools.client.models.ReturnedDocument

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class DataprojectApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://test.simsage.ai")
        }
    }

    /**
     * Create Comment
     * Adds a comment with the given level and ids
     * @param sessionId a valid SimSage Session id.
     * @param cmNewComment 
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun addComment(sessionId: kotlin.String, cmNewComment: CMNewComment) : kotlin.String {
        val localVarResponse = addCommentWithHttpInfo(sessionId = sessionId, cmNewComment = cmNewComment)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create Comment
     * Adds a comment with the given level and ids
     * @param sessionId a valid SimSage Session id.
     * @param cmNewComment 
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun addCommentWithHttpInfo(sessionId: kotlin.String, cmNewComment: CMNewComment) : ApiResponse<kotlin.String?> {
        val localVariableConfig = addCommentRequestConfig(sessionId = sessionId, cmNewComment = cmNewComment)

        return request<CMNewComment, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation addComment
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmNewComment 
     * @return RequestConfig
     */
    fun addCommentRequestConfig(sessionId: kotlin.String, cmNewComment: CMNewComment) : RequestConfig<CMNewComment> {
        val localVariableBody = cmNewComment
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/dataproject/comment",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * get Running Projects
     * Get the list of running projects
     * @param sessionId a valid SimSage Session id.
     * @param cmQueueFilter 
     * @return CMPagedQueueItems
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun allTasks(sessionId: kotlin.String, cmQueueFilter: CMQueueFilter) : CMPagedQueueItems {
        val localVarResponse = allTasksWithHttpInfo(sessionId = sessionId, cmQueueFilter = cmQueueFilter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMPagedQueueItems
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * get Running Projects
     * Get the list of running projects
     * @param sessionId a valid SimSage Session id.
     * @param cmQueueFilter 
     * @return ApiResponse<CMPagedQueueItems?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun allTasksWithHttpInfo(sessionId: kotlin.String, cmQueueFilter: CMQueueFilter) : ApiResponse<CMPagedQueueItems?> {
        val localVariableConfig = allTasksRequestConfig(sessionId = sessionId, cmQueueFilter = cmQueueFilter)

        return request<CMQueueFilter, CMPagedQueueItems>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation allTasks
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmQueueFilter 
     * @return RequestConfig
     */
    fun allTasksRequestConfig(sessionId: kotlin.String, cmQueueFilter: CMQueueFilter) : RequestConfig<CMQueueFilter> {
        val localVariableBody = cmQueueFilter
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/dataproject/runningprojects",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Change Task Phase
     * Notifies Workflow engine that a task changed it&#39;s status and passes results in
     * @param sessionId a valid SimSage Session id.
     * @param cmChangeTaskPhase 
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun changeTaskPhase(sessionId: kotlin.String, cmChangeTaskPhase: CMChangeTaskPhase) : kotlin.String {
        val localVarResponse = changeTaskPhaseWithHttpInfo(sessionId = sessionId, cmChangeTaskPhase = cmChangeTaskPhase)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Change Task Phase
     * Notifies Workflow engine that a task changed it&#39;s status and passes results in
     * @param sessionId a valid SimSage Session id.
     * @param cmChangeTaskPhase 
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun changeTaskPhaseWithHttpInfo(sessionId: kotlin.String, cmChangeTaskPhase: CMChangeTaskPhase) : ApiResponse<kotlin.String?> {
        val localVariableConfig = changeTaskPhaseRequestConfig(sessionId = sessionId, cmChangeTaskPhase = cmChangeTaskPhase)

        return request<CMChangeTaskPhase, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation changeTaskPhase
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmChangeTaskPhase 
     * @return RequestConfig
     */
    fun changeTaskPhaseRequestConfig(sessionId: kotlin.String, cmChangeTaskPhase: CMChangeTaskPhase) : RequestConfig<CMChangeTaskPhase> {
        val localVariableBody = cmChangeTaskPhase
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/dataproject/changetaskphase",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Claim sliced document
     * Claim sliced document for signed in user
     * @param sessionId a valid SimSage Session id.
     * @param cmClaimDocument 
     * @return ReturnedDocument
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun claimDocument(sessionId: kotlin.String, cmClaimDocument: CMClaimDocument) : ReturnedDocument {
        val localVarResponse = claimDocumentWithHttpInfo(sessionId = sessionId, cmClaimDocument = cmClaimDocument)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ReturnedDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Claim sliced document
     * Claim sliced document for signed in user
     * @param sessionId a valid SimSage Session id.
     * @param cmClaimDocument 
     * @return ApiResponse<ReturnedDocument?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun claimDocumentWithHttpInfo(sessionId: kotlin.String, cmClaimDocument: CMClaimDocument) : ApiResponse<ReturnedDocument?> {
        val localVariableConfig = claimDocumentRequestConfig(sessionId = sessionId, cmClaimDocument = cmClaimDocument)

        return request<CMClaimDocument, ReturnedDocument>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation claimDocument
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmClaimDocument 
     * @return RequestConfig
     */
    fun claimDocumentRequestConfig(sessionId: kotlin.String, cmClaimDocument: CMClaimDocument) : RequestConfig<CMClaimDocument> {
        val localVariableBody = cmClaimDocument
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/dataproject/claimdocument",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * get Crawler Status
     * Get the crawler status for the given task id
     * @param organisationId the organisation (its guid id)
     * @param taskId the id of the task
     * @param sessionId a valid SimSage Session id.
     * @return CMCrawlerStatusTask
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun crawlerStatus(organisationId: kotlin.String, taskId: kotlin.String, sessionId: kotlin.String) : CMCrawlerStatusTask {
        val localVarResponse = crawlerStatusWithHttpInfo(organisationId = organisationId, taskId = taskId, sessionId = sessionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMCrawlerStatusTask
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * get Crawler Status
     * Get the crawler status for the given task id
     * @param organisationId the organisation (its guid id)
     * @param taskId the id of the task
     * @param sessionId a valid SimSage Session id.
     * @return ApiResponse<CMCrawlerStatusTask?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun crawlerStatusWithHttpInfo(organisationId: kotlin.String, taskId: kotlin.String, sessionId: kotlin.String) : ApiResponse<CMCrawlerStatusTask?> {
        val localVariableConfig = crawlerStatusRequestConfig(organisationId = organisationId, taskId = taskId, sessionId = sessionId)

        return request<Unit, CMCrawlerStatusTask>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation crawlerStatus
     *
     * @param organisationId the organisation (its guid id)
     * @param taskId the id of the task
     * @param sessionId a valid SimSage Session id.
     * @return RequestConfig
     */
    fun crawlerStatusRequestConfig(organisationId: kotlin.String, taskId: kotlin.String, sessionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/dataproject/crawlerstatus/{organisationId}/{taskId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"taskId"+"}", encodeURIComponent(taskId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Returns document list for tokens
     * Returns paged list of documents for the given set of query tokens
     * @param sessionId a valid SimSage Session id.
     * @param cmDocumentsByToken 
     * @return CMPagedProjectDocuments
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun documentsByTokens(sessionId: kotlin.String, cmDocumentsByToken: CMDocumentsByToken) : CMPagedProjectDocuments {
        val localVarResponse = documentsByTokensWithHttpInfo(sessionId = sessionId, cmDocumentsByToken = cmDocumentsByToken)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMPagedProjectDocuments
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Returns document list for tokens
     * Returns paged list of documents for the given set of query tokens
     * @param sessionId a valid SimSage Session id.
     * @param cmDocumentsByToken 
     * @return ApiResponse<CMPagedProjectDocuments?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun documentsByTokensWithHttpInfo(sessionId: kotlin.String, cmDocumentsByToken: CMDocumentsByToken) : ApiResponse<CMPagedProjectDocuments?> {
        val localVariableConfig = documentsByTokensRequestConfig(sessionId = sessionId, cmDocumentsByToken = cmDocumentsByToken)

        return request<CMDocumentsByToken, CMPagedProjectDocuments>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation documentsByTokens
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmDocumentsByToken 
     * @return RequestConfig
     */
    fun documentsByTokensRequestConfig(sessionId: kotlin.String, cmDocumentsByToken: CMDocumentsByToken) : RequestConfig<CMDocumentsByToken> {
        val localVariableBody = cmDocumentsByToken
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/dataproject/documentsbytokens",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Retrieve Comments
     * Retrieves the list of comments for the passed in Filter
     * @param sessionId a valid SimSage Session id.
     * @param cmCommentFilter 
     * @return kotlin.collections.List<CMRecordedComment>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun filteredComments(sessionId: kotlin.String, cmCommentFilter: CMCommentFilter) : kotlin.collections.List<CMRecordedComment> {
        val localVarResponse = filteredCommentsWithHttpInfo(sessionId = sessionId, cmCommentFilter = cmCommentFilter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CMRecordedComment>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Comments
     * Retrieves the list of comments for the passed in Filter
     * @param sessionId a valid SimSage Session id.
     * @param cmCommentFilter 
     * @return ApiResponse<kotlin.collections.List<CMRecordedComment>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun filteredCommentsWithHttpInfo(sessionId: kotlin.String, cmCommentFilter: CMCommentFilter) : ApiResponse<kotlin.collections.List<CMRecordedComment>?> {
        val localVariableConfig = filteredCommentsRequestConfig(sessionId = sessionId, cmCommentFilter = cmCommentFilter)

        return request<CMCommentFilter, kotlin.collections.List<CMRecordedComment>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation filteredComments
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmCommentFilter 
     * @return RequestConfig
     */
    fun filteredCommentsRequestConfig(sessionId: kotlin.String, cmCommentFilter: CMCommentFilter) : RequestConfig<CMCommentFilter> {
        val localVariableBody = cmCommentFilter
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/dataproject/filteredcomments",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get Document Redaction info
     * Get list of all identified potential Redaction locations for the document
     * @param organisationId the organisation (its guid id)
     * @param sliceId the id of the slice
     * @param documentKey the document key of the document to be redacted
     * @param sessionId a valid SimSage Session id.
     * @return kotlin.collections.List<LocatedRedaction>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDocumentRedactionInfo(organisationId: kotlin.String, sliceId: kotlin.String, documentKey: kotlin.String, sessionId: kotlin.String) : kotlin.collections.List<LocatedRedaction> {
        val localVarResponse = getDocumentRedactionInfoWithHttpInfo(organisationId = organisationId, sliceId = sliceId, documentKey = documentKey, sessionId = sessionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<LocatedRedaction>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Document Redaction info
     * Get list of all identified potential Redaction locations for the document
     * @param organisationId the organisation (its guid id)
     * @param sliceId the id of the slice
     * @param documentKey the document key of the document to be redacted
     * @param sessionId a valid SimSage Session id.
     * @return ApiResponse<kotlin.collections.List<LocatedRedaction>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getDocumentRedactionInfoWithHttpInfo(organisationId: kotlin.String, sliceId: kotlin.String, documentKey: kotlin.String, sessionId: kotlin.String) : ApiResponse<kotlin.collections.List<LocatedRedaction>?> {
        val localVariableConfig = getDocumentRedactionInfoRequestConfig(organisationId = organisationId, sliceId = sliceId, documentKey = documentKey, sessionId = sessionId)

        return request<Unit, kotlin.collections.List<LocatedRedaction>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getDocumentRedactionInfo
     *
     * @param organisationId the organisation (its guid id)
     * @param sliceId the id of the slice
     * @param documentKey the document key of the document to be redacted
     * @param sessionId a valid SimSage Session id.
     * @return RequestConfig
     */
    fun getDocumentRedactionInfoRequestConfig(organisationId: kotlin.String, sliceId: kotlin.String, documentKey: kotlin.String, sessionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/dataproject/docredactioninfo/{organisationId}/{sliceId}/{documentKey}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"sliceId"+"}", encodeURIComponent(sliceId.toString())).replace("{"+"documentKey"+"}", encodeURIComponent(documentKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * get Project Definition
     * Get the project definition of the project for the given task id
     * @param organisationId the organisation (its guid id)
     * @param taskId the id of the task
     * @param sessionId a valid SimSage Session id.
     * @return CMProjectDefinitionTask
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getProjectDefinition(organisationId: kotlin.String, taskId: kotlin.String, sessionId: kotlin.String) : CMProjectDefinitionTask {
        val localVarResponse = getProjectDefinitionWithHttpInfo(organisationId = organisationId, taskId = taskId, sessionId = sessionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMProjectDefinitionTask
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * get Project Definition
     * Get the project definition of the project for the given task id
     * @param organisationId the organisation (its guid id)
     * @param taskId the id of the task
     * @param sessionId a valid SimSage Session id.
     * @return ApiResponse<CMProjectDefinitionTask?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getProjectDefinitionWithHttpInfo(organisationId: kotlin.String, taskId: kotlin.String, sessionId: kotlin.String) : ApiResponse<CMProjectDefinitionTask?> {
        val localVariableConfig = getProjectDefinitionRequestConfig(organisationId = organisationId, taskId = taskId, sessionId = sessionId)

        return request<Unit, CMProjectDefinitionTask>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getProjectDefinition
     *
     * @param organisationId the organisation (its guid id)
     * @param taskId the id of the task
     * @param sessionId a valid SimSage Session id.
     * @return RequestConfig
     */
    fun getProjectDefinitionRequestConfig(organisationId: kotlin.String, taskId: kotlin.String, sessionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/dataproject/projectdefinition/{organisationId}/{taskId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"taskId"+"}", encodeURIComponent(taskId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * get Project Definition
     * Get the project review data of the project for the given project id
     * @param organisationId the organisation (its guid id)
     * @param projectId the id of the task
     * @param sessionId a valid SimSage Session id.
     * @return CMProjectReview
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getProjectReview(organisationId: kotlin.String, projectId: kotlin.String, sessionId: kotlin.String) : CMProjectReview {
        val localVarResponse = getProjectReviewWithHttpInfo(organisationId = organisationId, projectId = projectId, sessionId = sessionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMProjectReview
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * get Project Definition
     * Get the project review data of the project for the given project id
     * @param organisationId the organisation (its guid id)
     * @param projectId the id of the task
     * @param sessionId a valid SimSage Session id.
     * @return ApiResponse<CMProjectReview?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getProjectReviewWithHttpInfo(organisationId: kotlin.String, projectId: kotlin.String, sessionId: kotlin.String) : ApiResponse<CMProjectReview?> {
        val localVariableConfig = getProjectReviewRequestConfig(organisationId = organisationId, projectId = projectId, sessionId = sessionId)

        return request<Unit, CMProjectReview>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getProjectReview
     *
     * @param organisationId the organisation (its guid id)
     * @param projectId the id of the task
     * @param sessionId a valid SimSage Session id.
     * @return RequestConfig
     */
    fun getProjectReviewRequestConfig(organisationId: kotlin.String, projectId: kotlin.String, sessionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/dataproject/projectreview/{organisationId}/{projectId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"projectId"+"}", encodeURIComponent(projectId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * get project slice
     * Get the project project slice for the given task id
     * @param organisationId the organisation (its guid id)
     * @param taskId the id of the task
     * @param sessionId a valid SimSage Session id.
     * @return kotlin.collections.List<CMProjectSliceTask>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getProjectSlice(organisationId: kotlin.String, taskId: kotlin.String, sessionId: kotlin.String) : kotlin.collections.List<CMProjectSliceTask> {
        val localVarResponse = getProjectSliceWithHttpInfo(organisationId = organisationId, taskId = taskId, sessionId = sessionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CMProjectSliceTask>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * get project slice
     * Get the project project slice for the given task id
     * @param organisationId the organisation (its guid id)
     * @param taskId the id of the task
     * @param sessionId a valid SimSage Session id.
     * @return ApiResponse<kotlin.collections.List<CMProjectSliceTask>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getProjectSliceWithHttpInfo(organisationId: kotlin.String, taskId: kotlin.String, sessionId: kotlin.String) : ApiResponse<kotlin.collections.List<CMProjectSliceTask>?> {
        val localVariableConfig = getProjectSliceRequestConfig(organisationId = organisationId, taskId = taskId, sessionId = sessionId)

        return request<Unit, kotlin.collections.List<CMProjectSliceTask>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getProjectSlice
     *
     * @param organisationId the organisation (its guid id)
     * @param taskId the id of the task
     * @param sessionId a valid SimSage Session id.
     * @return RequestConfig
     */
    fun getProjectSliceRequestConfig(organisationId: kotlin.String, taskId: kotlin.String, sessionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/dataproject/projectslice/{organisationId}/{taskId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"taskId"+"}", encodeURIComponent(taskId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * get Search Result Summary
     * Get the summary information for the search results of a given project by task id
     * @param organisationId the organisation (its guid id)
     * @param taskId the id of the task
     * @param sessionId a valid SimSage Session id.
     * @return CMSearchResultSummaryTask
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSearchResultSummary(organisationId: kotlin.String, taskId: kotlin.String, sessionId: kotlin.String) : CMSearchResultSummaryTask {
        val localVarResponse = getSearchResultSummaryWithHttpInfo(organisationId = organisationId, taskId = taskId, sessionId = sessionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMSearchResultSummaryTask
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * get Search Result Summary
     * Get the summary information for the search results of a given project by task id
     * @param organisationId the organisation (its guid id)
     * @param taskId the id of the task
     * @param sessionId a valid SimSage Session id.
     * @return ApiResponse<CMSearchResultSummaryTask?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSearchResultSummaryWithHttpInfo(organisationId: kotlin.String, taskId: kotlin.String, sessionId: kotlin.String) : ApiResponse<CMSearchResultSummaryTask?> {
        val localVariableConfig = getSearchResultSummaryRequestConfig(organisationId = organisationId, taskId = taskId, sessionId = sessionId)

        return request<Unit, CMSearchResultSummaryTask>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSearchResultSummary
     *
     * @param organisationId the organisation (its guid id)
     * @param taskId the id of the task
     * @param sessionId a valid SimSage Session id.
     * @return RequestConfig
     */
    fun getSearchResultSummaryRequestConfig(organisationId: kotlin.String, taskId: kotlin.String, sessionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/dataproject/searchresult/{organisationId}/{taskId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"taskId"+"}", encodeURIComponent(taskId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * get Search Result Summary
     * Get the summary information for the search results of a given project by task id
     * @param organisationId the organisation (its guid id)
     * @param projectId the id of the task
     * @param sessionId a valid SimSage Session id.
     * @return CMSearchResultSummary
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSearchResultSummaryForReview(organisationId: kotlin.String, projectId: kotlin.String, sessionId: kotlin.String) : CMSearchResultSummary {
        val localVarResponse = getSearchResultSummaryForReviewWithHttpInfo(organisationId = organisationId, projectId = projectId, sessionId = sessionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMSearchResultSummary
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * get Search Result Summary
     * Get the summary information for the search results of a given project by task id
     * @param organisationId the organisation (its guid id)
     * @param projectId the id of the task
     * @param sessionId a valid SimSage Session id.
     * @return ApiResponse<CMSearchResultSummary?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSearchResultSummaryForReviewWithHttpInfo(organisationId: kotlin.String, projectId: kotlin.String, sessionId: kotlin.String) : ApiResponse<CMSearchResultSummary?> {
        val localVariableConfig = getSearchResultSummaryForReviewRequestConfig(organisationId = organisationId, projectId = projectId, sessionId = sessionId)

        return request<Unit, CMSearchResultSummary>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSearchResultSummaryForReview
     *
     * @param organisationId the organisation (its guid id)
     * @param projectId the id of the task
     * @param sessionId a valid SimSage Session id.
     * @return RequestConfig
     */
    fun getSearchResultSummaryForReviewRequestConfig(organisationId: kotlin.String, projectId: kotlin.String, sessionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/dataproject/searchresultreview/{organisationId}/{projectId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"projectId"+"}", encodeURIComponent(projectId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Document list for given slice and filters
     * Returns paged list of documents for the passed in slice and filters as well as totals
     * @param sessionId a valid SimSage Session id.
     * @param cmNextDocument 
     * @return CMSlicedDocumentListAndTotals
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun nextDocument(sessionId: kotlin.String, cmNextDocument: CMNextDocument) : CMSlicedDocumentListAndTotals {
        val localVarResponse = nextDocumentWithHttpInfo(sessionId = sessionId, cmNextDocument = cmNextDocument)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMSlicedDocumentListAndTotals
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Document list for given slice and filters
     * Returns paged list of documents for the passed in slice and filters as well as totals
     * @param sessionId a valid SimSage Session id.
     * @param cmNextDocument 
     * @return ApiResponse<CMSlicedDocumentListAndTotals?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun nextDocumentWithHttpInfo(sessionId: kotlin.String, cmNextDocument: CMNextDocument) : ApiResponse<CMSlicedDocumentListAndTotals?> {
        val localVariableConfig = nextDocumentRequestConfig(sessionId = sessionId, cmNextDocument = cmNextDocument)

        return request<CMNextDocument, CMSlicedDocumentListAndTotals>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation nextDocument
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmNextDocument 
     * @return RequestConfig
     */
    fun nextDocumentRequestConfig(sessionId: kotlin.String, cmNextDocument: CMNextDocument) : RequestConfig<CMNextDocument> {
        val localVariableBody = cmNextDocument
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/dataproject/nextdocument",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Binary
     * Get the original for a document if available by url (latest version)
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param url a base64 encoded url
     * @param sessionId a valid SimSage Session id. (optional)
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pdfBinary(organisationId: kotlin.String, kbId: kotlin.String, url: kotlin.String, sessionId: kotlin.String? = null) : kotlin.Any {
        val localVarResponse = pdfBinaryWithHttpInfo(organisationId = organisationId, kbId = kbId, url = url, sessionId = sessionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Binary
     * Get the original for a document if available by url (latest version)
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param url a base64 encoded url
     * @param sessionId a valid SimSage Session id. (optional)
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun pdfBinaryWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, url: kotlin.String, sessionId: kotlin.String?) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = pdfBinaryRequestConfig(organisationId = organisationId, kbId = kbId, url = url, sessionId = sessionId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation pdfBinary
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param url a base64 encoded url
     * @param sessionId a valid SimSage Session id. (optional)
     * @return RequestConfig
     */
    fun pdfBinaryRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, url: kotlin.String, sessionId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId?.apply { localVariableHeaders["session-id"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/dataproject/pdf/latest/{organisationId}/{kbId}/{url}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"url"+"}", encodeURIComponent(url.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * get Project Types
     * Get the list of available project types
     * @param organisationId the organisation (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @return kotlin.collections.List<CMProjectInfo>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun projectTypes(organisationId: kotlin.String, sessionId: kotlin.String) : kotlin.collections.List<CMProjectInfo> {
        val localVarResponse = projectTypesWithHttpInfo(organisationId = organisationId, sessionId = sessionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CMProjectInfo>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * get Project Types
     * Get the list of available project types
     * @param organisationId the organisation (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @return ApiResponse<kotlin.collections.List<CMProjectInfo>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun projectTypesWithHttpInfo(organisationId: kotlin.String, sessionId: kotlin.String) : ApiResponse<kotlin.collections.List<CMProjectInfo>?> {
        val localVariableConfig = projectTypesRequestConfig(organisationId = organisationId, sessionId = sessionId)

        return request<Unit, kotlin.collections.List<CMProjectInfo>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation projectTypes
     *
     * @param organisationId the organisation (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @return RequestConfig
     */
    fun projectTypesRequestConfig(organisationId: kotlin.String, sessionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/dataproject/projects/{organisationId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param sessionId a valid SimSage Session id.
     * @param cmReassignSliceDocument 
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reassignSliceDocument(sessionId: kotlin.String, cmReassignSliceDocument: CMReassignSliceDocument) : kotlin.Any {
        val localVarResponse = reassignSliceDocumentWithHttpInfo(sessionId = sessionId, cmReassignSliceDocument = cmReassignSliceDocument)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param sessionId a valid SimSage Session id.
     * @param cmReassignSliceDocument 
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reassignSliceDocumentWithHttpInfo(sessionId: kotlin.String, cmReassignSliceDocument: CMReassignSliceDocument) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = reassignSliceDocumentRequestConfig(sessionId = sessionId, cmReassignSliceDocument = cmReassignSliceDocument)

        return request<CMReassignSliceDocument, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reassignSliceDocument
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmReassignSliceDocument 
     * @return RequestConfig
     */
    fun reassignSliceDocumentRequestConfig(sessionId: kotlin.String, cmReassignSliceDocument: CMReassignSliceDocument) : RequestConfig<CMReassignSliceDocument> {
        val localVariableBody = cmReassignSliceDocument
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json;charset=UTF-8"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/dataproject/reassignslicedoc",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get Redacted Document
     * Retrieves the redacted document binary
     * @param sessionId a valid SimSage Session id.
     * @param cmRedactionDetails 
     * @return ReturnedDocument
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun redactedDocument(sessionId: kotlin.String, cmRedactionDetails: CMRedactionDetails) : ReturnedDocument {
        val localVarResponse = redactedDocumentWithHttpInfo(sessionId = sessionId, cmRedactionDetails = cmRedactionDetails)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ReturnedDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Redacted Document
     * Retrieves the redacted document binary
     * @param sessionId a valid SimSage Session id.
     * @param cmRedactionDetails 
     * @return ApiResponse<ReturnedDocument?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun redactedDocumentWithHttpInfo(sessionId: kotlin.String, cmRedactionDetails: CMRedactionDetails) : ApiResponse<ReturnedDocument?> {
        val localVariableConfig = redactedDocumentRequestConfig(sessionId = sessionId, cmRedactionDetails = cmRedactionDetails)

        return request<CMRedactionDetails, ReturnedDocument>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation redactedDocument
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmRedactionDetails 
     * @return RequestConfig
     */
    fun redactedDocumentRequestConfig(sessionId: kotlin.String, cmRedactionDetails: CMRedactionDetails) : RequestConfig<CMRedactionDetails> {
        val localVariableBody = cmRedactionDetails
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/dataproject/redacteddocument",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param sessionId a valid SimSage Session id.
     * @param cmRemoveSliceDocument 
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun removeSliceDocument(sessionId: kotlin.String, cmRemoveSliceDocument: CMRemoveSliceDocument) : kotlin.Any {
        val localVarResponse = removeSliceDocumentWithHttpInfo(sessionId = sessionId, cmRemoveSliceDocument = cmRemoveSliceDocument)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param sessionId a valid SimSage Session id.
     * @param cmRemoveSliceDocument 
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun removeSliceDocumentWithHttpInfo(sessionId: kotlin.String, cmRemoveSliceDocument: CMRemoveSliceDocument) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = removeSliceDocumentRequestConfig(sessionId = sessionId, cmRemoveSliceDocument = cmRemoveSliceDocument)

        return request<CMRemoveSliceDocument, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation removeSliceDocument
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmRemoveSliceDocument 
     * @return RequestConfig
     */
    fun removeSliceDocumentRequestConfig(sessionId: kotlin.String, cmRemoveSliceDocument: CMRemoveSliceDocument) : RequestConfig<CMRemoveSliceDocument> {
        val localVariableBody = cmRemoveSliceDocument
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json;charset=UTF-8"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/dataproject/removeslicedoc",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Reset Evolve Application
     * Fully resets Evolve to an empty system
     * @param organisationId a valid SimSage Organisation id.
     * @param sessionId a valid SimSage Session id.
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun resetEvolve(organisationId: kotlin.String, sessionId: kotlin.String) : kotlin.String {
        val localVarResponse = resetEvolveWithHttpInfo(organisationId = organisationId, sessionId = sessionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Reset Evolve Application
     * Fully resets Evolve to an empty system
     * @param organisationId a valid SimSage Organisation id.
     * @param sessionId a valid SimSage Session id.
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun resetEvolveWithHttpInfo(organisationId: kotlin.String, sessionId: kotlin.String) : ApiResponse<kotlin.String?> {
        val localVariableConfig = resetEvolveRequestConfig(organisationId = organisationId, sessionId = sessionId)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation resetEvolve
     *
     * @param organisationId a valid SimSage Organisation id.
     * @param sessionId a valid SimSage Session id.
     * @return RequestConfig
     */
    fun resetEvolveRequestConfig(organisationId: kotlin.String, sessionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        organisationId.apply { localVariableHeaders["organisation-id"] = this.toString() }
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/dataproject/reset/{organisationId}",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Inserts/Updates a project definition
     * Inserts/Updates the details for a project definition
     * @param sessionId a valid SimSage Session id.
     * @param cmProjectDefinition 
     * @return CMCreatedProject
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun saveProjectDefinition(sessionId: kotlin.String, cmProjectDefinition: CMProjectDefinition) : CMCreatedProject {
        val localVarResponse = saveProjectDefinitionWithHttpInfo(sessionId = sessionId, cmProjectDefinition = cmProjectDefinition)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMCreatedProject
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Inserts/Updates a project definition
     * Inserts/Updates the details for a project definition
     * @param sessionId a valid SimSage Session id.
     * @param cmProjectDefinition 
     * @return ApiResponse<CMCreatedProject?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun saveProjectDefinitionWithHttpInfo(sessionId: kotlin.String, cmProjectDefinition: CMProjectDefinition) : ApiResponse<CMCreatedProject?> {
        val localVariableConfig = saveProjectDefinitionRequestConfig(sessionId = sessionId, cmProjectDefinition = cmProjectDefinition)

        return request<CMProjectDefinition, CMCreatedProject>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation saveProjectDefinition
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmProjectDefinition 
     * @return RequestConfig
     */
    fun saveProjectDefinitionRequestConfig(sessionId: kotlin.String, cmProjectDefinition: CMProjectDefinition) : RequestConfig<CMProjectDefinition> {
        val localVariableBody = cmProjectDefinition
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/dataproject/saveprojectdefinition",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Set Slice configuration
     * Saves/updates the slices configured for a running project
     * @param sessionId a valid SimSage Session id.
     * @param cmSetSliceDefinitions 
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun setSliceConfig(sessionId: kotlin.String, cmSetSliceDefinitions: CMSetSliceDefinitions) : kotlin.String {
        val localVarResponse = setSliceConfigWithHttpInfo(sessionId = sessionId, cmSetSliceDefinitions = cmSetSliceDefinitions)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Set Slice configuration
     * Saves/updates the slices configured for a running project
     * @param sessionId a valid SimSage Session id.
     * @param cmSetSliceDefinitions 
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun setSliceConfigWithHttpInfo(sessionId: kotlin.String, cmSetSliceDefinitions: CMSetSliceDefinitions) : ApiResponse<kotlin.String?> {
        val localVariableConfig = setSliceConfigRequestConfig(sessionId = sessionId, cmSetSliceDefinitions = cmSetSliceDefinitions)

        return request<CMSetSliceDefinitions, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation setSliceConfig
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmSetSliceDefinitions 
     * @return RequestConfig
     */
    fun setSliceConfigRequestConfig(sessionId: kotlin.String, cmSetSliceDefinitions: CMSetSliceDefinitions) : RequestConfig<CMSetSliceDefinitions> {
        val localVariableBody = cmSetSliceDefinitions
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/dataproject/setsliceconfig",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Document list for given slice and filters
     * Returns paged list of documents for the passed in slice and filters as well as totals
     * @param sessionId a valid SimSage Session id.
     * @param cmSlicedDocumentRequest 
     * @return CMSlicedDocumentListAndTotals
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun slicedDocuments(sessionId: kotlin.String, cmSlicedDocumentRequest: CMSlicedDocumentRequest) : CMSlicedDocumentListAndTotals {
        val localVarResponse = slicedDocumentsWithHttpInfo(sessionId = sessionId, cmSlicedDocumentRequest = cmSlicedDocumentRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMSlicedDocumentListAndTotals
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Document list for given slice and filters
     * Returns paged list of documents for the passed in slice and filters as well as totals
     * @param sessionId a valid SimSage Session id.
     * @param cmSlicedDocumentRequest 
     * @return ApiResponse<CMSlicedDocumentListAndTotals?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun slicedDocumentsWithHttpInfo(sessionId: kotlin.String, cmSlicedDocumentRequest: CMSlicedDocumentRequest) : ApiResponse<CMSlicedDocumentListAndTotals?> {
        val localVariableConfig = slicedDocumentsRequestConfig(sessionId = sessionId, cmSlicedDocumentRequest = cmSlicedDocumentRequest)

        return request<CMSlicedDocumentRequest, CMSlicedDocumentListAndTotals>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation slicedDocuments
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmSlicedDocumentRequest 
     * @return RequestConfig
     */
    fun slicedDocumentsRequestConfig(sessionId: kotlin.String, cmSlicedDocumentRequest: CMSlicedDocumentRequest) : RequestConfig<CMSlicedDocumentRequest> {
        val localVariableBody = cmSlicedDocumentRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/dataproject/sliceddocuments",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param sessionId a valid SimSage Session id.
     * @param cmStartProject 
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun startProject(sessionId: kotlin.String, cmStartProject: CMStartProject) : kotlin.Any {
        val localVarResponse = startProjectWithHttpInfo(sessionId = sessionId, cmStartProject = cmStartProject)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param sessionId a valid SimSage Session id.
     * @param cmStartProject 
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun startProjectWithHttpInfo(sessionId: kotlin.String, cmStartProject: CMStartProject) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = startProjectRequestConfig(sessionId = sessionId, cmStartProject = cmStartProject)

        return request<CMStartProject, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation startProject
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmStartProject 
     * @return RequestConfig
     */
    fun startProjectRequestConfig(sessionId: kotlin.String, cmStartProject: CMStartProject) : RequestConfig<CMStartProject> {
        val localVariableBody = cmStartProject
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json;charset=UTF-8"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/dataproject/startproject",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Update document status
     * Updates the status applied to a slice document
     * @param sessionId a valid SimSage Session id.
     * @param cmUpdateDocumentStatus 
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateDocumentStatus(sessionId: kotlin.String, cmUpdateDocumentStatus: CMUpdateDocumentStatus) : kotlin.String {
        val localVarResponse = updateDocumentStatusWithHttpInfo(sessionId = sessionId, cmUpdateDocumentStatus = cmUpdateDocumentStatus)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update document status
     * Updates the status applied to a slice document
     * @param sessionId a valid SimSage Session id.
     * @param cmUpdateDocumentStatus 
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateDocumentStatusWithHttpInfo(sessionId: kotlin.String, cmUpdateDocumentStatus: CMUpdateDocumentStatus) : ApiResponse<kotlin.String?> {
        val localVariableConfig = updateDocumentStatusRequestConfig(sessionId = sessionId, cmUpdateDocumentStatus = cmUpdateDocumentStatus)

        return request<CMUpdateDocumentStatus, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateDocumentStatus
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmUpdateDocumentStatus 
     * @return RequestConfig
     */
    fun updateDocumentStatusRequestConfig(sessionId: kotlin.String, cmUpdateDocumentStatus: CMUpdateDocumentStatus) : RequestConfig<CMUpdateDocumentStatus> {
        val localVariableBody = cmUpdateDocumentStatus
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/dataproject/updatedocstatus",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Update document redactions
     * Updates the redactions applied to a document
     * @param sessionId a valid SimSage Session id.
     * @param cmUpdateRedactions 
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateRedactions(sessionId: kotlin.String, cmUpdateRedactions: CMUpdateRedactions) : kotlin.String {
        val localVarResponse = updateRedactionsWithHttpInfo(sessionId = sessionId, cmUpdateRedactions = cmUpdateRedactions)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update document redactions
     * Updates the redactions applied to a document
     * @param sessionId a valid SimSage Session id.
     * @param cmUpdateRedactions 
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateRedactionsWithHttpInfo(sessionId: kotlin.String, cmUpdateRedactions: CMUpdateRedactions) : ApiResponse<kotlin.String?> {
        val localVariableConfig = updateRedactionsRequestConfig(sessionId = sessionId, cmUpdateRedactions = cmUpdateRedactions)

        return request<CMUpdateRedactions, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateRedactions
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmUpdateRedactions 
     * @return RequestConfig
     */
    fun updateRedactionsRequestConfig(sessionId: kotlin.String, cmUpdateRedactions: CMUpdateRedactions) : RequestConfig<CMUpdateRedactions> {
        val localVariableBody = cmUpdateRedactions
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/dataproject/updateredactions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
