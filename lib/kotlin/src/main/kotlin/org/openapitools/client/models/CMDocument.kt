/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.CMDocumentAcl
import org.openapitools.client.models.CMDocumentAudit
import org.openapitools.client.models.CMDocumentNote
import org.openapitools.client.models.CMDocumentVersion

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * A document is the main data carrying entity in SimSage.  A document can literally be a document like a pdf file found on a file-server, or a database-record, or something captured from a remote system like a web-page, or an image on a web-page.
 *
 * @param organisationId the organisation (its guid id)
 * @param kbId the knowledge-base id (its guid id)
 * @param url A unique URL for this document.
 * @param urlId A unique URL-id for this document.
 * @param origin Where the document was sourced from (for external documents).
 * @param title The title of this document, can be empty.
 * @param author The author of this document, can be empty.
 * @param documentType The file extension of this document, its type.
 * @param created a unix-timestamp for the creation date-time of this document
 * @param uploaded a unix-timestamp for the upload date-time of this document to SimSage
 * @param lastModified a unix-timestamp for the last-modified date-time of this document
 * @param crawled a unix-timestamp for when a SimSage crawler last looked at this document
 * @param converted a unix-timestamp for when a SimSage converter last looked at this document
 * @param parsed a unix-timestamp for when a SimSage parser last looked at this document
 * @param indexed a unix-timestamp for when a SimSage indexer last looked at this document
 * @param previewed a unix-timestamp for when a SimSage image-converter last looked at this document
 * @param changeHash A unique hash-string identifying SimSage changes to this document.  SimSage uses the value to see if the content has changed since last.
 * @param contentHash A unique hash-string identifying the content of this document.  SimSage uses this value to find exact duplicates.
 * @param sourceId the source-id of this crawler (ie. the crawler's id)
 * @param parentUrl a related url if there is parentage to be considered for an item
 * @param acls a list of the exact ACLs applying to this document (can be empty)
 * @param metadata a series of name values for other metadata values found in the container of this document
 * @param numSentences the number of sentences in this document.
 * @param numWords the total number of words in this document.
 * @param numRelationships the total number of relationships in this document.
 * @param binarySize the size of the original document's binary in bytes.
 * @param textSize the size of the converted document's text in bytes.
 * @param versionList list of binary versions of this document
 * @param noteList list of checkout notes about this document
 * @param activityList list of activities for the last two months of this document
 * @param typeDescription a description of the type of this document
 * @param filename the filename of this document in the DMS system
 * @param folderId the folderId of this item in the DMS system
 */


data class CMDocument (

    /* the organisation (its guid id) */
    @Json(name = "organisationId")
    val organisationId: kotlin.String,

    /* the knowledge-base id (its guid id) */
    @Json(name = "kbId")
    val kbId: kotlin.String,

    /* A unique URL for this document. */
    @Json(name = "url")
    val url: kotlin.String,

    /* A unique URL-id for this document. */
    @Json(name = "urlId")
    val urlId: kotlin.Int,

    /* Where the document was sourced from (for external documents). */
    @Json(name = "origin")
    val origin: kotlin.String,

    /* The title of this document, can be empty. */
    @Json(name = "title")
    val title: kotlin.String,

    /* The author of this document, can be empty. */
    @Json(name = "author")
    val author: kotlin.String,

    /* The file extension of this document, its type. */
    @Json(name = "documentType")
    val documentType: kotlin.String,

    /* a unix-timestamp for the creation date-time of this document */
    @Json(name = "created")
    val created: kotlin.Long,

    /* a unix-timestamp for the upload date-time of this document to SimSage */
    @Json(name = "uploaded")
    val uploaded: kotlin.Long,

    /* a unix-timestamp for the last-modified date-time of this document */
    @Json(name = "lastModified")
    val lastModified: kotlin.Long,

    /* a unix-timestamp for when a SimSage crawler last looked at this document */
    @Json(name = "crawled")
    val crawled: kotlin.Long,

    /* a unix-timestamp for when a SimSage converter last looked at this document */
    @Json(name = "converted")
    val converted: kotlin.Long,

    /* a unix-timestamp for when a SimSage parser last looked at this document */
    @Json(name = "parsed")
    val parsed: kotlin.Long,

    /* a unix-timestamp for when a SimSage indexer last looked at this document */
    @Json(name = "indexed")
    val indexed: kotlin.Long,

    /* a unix-timestamp for when a SimSage image-converter last looked at this document */
    @Json(name = "previewed")
    val previewed: kotlin.Long,

    /* A unique hash-string identifying SimSage changes to this document.  SimSage uses the value to see if the content has changed since last. */
    @Json(name = "changeHash")
    val changeHash: kotlin.String,

    /* A unique hash-string identifying the content of this document.  SimSage uses this value to find exact duplicates. */
    @Json(name = "contentHash")
    val contentHash: kotlin.String,

    /* the source-id of this crawler (ie. the crawler's id) */
    @Json(name = "sourceId")
    val sourceId: kotlin.Int,

    /* a related url if there is parentage to be considered for an item */
    @Json(name = "parentUrl")
    val parentUrl: kotlin.String,

    /* a list of the exact ACLs applying to this document (can be empty) */
    @Json(name = "acls")
    val acls: kotlin.collections.List<CMDocumentAcl>,

    /* a series of name values for other metadata values found in the container of this document */
    @Json(name = "metadata")
    val metadata: kotlin.collections.Map<kotlin.String, kotlin.String>,

    /* the number of sentences in this document. */
    @Json(name = "numSentences")
    val numSentences: kotlin.Int,

    /* the total number of words in this document. */
    @Json(name = "numWords")
    val numWords: kotlin.Int,

    /* the total number of relationships in this document. */
    @Json(name = "numRelationships")
    val numRelationships: kotlin.Int,

    /* the size of the original document's binary in bytes. */
    @Json(name = "binarySize")
    val binarySize: kotlin.Long,

    /* the size of the converted document's text in bytes. */
    @Json(name = "textSize")
    val textSize: kotlin.Int,

    /* list of binary versions of this document */
    @Json(name = "versionList")
    val versionList: kotlin.collections.List<CMDocumentVersion>,

    /* list of checkout notes about this document */
    @Json(name = "noteList")
    val noteList: kotlin.collections.List<CMDocumentNote>,

    /* list of activities for the last two months of this document */
    @Json(name = "activityList")
    val activityList: kotlin.collections.List<CMDocumentAudit>,

    /* a description of the type of this document */
    @Json(name = "typeDescription")
    val typeDescription: kotlin.String,

    /* the filename of this document in the DMS system */
    @Json(name = "filename")
    val filename: kotlin.String,

    /* the folderId of this item in the DMS system */
    @Json(name = "folderId")
    val folderId: kotlin.String

)

