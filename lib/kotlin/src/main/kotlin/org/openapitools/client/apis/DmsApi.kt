/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.CMAddFolder
import org.openapitools.client.models.CMAddSourceFolder
import org.openapitools.client.models.CMClientQuery
import org.openapitools.client.models.CMClientQueryResult
import org.openapitools.client.models.CMDUserDashboard
import org.openapitools.client.models.CMDocument
import org.openapitools.client.models.CMDocumentAudit
import org.openapitools.client.models.CMDocumentBookmark
import org.openapitools.client.models.CMDocumentFolder
import org.openapitools.client.models.CMDocumentHashTag
import org.openapitools.client.models.CMDocumentLock
import org.openapitools.client.models.CMDocumentNote
import org.openapitools.client.models.CMDocumentSubscription
import org.openapitools.client.models.CMSavedSearch
import org.openapitools.client.models.CMSubscriptions
import org.openapitools.client.models.CMUpdateACLs
import org.openapitools.client.models.CMUserNotification
import org.openapitools.client.models.DocumentBookmark
import org.openapitools.client.models.DocumentDeleted
import org.openapitools.client.models.JsonMessage

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class DmsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://test.simsage.ai")
        }
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionAddFolder(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Add a new folder
     * Add a new folder to the SimSage DMS.
     * @param sessionId a valid SimSage Session id.
     * @param cmAddFolder 
     * @param apIVersion  (optional)
     * @return CMDocumentFolder
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun addFolder(sessionId: kotlin.String, cmAddFolder: CMAddFolder, apIVersion: ApIVersionAddFolder? = null) : CMDocumentFolder {
        val localVarResponse = addFolderWithHttpInfo(sessionId = sessionId, cmAddFolder = cmAddFolder, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMDocumentFolder
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Add a new folder
     * Add a new folder to the SimSage DMS.
     * @param sessionId a valid SimSage Session id.
     * @param cmAddFolder 
     * @param apIVersion  (optional)
     * @return ApiResponse<CMDocumentFolder?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun addFolderWithHttpInfo(sessionId: kotlin.String, cmAddFolder: CMAddFolder, apIVersion: ApIVersionAddFolder?) : ApiResponse<CMDocumentFolder?> {
        val localVariableConfig = addFolderRequestConfig(sessionId = sessionId, cmAddFolder = cmAddFolder, apIVersion = apIVersion)

        return request<CMAddFolder, CMDocumentFolder>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation addFolder
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmAddFolder 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun addFolderRequestConfig(sessionId: kotlin.String, cmAddFolder: CMAddFolder, apIVersion: ApIVersionAddFolder?) : RequestConfig<CMAddFolder> {
        val localVariableBody = cmAddFolder
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/dms/folder",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionAddSourceFolder(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Add a new source-folder
     * Add a new top-level folder (source folder) to the SimSage DMS.
     * @param sessionId a valid SimSage Session id.
     * @param cmAddSourceFolder 
     * @param apIVersion  (optional)
     * @return CMDocumentFolder
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun addSourceFolder(sessionId: kotlin.String, cmAddSourceFolder: CMAddSourceFolder, apIVersion: ApIVersionAddSourceFolder? = null) : CMDocumentFolder {
        val localVarResponse = addSourceFolderWithHttpInfo(sessionId = sessionId, cmAddSourceFolder = cmAddSourceFolder, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMDocumentFolder
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Add a new source-folder
     * Add a new top-level folder (source folder) to the SimSage DMS.
     * @param sessionId a valid SimSage Session id.
     * @param cmAddSourceFolder 
     * @param apIVersion  (optional)
     * @return ApiResponse<CMDocumentFolder?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun addSourceFolderWithHttpInfo(sessionId: kotlin.String, cmAddSourceFolder: CMAddSourceFolder, apIVersion: ApIVersionAddSourceFolder?) : ApiResponse<CMDocumentFolder?> {
        val localVariableConfig = addSourceFolderRequestConfig(sessionId = sessionId, cmAddSourceFolder = cmAddSourceFolder, apIVersion = apIVersion)

        return request<CMAddSourceFolder, CMDocumentFolder>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation addSourceFolder
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmAddSourceFolder 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun addSourceFolderRequestConfig(sessionId: kotlin.String, cmAddSourceFolder: CMAddSourceFolder, apIVersion: ApIVersionAddSourceFolder?) : RequestConfig<CMAddSourceFolder> {
        val localVariableBody = cmAddSourceFolder
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/dms/source",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionDeleteAllNotes(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * delete all Notes
     * delete all notes associated with a document
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param url the base64 encoded url value
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteAllNotes(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, url: kotlin.String, apIVersion: ApIVersionDeleteAllNotes? = null) : JsonMessage {
        val localVarResponse = deleteAllNotesWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, url = url, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * delete all Notes
     * delete all notes associated with a document
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param url the base64 encoded url value
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteAllNotesWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, url: kotlin.String, apIVersion: ApIVersionDeleteAllNotes?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = deleteAllNotesRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, url = url, apIVersion = apIVersion)

        return request<Unit, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteAllNotes
     *
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param url the base64 encoded url value
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun deleteAllNotesRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, url: kotlin.String, apIVersion: ApIVersionDeleteAllNotes?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/dms/note/{organisationId}/{kbId}/{url}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"url"+"}", encodeURIComponent(url.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionDeleteBookmark(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Delete a Bookmark
     * Delete a user&#39;s bookmark associated with a document
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param userId the user&#39;s id
     * @param url the base64 encoded url value
     * @param apIVersion  (optional)
     * @return kotlin.collections.List<CMDocumentBookmark>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteBookmark(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, userId: kotlin.String, url: kotlin.String, apIVersion: ApIVersionDeleteBookmark? = null) : kotlin.collections.List<CMDocumentBookmark> {
        val localVarResponse = deleteBookmarkWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, userId = userId, url = url, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CMDocumentBookmark>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete a Bookmark
     * Delete a user&#39;s bookmark associated with a document
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param userId the user&#39;s id
     * @param url the base64 encoded url value
     * @param apIVersion  (optional)
     * @return ApiResponse<kotlin.collections.List<CMDocumentBookmark>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteBookmarkWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, userId: kotlin.String, url: kotlin.String, apIVersion: ApIVersionDeleteBookmark?) : ApiResponse<kotlin.collections.List<CMDocumentBookmark>?> {
        val localVariableConfig = deleteBookmarkRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, userId = userId, url = url, apIVersion = apIVersion)

        return request<Unit, kotlin.collections.List<CMDocumentBookmark>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteBookmark
     *
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param userId the user&#39;s id
     * @param url the base64 encoded url value
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun deleteBookmarkRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, userId: kotlin.String, url: kotlin.String, apIVersion: ApIVersionDeleteBookmark?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/dms/bookmark/{organisationId}/{kbId}/{userId}/{url}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"userId"+"}", encodeURIComponent(userId.toString())).replace("{"+"url"+"}", encodeURIComponent(url.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionDeleteDocumentOrFolder(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Delete a document or a folder
     * Mark a document/folder as deleted in the SimSage DMS.
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param isFolder is this a folder or a document?
     * @param sourceId the source-id of the item being deleted
     * @param url the base64 encoded url value
     * @param folderId the folder&#39;s id
     * @param apIVersion  (optional)
     * @return CMDocumentFolder
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteDocumentOrFolder(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, isFolder: kotlin.Boolean, sourceId: kotlin.Int, url: kotlin.String, folderId: kotlin.String, apIVersion: ApIVersionDeleteDocumentOrFolder? = null) : CMDocumentFolder {
        val localVarResponse = deleteDocumentOrFolderWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, isFolder = isFolder, sourceId = sourceId, url = url, folderId = folderId, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMDocumentFolder
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete a document or a folder
     * Mark a document/folder as deleted in the SimSage DMS.
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param isFolder is this a folder or a document?
     * @param sourceId the source-id of the item being deleted
     * @param url the base64 encoded url value
     * @param folderId the folder&#39;s id
     * @param apIVersion  (optional)
     * @return ApiResponse<CMDocumentFolder?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteDocumentOrFolderWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, isFolder: kotlin.Boolean, sourceId: kotlin.Int, url: kotlin.String, folderId: kotlin.String, apIVersion: ApIVersionDeleteDocumentOrFolder?) : ApiResponse<CMDocumentFolder?> {
        val localVariableConfig = deleteDocumentOrFolderRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, isFolder = isFolder, sourceId = sourceId, url = url, folderId = folderId, apIVersion = apIVersion)

        return request<Unit, CMDocumentFolder>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteDocumentOrFolder
     *
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param isFolder is this a folder or a document?
     * @param sourceId the source-id of the item being deleted
     * @param url the base64 encoded url value
     * @param folderId the folder&#39;s id
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun deleteDocumentOrFolderRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, isFolder: kotlin.Boolean, sourceId: kotlin.Int, url: kotlin.String, folderId: kotlin.String, apIVersion: ApIVersionDeleteDocumentOrFolder?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/dms/document/delete/{organisationId}/{kbId}/{isFolder}/{sourceId}/{url}/{folderId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"isFolder"+"}", encodeURIComponent(isFolder.toString())).replace("{"+"sourceId"+"}", encodeURIComponent(sourceId.toString())).replace("{"+"url"+"}", encodeURIComponent(url.toString())).replace("{"+"folderId"+"}", encodeURIComponent(folderId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionDeleteNote(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Delete a Note
     * Delete a note associated with a document
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param url the base64 encoded url value
     * @param noteId the id of the note to delete
     * @param apIVersion  (optional)
     * @return kotlin.collections.List<CMDocumentNote>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteNote(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, url: kotlin.String, noteId: kotlin.Int, apIVersion: ApIVersionDeleteNote? = null) : kotlin.collections.List<CMDocumentNote> {
        val localVarResponse = deleteNoteWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, url = url, noteId = noteId, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CMDocumentNote>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete a Note
     * Delete a note associated with a document
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param url the base64 encoded url value
     * @param noteId the id of the note to delete
     * @param apIVersion  (optional)
     * @return ApiResponse<kotlin.collections.List<CMDocumentNote>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteNoteWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, url: kotlin.String, noteId: kotlin.Int, apIVersion: ApIVersionDeleteNote?) : ApiResponse<kotlin.collections.List<CMDocumentNote>?> {
        val localVariableConfig = deleteNoteRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, url = url, noteId = noteId, apIVersion = apIVersion)

        return request<Unit, kotlin.collections.List<CMDocumentNote>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteNote
     *
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param url the base64 encoded url value
     * @param noteId the id of the note to delete
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun deleteNoteRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, url: kotlin.String, noteId: kotlin.Int, apIVersion: ApIVersionDeleteNote?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/dms/note/{organisationId}/{kbId}/{url}/{noteId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"url"+"}", encodeURIComponent(url.toString())).replace("{"+"noteId"+"}", encodeURIComponent(noteId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionDeleteSourceFolder(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Remove source-folder
     * Remove an existing top-level folder (source folder) from the SimSage DMS.
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sourceId the sourceId of the source-folder to remove
     * @param apIVersion  (optional)
     * @return CMDocumentFolder
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteSourceFolder(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, sourceId: kotlin.Int, apIVersion: ApIVersionDeleteSourceFolder? = null) : CMDocumentFolder {
        val localVarResponse = deleteSourceFolderWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, sourceId = sourceId, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMDocumentFolder
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Remove source-folder
     * Remove an existing top-level folder (source folder) from the SimSage DMS.
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sourceId the sourceId of the source-folder to remove
     * @param apIVersion  (optional)
     * @return ApiResponse<CMDocumentFolder?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteSourceFolderWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, sourceId: kotlin.Int, apIVersion: ApIVersionDeleteSourceFolder?) : ApiResponse<CMDocumentFolder?> {
        val localVariableConfig = deleteSourceFolderRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, sourceId = sourceId, apIVersion = apIVersion)

        return request<Unit, CMDocumentFolder>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteSourceFolder
     *
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sourceId the sourceId of the source-folder to remove
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun deleteSourceFolderRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, sourceId: kotlin.Int, apIVersion: ApIVersionDeleteSourceFolder?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/dms/source/{organisationId}/{kbId}/{sourceId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"sourceId"+"}", encodeURIComponent(sourceId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionDeleteSubscription(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Delete a Subscription
     * Delete a user&#39;s subscription associated with a document, returns an updated subscription set.
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param userId the user&#39;s id
     * @param url the base64 encoded url value
     * @param apIVersion  (optional)
     * @return CMSubscriptions
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteSubscription(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, userId: kotlin.String, url: kotlin.String, apIVersion: ApIVersionDeleteSubscription? = null) : CMSubscriptions {
        val localVarResponse = deleteSubscriptionWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, userId = userId, url = url, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMSubscriptions
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete a Subscription
     * Delete a user&#39;s subscription associated with a document, returns an updated subscription set.
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param userId the user&#39;s id
     * @param url the base64 encoded url value
     * @param apIVersion  (optional)
     * @return ApiResponse<CMSubscriptions?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteSubscriptionWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, userId: kotlin.String, url: kotlin.String, apIVersion: ApIVersionDeleteSubscription?) : ApiResponse<CMSubscriptions?> {
        val localVariableConfig = deleteSubscriptionRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, userId = userId, url = url, apIVersion = apIVersion)

        return request<Unit, CMSubscriptions>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteSubscription
     *
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param userId the user&#39;s id
     * @param url the base64 encoded url value
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun deleteSubscriptionRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, userId: kotlin.String, url: kotlin.String, apIVersion: ApIVersionDeleteSubscription?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/dms/subscription/{organisationId}/{kbId}/{userId}/{url}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"userId"+"}", encodeURIComponent(userId.toString())).replace("{"+"url"+"}", encodeURIComponent(url.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionDeleteUserSearch(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Delete a Saved Search
     * Delete a user&#39;s saved search
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param userId the user&#39;s id
     * @param text the base64 encoded search-text value
     * @param top how many records to return
     * @param apIVersion  (optional)
     * @return kotlin.collections.List<CMSavedSearch>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteUserSearch(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, userId: kotlin.String, text: kotlin.String, top: kotlin.Int, apIVersion: ApIVersionDeleteUserSearch? = null) : kotlin.collections.List<CMSavedSearch> {
        val localVarResponse = deleteUserSearchWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, userId = userId, text = text, top = top, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CMSavedSearch>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete a Saved Search
     * Delete a user&#39;s saved search
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param userId the user&#39;s id
     * @param text the base64 encoded search-text value
     * @param top how many records to return
     * @param apIVersion  (optional)
     * @return ApiResponse<kotlin.collections.List<CMSavedSearch>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteUserSearchWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, userId: kotlin.String, text: kotlin.String, top: kotlin.Int, apIVersion: ApIVersionDeleteUserSearch?) : ApiResponse<kotlin.collections.List<CMSavedSearch>?> {
        val localVariableConfig = deleteUserSearchRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, userId = userId, text = text, top = top, apIVersion = apIVersion)

        return request<Unit, kotlin.collections.List<CMSavedSearch>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteUserSearch
     *
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param userId the user&#39;s id
     * @param text the base64 encoded search-text value
     * @param top how many records to return
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun deleteUserSearchRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, userId: kotlin.String, text: kotlin.String, top: kotlin.Int, apIVersion: ApIVersionDeleteUserSearch?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/dms/saved-search/{organisationId}/{kbId}/{userId}/{text}/{top}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"userId"+"}", encodeURIComponent(userId.toString())).replace("{"+"text"+"}", encodeURIComponent(text.toString())).replace("{"+"top"+"}", encodeURIComponent(top.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get Document
     * Return a document&#39;s details by url-id
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param urlId the document&#39;s url-id, a unique id identifying a document.
     * @return CMDocument
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun document1(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, urlId: kotlin.Int) : CMDocument {
        val localVarResponse = document1WithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, urlId = urlId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Document
     * Return a document&#39;s details by url-id
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param urlId the document&#39;s url-id, a unique id identifying a document.
     * @return ApiResponse<CMDocument?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun document1WithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, urlId: kotlin.Int) : ApiResponse<CMDocument?> {
        val localVariableConfig = document1RequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, urlId = urlId)

        return request<Unit, CMDocument>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation document1
     *
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param urlId the document&#39;s url-id, a unique id identifying a document.
     * @return RequestConfig
     */
    fun document1RequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, urlId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/dms/document/{organisationId}/{kbId}/{urlId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"urlId"+"}", encodeURIComponent(urlId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Binary
     * Get the original for a document if available by url (latest version)
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param url a base64 encoded url
     * @return kotlin.ByteArray
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun documentBinary(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, url: kotlin.String) : kotlin.ByteArray {
        val localVarResponse = documentBinaryWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, url = url)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.ByteArray
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Binary
     * Get the original for a document if available by url (latest version)
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param url a base64 encoded url
     * @return ApiResponse<kotlin.ByteArray?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun documentBinaryWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, url: kotlin.String) : ApiResponse<kotlin.ByteArray?> {
        val localVariableConfig = documentBinaryRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, url = url)

        return request<Unit, kotlin.ByteArray>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation documentBinary
     *
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param url a base64 encoded url
     * @return RequestConfig
     */
    fun documentBinaryRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, url: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/octet-stream, application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/dms/binary/latest/{organisationId}/{kbId}/{url}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"url"+"}", encodeURIComponent(url.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get Binary Document
     * Return a document&#39;s binary by url and version
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param url the document&#39;s url, base64 encoded.  A unique id identifying a document.
     * @param version the document&#39;s binary version.
     * @return kotlin.ByteArray
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun documentVersion(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, url: kotlin.String, version: kotlin.Int) : kotlin.ByteArray {
        val localVarResponse = documentVersionWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, url = url, version = version)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.ByteArray
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Binary Document
     * Return a document&#39;s binary by url and version
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param url the document&#39;s url, base64 encoded.  A unique id identifying a document.
     * @param version the document&#39;s binary version.
     * @return ApiResponse<kotlin.ByteArray?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun documentVersionWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, url: kotlin.String, version: kotlin.Int) : ApiResponse<kotlin.ByteArray?> {
        val localVariableConfig = documentVersionRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, url = url, version = version)

        return request<Unit, kotlin.ByteArray>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation documentVersion
     *
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param url the document&#39;s url, base64 encoded.  A unique id identifying a document.
     * @param version the document&#39;s binary version.
     * @return RequestConfig
     */
    fun documentVersionRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, url: kotlin.String, version: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/octet-stream, application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/dms/binary/{organisationId}/{kbId}/{url}/{version}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"url"+"}", encodeURIComponent(url.toString())).replace("{"+"version"+"}", encodeURIComponent(version.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionFilterFolders(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Filter Folders
     * Filter a set of folders using Search
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param text the text to use to filter (base64 encoded)
     * @param apIVersion  (optional)
     * @return CMDocumentFolder
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun filterFolders(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, text: kotlin.String, apIVersion: ApIVersionFilterFolders? = null) : CMDocumentFolder {
        val localVarResponse = filterFoldersWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, text = text, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMDocumentFolder
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Filter Folders
     * Filter a set of folders using Search
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param text the text to use to filter (base64 encoded)
     * @param apIVersion  (optional)
     * @return ApiResponse<CMDocumentFolder?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun filterFoldersWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, text: kotlin.String, apIVersion: ApIVersionFilterFolders?) : ApiResponse<CMDocumentFolder?> {
        val localVariableConfig = filterFoldersRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, text = text, apIVersion = apIVersion)

        return request<Unit, CMDocumentFolder>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation filterFolders
     *
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param text the text to use to filter (base64 encoded)
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun filterFoldersRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, text: kotlin.String, apIVersion: ApIVersionFilterFolders?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/dms/folder/filter/{organisationId}/{kbId}/{text}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"text"+"}", encodeURIComponent(text.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionForceReleaseLock(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Force-release a lock
     * A system administrator or manager can force-unlock a document.
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param userId the user&#39;s id
     * @param url the base64 encoded url value
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun forceReleaseLock(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, userId: kotlin.String, url: kotlin.String, apIVersion: ApIVersionForceReleaseLock? = null) : JsonMessage {
        val localVarResponse = forceReleaseLockWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, userId = userId, url = url, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Force-release a lock
     * A system administrator or manager can force-unlock a document.
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param userId the user&#39;s id
     * @param url the base64 encoded url value
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun forceReleaseLockWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, userId: kotlin.String, url: kotlin.String, apIVersion: ApIVersionForceReleaseLock?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = forceReleaseLockRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, userId = userId, url = url, apIVersion = apIVersion)

        return request<Unit, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation forceReleaseLock
     *
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param userId the user&#39;s id
     * @param url the base64 encoded url value
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun forceReleaseLockRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, userId: kotlin.String, url: kotlin.String, apIVersion: ApIVersionForceReleaseLock?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/dms/lock/release/{organisationId}/{kbId}/{userId}/{url}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"userId"+"}", encodeURIComponent(userId.toString())).replace("{"+"url"+"}", encodeURIComponent(url.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionGetBookmarkList(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Get Bookmarks
     * Return a list of bookmarks for a given user
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param userId the user&#39;s id
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return kotlin.collections.List<CMDocumentBookmark>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getBookmarkList(organisationId: kotlin.String, kbId: kotlin.String, userId: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionGetBookmarkList? = null) : kotlin.collections.List<CMDocumentBookmark> {
        val localVarResponse = getBookmarkListWithHttpInfo(organisationId = organisationId, kbId = kbId, userId = userId, sessionId = sessionId, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CMDocumentBookmark>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Bookmarks
     * Return a list of bookmarks for a given user
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param userId the user&#39;s id
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return ApiResponse<kotlin.collections.List<CMDocumentBookmark>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getBookmarkListWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, userId: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionGetBookmarkList?) : ApiResponse<kotlin.collections.List<CMDocumentBookmark>?> {
        val localVariableConfig = getBookmarkListRequestConfig(organisationId = organisationId, kbId = kbId, userId = userId, sessionId = sessionId, apIVersion = apIVersion)

        return request<Unit, kotlin.collections.List<CMDocumentBookmark>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getBookmarkList
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param userId the user&#39;s id
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun getBookmarkListRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, userId: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionGetBookmarkList?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/dms/bookmark/{organisationId}/{kbId}/{userId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"userId"+"}", encodeURIComponent(userId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionGetDeletedDocuments(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Deleted records with optional filter
     * Return a list of deleted document records for an administrator (all records) with an optional filter set.
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param filter an optional text filter for URLs
     * @param apIVersion  (optional)
     * @return kotlin.collections.List<DocumentDeleted>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDeletedDocuments(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, filter: kotlin.String, apIVersion: ApIVersionGetDeletedDocuments? = null) : kotlin.collections.List<DocumentDeleted> {
        val localVarResponse = getDeletedDocumentsWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, filter = filter, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<DocumentDeleted>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Deleted records with optional filter
     * Return a list of deleted document records for an administrator (all records) with an optional filter set.
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param filter an optional text filter for URLs
     * @param apIVersion  (optional)
     * @return ApiResponse<kotlin.collections.List<DocumentDeleted>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getDeletedDocumentsWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, filter: kotlin.String, apIVersion: ApIVersionGetDeletedDocuments?) : ApiResponse<kotlin.collections.List<DocumentDeleted>?> {
        val localVariableConfig = getDeletedDocumentsRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, filter = filter, apIVersion = apIVersion)

        return request<Unit, kotlin.collections.List<DocumentDeleted>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getDeletedDocuments
     *
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param filter an optional text filter for URLs
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun getDeletedDocumentsRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, filter: kotlin.String, apIVersion: ApIVersionGetDeletedDocuments?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/dms/deleted/{organisationId}/{kbId}/{filter}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"filter"+"}", encodeURIComponent(filter.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionGetDocumentAudit(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Audit records for a document for a month
     * Return document audit records for a user (filtered) or administrator (all records) for a given document / month
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param year the year for the notifications
     * @param month the month for the notifications
     * @param url the document url (base64 encoded) to get audit records for
     * @param apIVersion  (optional)
     * @return kotlin.collections.List<CMDocumentAudit>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDocumentAudit(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, year: kotlin.Int, month: kotlin.Int, url: kotlin.String, apIVersion: ApIVersionGetDocumentAudit? = null) : kotlin.collections.List<CMDocumentAudit> {
        val localVarResponse = getDocumentAuditWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, year = year, month = month, url = url, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CMDocumentAudit>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Audit records for a document for a month
     * Return document audit records for a user (filtered) or administrator (all records) for a given document / month
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param year the year for the notifications
     * @param month the month for the notifications
     * @param url the document url (base64 encoded) to get audit records for
     * @param apIVersion  (optional)
     * @return ApiResponse<kotlin.collections.List<CMDocumentAudit>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getDocumentAuditWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, year: kotlin.Int, month: kotlin.Int, url: kotlin.String, apIVersion: ApIVersionGetDocumentAudit?) : ApiResponse<kotlin.collections.List<CMDocumentAudit>?> {
        val localVariableConfig = getDocumentAuditRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, year = year, month = month, url = url, apIVersion = apIVersion)

        return request<Unit, kotlin.collections.List<CMDocumentAudit>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getDocumentAudit
     *
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param year the year for the notifications
     * @param month the month for the notifications
     * @param url the document url (base64 encoded) to get audit records for
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun getDocumentAuditRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, year: kotlin.Int, month: kotlin.Int, url: kotlin.String, apIVersion: ApIVersionGetDocumentAudit?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/dms/audit/{organisationId}/{kbId}/{year}/{month}/{url}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"year"+"}", encodeURIComponent(year.toString())).replace("{"+"month"+"}", encodeURIComponent(month.toString())).replace("{"+"url"+"}", encodeURIComponent(url.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionGetFolder(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Get Folder Content
     * Return a folder&#39;s content
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sourceId the owner source&#39;s id
     * @param folderId the folder&#39;s id
     * @param prevUrl pagination, the previous last URL for the page-set (&#39;null&#39; is first page)
     * @param pageSize page-size for a paginated set
     * @param apIVersion  (optional)
     * @return CMDocumentFolder
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getFolder(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, sourceId: kotlin.Int, folderId: kotlin.String, prevUrl: kotlin.String, pageSize: kotlin.Int, apIVersion: ApIVersionGetFolder? = null) : CMDocumentFolder {
        val localVarResponse = getFolderWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, sourceId = sourceId, folderId = folderId, prevUrl = prevUrl, pageSize = pageSize, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMDocumentFolder
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Folder Content
     * Return a folder&#39;s content
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sourceId the owner source&#39;s id
     * @param folderId the folder&#39;s id
     * @param prevUrl pagination, the previous last URL for the page-set (&#39;null&#39; is first page)
     * @param pageSize page-size for a paginated set
     * @param apIVersion  (optional)
     * @return ApiResponse<CMDocumentFolder?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getFolderWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, sourceId: kotlin.Int, folderId: kotlin.String, prevUrl: kotlin.String, pageSize: kotlin.Int, apIVersion: ApIVersionGetFolder?) : ApiResponse<CMDocumentFolder?> {
        val localVariableConfig = getFolderRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, sourceId = sourceId, folderId = folderId, prevUrl = prevUrl, pageSize = pageSize, apIVersion = apIVersion)

        return request<Unit, CMDocumentFolder>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getFolder
     *
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sourceId the owner source&#39;s id
     * @param folderId the folder&#39;s id
     * @param prevUrl pagination, the previous last URL for the page-set (&#39;null&#39; is first page)
     * @param pageSize page-size for a paginated set
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun getFolderRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, sourceId: kotlin.Int, folderId: kotlin.String, prevUrl: kotlin.String, pageSize: kotlin.Int, apIVersion: ApIVersionGetFolder?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/dms/folder/{organisationId}/{kbId}/{sourceId}/{folderId}/{prevUrl}/{pageSize}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"sourceId"+"}", encodeURIComponent(sourceId.toString())).replace("{"+"folderId"+"}", encodeURIComponent(folderId.toString())).replace("{"+"prevUrl"+"}", encodeURIComponent(prevUrl.toString())).replace("{"+"pageSize"+"}", encodeURIComponent(pageSize.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionGetFullAudit(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Audit records for a month
     * Return document audit records for a user (filtered) or administrator (all records) for a given month
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param year the year for the notifications
     * @param month the month for the notifications
     * @param apIVersion  (optional)
     * @return kotlin.collections.List<CMDocumentAudit>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getFullAudit(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, year: kotlin.Int, month: kotlin.Int, apIVersion: ApIVersionGetFullAudit? = null) : kotlin.collections.List<CMDocumentAudit> {
        val localVarResponse = getFullAuditWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, year = year, month = month, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CMDocumentAudit>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Audit records for a month
     * Return document audit records for a user (filtered) or administrator (all records) for a given month
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param year the year for the notifications
     * @param month the month for the notifications
     * @param apIVersion  (optional)
     * @return ApiResponse<kotlin.collections.List<CMDocumentAudit>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getFullAuditWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, year: kotlin.Int, month: kotlin.Int, apIVersion: ApIVersionGetFullAudit?) : ApiResponse<kotlin.collections.List<CMDocumentAudit>?> {
        val localVariableConfig = getFullAuditRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, year = year, month = month, apIVersion = apIVersion)

        return request<Unit, kotlin.collections.List<CMDocumentAudit>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getFullAudit
     *
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param year the year for the notifications
     * @param month the month for the notifications
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun getFullAuditRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, year: kotlin.Int, month: kotlin.Int, apIVersion: ApIVersionGetFullAudit?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/dms/audit/{organisationId}/{kbId}/{year}/{month}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"year"+"}", encodeURIComponent(year.toString())).replace("{"+"month"+"}", encodeURIComponent(month.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionGetLockedList(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Get locked documents for user
     * Return a list of locked documents for a given user
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param userId the user&#39;s id
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return kotlin.collections.List<CMDocument>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getLockedList(organisationId: kotlin.String, kbId: kotlin.String, userId: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionGetLockedList? = null) : kotlin.collections.List<CMDocument> {
        val localVarResponse = getLockedListWithHttpInfo(organisationId = organisationId, kbId = kbId, userId = userId, sessionId = sessionId, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CMDocument>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get locked documents for user
     * Return a list of locked documents for a given user
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param userId the user&#39;s id
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return ApiResponse<kotlin.collections.List<CMDocument>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getLockedListWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, userId: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionGetLockedList?) : ApiResponse<kotlin.collections.List<CMDocument>?> {
        val localVariableConfig = getLockedListRequestConfig(organisationId = organisationId, kbId = kbId, userId = userId, sessionId = sessionId, apIVersion = apIVersion)

        return request<Unit, kotlin.collections.List<CMDocument>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getLockedList
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param userId the user&#39;s id
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun getLockedListRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, userId: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionGetLockedList?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/dms/lock/{organisationId}/{kbId}/{userId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"userId"+"}", encodeURIComponent(userId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionGetNoteList(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Get Notes
     * Return a list of notes for a given url
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param url the base64 encoded url value
     * @param apIVersion  (optional)
     * @return kotlin.collections.List<CMDocumentNote>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getNoteList(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, url: kotlin.String, apIVersion: ApIVersionGetNoteList? = null) : kotlin.collections.List<CMDocumentNote> {
        val localVarResponse = getNoteListWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, url = url, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CMDocumentNote>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Notes
     * Return a list of notes for a given url
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param url the base64 encoded url value
     * @param apIVersion  (optional)
     * @return ApiResponse<kotlin.collections.List<CMDocumentNote>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getNoteListWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, url: kotlin.String, apIVersion: ApIVersionGetNoteList?) : ApiResponse<kotlin.collections.List<CMDocumentNote>?> {
        val localVariableConfig = getNoteListRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, url = url, apIVersion = apIVersion)

        return request<Unit, kotlin.collections.List<CMDocumentNote>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getNoteList
     *
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param url the base64 encoded url value
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun getNoteListRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, url: kotlin.String, apIVersion: ApIVersionGetNoteList?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/dms/note/{organisationId}/{kbId}/{url}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"url"+"}", encodeURIComponent(url.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionGetSavedSearches(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * User&#39;s saved searches
     * Return a user&#39;s saved searches
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param userId the user&#39;s id
     * @param top how many records to return
     * @param apIVersion  (optional)
     * @return kotlin.collections.List<CMSavedSearch>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSavedSearches(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, userId: kotlin.String, top: kotlin.Int, apIVersion: ApIVersionGetSavedSearches? = null) : kotlin.collections.List<CMSavedSearch> {
        val localVarResponse = getSavedSearchesWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, userId = userId, top = top, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CMSavedSearch>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * User&#39;s saved searches
     * Return a user&#39;s saved searches
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param userId the user&#39;s id
     * @param top how many records to return
     * @param apIVersion  (optional)
     * @return ApiResponse<kotlin.collections.List<CMSavedSearch>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSavedSearchesWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, userId: kotlin.String, top: kotlin.Int, apIVersion: ApIVersionGetSavedSearches?) : ApiResponse<kotlin.collections.List<CMSavedSearch>?> {
        val localVariableConfig = getSavedSearchesRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, userId = userId, top = top, apIVersion = apIVersion)

        return request<Unit, kotlin.collections.List<CMSavedSearch>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSavedSearches
     *
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param userId the user&#39;s id
     * @param top how many records to return
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun getSavedSearchesRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, userId: kotlin.String, top: kotlin.Int, apIVersion: ApIVersionGetSavedSearches?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/dms/saved-searches/{organisationId}/{kbId}/{userId}/{top}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"userId"+"}", encodeURIComponent(userId.toString())).replace("{"+"top"+"}", encodeURIComponent(top.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionGetSourceFolder(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Get source-folder
     * Return the content of a top-level folder (source folder).
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sourceId the source-id of the item being deleted
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return CMDocumentFolder
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSourceFolder(organisationId: kotlin.String, kbId: kotlin.String, sourceId: kotlin.Int, sessionId: kotlin.String, apIVersion: ApIVersionGetSourceFolder? = null) : CMDocumentFolder {
        val localVarResponse = getSourceFolderWithHttpInfo(organisationId = organisationId, kbId = kbId, sourceId = sourceId, sessionId = sessionId, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMDocumentFolder
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get source-folder
     * Return the content of a top-level folder (source folder).
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sourceId the source-id of the item being deleted
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return ApiResponse<CMDocumentFolder?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSourceFolderWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, sourceId: kotlin.Int, sessionId: kotlin.String, apIVersion: ApIVersionGetSourceFolder?) : ApiResponse<CMDocumentFolder?> {
        val localVariableConfig = getSourceFolderRequestConfig(organisationId = organisationId, kbId = kbId, sourceId = sourceId, sessionId = sessionId, apIVersion = apIVersion)

        return request<Unit, CMDocumentFolder>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSourceFolder
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sourceId the source-id of the item being deleted
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun getSourceFolderRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, sourceId: kotlin.Int, sessionId: kotlin.String, apIVersion: ApIVersionGetSourceFolder?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/dms/source/{organisationId}/{kbId}/{sourceId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"sourceId"+"}", encodeURIComponent(sourceId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionGetSubscriptionList(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Get Subscriptions
     * Return a subscriptions object for a given user
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param userId the user&#39;s id
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return CMSubscriptions
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSubscriptionList(organisationId: kotlin.String, kbId: kotlin.String, userId: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionGetSubscriptionList? = null) : CMSubscriptions {
        val localVarResponse = getSubscriptionListWithHttpInfo(organisationId = organisationId, kbId = kbId, userId = userId, sessionId = sessionId, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMSubscriptions
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Subscriptions
     * Return a subscriptions object for a given user
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param userId the user&#39;s id
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return ApiResponse<CMSubscriptions?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSubscriptionListWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, userId: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionGetSubscriptionList?) : ApiResponse<CMSubscriptions?> {
        val localVariableConfig = getSubscriptionListRequestConfig(organisationId = organisationId, kbId = kbId, userId = userId, sessionId = sessionId, apIVersion = apIVersion)

        return request<Unit, CMSubscriptions>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSubscriptionList
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param userId the user&#39;s id
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun getSubscriptionListRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, userId: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionGetSubscriptionList?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/dms/subscriptions/{organisationId}/{kbId}/{userId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"userId"+"}", encodeURIComponent(userId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionGetUserDashboard(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * User Dashboard
     * Return a the user&#39;s DMS dashboard
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return CMDUserDashboard
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getUserDashboard(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionGetUserDashboard? = null) : CMDUserDashboard {
        val localVarResponse = getUserDashboardWithHttpInfo(organisationId = organisationId, kbId = kbId, sessionId = sessionId, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMDUserDashboard
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * User Dashboard
     * Return a the user&#39;s DMS dashboard
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return ApiResponse<CMDUserDashboard?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getUserDashboardWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionGetUserDashboard?) : ApiResponse<CMDUserDashboard?> {
        val localVariableConfig = getUserDashboardRequestConfig(organisationId = organisationId, kbId = kbId, sessionId = sessionId, apIVersion = apIVersion)

        return request<Unit, CMDUserDashboard>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUserDashboard
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun getUserDashboardRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String, apIVersion: ApIVersionGetUserDashboard?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/dms/dashboard/{organisationId}/{kbId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionGetUserNotifications(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Get User Notifications
     * Return all user notifications from the DMS for a given user by id.
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param year the year for the notifications
     * @param month the month for the notifications
     * @param apIVersion  (optional)
     * @return kotlin.collections.List<CMUserNotification>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getUserNotifications(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, year: kotlin.Int, month: kotlin.Int, apIVersion: ApIVersionGetUserNotifications? = null) : kotlin.collections.List<CMUserNotification> {
        val localVarResponse = getUserNotificationsWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, year = year, month = month, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CMUserNotification>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get User Notifications
     * Return all user notifications from the DMS for a given user by id.
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param year the year for the notifications
     * @param month the month for the notifications
     * @param apIVersion  (optional)
     * @return ApiResponse<kotlin.collections.List<CMUserNotification>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getUserNotificationsWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, year: kotlin.Int, month: kotlin.Int, apIVersion: ApIVersionGetUserNotifications?) : ApiResponse<kotlin.collections.List<CMUserNotification>?> {
        val localVariableConfig = getUserNotificationsRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, year = year, month = month, apIVersion = apIVersion)

        return request<Unit, kotlin.collections.List<CMUserNotification>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUserNotifications
     *
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param year the year for the notifications
     * @param month the month for the notifications
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun getUserNotificationsRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, year: kotlin.Int, month: kotlin.Int, apIVersion: ApIVersionGetUserNotifications?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/dms/notifications/{organisationId}/{kbId}/{year}/{month}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"year"+"}", encodeURIComponent(year.toString())).replace("{"+"month"+"}", encodeURIComponent(month.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionLockDocument(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Document Lock
     * Lock a document for a user.
     * @param sessionId a valid SimSage Session id.
     * @param cmDocumentLock 
     * @param apIVersion  (optional)
     * @return kotlin.collections.List<CMDocument>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun lockDocument(sessionId: kotlin.String, cmDocumentLock: CMDocumentLock, apIVersion: ApIVersionLockDocument? = null) : kotlin.collections.List<CMDocument> {
        val localVarResponse = lockDocumentWithHttpInfo(sessionId = sessionId, cmDocumentLock = cmDocumentLock, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CMDocument>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Document Lock
     * Lock a document for a user.
     * @param sessionId a valid SimSage Session id.
     * @param cmDocumentLock 
     * @param apIVersion  (optional)
     * @return ApiResponse<kotlin.collections.List<CMDocument>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun lockDocumentWithHttpInfo(sessionId: kotlin.String, cmDocumentLock: CMDocumentLock, apIVersion: ApIVersionLockDocument?) : ApiResponse<kotlin.collections.List<CMDocument>?> {
        val localVariableConfig = lockDocumentRequestConfig(sessionId = sessionId, cmDocumentLock = cmDocumentLock, apIVersion = apIVersion)

        return request<CMDocumentLock, kotlin.collections.List<CMDocument>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation lockDocument
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmDocumentLock 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun lockDocumentRequestConfig(sessionId: kotlin.String, cmDocumentLock: CMDocumentLock, apIVersion: ApIVersionLockDocument?) : RequestConfig<CMDocumentLock> {
        val localVariableBody = cmDocumentLock
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/dms/lock",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionReleaseLock(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Release a lock
     * The originator of a lock releases a locked document.
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param userId the user&#39;s id
     * @param url the base64 encoded url value
     * @param apIVersion  (optional)
     * @return kotlin.collections.List<CMDocument>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun releaseLock(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, userId: kotlin.String, url: kotlin.String, apIVersion: ApIVersionReleaseLock? = null) : kotlin.collections.List<CMDocument> {
        val localVarResponse = releaseLockWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, userId = userId, url = url, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CMDocument>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Release a lock
     * The originator of a lock releases a locked document.
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param userId the user&#39;s id
     * @param url the base64 encoded url value
     * @param apIVersion  (optional)
     * @return ApiResponse<kotlin.collections.List<CMDocument>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun releaseLockWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, userId: kotlin.String, url: kotlin.String, apIVersion: ApIVersionReleaseLock?) : ApiResponse<kotlin.collections.List<CMDocument>?> {
        val localVariableConfig = releaseLockRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, userId = userId, url = url, apIVersion = apIVersion)

        return request<Unit, kotlin.collections.List<CMDocument>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation releaseLock
     *
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param userId the user&#39;s id
     * @param url the base64 encoded url value
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun releaseLockRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, userId: kotlin.String, url: kotlin.String, apIVersion: ApIVersionReleaseLock?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/dms/lock/{organisationId}/{kbId}/{userId}/{url}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"userId"+"}", encodeURIComponent(userId.toString())).replace("{"+"url"+"}", encodeURIComponent(url.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DMS Client Query
     * a SimSage DMS client asks a question or performs a keyword-search.
     * @param sessionId a valid SimSage Session id.
     * @param cmClientQuery 
     * @return CMClientQueryResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun restfulDMSClientQuery(sessionId: kotlin.String, cmClientQuery: CMClientQuery) : CMClientQueryResult {
        val localVarResponse = restfulDMSClientQueryWithHttpInfo(sessionId = sessionId, cmClientQuery = cmClientQuery)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMClientQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DMS Client Query
     * a SimSage DMS client asks a question or performs a keyword-search.
     * @param sessionId a valid SimSage Session id.
     * @param cmClientQuery 
     * @return ApiResponse<CMClientQueryResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun restfulDMSClientQueryWithHttpInfo(sessionId: kotlin.String, cmClientQuery: CMClientQuery) : ApiResponse<CMClientQueryResult?> {
        val localVariableConfig = restfulDMSClientQueryRequestConfig(sessionId = sessionId, cmClientQuery = cmClientQuery)

        return request<CMClientQuery, CMClientQueryResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation restfulDMSClientQuery
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmClientQuery 
     * @return RequestConfig
     */
    fun restfulDMSClientQueryRequestConfig(sessionId: kotlin.String, cmClientQuery: CMClientQuery) : RequestConfig<CMClientQuery> {
        val localVariableBody = cmClientQuery
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/dms/query",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionSaveBookmark(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Save Bookmark
     * Save (create or update) a SimSage Document Bookmark.
     * @param sessionId a valid SimSage Session id.
     * @param cmDocumentBookmark 
     * @param apIVersion  (optional)
     * @return kotlin.collections.List<DocumentBookmark>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun saveBookmark(sessionId: kotlin.String, cmDocumentBookmark: CMDocumentBookmark, apIVersion: ApIVersionSaveBookmark? = null) : kotlin.collections.List<DocumentBookmark> {
        val localVarResponse = saveBookmarkWithHttpInfo(sessionId = sessionId, cmDocumentBookmark = cmDocumentBookmark, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<DocumentBookmark>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Save Bookmark
     * Save (create or update) a SimSage Document Bookmark.
     * @param sessionId a valid SimSage Session id.
     * @param cmDocumentBookmark 
     * @param apIVersion  (optional)
     * @return ApiResponse<kotlin.collections.List<DocumentBookmark>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun saveBookmarkWithHttpInfo(sessionId: kotlin.String, cmDocumentBookmark: CMDocumentBookmark, apIVersion: ApIVersionSaveBookmark?) : ApiResponse<kotlin.collections.List<DocumentBookmark>?> {
        val localVariableConfig = saveBookmarkRequestConfig(sessionId = sessionId, cmDocumentBookmark = cmDocumentBookmark, apIVersion = apIVersion)

        return request<CMDocumentBookmark, kotlin.collections.List<DocumentBookmark>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation saveBookmark
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmDocumentBookmark 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun saveBookmarkRequestConfig(sessionId: kotlin.String, cmDocumentBookmark: CMDocumentBookmark, apIVersion: ApIVersionSaveBookmark?) : RequestConfig<CMDocumentBookmark> {
        val localVariableBody = cmDocumentBookmark
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/dms/bookmark",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionSaveHashTags(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Save HashTag set for a document
     * Save (create / update / delete) a hashTag set for a document.
     * @param sessionId a valid SimSage Session id.
     * @param cmDocumentHashTag 
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun saveHashTags(sessionId: kotlin.String, cmDocumentHashTag: CMDocumentHashTag, apIVersion: ApIVersionSaveHashTags? = null) : JsonMessage {
        val localVarResponse = saveHashTagsWithHttpInfo(sessionId = sessionId, cmDocumentHashTag = cmDocumentHashTag, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Save HashTag set for a document
     * Save (create / update / delete) a hashTag set for a document.
     * @param sessionId a valid SimSage Session id.
     * @param cmDocumentHashTag 
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun saveHashTagsWithHttpInfo(sessionId: kotlin.String, cmDocumentHashTag: CMDocumentHashTag, apIVersion: ApIVersionSaveHashTags?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = saveHashTagsRequestConfig(sessionId = sessionId, cmDocumentHashTag = cmDocumentHashTag, apIVersion = apIVersion)

        return request<CMDocumentHashTag, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation saveHashTags
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmDocumentHashTag 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun saveHashTagsRequestConfig(sessionId: kotlin.String, cmDocumentHashTag: CMDocumentHashTag, apIVersion: ApIVersionSaveHashTags?) : RequestConfig<CMDocumentHashTag> {
        val localVariableBody = cmDocumentHashTag
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/dms/hash-tag",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionSaveNote(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Save Note
     * Save (create or update) a SimSage Document Note.
     * @param sessionId a valid SimSage Session id.
     * @param cmDocumentNote 
     * @param apIVersion  (optional)
     * @return kotlin.collections.List<CMDocumentNote>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun saveNote(sessionId: kotlin.String, cmDocumentNote: CMDocumentNote, apIVersion: ApIVersionSaveNote? = null) : kotlin.collections.List<CMDocumentNote> {
        val localVarResponse = saveNoteWithHttpInfo(sessionId = sessionId, cmDocumentNote = cmDocumentNote, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CMDocumentNote>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Save Note
     * Save (create or update) a SimSage Document Note.
     * @param sessionId a valid SimSage Session id.
     * @param cmDocumentNote 
     * @param apIVersion  (optional)
     * @return ApiResponse<kotlin.collections.List<CMDocumentNote>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun saveNoteWithHttpInfo(sessionId: kotlin.String, cmDocumentNote: CMDocumentNote, apIVersion: ApIVersionSaveNote?) : ApiResponse<kotlin.collections.List<CMDocumentNote>?> {
        val localVariableConfig = saveNoteRequestConfig(sessionId = sessionId, cmDocumentNote = cmDocumentNote, apIVersion = apIVersion)

        return request<CMDocumentNote, kotlin.collections.List<CMDocumentNote>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation saveNote
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmDocumentNote 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun saveNoteRequestConfig(sessionId: kotlin.String, cmDocumentNote: CMDocumentNote, apIVersion: ApIVersionSaveNote?) : RequestConfig<CMDocumentNote> {
        val localVariableBody = cmDocumentNote
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/dms/note",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionSaveSearch(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Save Search
     * Save a user&#39;s search query.
     * @param sessionId a valid SimSage Session id.
     * @param cmSavedSearch 
     * @param apIVersion  (optional)
     * @return kotlin.collections.List<CMSavedSearch>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun saveSearch(sessionId: kotlin.String, cmSavedSearch: CMSavedSearch, apIVersion: ApIVersionSaveSearch? = null) : kotlin.collections.List<CMSavedSearch> {
        val localVarResponse = saveSearchWithHttpInfo(sessionId = sessionId, cmSavedSearch = cmSavedSearch, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CMSavedSearch>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Save Search
     * Save a user&#39;s search query.
     * @param sessionId a valid SimSage Session id.
     * @param cmSavedSearch 
     * @param apIVersion  (optional)
     * @return ApiResponse<kotlin.collections.List<CMSavedSearch>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun saveSearchWithHttpInfo(sessionId: kotlin.String, cmSavedSearch: CMSavedSearch, apIVersion: ApIVersionSaveSearch?) : ApiResponse<kotlin.collections.List<CMSavedSearch>?> {
        val localVariableConfig = saveSearchRequestConfig(sessionId = sessionId, cmSavedSearch = cmSavedSearch, apIVersion = apIVersion)

        return request<CMSavedSearch, kotlin.collections.List<CMSavedSearch>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation saveSearch
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmSavedSearch 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun saveSearchRequestConfig(sessionId: kotlin.String, cmSavedSearch: CMSavedSearch, apIVersion: ApIVersionSaveSearch?) : RequestConfig<CMSavedSearch> {
        val localVariableBody = cmSavedSearch
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/dms/save-search",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionSaveSubscription(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Save Subscription
     * Save (create or update) a SimSage Document subscription.  Returns a subscription object for this user.
     * @param sessionId a valid SimSage Session id.
     * @param cmDocumentSubscription 
     * @param apIVersion  (optional)
     * @return CMSubscriptions
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun saveSubscription(sessionId: kotlin.String, cmDocumentSubscription: CMDocumentSubscription, apIVersion: ApIVersionSaveSubscription? = null) : CMSubscriptions {
        val localVarResponse = saveSubscriptionWithHttpInfo(sessionId = sessionId, cmDocumentSubscription = cmDocumentSubscription, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMSubscriptions
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Save Subscription
     * Save (create or update) a SimSage Document subscription.  Returns a subscription object for this user.
     * @param sessionId a valid SimSage Session id.
     * @param cmDocumentSubscription 
     * @param apIVersion  (optional)
     * @return ApiResponse<CMSubscriptions?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun saveSubscriptionWithHttpInfo(sessionId: kotlin.String, cmDocumentSubscription: CMDocumentSubscription, apIVersion: ApIVersionSaveSubscription?) : ApiResponse<CMSubscriptions?> {
        val localVariableConfig = saveSubscriptionRequestConfig(sessionId = sessionId, cmDocumentSubscription = cmDocumentSubscription, apIVersion = apIVersion)

        return request<CMDocumentSubscription, CMSubscriptions>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation saveSubscription
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmDocumentSubscription 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun saveSubscriptionRequestConfig(sessionId: kotlin.String, cmDocumentSubscription: CMDocumentSubscription, apIVersion: ApIVersionSaveSubscription?) : RequestConfig<CMDocumentSubscription> {
        val localVariableBody = cmDocumentSubscription
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/dms/subscription",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionUndeleteDocument(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * un-delete a record
     * Un-delete a previously deleted document and return a list of deleted document records for an administrator (all records).
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sourceId the item&#39;s source id
     * @param url the document&#39;s url, base64 encoded.  A unique id identifying a document.
     * @param filter an optional text filter for URLs
     * @param apIVersion  (optional)
     * @return kotlin.collections.List<DocumentDeleted>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun undeleteDocument(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, sourceId: kotlin.Int, url: kotlin.String, filter: kotlin.String, apIVersion: ApIVersionUndeleteDocument? = null) : kotlin.collections.List<DocumentDeleted> {
        val localVarResponse = undeleteDocumentWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, sourceId = sourceId, url = url, filter = filter, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<DocumentDeleted>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * un-delete a record
     * Un-delete a previously deleted document and return a list of deleted document records for an administrator (all records).
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sourceId the item&#39;s source id
     * @param url the document&#39;s url, base64 encoded.  A unique id identifying a document.
     * @param filter an optional text filter for URLs
     * @param apIVersion  (optional)
     * @return ApiResponse<kotlin.collections.List<DocumentDeleted>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun undeleteDocumentWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, sourceId: kotlin.Int, url: kotlin.String, filter: kotlin.String, apIVersion: ApIVersionUndeleteDocument?) : ApiResponse<kotlin.collections.List<DocumentDeleted>?> {
        val localVariableConfig = undeleteDocumentRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, sourceId = sourceId, url = url, filter = filter, apIVersion = apIVersion)

        return request<Unit, kotlin.collections.List<DocumentDeleted>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation undeleteDocument
     *
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sourceId the item&#39;s source id
     * @param url the document&#39;s url, base64 encoded.  A unique id identifying a document.
     * @param filter an optional text filter for URLs
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun undeleteDocumentRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, sourceId: kotlin.Int, url: kotlin.String, filter: kotlin.String, apIVersion: ApIVersionUndeleteDocument?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/dms/un-delete/{organisationId}/{kbId}/{sourceId}/{url}/{filter}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"sourceId"+"}", encodeURIComponent(sourceId.toString())).replace("{"+"url"+"}", encodeURIComponent(url.toString())).replace("{"+"filter"+"}", encodeURIComponent(filter.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter apIVersion
     */
     enum class ApIVersionUpdateACLs(val value: kotlin.String) {
         @Json(name = "1") _1("1")
     }

    /**
     * Update an item&#39;s ACLs
     * Update the Access Control List of a SimSage DMS item (source, file, or folder).
     * @param sessionId a valid SimSage Session id.
     * @param cmUpdateACLs 
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateACLs(sessionId: kotlin.String, cmUpdateACLs: CMUpdateACLs, apIVersion: ApIVersionUpdateACLs? = null) : JsonMessage {
        val localVarResponse = updateACLsWithHttpInfo(sessionId = sessionId, cmUpdateACLs = cmUpdateACLs, apIVersion = apIVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as JsonMessage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update an item&#39;s ACLs
     * Update the Access Control List of a SimSage DMS item (source, file, or folder).
     * @param sessionId a valid SimSage Session id.
     * @param cmUpdateACLs 
     * @param apIVersion  (optional)
     * @return ApiResponse<JsonMessage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateACLsWithHttpInfo(sessionId: kotlin.String, cmUpdateACLs: CMUpdateACLs, apIVersion: ApIVersionUpdateACLs?) : ApiResponse<JsonMessage?> {
        val localVariableConfig = updateACLsRequestConfig(sessionId = sessionId, cmUpdateACLs = cmUpdateACLs, apIVersion = apIVersion)

        return request<CMUpdateACLs, JsonMessage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateACLs
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmUpdateACLs 
     * @param apIVersion  (optional)
     * @return RequestConfig
     */
    fun updateACLsRequestConfig(sessionId: kotlin.String, cmUpdateACLs: CMUpdateACLs, apIVersion: ApIVersionUpdateACLs?) : RequestConfig<CMUpdateACLs> {
        val localVariableBody = cmUpdateACLs
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        apIVersion?.apply { localVariableHeaders["API-Version"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/dms/acls",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Upload a Document
     * Upload a document into a DMS folder
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sourceId the owner source&#39;s id
     * @param folderId the id of the folder we&#39;re uploading into
     * @param lastModified lastModified unix-date-time
     * @param file the file to upload
     * @return CMDocumentFolder
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun uploadDocument(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, sourceId: kotlin.Int, folderId: kotlin.String, lastModified: kotlin.String, file: java.io.File) : CMDocumentFolder {
        val localVarResponse = uploadDocumentWithHttpInfo(sessionId = sessionId, organisationId = organisationId, kbId = kbId, sourceId = sourceId, folderId = folderId, lastModified = lastModified, file = file)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMDocumentFolder
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Upload a Document
     * Upload a document into a DMS folder
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sourceId the owner source&#39;s id
     * @param folderId the id of the folder we&#39;re uploading into
     * @param lastModified lastModified unix-date-time
     * @param file the file to upload
     * @return ApiResponse<CMDocumentFolder?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun uploadDocumentWithHttpInfo(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, sourceId: kotlin.Int, folderId: kotlin.String, lastModified: kotlin.String, file: java.io.File) : ApiResponse<CMDocumentFolder?> {
        val localVariableConfig = uploadDocumentRequestConfig(sessionId = sessionId, organisationId = organisationId, kbId = kbId, sourceId = sourceId, folderId = folderId, lastModified = lastModified, file = file)

        return request<Map<String, PartConfig<*>>, CMDocumentFolder>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation uploadDocument
     *
     * @param sessionId a valid SimSage Session id.
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sourceId the owner source&#39;s id
     * @param folderId the id of the folder we&#39;re uploading into
     * @param lastModified lastModified unix-date-time
     * @param file the file to upload
     * @return RequestConfig
     */
    fun uploadDocumentRequestConfig(sessionId: kotlin.String, organisationId: kotlin.String, kbId: kotlin.String, sourceId: kotlin.Int, folderId: kotlin.String, lastModified: kotlin.String, file: java.io.File) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "file" to PartConfig(body = file, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/dms/upload/document/{organisationId}/{kbId}/{sourceId}/{folderId}/{lastModified}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"sourceId"+"}", encodeURIComponent(sourceId.toString())).replace("{"+"folderId"+"}", encodeURIComponent(folderId.toString())).replace("{"+"lastModified"+"}", encodeURIComponent(lastModified.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
