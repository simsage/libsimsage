/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.CMCreateGdprProject
import org.openapitools.client.models.CMDeleteProjectCmd
import org.openapitools.client.models.CMExportRedactedDocument
import org.openapitools.client.models.CMRedactionData
import org.openapitools.client.models.CMUpdateDocumentSet
import org.openapitools.client.models.CMVersion
import org.openapitools.client.models.JsonMessage

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class DiscoveryApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://training.simsage.ai")
        }
    }

    /**
     * 
     * 
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param page the page to render
     * @param pageSize the page size to use
     * @param textFilter the text filter passed in or blank if empty
     * @param statusFilter the status filter passed in
     * @param sortColumn the sort column used for the results
     * @param sortDirection sort direction to use (0/1)
     * @param sessionId a valid SimSage Session id.
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun allGdprProjects(organisationId: kotlin.String, kbId: kotlin.String, page: kotlin.Int, pageSize: kotlin.Int, textFilter: kotlin.String, statusFilter: kotlin.String, sortColumn: kotlin.String, sortDirection: kotlin.Int, sessionId: kotlin.String) : kotlin.Any {
        val localVarResponse = allGdprProjectsWithHttpInfo(organisationId = organisationId, kbId = kbId, page = page, pageSize = pageSize, textFilter = textFilter, statusFilter = statusFilter, sortColumn = sortColumn, sortDirection = sortDirection, sessionId = sessionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param page the page to render
     * @param pageSize the page size to use
     * @param textFilter the text filter passed in or blank if empty
     * @param statusFilter the status filter passed in
     * @param sortColumn the sort column used for the results
     * @param sortDirection sort direction to use (0/1)
     * @param sessionId a valid SimSage Session id.
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun allGdprProjectsWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, page: kotlin.Int, pageSize: kotlin.Int, textFilter: kotlin.String, statusFilter: kotlin.String, sortColumn: kotlin.String, sortDirection: kotlin.Int, sessionId: kotlin.String) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = allGdprProjectsRequestConfig(organisationId = organisationId, kbId = kbId, page = page, pageSize = pageSize, textFilter = textFilter, statusFilter = statusFilter, sortColumn = sortColumn, sortDirection = sortDirection, sessionId = sessionId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation allGdprProjects
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param page the page to render
     * @param pageSize the page size to use
     * @param textFilter the text filter passed in or blank if empty
     * @param statusFilter the status filter passed in
     * @param sortColumn the sort column used for the results
     * @param sortDirection sort direction to use (0/1)
     * @param sessionId a valid SimSage Session id.
     * @return RequestConfig
     */
    fun allGdprProjectsRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, page: kotlin.Int, pageSize: kotlin.Int, textFilter: kotlin.String, statusFilter: kotlin.String, sortColumn: kotlin.String, sortDirection: kotlin.Int, sessionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json;charset=UTF-8"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/discovery/gdprproject/{organisationId}/{kbId}/{page}/{pageSize}/{textFilter}/{statusFilter}/{sortColumn}/{sortDirection}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"page"+"}", encodeURIComponent(page.toString())).replace("{"+"pageSize"+"}", encodeURIComponent(pageSize.toString())).replace("{"+"textFilter"+"}", encodeURIComponent(textFilter.toString())).replace("{"+"statusFilter"+"}", encodeURIComponent(statusFilter.toString())).replace("{"+"sortColumn"+"}", encodeURIComponent(sortColumn.toString())).replace("{"+"sortDirection"+"}", encodeURIComponent(sortDirection.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param sessionId a valid SimSage Session id.
     * @param cmRedactionData 
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applyRedactions(sessionId: kotlin.String, cmRedactionData: CMRedactionData) : kotlin.Any {
        val localVarResponse = applyRedactionsWithHttpInfo(sessionId = sessionId, cmRedactionData = cmRedactionData)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param sessionId a valid SimSage Session id.
     * @param cmRedactionData 
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun applyRedactionsWithHttpInfo(sessionId: kotlin.String, cmRedactionData: CMRedactionData) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = applyRedactionsRequestConfig(sessionId = sessionId, cmRedactionData = cmRedactionData)

        return request<CMRedactionData, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation applyRedactions
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmRedactionData 
     * @return RequestConfig
     */
    fun applyRedactionsRequestConfig(sessionId: kotlin.String, cmRedactionData: CMRedactionData) : RequestConfig<CMRedactionData> {
        val localVariableBody = cmRedactionData
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json;charset=UTF-8"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/discovery/applyredactions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param sessionId a valid SimSage Session id.
     * @param cmCreateGdprProject 
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createGdprProject(sessionId: kotlin.String, cmCreateGdprProject: CMCreateGdprProject) : kotlin.Any {
        val localVarResponse = createGdprProjectWithHttpInfo(sessionId = sessionId, cmCreateGdprProject = cmCreateGdprProject)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param sessionId a valid SimSage Session id.
     * @param cmCreateGdprProject 
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createGdprProjectWithHttpInfo(sessionId: kotlin.String, cmCreateGdprProject: CMCreateGdprProject) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = createGdprProjectRequestConfig(sessionId = sessionId, cmCreateGdprProject = cmCreateGdprProject)

        return request<CMCreateGdprProject, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createGdprProject
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmCreateGdprProject 
     * @return RequestConfig
     */
    fun createGdprProjectRequestConfig(sessionId: kotlin.String, cmCreateGdprProject: CMCreateGdprProject) : RequestConfig<CMCreateGdprProject> {
        val localVariableBody = cmCreateGdprProject
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json;charset=UTF-8"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/discovery/createproject",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param sessionId a valid SimSage Session id.
     * @param cmDeleteProjectCmd 
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteProject(sessionId: kotlin.String, cmDeleteProjectCmd: CMDeleteProjectCmd) : kotlin.Any {
        val localVarResponse = deleteProjectWithHttpInfo(sessionId = sessionId, cmDeleteProjectCmd = cmDeleteProjectCmd)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param sessionId a valid SimSage Session id.
     * @param cmDeleteProjectCmd 
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteProjectWithHttpInfo(sessionId: kotlin.String, cmDeleteProjectCmd: CMDeleteProjectCmd) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = deleteProjectRequestConfig(sessionId = sessionId, cmDeleteProjectCmd = cmDeleteProjectCmd)

        return request<CMDeleteProjectCmd, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteProject
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmDeleteProjectCmd 
     * @return RequestConfig
     */
    fun deleteProjectRequestConfig(sessionId: kotlin.String, cmDeleteProjectCmd: CMDeleteProjectCmd) : RequestConfig<CMDeleteProjectCmd> {
        val localVariableBody = cmDeleteProjectCmd
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json;charset=UTF-8"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/discovery/deleteproject",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param sessionId a valid SimSage Session id.
     * @param cmExportRedactedDocument 
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun exportRedactedDoc(sessionId: kotlin.String, cmExportRedactedDocument: CMExportRedactedDocument) : kotlin.Any {
        val localVarResponse = exportRedactedDocWithHttpInfo(sessionId = sessionId, cmExportRedactedDocument = cmExportRedactedDocument)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param sessionId a valid SimSage Session id.
     * @param cmExportRedactedDocument 
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun exportRedactedDocWithHttpInfo(sessionId: kotlin.String, cmExportRedactedDocument: CMExportRedactedDocument) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = exportRedactedDocRequestConfig(sessionId = sessionId, cmExportRedactedDocument = cmExportRedactedDocument)

        return request<CMExportRedactedDocument, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation exportRedactedDoc
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmExportRedactedDocument 
     * @return RequestConfig
     */
    fun exportRedactedDocRequestConfig(sessionId: kotlin.String, cmExportRedactedDocument: CMExportRedactedDocument) : RequestConfig<CMExportRedactedDocument> {
        val localVariableBody = cmExportRedactedDocument
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json;charset=UTF-8"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/discovery/exportredacteddoc",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param projectId Project Id for the items
     * @param url The url of the document to retrieve
     * @param sessionId a valid SimSage Session id.
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getGdprDocument(organisationId: kotlin.String, kbId: kotlin.String, projectId: kotlin.String, url: kotlin.String, sessionId: kotlin.String) : kotlin.Any {
        val localVarResponse = getGdprDocumentWithHttpInfo(organisationId = organisationId, kbId = kbId, projectId = projectId, url = url, sessionId = sessionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param projectId Project Id for the items
     * @param url The url of the document to retrieve
     * @param sessionId a valid SimSage Session id.
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getGdprDocumentWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, projectId: kotlin.String, url: kotlin.String, sessionId: kotlin.String) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = getGdprDocumentRequestConfig(organisationId = organisationId, kbId = kbId, projectId = projectId, url = url, sessionId = sessionId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getGdprDocument
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param projectId Project Id for the items
     * @param url The url of the document to retrieve
     * @param sessionId a valid SimSage Session id.
     * @return RequestConfig
     */
    fun getGdprDocumentRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, projectId: kotlin.String, url: kotlin.String, sessionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json;charset=UTF-8"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/discovery/gdprdocument/{organisationId}/{kbId}/{projectId}/{url}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"projectId"+"}", encodeURIComponent(projectId.toString())).replace("{"+"url"+"}", encodeURIComponent(url.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param projectId Project Id for the items
     * @param page the page to render
     * @param pageSize the page size to use
     * @param textFilter the text filter passed in or blank if empty
     * @param typeFilter the type filter passed in
     * @param statusFilter the status filter passed in
     * @param sortColumn the sort column used for the results
     * @param sortDirection sort direction to use (0/1)
     * @param sessionId a valid SimSage Session id.
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getPagedProjectDocuments(organisationId: kotlin.String, kbId: kotlin.String, projectId: kotlin.String, page: kotlin.Int, pageSize: kotlin.Int, textFilter: kotlin.String, typeFilter: kotlin.String, statusFilter: kotlin.String, sortColumn: kotlin.String, sortDirection: kotlin.Int, sessionId: kotlin.String) : kotlin.Any {
        val localVarResponse = getPagedProjectDocumentsWithHttpInfo(organisationId = organisationId, kbId = kbId, projectId = projectId, page = page, pageSize = pageSize, textFilter = textFilter, typeFilter = typeFilter, statusFilter = statusFilter, sortColumn = sortColumn, sortDirection = sortDirection, sessionId = sessionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param projectId Project Id for the items
     * @param page the page to render
     * @param pageSize the page size to use
     * @param textFilter the text filter passed in or blank if empty
     * @param typeFilter the type filter passed in
     * @param statusFilter the status filter passed in
     * @param sortColumn the sort column used for the results
     * @param sortDirection sort direction to use (0/1)
     * @param sessionId a valid SimSage Session id.
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getPagedProjectDocumentsWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, projectId: kotlin.String, page: kotlin.Int, pageSize: kotlin.Int, textFilter: kotlin.String, typeFilter: kotlin.String, statusFilter: kotlin.String, sortColumn: kotlin.String, sortDirection: kotlin.Int, sessionId: kotlin.String) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = getPagedProjectDocumentsRequestConfig(organisationId = organisationId, kbId = kbId, projectId = projectId, page = page, pageSize = pageSize, textFilter = textFilter, typeFilter = typeFilter, statusFilter = statusFilter, sortColumn = sortColumn, sortDirection = sortDirection, sessionId = sessionId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getPagedProjectDocuments
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param projectId Project Id for the items
     * @param page the page to render
     * @param pageSize the page size to use
     * @param textFilter the text filter passed in or blank if empty
     * @param typeFilter the type filter passed in
     * @param statusFilter the status filter passed in
     * @param sortColumn the sort column used for the results
     * @param sortDirection sort direction to use (0/1)
     * @param sessionId a valid SimSage Session id.
     * @return RequestConfig
     */
    fun getPagedProjectDocumentsRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, projectId: kotlin.String, page: kotlin.Int, pageSize: kotlin.Int, textFilter: kotlin.String, typeFilter: kotlin.String, statusFilter: kotlin.String, sortColumn: kotlin.String, sortDirection: kotlin.Int, sessionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json;charset=UTF-8"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/discovery/projectdocument/{organisationId}/{kbId}/{projectId}/{page}/{pageSize}/{textFilter}/{typeFilter}/{statusFilter}/{sortColumn}/{sortDirection}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())).replace("{"+"projectId"+"}", encodeURIComponent(projectId.toString())).replace("{"+"page"+"}", encodeURIComponent(page.toString())).replace("{"+"pageSize"+"}", encodeURIComponent(pageSize.toString())).replace("{"+"textFilter"+"}", encodeURIComponent(textFilter.toString())).replace("{"+"typeFilter"+"}", encodeURIComponent(typeFilter.toString())).replace("{"+"statusFilter"+"}", encodeURIComponent(statusFilter.toString())).replace("{"+"sortColumn"+"}", encodeURIComponent(sortColumn.toString())).replace("{"+"sortDirection"+"}", encodeURIComponent(sortDirection.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * growth
     * Get the storage growth delta per month
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun growthPerMonth(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String) : kotlin.Any {
        val localVarResponse = growthPerMonthWithHttpInfo(organisationId = organisationId, kbId = kbId, sessionId = sessionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * growth
     * Get the storage growth delta per month
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun growthPerMonthWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = growthPerMonthRequestConfig(organisationId = organisationId, kbId = kbId, sessionId = sessionId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation growthPerMonth
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @return RequestConfig
     */
    fun growthPerMonthRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json;charset=UTF-8"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/discovery/growth/{organisationId}/{kbId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param sessionId a valid SimSage Session id.
     * @param cmRedactionData 
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun setdocumentredactions(sessionId: kotlin.String, cmRedactionData: CMRedactionData) : kotlin.Any {
        val localVarResponse = setdocumentredactionsWithHttpInfo(sessionId = sessionId, cmRedactionData = cmRedactionData)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param sessionId a valid SimSage Session id.
     * @param cmRedactionData 
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun setdocumentredactionsWithHttpInfo(sessionId: kotlin.String, cmRedactionData: CMRedactionData) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = setdocumentredactionsRequestConfig(sessionId = sessionId, cmRedactionData = cmRedactionData)

        return request<CMRedactionData, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation setdocumentredactions
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmRedactionData 
     * @return RequestConfig
     */
    fun setdocumentredactionsRequestConfig(sessionId: kotlin.String, cmRedactionData: CMRedactionData) : RequestConfig<CMRedactionData> {
        val localVariableBody = cmRedactionData
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json;charset=UTF-8"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/discovery/updategdprdocument",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * storage
     * Get the current amount of storage used by source
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun storageBySource(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String) : kotlin.Any {
        val localVarResponse = storageBySourceWithHttpInfo(organisationId = organisationId, kbId = kbId, sessionId = sessionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * storage
     * Get the current amount of storage used by source
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun storageBySourceWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = storageBySourceRequestConfig(organisationId = organisationId, kbId = kbId, sessionId = sessionId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation storageBySource
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @return RequestConfig
     */
    fun storageBySourceRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json;charset=UTF-8"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/discovery/storage/{organisationId}/{kbId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * storage
     * Get the current amount of storage used by source and document type
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun summaryByDocumentType(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String) : kotlin.Any {
        val localVarResponse = summaryByDocumentTypeWithHttpInfo(organisationId = organisationId, kbId = kbId, sessionId = sessionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * storage
     * Get the current amount of storage used by source and document type
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun summaryByDocumentTypeWithHttpInfo(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = summaryByDocumentTypeRequestConfig(organisationId = organisationId, kbId = kbId, sessionId = sessionId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation summaryByDocumentType
     *
     * @param organisationId the organisation (its guid id)
     * @param kbId the knowledge-base (its guid id)
     * @param sessionId a valid SimSage Session id.
     * @return RequestConfig
     */
    fun summaryByDocumentTypeRequestConfig(organisationId: kotlin.String, kbId: kotlin.String, sessionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json;charset=UTF-8"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/discovery/doctypesummary/{organisationId}/{kbId}".replace("{"+"organisationId"+"}", encodeURIComponent(organisationId.toString())).replace("{"+"kbId"+"}", encodeURIComponent(kbId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param sessionId a valid SimSage Session id.
     * @param cmUpdateDocumentSet 
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateDocumentSet(sessionId: kotlin.String, cmUpdateDocumentSet: CMUpdateDocumentSet) : kotlin.Any {
        val localVarResponse = updateDocumentSetWithHttpInfo(sessionId = sessionId, cmUpdateDocumentSet = cmUpdateDocumentSet)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param sessionId a valid SimSage Session id.
     * @param cmUpdateDocumentSet 
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateDocumentSetWithHttpInfo(sessionId: kotlin.String, cmUpdateDocumentSet: CMUpdateDocumentSet) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = updateDocumentSetRequestConfig(sessionId = sessionId, cmUpdateDocumentSet = cmUpdateDocumentSet)

        return request<CMUpdateDocumentSet, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateDocumentSet
     *
     * @param sessionId a valid SimSage Session id.
     * @param cmUpdateDocumentSet 
     * @return RequestConfig
     */
    fun updateDocumentSetRequestConfig(sessionId: kotlin.String, cmUpdateDocumentSet: CMUpdateDocumentSet) : RequestConfig<CMUpdateDocumentSet> {
        val localVariableBody = cmUpdateDocumentSet
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        sessionId.apply { localVariableHeaders["session-id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json;charset=UTF-8"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/discovery/updatedocumentset",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Version
     * Get the version of SimSage Discovery Services.
     * @return CMVersion
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun version5() : CMVersion {
        val localVarResponse = version5WithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CMVersion
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Version
     * Get the version of SimSage Discovery Services.
     * @return ApiResponse<CMVersion?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun version5WithHttpInfo() : ApiResponse<CMVersion?> {
        val localVariableConfig = version5RequestConfig()

        return request<Unit, CMVersion>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation version5
     *
     * @return RequestConfig
     */
    fun version5RequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/discovery/version",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
