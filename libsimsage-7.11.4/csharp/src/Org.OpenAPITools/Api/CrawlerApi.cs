/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.11.4
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICrawlerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Remove an External Document
        /// </summary>
        /// <remarks>
        /// Remove an external crawler document from SimSage.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMDeleteDocument"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage CrawlerExternalDocumentDelete(CMDeleteDocument cMDeleteDocument, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Remove an External Document
        /// </summary>
        /// <remarks>
        /// Remove an external crawler document from SimSage.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMDeleteDocument"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> CrawlerExternalDocumentDeleteWithHttpInfo(CMDeleteDocument cMDeleteDocument, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Mark External Document Unchanged
        /// </summary>
        /// <remarks>
        /// An external crawler document marks a document as not having changed.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMDocumentUnChanged"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage CrawlerExternalDocumentUnChanged(CMDocumentUnChanged cMDocumentUnChanged, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Mark External Document Unchanged
        /// </summary>
        /// <remarks>
        /// An external crawler document marks a document as not having changed.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMDocumentUnChanged"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> CrawlerExternalDocumentUnChangedWithHttpInfo(CMDocumentUnChanged cMDocumentUnChanged, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Upload External Document
        /// </summary>
        /// <remarks>
        /// An external crawler document wants to upload a document to SimSage.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMUploadDocument"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage CrawlerExternalDocumentUpload(CMUploadDocument cMUploadDocument, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Upload External Document
        /// </summary>
        /// <remarks>
        /// An external crawler document wants to upload a document to SimSage.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMUploadDocument"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> CrawlerExternalDocumentUploadWithHttpInfo(CMUploadDocument cMUploadDocument, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Upload External Image
        /// </summary>
        /// <remarks>
        /// An external crawler uploads an image for a document.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMUploadImage"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage CrawlerExternalImageUpload(CMUploadImage cMUploadImage, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Upload External Image
        /// </summary>
        /// <remarks>
        /// An external crawler uploads an image for a document.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMUploadImage"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> CrawlerExternalImageUploadWithHttpInfo(CMUploadImage cMUploadImage, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Delete source
        /// </summary>
        /// <remarks>
        /// Remove a source and all its content by its source-id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage Delete(string organisationId, string kbId, string sessionId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Delete source
        /// </summary>
        /// <remarks>
        /// Remove a source and all its content by its source-id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> DeleteWithHttpInfo(string organisationId, string kbId, string sessionId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Delete source&#39;s documents
        /// </summary>
        /// <remarks>
        /// Remove a source&#39;s documents and stop the crawler if it&#39;s running.  Return an updated sources.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSource</returns>
        CMSource DeleteDocuments(string organisationId, string kbId, string sessionId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Delete source&#39;s documents
        /// </summary>
        /// <remarks>
        /// Remove a source&#39;s documents and stop the crawler if it&#39;s running.  Return an updated sources.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSource</returns>
        ApiResponse<CMSource> DeleteDocumentsWithHttpInfo(string organisationId, string kbId, string sessionId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Secure Communication
        /// </summary>
        /// <remarks>
        /// Secure Communications end-point.  Send encrypted messages from external crawlers and edge devices to this end-point.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">a random integer used for the communications</param>
        /// <param name="body"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage EncryptedCommunications(int seed, string body, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Secure Communication
        /// </summary>
        /// <remarks>
        /// Secure Communications end-point.  Send encrypted messages from external crawlers and edge devices to this end-point.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">a random integer used for the communications</param>
        /// <param name="body"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> EncryptedCommunicationsWithHttpInfo(int seed, string body, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// External Crawler
        /// </summary>
        /// <remarks>
        /// Retrieve a crawler data-structure by orgId/kbId/sid and sourceId.  Used by External Crawlers to do their job.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMExternalCrawler"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSource</returns>
        CMSource ExternalCrawler(CMExternalCrawler cMExternalCrawler, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// External Crawler
        /// </summary>
        /// <remarks>
        /// Retrieve a crawler data-structure by orgId/kbId/sid and sourceId.  Used by External Crawlers to do their job.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMExternalCrawler"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSource</returns>
        ApiResponse<CMSource> ExternalCrawlerWithHttpInfo(CMExternalCrawler cMExternalCrawler, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Stop External Crawler
        /// </summary>
        /// <remarks>
        /// An external crawler notifies SimSage it has finished its job, its run through the data once.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMExternalCrawlerStop"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage ExternalCrawlerFinished(CMExternalCrawlerStop cMExternalCrawlerStop, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Stop External Crawler
        /// </summary>
        /// <remarks>
        /// An external crawler notifies SimSage it has finished its job, its run through the data once.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMExternalCrawlerStop"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> ExternalCrawlerFinishedWithHttpInfo(CMExternalCrawlerStop cMExternalCrawlerStop, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Start External Crawler
        /// </summary>
        /// <remarks>
        /// An external crawler notifies SimSage is it starting a new run.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMExternalCrawlerStart"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage ExternalCrawlerStart(CMExternalCrawlerStart cMExternalCrawlerStart, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Start External Crawler
        /// </summary>
        /// <remarks>
        /// An external crawler notifies SimSage is it starting a new run.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMExternalCrawlerStart"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> ExternalCrawlerStartWithHttpInfo(CMExternalCrawlerStart cMExternalCrawlerStart, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get source
        /// </summary>
        /// <remarks>
        /// Return the data-structure for a source by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSource</returns>
        CMSource GetCrawler(string organisationId, string kbId, int sourceId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get source
        /// </summary>
        /// <remarks>
        /// Return the data-structure for a source by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSource</returns>
        ApiResponse<CMSource> GetCrawlerWithHttpInfo(string organisationId, string kbId, int sourceId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get source List
        /// </summary>
        /// <remarks>
        /// Get a list of sources for a given organisation / knowledge base.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMSource&gt;</returns>
        List<CMSource> GetSourceList(string sessionId, string organisationId, string kbId, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get source List
        /// </summary>
        /// <remarks>
        /// Get a list of sources for a given organisation / knowledge base.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMSource&gt;</returns>
        ApiResponse<List<CMSource>> GetSourceListWithHttpInfo(string sessionId, string organisationId, string kbId, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// OIDC code receiver
        /// </summary>
        /// <remarks>
        /// used for OIDC systems to receive codes
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcKey">the Dropbox OIDC key</param>
        /// <param name="allRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void OidcCode(string oidcKey, Dictionary<string, string> allRequestParams, int operationIndex = 0);

        /// <summary>
        /// OIDC code receiver
        /// </summary>
        /// <remarks>
        /// used for OIDC systems to receive codes
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcKey">the Dropbox OIDC key</param>
        /// <param name="allRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OidcCodeWithHttpInfo(string oidcKey, Dictionary<string, string> allRequestParams, int operationIndex = 0);
        /// <summary>
        /// Process all files of crawler/source
        /// </summary>
        /// <remarks>
        /// Start and force processing all files for a crawler/source
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMStartCrawler"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage ProcessAllFiles(string sessionId, CMStartCrawler cMStartCrawler, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Process all files of crawler/source
        /// </summary>
        /// <remarks>
        /// Start and force processing all files for a crawler/source
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMStartCrawler"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> ProcessAllFilesWithHttpInfo(string sessionId, CMStartCrawler cMStartCrawler, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Reset Source delta-token
        /// </summary>
        /// <remarks>
        /// reset a SimSage source&#39;s delta token.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSource</returns>
        CMSource ResetSourceDelta(string sessionId, string organisationId, string kbId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Reset Source delta-token
        /// </summary>
        /// <remarks>
        /// reset a SimSage source&#39;s delta token.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSource</returns>
        ApiResponse<CMSource> ResetSourceDeltaWithHttpInfo(string sessionId, string organisationId, string kbId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Start crawler
        /// </summary>
        /// <remarks>
        /// Start a crawler by source-id if after it has stopped.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMStartCrawler"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage StartCrawler(string sessionId, CMStartCrawler cMStartCrawler, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Start crawler
        /// </summary>
        /// <remarks>
        /// Start a crawler by source-id if after it has stopped.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMStartCrawler"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> StartCrawlerWithHttpInfo(string sessionId, CMStartCrawler cMStartCrawler, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Test Crawler
        /// </summary>
        /// <remarks>
        /// Some crawlers (platform crawlers, not external crawlers) can check if the given information is enough for it to operator.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        JsonMessage TestCrawler(string sessionId, string organisationId, string kbId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Test Crawler
        /// </summary>
        /// <remarks>
        /// Some crawlers (platform crawlers, not external crawlers) can check if the given information is enough for it to operator.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        ApiResponse<JsonMessage> TestCrawlerWithHttpInfo(string sessionId, string organisationId, string kbId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Update Source
        /// </summary>
        /// <remarks>
        /// Save (create or update) a SimSage source.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSource"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSource</returns>
        CMSource UpdateCrawler(string sessionId, CMSource cMSource, string? aPIVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Update Source
        /// </summary>
        /// <remarks>
        /// Save (create or update) a SimSage source.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSource"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSource</returns>
        ApiResponse<CMSource> UpdateCrawlerWithHttpInfo(string sessionId, CMSource cMSource, string? aPIVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Version
        /// </summary>
        /// <remarks>
        /// Get the version of SimSage crawler-services.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMVersion</returns>
        CMVersion Version6(int operationIndex = 0);

        /// <summary>
        /// Version
        /// </summary>
        /// <remarks>
        /// Get the version of SimSage crawler-services.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMVersion</returns>
        ApiResponse<CMVersion> Version6WithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICrawlerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Remove an External Document
        /// </summary>
        /// <remarks>
        /// Remove an external crawler document from SimSage.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMDeleteDocument"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> CrawlerExternalDocumentDeleteAsync(CMDeleteDocument cMDeleteDocument, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove an External Document
        /// </summary>
        /// <remarks>
        /// Remove an external crawler document from SimSage.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMDeleteDocument"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> CrawlerExternalDocumentDeleteWithHttpInfoAsync(CMDeleteDocument cMDeleteDocument, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Mark External Document Unchanged
        /// </summary>
        /// <remarks>
        /// An external crawler document marks a document as not having changed.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMDocumentUnChanged"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> CrawlerExternalDocumentUnChangedAsync(CMDocumentUnChanged cMDocumentUnChanged, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Mark External Document Unchanged
        /// </summary>
        /// <remarks>
        /// An external crawler document marks a document as not having changed.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMDocumentUnChanged"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> CrawlerExternalDocumentUnChangedWithHttpInfoAsync(CMDocumentUnChanged cMDocumentUnChanged, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload External Document
        /// </summary>
        /// <remarks>
        /// An external crawler document wants to upload a document to SimSage.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMUploadDocument"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> CrawlerExternalDocumentUploadAsync(CMUploadDocument cMUploadDocument, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload External Document
        /// </summary>
        /// <remarks>
        /// An external crawler document wants to upload a document to SimSage.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMUploadDocument"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> CrawlerExternalDocumentUploadWithHttpInfoAsync(CMUploadDocument cMUploadDocument, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload External Image
        /// </summary>
        /// <remarks>
        /// An external crawler uploads an image for a document.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMUploadImage"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> CrawlerExternalImageUploadAsync(CMUploadImage cMUploadImage, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload External Image
        /// </summary>
        /// <remarks>
        /// An external crawler uploads an image for a document.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMUploadImage"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> CrawlerExternalImageUploadWithHttpInfoAsync(CMUploadImage cMUploadImage, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete source
        /// </summary>
        /// <remarks>
        /// Remove a source and all its content by its source-id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> DeleteAsync(string organisationId, string kbId, string sessionId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete source
        /// </summary>
        /// <remarks>
        /// Remove a source and all its content by its source-id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> DeleteWithHttpInfoAsync(string organisationId, string kbId, string sessionId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete source&#39;s documents
        /// </summary>
        /// <remarks>
        /// Remove a source&#39;s documents and stop the crawler if it&#39;s running.  Return an updated sources.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSource</returns>
        System.Threading.Tasks.Task<CMSource> DeleteDocumentsAsync(string organisationId, string kbId, string sessionId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete source&#39;s documents
        /// </summary>
        /// <remarks>
        /// Remove a source&#39;s documents and stop the crawler if it&#39;s running.  Return an updated sources.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSource)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMSource>> DeleteDocumentsWithHttpInfoAsync(string organisationId, string kbId, string sessionId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Secure Communication
        /// </summary>
        /// <remarks>
        /// Secure Communications end-point.  Send encrypted messages from external crawlers and edge devices to this end-point.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">a random integer used for the communications</param>
        /// <param name="body"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> EncryptedCommunicationsAsync(int seed, string body, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Secure Communication
        /// </summary>
        /// <remarks>
        /// Secure Communications end-point.  Send encrypted messages from external crawlers and edge devices to this end-point.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">a random integer used for the communications</param>
        /// <param name="body"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> EncryptedCommunicationsWithHttpInfoAsync(int seed, string body, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// External Crawler
        /// </summary>
        /// <remarks>
        /// Retrieve a crawler data-structure by orgId/kbId/sid and sourceId.  Used by External Crawlers to do their job.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMExternalCrawler"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSource</returns>
        System.Threading.Tasks.Task<CMSource> ExternalCrawlerAsync(CMExternalCrawler cMExternalCrawler, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// External Crawler
        /// </summary>
        /// <remarks>
        /// Retrieve a crawler data-structure by orgId/kbId/sid and sourceId.  Used by External Crawlers to do their job.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMExternalCrawler"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSource)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMSource>> ExternalCrawlerWithHttpInfoAsync(CMExternalCrawler cMExternalCrawler, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Stop External Crawler
        /// </summary>
        /// <remarks>
        /// An external crawler notifies SimSage it has finished its job, its run through the data once.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMExternalCrawlerStop"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> ExternalCrawlerFinishedAsync(CMExternalCrawlerStop cMExternalCrawlerStop, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Stop External Crawler
        /// </summary>
        /// <remarks>
        /// An external crawler notifies SimSage it has finished its job, its run through the data once.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMExternalCrawlerStop"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> ExternalCrawlerFinishedWithHttpInfoAsync(CMExternalCrawlerStop cMExternalCrawlerStop, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start External Crawler
        /// </summary>
        /// <remarks>
        /// An external crawler notifies SimSage is it starting a new run.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMExternalCrawlerStart"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> ExternalCrawlerStartAsync(CMExternalCrawlerStart cMExternalCrawlerStart, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start External Crawler
        /// </summary>
        /// <remarks>
        /// An external crawler notifies SimSage is it starting a new run.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMExternalCrawlerStart"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> ExternalCrawlerStartWithHttpInfoAsync(CMExternalCrawlerStart cMExternalCrawlerStart, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get source
        /// </summary>
        /// <remarks>
        /// Return the data-structure for a source by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSource</returns>
        System.Threading.Tasks.Task<CMSource> GetCrawlerAsync(string organisationId, string kbId, int sourceId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get source
        /// </summary>
        /// <remarks>
        /// Return the data-structure for a source by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSource)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMSource>> GetCrawlerWithHttpInfoAsync(string organisationId, string kbId, int sourceId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get source List
        /// </summary>
        /// <remarks>
        /// Get a list of sources for a given organisation / knowledge base.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMSource&gt;</returns>
        System.Threading.Tasks.Task<List<CMSource>> GetSourceListAsync(string sessionId, string organisationId, string kbId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get source List
        /// </summary>
        /// <remarks>
        /// Get a list of sources for a given organisation / knowledge base.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMSource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CMSource>>> GetSourceListWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// OIDC code receiver
        /// </summary>
        /// <remarks>
        /// used for OIDC systems to receive codes
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcKey">the Dropbox OIDC key</param>
        /// <param name="allRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OidcCodeAsync(string oidcKey, Dictionary<string, string> allRequestParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// OIDC code receiver
        /// </summary>
        /// <remarks>
        /// used for OIDC systems to receive codes
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcKey">the Dropbox OIDC key</param>
        /// <param name="allRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OidcCodeWithHttpInfoAsync(string oidcKey, Dictionary<string, string> allRequestParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Process all files of crawler/source
        /// </summary>
        /// <remarks>
        /// Start and force processing all files for a crawler/source
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMStartCrawler"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> ProcessAllFilesAsync(string sessionId, CMStartCrawler cMStartCrawler, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Process all files of crawler/source
        /// </summary>
        /// <remarks>
        /// Start and force processing all files for a crawler/source
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMStartCrawler"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> ProcessAllFilesWithHttpInfoAsync(string sessionId, CMStartCrawler cMStartCrawler, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reset Source delta-token
        /// </summary>
        /// <remarks>
        /// reset a SimSage source&#39;s delta token.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSource</returns>
        System.Threading.Tasks.Task<CMSource> ResetSourceDeltaAsync(string sessionId, string organisationId, string kbId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reset Source delta-token
        /// </summary>
        /// <remarks>
        /// reset a SimSage source&#39;s delta token.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSource)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMSource>> ResetSourceDeltaWithHttpInfoAsync(string sessionId, string organisationId, string kbId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start crawler
        /// </summary>
        /// <remarks>
        /// Start a crawler by source-id if after it has stopped.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMStartCrawler"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> StartCrawlerAsync(string sessionId, CMStartCrawler cMStartCrawler, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start crawler
        /// </summary>
        /// <remarks>
        /// Start a crawler by source-id if after it has stopped.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMStartCrawler"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> StartCrawlerWithHttpInfoAsync(string sessionId, CMStartCrawler cMStartCrawler, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Test Crawler
        /// </summary>
        /// <remarks>
        /// Some crawlers (platform crawlers, not external crawlers) can check if the given information is enough for it to operator.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        System.Threading.Tasks.Task<JsonMessage> TestCrawlerAsync(string sessionId, string organisationId, string kbId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Test Crawler
        /// </summary>
        /// <remarks>
        /// Some crawlers (platform crawlers, not external crawlers) can check if the given information is enough for it to operator.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMessage>> TestCrawlerWithHttpInfoAsync(string sessionId, string organisationId, string kbId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Source
        /// </summary>
        /// <remarks>
        /// Save (create or update) a SimSage source.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSource"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSource</returns>
        System.Threading.Tasks.Task<CMSource> UpdateCrawlerAsync(string sessionId, CMSource cMSource, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Source
        /// </summary>
        /// <remarks>
        /// Save (create or update) a SimSage source.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSource"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSource)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMSource>> UpdateCrawlerWithHttpInfoAsync(string sessionId, CMSource cMSource, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Version
        /// </summary>
        /// <remarks>
        /// Get the version of SimSage crawler-services.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMVersion</returns>
        System.Threading.Tasks.Task<CMVersion> Version6Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Version
        /// </summary>
        /// <remarks>
        /// Get the version of SimSage crawler-services.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMVersion>> Version6WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICrawlerApi : ICrawlerApiSync, ICrawlerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CrawlerApi : ICrawlerApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CrawlerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CrawlerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CrawlerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CrawlerApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CrawlerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CrawlerApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CrawlerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CrawlerApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Remove an External Document Remove an external crawler document from SimSage.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMDeleteDocument"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage CrawlerExternalDocumentDelete(CMDeleteDocument cMDeleteDocument, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = CrawlerExternalDocumentDeleteWithHttpInfo(cMDeleteDocument, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove an External Document Remove an external crawler document from SimSage.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMDeleteDocument"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> CrawlerExternalDocumentDeleteWithHttpInfo(CMDeleteDocument cMDeleteDocument, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'cMDeleteDocument' is set
            if (cMDeleteDocument == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMDeleteDocument' when calling CrawlerApi->CrawlerExternalDocumentDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMDeleteDocument;

            localVarRequestOptions.Operation = "CrawlerApi.CrawlerExternalDocumentDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<JsonMessage>("/api/crawler/external/document/delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CrawlerExternalDocumentDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an External Document Remove an external crawler document from SimSage.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMDeleteDocument"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> CrawlerExternalDocumentDeleteAsync(CMDeleteDocument cMDeleteDocument, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await CrawlerExternalDocumentDeleteWithHttpInfoAsync(cMDeleteDocument, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove an External Document Remove an external crawler document from SimSage.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMDeleteDocument"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> CrawlerExternalDocumentDeleteWithHttpInfoAsync(CMDeleteDocument cMDeleteDocument, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'cMDeleteDocument' is set
            if (cMDeleteDocument == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMDeleteDocument' when calling CrawlerApi->CrawlerExternalDocumentDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMDeleteDocument;

            localVarRequestOptions.Operation = "CrawlerApi.CrawlerExternalDocumentDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<JsonMessage>("/api/crawler/external/document/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CrawlerExternalDocumentDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark External Document Unchanged An external crawler document marks a document as not having changed.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMDocumentUnChanged"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage CrawlerExternalDocumentUnChanged(CMDocumentUnChanged cMDocumentUnChanged, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = CrawlerExternalDocumentUnChangedWithHttpInfo(cMDocumentUnChanged, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mark External Document Unchanged An external crawler document marks a document as not having changed.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMDocumentUnChanged"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> CrawlerExternalDocumentUnChangedWithHttpInfo(CMDocumentUnChanged cMDocumentUnChanged, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'cMDocumentUnChanged' is set
            if (cMDocumentUnChanged == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMDocumentUnChanged' when calling CrawlerApi->CrawlerExternalDocumentUnChanged");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMDocumentUnChanged;

            localVarRequestOptions.Operation = "CrawlerApi.CrawlerExternalDocumentUnChanged";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<JsonMessage>("/api/crawler/external/document/un-changed", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CrawlerExternalDocumentUnChanged", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark External Document Unchanged An external crawler document marks a document as not having changed.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMDocumentUnChanged"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> CrawlerExternalDocumentUnChangedAsync(CMDocumentUnChanged cMDocumentUnChanged, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await CrawlerExternalDocumentUnChangedWithHttpInfoAsync(cMDocumentUnChanged, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mark External Document Unchanged An external crawler document marks a document as not having changed.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMDocumentUnChanged"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> CrawlerExternalDocumentUnChangedWithHttpInfoAsync(CMDocumentUnChanged cMDocumentUnChanged, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'cMDocumentUnChanged' is set
            if (cMDocumentUnChanged == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMDocumentUnChanged' when calling CrawlerApi->CrawlerExternalDocumentUnChanged");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMDocumentUnChanged;

            localVarRequestOptions.Operation = "CrawlerApi.CrawlerExternalDocumentUnChanged";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JsonMessage>("/api/crawler/external/document/un-changed", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CrawlerExternalDocumentUnChanged", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload External Document An external crawler document wants to upload a document to SimSage.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMUploadDocument"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage CrawlerExternalDocumentUpload(CMUploadDocument cMUploadDocument, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = CrawlerExternalDocumentUploadWithHttpInfo(cMUploadDocument, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload External Document An external crawler document wants to upload a document to SimSage.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMUploadDocument"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> CrawlerExternalDocumentUploadWithHttpInfo(CMUploadDocument cMUploadDocument, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'cMUploadDocument' is set
            if (cMUploadDocument == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMUploadDocument' when calling CrawlerApi->CrawlerExternalDocumentUpload");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMUploadDocument;

            localVarRequestOptions.Operation = "CrawlerApi.CrawlerExternalDocumentUpload";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<JsonMessage>("/api/crawler/external/document/upload", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CrawlerExternalDocumentUpload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload External Document An external crawler document wants to upload a document to SimSage.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMUploadDocument"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> CrawlerExternalDocumentUploadAsync(CMUploadDocument cMUploadDocument, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await CrawlerExternalDocumentUploadWithHttpInfoAsync(cMUploadDocument, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload External Document An external crawler document wants to upload a document to SimSage.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMUploadDocument"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> CrawlerExternalDocumentUploadWithHttpInfoAsync(CMUploadDocument cMUploadDocument, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'cMUploadDocument' is set
            if (cMUploadDocument == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMUploadDocument' when calling CrawlerApi->CrawlerExternalDocumentUpload");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMUploadDocument;

            localVarRequestOptions.Operation = "CrawlerApi.CrawlerExternalDocumentUpload";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JsonMessage>("/api/crawler/external/document/upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CrawlerExternalDocumentUpload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload External Image An external crawler uploads an image for a document.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMUploadImage"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage CrawlerExternalImageUpload(CMUploadImage cMUploadImage, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = CrawlerExternalImageUploadWithHttpInfo(cMUploadImage, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload External Image An external crawler uploads an image for a document.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMUploadImage"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> CrawlerExternalImageUploadWithHttpInfo(CMUploadImage cMUploadImage, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'cMUploadImage' is set
            if (cMUploadImage == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMUploadImage' when calling CrawlerApi->CrawlerExternalImageUpload");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMUploadImage;

            localVarRequestOptions.Operation = "CrawlerApi.CrawlerExternalImageUpload";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<JsonMessage>("/api/crawler/external/document/upload/image", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CrawlerExternalImageUpload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload External Image An external crawler uploads an image for a document.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMUploadImage"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> CrawlerExternalImageUploadAsync(CMUploadImage cMUploadImage, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await CrawlerExternalImageUploadWithHttpInfoAsync(cMUploadImage, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload External Image An external crawler uploads an image for a document.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMUploadImage"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> CrawlerExternalImageUploadWithHttpInfoAsync(CMUploadImage cMUploadImage, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'cMUploadImage' is set
            if (cMUploadImage == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMUploadImage' when calling CrawlerApi->CrawlerExternalImageUpload");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMUploadImage;

            localVarRequestOptions.Operation = "CrawlerApi.CrawlerExternalImageUpload";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JsonMessage>("/api/crawler/external/document/upload/image", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CrawlerExternalImageUpload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete source Remove a source and all its content by its source-id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage Delete(string organisationId, string kbId, string sessionId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = DeleteWithHttpInfo(organisationId, kbId, sessionId, sourceId, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete source Remove a source and all its content by its source-id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> DeleteWithHttpInfo(string organisationId, string kbId, string sessionId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling CrawlerApi->Delete");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling CrawlerApi->Delete");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling CrawlerApi->Delete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "CrawlerApi.Delete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<JsonMessage>("/api/crawler/crawler/{organisationId}/{kbId}/{sourceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Delete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete source Remove a source and all its content by its source-id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> DeleteAsync(string organisationId, string kbId, string sessionId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await DeleteWithHttpInfoAsync(organisationId, kbId, sessionId, sourceId, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete source Remove a source and all its content by its source-id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> DeleteWithHttpInfoAsync(string organisationId, string kbId, string sessionId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling CrawlerApi->Delete");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling CrawlerApi->Delete");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling CrawlerApi->Delete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "CrawlerApi.Delete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<JsonMessage>("/api/crawler/crawler/{organisationId}/{kbId}/{sourceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Delete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete source&#39;s documents Remove a source&#39;s documents and stop the crawler if it&#39;s running.  Return an updated sources.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSource</returns>
        public CMSource DeleteDocuments(string organisationId, string kbId, string sessionId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMSource> localVarResponse = DeleteDocumentsWithHttpInfo(organisationId, kbId, sessionId, sourceId, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete source&#39;s documents Remove a source&#39;s documents and stop the crawler if it&#39;s running.  Return an updated sources.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSource</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMSource> DeleteDocumentsWithHttpInfo(string organisationId, string kbId, string sessionId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling CrawlerApi->DeleteDocuments");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling CrawlerApi->DeleteDocuments");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling CrawlerApi->DeleteDocuments");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "CrawlerApi.DeleteDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<CMSource>("/api/crawler/crawler/document/{organisationId}/{kbId}/{sourceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete source&#39;s documents Remove a source&#39;s documents and stop the crawler if it&#39;s running.  Return an updated sources.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSource</returns>
        public async System.Threading.Tasks.Task<CMSource> DeleteDocumentsAsync(string organisationId, string kbId, string sessionId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMSource> localVarResponse = await DeleteDocumentsWithHttpInfoAsync(organisationId, kbId, sessionId, sourceId, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete source&#39;s documents Remove a source&#39;s documents and stop the crawler if it&#39;s running.  Return an updated sources.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSource)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMSource>> DeleteDocumentsWithHttpInfoAsync(string organisationId, string kbId, string sessionId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling CrawlerApi->DeleteDocuments");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling CrawlerApi->DeleteDocuments");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling CrawlerApi->DeleteDocuments");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "CrawlerApi.DeleteDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<CMSource>("/api/crawler/crawler/document/{organisationId}/{kbId}/{sourceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Secure Communication Secure Communications end-point.  Send encrypted messages from external crawlers and edge devices to this end-point.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">a random integer used for the communications</param>
        /// <param name="body"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage EncryptedCommunications(int seed, string body, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = EncryptedCommunicationsWithHttpInfo(seed, body, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Secure Communication Secure Communications end-point.  Send encrypted messages from external crawlers and edge devices to this end-point.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">a random integer used for the communications</param>
        /// <param name="body"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> EncryptedCommunicationsWithHttpInfo(int seed, string body, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling CrawlerApi->EncryptedCommunications");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("seed", Org.OpenAPITools.Client.ClientUtils.ParameterToString(seed)); // path parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "CrawlerApi.EncryptedCommunications";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<JsonMessage>("/api/crawler/external/secure/{seed}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EncryptedCommunications", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Secure Communication Secure Communications end-point.  Send encrypted messages from external crawlers and edge devices to this end-point.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">a random integer used for the communications</param>
        /// <param name="body"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> EncryptedCommunicationsAsync(int seed, string body, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await EncryptedCommunicationsWithHttpInfoAsync(seed, body, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Secure Communication Secure Communications end-point.  Send encrypted messages from external crawlers and edge devices to this end-point.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">a random integer used for the communications</param>
        /// <param name="body"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> EncryptedCommunicationsWithHttpInfoAsync(int seed, string body, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling CrawlerApi->EncryptedCommunications");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("seed", Org.OpenAPITools.Client.ClientUtils.ParameterToString(seed)); // path parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "CrawlerApi.EncryptedCommunications";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JsonMessage>("/api/crawler/external/secure/{seed}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EncryptedCommunications", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// External Crawler Retrieve a crawler data-structure by orgId/kbId/sid and sourceId.  Used by External Crawlers to do their job.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMExternalCrawler"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSource</returns>
        public CMSource ExternalCrawler(CMExternalCrawler cMExternalCrawler, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMSource> localVarResponse = ExternalCrawlerWithHttpInfo(cMExternalCrawler, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// External Crawler Retrieve a crawler data-structure by orgId/kbId/sid and sourceId.  Used by External Crawlers to do their job.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMExternalCrawler"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSource</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMSource> ExternalCrawlerWithHttpInfo(CMExternalCrawler cMExternalCrawler, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'cMExternalCrawler' is set
            if (cMExternalCrawler == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMExternalCrawler' when calling CrawlerApi->ExternalCrawler");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMExternalCrawler;

            localVarRequestOptions.Operation = "CrawlerApi.ExternalCrawler";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CMSource>("/api/crawler/external/crawler", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExternalCrawler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// External Crawler Retrieve a crawler data-structure by orgId/kbId/sid and sourceId.  Used by External Crawlers to do their job.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMExternalCrawler"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSource</returns>
        public async System.Threading.Tasks.Task<CMSource> ExternalCrawlerAsync(CMExternalCrawler cMExternalCrawler, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMSource> localVarResponse = await ExternalCrawlerWithHttpInfoAsync(cMExternalCrawler, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// External Crawler Retrieve a crawler data-structure by orgId/kbId/sid and sourceId.  Used by External Crawlers to do their job.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMExternalCrawler"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSource)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMSource>> ExternalCrawlerWithHttpInfoAsync(CMExternalCrawler cMExternalCrawler, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'cMExternalCrawler' is set
            if (cMExternalCrawler == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMExternalCrawler' when calling CrawlerApi->ExternalCrawler");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMExternalCrawler;

            localVarRequestOptions.Operation = "CrawlerApi.ExternalCrawler";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CMSource>("/api/crawler/external/crawler", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExternalCrawler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stop External Crawler An external crawler notifies SimSage it has finished its job, its run through the data once.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMExternalCrawlerStop"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage ExternalCrawlerFinished(CMExternalCrawlerStop cMExternalCrawlerStop, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = ExternalCrawlerFinishedWithHttpInfo(cMExternalCrawlerStop, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stop External Crawler An external crawler notifies SimSage it has finished its job, its run through the data once.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMExternalCrawlerStop"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> ExternalCrawlerFinishedWithHttpInfo(CMExternalCrawlerStop cMExternalCrawlerStop, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'cMExternalCrawlerStop' is set
            if (cMExternalCrawlerStop == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMExternalCrawlerStop' when calling CrawlerApi->ExternalCrawlerFinished");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMExternalCrawlerStop;

            localVarRequestOptions.Operation = "CrawlerApi.ExternalCrawlerFinished";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<JsonMessage>("/api/crawler/external/crawler/finish", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExternalCrawlerFinished", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stop External Crawler An external crawler notifies SimSage it has finished its job, its run through the data once.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMExternalCrawlerStop"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> ExternalCrawlerFinishedAsync(CMExternalCrawlerStop cMExternalCrawlerStop, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await ExternalCrawlerFinishedWithHttpInfoAsync(cMExternalCrawlerStop, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stop External Crawler An external crawler notifies SimSage it has finished its job, its run through the data once.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMExternalCrawlerStop"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> ExternalCrawlerFinishedWithHttpInfoAsync(CMExternalCrawlerStop cMExternalCrawlerStop, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'cMExternalCrawlerStop' is set
            if (cMExternalCrawlerStop == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMExternalCrawlerStop' when calling CrawlerApi->ExternalCrawlerFinished");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMExternalCrawlerStop;

            localVarRequestOptions.Operation = "CrawlerApi.ExternalCrawlerFinished";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JsonMessage>("/api/crawler/external/crawler/finish", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExternalCrawlerFinished", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start External Crawler An external crawler notifies SimSage is it starting a new run.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMExternalCrawlerStart"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage ExternalCrawlerStart(CMExternalCrawlerStart cMExternalCrawlerStart, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = ExternalCrawlerStartWithHttpInfo(cMExternalCrawlerStart, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start External Crawler An external crawler notifies SimSage is it starting a new run.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMExternalCrawlerStart"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> ExternalCrawlerStartWithHttpInfo(CMExternalCrawlerStart cMExternalCrawlerStart, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'cMExternalCrawlerStart' is set
            if (cMExternalCrawlerStart == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMExternalCrawlerStart' when calling CrawlerApi->ExternalCrawlerStart");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMExternalCrawlerStart;

            localVarRequestOptions.Operation = "CrawlerApi.ExternalCrawlerStart";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<JsonMessage>("/api/crawler/external/crawler/start", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExternalCrawlerStart", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start External Crawler An external crawler notifies SimSage is it starting a new run.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMExternalCrawlerStart"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> ExternalCrawlerStartAsync(CMExternalCrawlerStart cMExternalCrawlerStart, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await ExternalCrawlerStartWithHttpInfoAsync(cMExternalCrawlerStart, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start External Crawler An external crawler notifies SimSage is it starting a new run.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cMExternalCrawlerStart"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> ExternalCrawlerStartWithHttpInfoAsync(CMExternalCrawlerStart cMExternalCrawlerStart, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'cMExternalCrawlerStart' is set
            if (cMExternalCrawlerStart == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMExternalCrawlerStart' when calling CrawlerApi->ExternalCrawlerStart");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMExternalCrawlerStart;

            localVarRequestOptions.Operation = "CrawlerApi.ExternalCrawlerStart";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JsonMessage>("/api/crawler/external/crawler/start", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExternalCrawlerStart", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get source Return the data-structure for a source by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSource</returns>
        public CMSource GetCrawler(string organisationId, string kbId, int sourceId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMSource> localVarResponse = GetCrawlerWithHttpInfo(organisationId, kbId, sourceId, sessionId, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get source Return the data-structure for a source by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSource</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMSource> GetCrawlerWithHttpInfo(string organisationId, string kbId, int sourceId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling CrawlerApi->GetCrawler");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling CrawlerApi->GetCrawler");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling CrawlerApi->GetCrawler");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "CrawlerApi.GetCrawler";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CMSource>("/api/crawler/crawler/{organisationId}/{kbId}/{sourceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrawler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get source Return the data-structure for a source by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSource</returns>
        public async System.Threading.Tasks.Task<CMSource> GetCrawlerAsync(string organisationId, string kbId, int sourceId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMSource> localVarResponse = await GetCrawlerWithHttpInfoAsync(organisationId, kbId, sourceId, sessionId, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get source Return the data-structure for a source by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSource)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMSource>> GetCrawlerWithHttpInfoAsync(string organisationId, string kbId, int sourceId, string sessionId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling CrawlerApi->GetCrawler");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling CrawlerApi->GetCrawler");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling CrawlerApi->GetCrawler");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "CrawlerApi.GetCrawler";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CMSource>("/api/crawler/crawler/{organisationId}/{kbId}/{sourceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrawler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get source List Get a list of sources for a given organisation / knowledge base.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CMSource&gt;</returns>
        public List<CMSource> GetSourceList(string sessionId, string organisationId, string kbId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMSource>> localVarResponse = GetSourceListWithHttpInfo(sessionId, organisationId, kbId, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get source List Get a list of sources for a given organisation / knowledge base.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CMSource&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<CMSource>> GetSourceListWithHttpInfo(string sessionId, string organisationId, string kbId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling CrawlerApi->GetSourceList");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling CrawlerApi->GetSourceList");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling CrawlerApi->GetSourceList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "CrawlerApi.GetSourceList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CMSource>>("/api/crawler/crawlers/{organisationId}/{kbId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSourceList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get source List Get a list of sources for a given organisation / knowledge base.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CMSource&gt;</returns>
        public async System.Threading.Tasks.Task<List<CMSource>> GetSourceListAsync(string sessionId, string organisationId, string kbId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<CMSource>> localVarResponse = await GetSourceListWithHttpInfoAsync(sessionId, organisationId, kbId, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get source List Get a list of sources for a given organisation / knowledge base.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CMSource&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<CMSource>>> GetSourceListWithHttpInfoAsync(string sessionId, string organisationId, string kbId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling CrawlerApi->GetSourceList");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling CrawlerApi->GetSourceList");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling CrawlerApi->GetSourceList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "CrawlerApi.GetSourceList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CMSource>>("/api/crawler/crawlers/{organisationId}/{kbId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSourceList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// OIDC code receiver used for OIDC systems to receive codes
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcKey">the Dropbox OIDC key</param>
        /// <param name="allRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void OidcCode(string oidcKey, Dictionary<string, string> allRequestParams, int operationIndex = 0)
        {
            OidcCodeWithHttpInfo(oidcKey, allRequestParams);
        }

        /// <summary>
        /// OIDC code receiver used for OIDC systems to receive codes
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcKey">the Dropbox OIDC key</param>
        /// <param name="allRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> OidcCodeWithHttpInfo(string oidcKey, Dictionary<string, string> allRequestParams, int operationIndex = 0)
        {
            // verify the required parameter 'oidcKey' is set
            if (oidcKey == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'oidcKey' when calling CrawlerApi->OidcCode");
            }

            // verify the required parameter 'allRequestParams' is set
            if (allRequestParams == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'allRequestParams' when calling CrawlerApi->OidcCode");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("oidcKey", Org.OpenAPITools.Client.ClientUtils.ParameterToString(oidcKey)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "allRequestParams", allRequestParams));

            localVarRequestOptions.Operation = "CrawlerApi.OidcCode";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/crawler/dropbox-oidc-code/{oidcKey}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OidcCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// OIDC code receiver used for OIDC systems to receive codes
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcKey">the Dropbox OIDC key</param>
        /// <param name="allRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OidcCodeAsync(string oidcKey, Dictionary<string, string> allRequestParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await OidcCodeWithHttpInfoAsync(oidcKey, allRequestParams, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// OIDC code receiver used for OIDC systems to receive codes
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcKey">the Dropbox OIDC key</param>
        /// <param name="allRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> OidcCodeWithHttpInfoAsync(string oidcKey, Dictionary<string, string> allRequestParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'oidcKey' is set
            if (oidcKey == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'oidcKey' when calling CrawlerApi->OidcCode");
            }

            // verify the required parameter 'allRequestParams' is set
            if (allRequestParams == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'allRequestParams' when calling CrawlerApi->OidcCode");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("oidcKey", Org.OpenAPITools.Client.ClientUtils.ParameterToString(oidcKey)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "allRequestParams", allRequestParams));

            localVarRequestOptions.Operation = "CrawlerApi.OidcCode";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/crawler/dropbox-oidc-code/{oidcKey}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OidcCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Process all files of crawler/source Start and force processing all files for a crawler/source
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMStartCrawler"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage ProcessAllFiles(string sessionId, CMStartCrawler cMStartCrawler, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = ProcessAllFilesWithHttpInfo(sessionId, cMStartCrawler, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Process all files of crawler/source Start and force processing all files for a crawler/source
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMStartCrawler"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> ProcessAllFilesWithHttpInfo(string sessionId, CMStartCrawler cMStartCrawler, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling CrawlerApi->ProcessAllFiles");
            }

            // verify the required parameter 'cMStartCrawler' is set
            if (cMStartCrawler == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMStartCrawler' when calling CrawlerApi->ProcessAllFiles");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMStartCrawler;

            localVarRequestOptions.Operation = "CrawlerApi.ProcessAllFiles";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<JsonMessage>("/api/crawler/process-all-files", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessAllFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Process all files of crawler/source Start and force processing all files for a crawler/source
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMStartCrawler"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> ProcessAllFilesAsync(string sessionId, CMStartCrawler cMStartCrawler, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await ProcessAllFilesWithHttpInfoAsync(sessionId, cMStartCrawler, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Process all files of crawler/source Start and force processing all files for a crawler/source
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMStartCrawler"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> ProcessAllFilesWithHttpInfoAsync(string sessionId, CMStartCrawler cMStartCrawler, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling CrawlerApi->ProcessAllFiles");
            }

            // verify the required parameter 'cMStartCrawler' is set
            if (cMStartCrawler == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMStartCrawler' when calling CrawlerApi->ProcessAllFiles");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMStartCrawler;

            localVarRequestOptions.Operation = "CrawlerApi.ProcessAllFiles";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JsonMessage>("/api/crawler/process-all-files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessAllFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset Source delta-token reset a SimSage source&#39;s delta token.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSource</returns>
        public CMSource ResetSourceDelta(string sessionId, string organisationId, string kbId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMSource> localVarResponse = ResetSourceDeltaWithHttpInfo(sessionId, organisationId, kbId, sourceId, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reset Source delta-token reset a SimSage source&#39;s delta token.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSource</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMSource> ResetSourceDeltaWithHttpInfo(string sessionId, string organisationId, string kbId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling CrawlerApi->ResetSourceDelta");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling CrawlerApi->ResetSourceDelta");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling CrawlerApi->ResetSourceDelta");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "CrawlerApi.ResetSourceDelta";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CMSource>("/api/crawler/crawler/reset-delta/{organisationId}/{kbId}/{sourceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetSourceDelta", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset Source delta-token reset a SimSage source&#39;s delta token.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSource</returns>
        public async System.Threading.Tasks.Task<CMSource> ResetSourceDeltaAsync(string sessionId, string organisationId, string kbId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMSource> localVarResponse = await ResetSourceDeltaWithHttpInfoAsync(sessionId, organisationId, kbId, sourceId, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reset Source delta-token reset a SimSage source&#39;s delta token.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSource)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMSource>> ResetSourceDeltaWithHttpInfoAsync(string sessionId, string organisationId, string kbId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling CrawlerApi->ResetSourceDelta");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling CrawlerApi->ResetSourceDelta");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling CrawlerApi->ResetSourceDelta");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "CrawlerApi.ResetSourceDelta";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CMSource>("/api/crawler/crawler/reset-delta/{organisationId}/{kbId}/{sourceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetSourceDelta", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start crawler Start a crawler by source-id if after it has stopped.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMStartCrawler"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage StartCrawler(string sessionId, CMStartCrawler cMStartCrawler, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = StartCrawlerWithHttpInfo(sessionId, cMStartCrawler, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start crawler Start a crawler by source-id if after it has stopped.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMStartCrawler"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> StartCrawlerWithHttpInfo(string sessionId, CMStartCrawler cMStartCrawler, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling CrawlerApi->StartCrawler");
            }

            // verify the required parameter 'cMStartCrawler' is set
            if (cMStartCrawler == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMStartCrawler' when calling CrawlerApi->StartCrawler");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMStartCrawler;

            localVarRequestOptions.Operation = "CrawlerApi.StartCrawler";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<JsonMessage>("/api/crawler/start", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartCrawler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start crawler Start a crawler by source-id if after it has stopped.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMStartCrawler"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> StartCrawlerAsync(string sessionId, CMStartCrawler cMStartCrawler, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await StartCrawlerWithHttpInfoAsync(sessionId, cMStartCrawler, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start crawler Start a crawler by source-id if after it has stopped.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMStartCrawler"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> StartCrawlerWithHttpInfoAsync(string sessionId, CMStartCrawler cMStartCrawler, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling CrawlerApi->StartCrawler");
            }

            // verify the required parameter 'cMStartCrawler' is set
            if (cMStartCrawler == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMStartCrawler' when calling CrawlerApi->StartCrawler");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMStartCrawler;

            localVarRequestOptions.Operation = "CrawlerApi.StartCrawler";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JsonMessage>("/api/crawler/start", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartCrawler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test Crawler Some crawlers (platform crawlers, not external crawlers) can check if the given information is enough for it to operator.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonMessage</returns>
        public JsonMessage TestCrawler(string sessionId, string organisationId, string kbId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = TestCrawlerWithHttpInfo(sessionId, organisationId, kbId, sourceId, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Test Crawler Some crawlers (platform crawlers, not external crawlers) can check if the given information is enough for it to operator.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<JsonMessage> TestCrawlerWithHttpInfo(string sessionId, string organisationId, string kbId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling CrawlerApi->TestCrawler");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling CrawlerApi->TestCrawler");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling CrawlerApi->TestCrawler");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "CrawlerApi.TestCrawler";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<JsonMessage>("/api/crawler/crawler/test/{organisationId}/{kbId}/{sourceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestCrawler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test Crawler Some crawlers (platform crawlers, not external crawlers) can check if the given information is enough for it to operator.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonMessage</returns>
        public async System.Threading.Tasks.Task<JsonMessage> TestCrawlerAsync(string sessionId, string organisationId, string kbId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<JsonMessage> localVarResponse = await TestCrawlerWithHttpInfoAsync(sessionId, organisationId, kbId, sourceId, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Test Crawler Some crawlers (platform crawlers, not external crawlers) can check if the given information is enough for it to operator.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="organisationId">the organisation&#39;s id (a guid)</param>
        /// <param name="kbId">the knowledge-base&#39;s id (a guid)</param>
        /// <param name="sourceId">the crawler&#39;s id</param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<JsonMessage>> TestCrawlerWithHttpInfoAsync(string sessionId, string organisationId, string kbId, int sourceId, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling CrawlerApi->TestCrawler");
            }

            // verify the required parameter 'organisationId' is set
            if (organisationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organisationId' when calling CrawlerApi->TestCrawler");
            }

            // verify the required parameter 'kbId' is set
            if (kbId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'kbId' when calling CrawlerApi->TestCrawler");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organisationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("kbId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(kbId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "CrawlerApi.TestCrawler";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<JsonMessage>("/api/crawler/crawler/test/{organisationId}/{kbId}/{sourceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestCrawler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Source Save (create or update) a SimSage source.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSource"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSource</returns>
        public CMSource UpdateCrawler(string sessionId, CMSource cMSource, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMSource> localVarResponse = UpdateCrawlerWithHttpInfo(sessionId, cMSource, aPIVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Source Save (create or update) a SimSage source.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSource"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSource</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMSource> UpdateCrawlerWithHttpInfo(string sessionId, CMSource cMSource, string? aPIVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling CrawlerApi->UpdateCrawler");
            }

            // verify the required parameter 'cMSource' is set
            if (cMSource == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMSource' when calling CrawlerApi->UpdateCrawler");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMSource;

            localVarRequestOptions.Operation = "CrawlerApi.UpdateCrawler";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CMSource>("/api/crawler/crawler", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCrawler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Source Save (create or update) a SimSage source.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSource"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSource</returns>
        public async System.Threading.Tasks.Task<CMSource> UpdateCrawlerAsync(string sessionId, CMSource cMSource, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMSource> localVarResponse = await UpdateCrawlerWithHttpInfoAsync(sessionId, cMSource, aPIVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Source Save (create or update) a SimSage source.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">a valid SimSage Session id.</param>
        /// <param name="cMSource"></param>
        /// <param name="aPIVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSource)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMSource>> UpdateCrawlerWithHttpInfoAsync(string sessionId, CMSource cMSource, string? aPIVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sessionId' when calling CrawlerApi->UpdateCrawler");
            }

            // verify the required parameter 'cMSource' is set
            if (cMSource == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cMSource' when calling CrawlerApi->UpdateCrawler");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("session-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sessionId)); // header parameter
            if (aPIVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("API-Version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(aPIVersion)); // header parameter
            }
            localVarRequestOptions.Data = cMSource;

            localVarRequestOptions.Operation = "CrawlerApi.UpdateCrawler";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CMSource>("/api/crawler/crawler", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCrawler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Version Get the version of SimSage crawler-services.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMVersion</returns>
        public CMVersion Version6(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CMVersion> localVarResponse = Version6WithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Version Get the version of SimSage crawler-services.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMVersion</returns>
        public Org.OpenAPITools.Client.ApiResponse<CMVersion> Version6WithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "CrawlerApi.Version6";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CMVersion>("/api/crawler/version", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Version6", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Version Get the version of SimSage crawler-services.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMVersion</returns>
        public async System.Threading.Tasks.Task<CMVersion> Version6Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CMVersion> localVarResponse = await Version6WithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Version Get the version of SimSage crawler-services.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMVersion)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CMVersion>> Version6WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "CrawlerApi.Version6";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CMVersion>("/api/crawler/version", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Version6", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
