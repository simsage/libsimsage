/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.11.4
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CMProjectFrame
    /// </summary>
    [DataContract(Name = "CMProjectFrame")]
    public partial class CMProjectFrame : IEquatable<CMProjectFrame>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMProjectFrame" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMProjectFrame() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMProjectFrame" /> class.
        /// </summary>
        /// <param name="projectType">projectType (required).</param>
        /// <param name="title">title (required).</param>
        /// <param name="narrative">narrative (required).</param>
        public CMProjectFrame(string projectType = default(string), string title = default(string), string narrative = default(string))
        {
            // to ensure "projectType" is required (not null)
            if (projectType == null)
            {
                throw new ArgumentNullException("projectType is a required property for CMProjectFrame and cannot be null");
            }
            this.ProjectType = projectType;
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for CMProjectFrame and cannot be null");
            }
            this.Title = title;
            // to ensure "narrative" is required (not null)
            if (narrative == null)
            {
                throw new ArgumentNullException("narrative is a required property for CMProjectFrame and cannot be null");
            }
            this.Narrative = narrative;
        }

        /// <summary>
        /// Gets or Sets ProjectType
        /// </summary>
        [DataMember(Name = "projectType", IsRequired = true, EmitDefaultValue = true)]
        public string ProjectType { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Narrative
        /// </summary>
        [DataMember(Name = "narrative", IsRequired = true, EmitDefaultValue = true)]
        public string Narrative { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMProjectFrame {\n");
            sb.Append("  ProjectType: ").Append(ProjectType).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Narrative: ").Append(Narrative).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMProjectFrame);
        }

        /// <summary>
        /// Returns true if CMProjectFrame instances are equal
        /// </summary>
        /// <param name="input">Instance of CMProjectFrame to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMProjectFrame input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ProjectType == input.ProjectType ||
                    (this.ProjectType != null &&
                    this.ProjectType.Equals(input.ProjectType))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Narrative == input.Narrative ||
                    (this.Narrative != null &&
                    this.Narrative.Equals(input.Narrative))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProjectType != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectType.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Narrative != null)
                {
                    hashCode = (hashCode * 59) + this.Narrative.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
