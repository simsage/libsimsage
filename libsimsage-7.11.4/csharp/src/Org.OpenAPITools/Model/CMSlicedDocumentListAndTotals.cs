/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.11.4
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CMSlicedDocumentListAndTotals
    /// </summary>
    [DataContract(Name = "CMSlicedDocumentListAndTotals")]
    public partial class CMSlicedDocumentListAndTotals : IEquatable<CMSlicedDocumentListAndTotals>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMSlicedDocumentListAndTotals" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMSlicedDocumentListAndTotals() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMSlicedDocumentListAndTotals" /> class.
        /// </summary>
        /// <param name="pagedResults">pagedResults (required).</param>
        /// <param name="allDocs">allDocs (required).</param>
        /// <param name="completed">completed (required).</param>
        /// <param name="sourceMap">sourceMap (required).</param>
        /// <param name="userMap">userMap (required).</param>
        public CMSlicedDocumentListAndTotals(CMPagedResultsCMSlicedDocument pagedResults = default(CMPagedResultsCMSlicedDocument), long allDocs = default(long), long completed = default(long), Dictionary<string, string> sourceMap = default(Dictionary<string, string>), Dictionary<string, string> userMap = default(Dictionary<string, string>))
        {
            // to ensure "pagedResults" is required (not null)
            if (pagedResults == null)
            {
                throw new ArgumentNullException("pagedResults is a required property for CMSlicedDocumentListAndTotals and cannot be null");
            }
            this.PagedResults = pagedResults;
            this.AllDocs = allDocs;
            this.Completed = completed;
            // to ensure "sourceMap" is required (not null)
            if (sourceMap == null)
            {
                throw new ArgumentNullException("sourceMap is a required property for CMSlicedDocumentListAndTotals and cannot be null");
            }
            this.SourceMap = sourceMap;
            // to ensure "userMap" is required (not null)
            if (userMap == null)
            {
                throw new ArgumentNullException("userMap is a required property for CMSlicedDocumentListAndTotals and cannot be null");
            }
            this.UserMap = userMap;
        }

        /// <summary>
        /// Gets or Sets PagedResults
        /// </summary>
        [DataMember(Name = "pagedResults", IsRequired = true, EmitDefaultValue = true)]
        public CMPagedResultsCMSlicedDocument PagedResults { get; set; }

        /// <summary>
        /// Gets or Sets AllDocs
        /// </summary>
        [DataMember(Name = "allDocs", IsRequired = true, EmitDefaultValue = true)]
        public long AllDocs { get; set; }

        /// <summary>
        /// Gets or Sets Completed
        /// </summary>
        [DataMember(Name = "completed", IsRequired = true, EmitDefaultValue = true)]
        public long Completed { get; set; }

        /// <summary>
        /// Gets or Sets SourceMap
        /// </summary>
        [DataMember(Name = "sourceMap", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> SourceMap { get; set; }

        /// <summary>
        /// Gets or Sets UserMap
        /// </summary>
        [DataMember(Name = "userMap", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> UserMap { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMSlicedDocumentListAndTotals {\n");
            sb.Append("  PagedResults: ").Append(PagedResults).Append("\n");
            sb.Append("  AllDocs: ").Append(AllDocs).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  SourceMap: ").Append(SourceMap).Append("\n");
            sb.Append("  UserMap: ").Append(UserMap).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMSlicedDocumentListAndTotals);
        }

        /// <summary>
        /// Returns true if CMSlicedDocumentListAndTotals instances are equal
        /// </summary>
        /// <param name="input">Instance of CMSlicedDocumentListAndTotals to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMSlicedDocumentListAndTotals input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PagedResults == input.PagedResults ||
                    (this.PagedResults != null &&
                    this.PagedResults.Equals(input.PagedResults))
                ) && 
                (
                    this.AllDocs == input.AllDocs ||
                    this.AllDocs.Equals(input.AllDocs)
                ) && 
                (
                    this.Completed == input.Completed ||
                    this.Completed.Equals(input.Completed)
                ) && 
                (
                    this.SourceMap == input.SourceMap ||
                    this.SourceMap != null &&
                    input.SourceMap != null &&
                    this.SourceMap.SequenceEqual(input.SourceMap)
                ) && 
                (
                    this.UserMap == input.UserMap ||
                    this.UserMap != null &&
                    input.UserMap != null &&
                    this.UserMap.SequenceEqual(input.UserMap)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PagedResults != null)
                {
                    hashCode = (hashCode * 59) + this.PagedResults.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllDocs.GetHashCode();
                hashCode = (hashCode * 59) + this.Completed.GetHashCode();
                if (this.SourceMap != null)
                {
                    hashCode = (hashCode * 59) + this.SourceMap.GetHashCode();
                }
                if (this.UserMap != null)
                {
                    hashCode = (hashCode * 59) + this.UserMap.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
