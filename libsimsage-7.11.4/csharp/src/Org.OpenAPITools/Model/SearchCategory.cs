/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.11.4
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Search categories / metadata searching
    /// </summary>
    [DataContract(Name = "SearchCategory")]
    public partial class SearchCategory : IEquatable<SearchCategory>, IValidatableObject
    {
        /// <summary>
        /// Defines ScType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScTypeEnum
        {
            /// <summary>
            /// Enum PLAIN for value: SCT_PLAIN
            /// </summary>
            [EnumMember(Value = "SCT_PLAIN")]
            PLAIN = 1,

            /// <summary>
            /// Enum TWOLEVEL for value: SCT_TWO_LEVEL
            /// </summary>
            [EnumMember(Value = "SCT_TWO_LEVEL")]
            TWOLEVEL = 2,

            /// <summary>
            /// Enum NUMBER for value: SCT_NUMBER
            /// </summary>
            [EnumMember(Value = "SCT_NUMBER")]
            NUMBER = 3
        }


        /// <summary>
        /// Gets or Sets ScType
        /// </summary>
        [DataMember(Name = "scType", IsRequired = true, EmitDefaultValue = true)]
        public ScTypeEnum ScType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchCategory" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchCategory() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchCategory" /> class.
        /// </summary>
        /// <param name="scType">scType (required).</param>
        /// <param name="categoryType">categoryType (required).</param>
        /// <param name="order">order (required).</param>
        /// <param name="sortDefault">sortDefault (required).</param>
        /// <param name="sortAscText">sortAscText (required).</param>
        /// <param name="sortDescText">sortDescText (required).</param>
        /// <param name="metadata">metadata (required).</param>
        /// <param name="displayName">displayName (required).</param>
        /// <param name="sort">sort (required).</param>
        /// <param name="minValue">minValue (required).</param>
        /// <param name="maxValue">maxValue (required).</param>
        /// <param name="items">items (required).</param>
        public SearchCategory(ScTypeEnum scType = default(ScTypeEnum), string categoryType = default(string), int order = default(int), string sortDefault = default(string), string sortAscText = default(string), string sortDescText = default(string), string metadata = default(string), string displayName = default(string), bool sort = default(bool), long minValue = default(long), long maxValue = default(long), List<NameCounterLevel> items = default(List<NameCounterLevel>))
        {
            this.ScType = scType;
            // to ensure "categoryType" is required (not null)
            if (categoryType == null)
            {
                throw new ArgumentNullException("categoryType is a required property for SearchCategory and cannot be null");
            }
            this.CategoryType = categoryType;
            this.Order = order;
            // to ensure "sortDefault" is required (not null)
            if (sortDefault == null)
            {
                throw new ArgumentNullException("sortDefault is a required property for SearchCategory and cannot be null");
            }
            this.SortDefault = sortDefault;
            // to ensure "sortAscText" is required (not null)
            if (sortAscText == null)
            {
                throw new ArgumentNullException("sortAscText is a required property for SearchCategory and cannot be null");
            }
            this.SortAscText = sortAscText;
            // to ensure "sortDescText" is required (not null)
            if (sortDescText == null)
            {
                throw new ArgumentNullException("sortDescText is a required property for SearchCategory and cannot be null");
            }
            this.SortDescText = sortDescText;
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new ArgumentNullException("metadata is a required property for SearchCategory and cannot be null");
            }
            this.Metadata = metadata;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for SearchCategory and cannot be null");
            }
            this.DisplayName = displayName;
            this.Sort = sort;
            this.MinValue = minValue;
            this.MaxValue = maxValue;
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new ArgumentNullException("items is a required property for SearchCategory and cannot be null");
            }
            this.Items = items;
        }

        /// <summary>
        /// Gets or Sets CategoryType
        /// </summary>
        [DataMember(Name = "categoryType", IsRequired = true, EmitDefaultValue = true)]
        public string CategoryType { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", IsRequired = true, EmitDefaultValue = true)]
        public int Order { get; set; }

        /// <summary>
        /// Gets or Sets SortDefault
        /// </summary>
        [DataMember(Name = "sortDefault", IsRequired = true, EmitDefaultValue = true)]
        public string SortDefault { get; set; }

        /// <summary>
        /// Gets or Sets SortAscText
        /// </summary>
        [DataMember(Name = "sortAscText", IsRequired = true, EmitDefaultValue = true)]
        public string SortAscText { get; set; }

        /// <summary>
        /// Gets or Sets SortDescText
        /// </summary>
        [DataMember(Name = "sortDescText", IsRequired = true, EmitDefaultValue = true)]
        public string SortDescText { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", IsRequired = true, EmitDefaultValue = true)]
        public string Metadata { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [DataMember(Name = "sort", IsRequired = true, EmitDefaultValue = true)]
        public bool Sort { get; set; }

        /// <summary>
        /// Gets or Sets MinValue
        /// </summary>
        [DataMember(Name = "minValue", IsRequired = true, EmitDefaultValue = true)]
        public long MinValue { get; set; }

        /// <summary>
        /// Gets or Sets MaxValue
        /// </summary>
        [DataMember(Name = "maxValue", IsRequired = true, EmitDefaultValue = true)]
        public long MaxValue { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", IsRequired = true, EmitDefaultValue = true)]
        public List<NameCounterLevel> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchCategory {\n");
            sb.Append("  ScType: ").Append(ScType).Append("\n");
            sb.Append("  CategoryType: ").Append(CategoryType).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  SortDefault: ").Append(SortDefault).Append("\n");
            sb.Append("  SortAscText: ").Append(SortAscText).Append("\n");
            sb.Append("  SortDescText: ").Append(SortDescText).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  MinValue: ").Append(MinValue).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchCategory);
        }

        /// <summary>
        /// Returns true if SearchCategory instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchCategory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchCategory input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ScType == input.ScType ||
                    this.ScType.Equals(input.ScType)
                ) && 
                (
                    this.CategoryType == input.CategoryType ||
                    (this.CategoryType != null &&
                    this.CategoryType.Equals(input.CategoryType))
                ) && 
                (
                    this.Order == input.Order ||
                    this.Order.Equals(input.Order)
                ) && 
                (
                    this.SortDefault == input.SortDefault ||
                    (this.SortDefault != null &&
                    this.SortDefault.Equals(input.SortDefault))
                ) && 
                (
                    this.SortAscText == input.SortAscText ||
                    (this.SortAscText != null &&
                    this.SortAscText.Equals(input.SortAscText))
                ) && 
                (
                    this.SortDescText == input.SortDescText ||
                    (this.SortDescText != null &&
                    this.SortDescText.Equals(input.SortDescText))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Sort == input.Sort ||
                    this.Sort.Equals(input.Sort)
                ) && 
                (
                    this.MinValue == input.MinValue ||
                    this.MinValue.Equals(input.MinValue)
                ) && 
                (
                    this.MaxValue == input.MaxValue ||
                    this.MaxValue.Equals(input.MaxValue)
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ScType.GetHashCode();
                if (this.CategoryType != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Order.GetHashCode();
                if (this.SortDefault != null)
                {
                    hashCode = (hashCode * 59) + this.SortDefault.GetHashCode();
                }
                if (this.SortAscText != null)
                {
                    hashCode = (hashCode * 59) + this.SortAscText.GetHashCode();
                }
                if (this.SortDescText != null)
                {
                    hashCode = (hashCode * 59) + this.SortDescText.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Sort.GetHashCode();
                hashCode = (hashCode * 59) + this.MinValue.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxValue.GetHashCode();
                if (this.Items != null)
                {
                    hashCode = (hashCode * 59) + this.Items.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
