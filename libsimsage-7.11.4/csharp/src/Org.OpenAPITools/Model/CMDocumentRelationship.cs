/*
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.11.4
 * Contact: info@simsage.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A document that related to this document in some fashion (parent or child)
    /// </summary>
    [DataContract(Name = "CMDocumentRelationship")]
    public partial class CMDocumentRelationship : IEquatable<CMDocumentRelationship>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMDocumentRelationship" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CMDocumentRelationship() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CMDocumentRelationship" /> class.
        /// </summary>
        /// <param name="urlId">the url-id of this document (required).</param>
        /// <param name="isChild">if true, this is a child relationship, otherwise a parent relationship (required).</param>
        /// <param name="relatedUrlId">the related document&#39;s id (required).</param>
        /// <param name="relatedUrl">the url of the related document (required).</param>
        /// <param name="webUrl">the web-url (if set) if there is a web-link for this document (required).</param>
        /// <param name="title">the title of the related document for display (required).</param>
        /// <param name="binarySize">size in bytes of the related document (required).</param>
        /// <param name="documentType">the type of the related document (required).</param>
        /// <param name="created">The unix creation date-time of the related item (required).</param>
        /// <param name="lastModified">The unix last-modified date-time of the related item (required).</param>
        /// <param name="child">child.</param>
        public CMDocumentRelationship(int urlId = default(int), bool isChild = default(bool), int relatedUrlId = default(int), string relatedUrl = default(string), string webUrl = default(string), string title = default(string), long binarySize = default(long), string documentType = default(string), long created = default(long), long lastModified = default(long), bool child = default(bool))
        {
            this.UrlId = urlId;
            this.IsChild = isChild;
            this.RelatedUrlId = relatedUrlId;
            // to ensure "relatedUrl" is required (not null)
            if (relatedUrl == null)
            {
                throw new ArgumentNullException("relatedUrl is a required property for CMDocumentRelationship and cannot be null");
            }
            this.RelatedUrl = relatedUrl;
            // to ensure "webUrl" is required (not null)
            if (webUrl == null)
            {
                throw new ArgumentNullException("webUrl is a required property for CMDocumentRelationship and cannot be null");
            }
            this.WebUrl = webUrl;
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for CMDocumentRelationship and cannot be null");
            }
            this.Title = title;
            this.BinarySize = binarySize;
            // to ensure "documentType" is required (not null)
            if (documentType == null)
            {
                throw new ArgumentNullException("documentType is a required property for CMDocumentRelationship and cannot be null");
            }
            this.DocumentType = documentType;
            this.Created = created;
            this.LastModified = lastModified;
            this.Child = child;
        }

        /// <summary>
        /// the url-id of this document
        /// </summary>
        /// <value>the url-id of this document</value>
        /// <example>1</example>
        [DataMember(Name = "urlId", IsRequired = true, EmitDefaultValue = true)]
        public int UrlId { get; set; }

        /// <summary>
        /// if true, this is a child relationship, otherwise a parent relationship
        /// </summary>
        /// <value>if true, this is a child relationship, otherwise a parent relationship</value>
        /// <example>true</example>
        [DataMember(Name = "isChild", IsRequired = true, EmitDefaultValue = true)]
        public bool IsChild { get; set; }

        /// <summary>
        /// the related document&#39;s id
        /// </summary>
        /// <value>the related document&#39;s id</value>
        /// <example>5</example>
        [DataMember(Name = "relatedUrlId", IsRequired = true, EmitDefaultValue = true)]
        public int RelatedUrlId { get; set; }

        /// <summary>
        /// the url of the related document
        /// </summary>
        /// <value>the url of the related document</value>
        /// <example>related-document.txt</example>
        [DataMember(Name = "relatedUrl", IsRequired = true, EmitDefaultValue = true)]
        public string RelatedUrl { get; set; }

        /// <summary>
        /// the web-url (if set) if there is a web-link for this document
        /// </summary>
        /// <value>the web-url (if set) if there is a web-link for this document</value>
        /// <example>https://server.com/related-document.txt</example>
        [DataMember(Name = "webUrl", IsRequired = true, EmitDefaultValue = true)]
        public string WebUrl { get; set; }

        /// <summary>
        /// the title of the related document for display
        /// </summary>
        /// <value>the title of the related document for display</value>
        /// <example>my title</example>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// size in bytes of the related document
        /// </summary>
        /// <value>size in bytes of the related document</value>
        /// <example>1234</example>
        [DataMember(Name = "binarySize", IsRequired = true, EmitDefaultValue = true)]
        public long BinarySize { get; set; }

        /// <summary>
        /// the type of the related document
        /// </summary>
        /// <value>the type of the related document</value>
        /// <example>pdf</example>
        [DataMember(Name = "documentType", IsRequired = true, EmitDefaultValue = true)]
        public string DocumentType { get; set; }

        /// <summary>
        /// The unix creation date-time of the related item
        /// </summary>
        /// <value>The unix creation date-time of the related item</value>
        [DataMember(Name = "created", IsRequired = true, EmitDefaultValue = true)]
        public long Created { get; set; }

        /// <summary>
        /// The unix last-modified date-time of the related item
        /// </summary>
        /// <value>The unix last-modified date-time of the related item</value>
        [DataMember(Name = "lastModified", IsRequired = true, EmitDefaultValue = true)]
        public long LastModified { get; set; }

        /// <summary>
        /// Gets or Sets Child
        /// </summary>
        [DataMember(Name = "child", EmitDefaultValue = true)]
        public bool Child { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMDocumentRelationship {\n");
            sb.Append("  UrlId: ").Append(UrlId).Append("\n");
            sb.Append("  IsChild: ").Append(IsChild).Append("\n");
            sb.Append("  RelatedUrlId: ").Append(RelatedUrlId).Append("\n");
            sb.Append("  RelatedUrl: ").Append(RelatedUrl).Append("\n");
            sb.Append("  WebUrl: ").Append(WebUrl).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  BinarySize: ").Append(BinarySize).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  Child: ").Append(Child).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CMDocumentRelationship);
        }

        /// <summary>
        /// Returns true if CMDocumentRelationship instances are equal
        /// </summary>
        /// <param name="input">Instance of CMDocumentRelationship to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CMDocumentRelationship input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UrlId == input.UrlId ||
                    this.UrlId.Equals(input.UrlId)
                ) && 
                (
                    this.IsChild == input.IsChild ||
                    this.IsChild.Equals(input.IsChild)
                ) && 
                (
                    this.RelatedUrlId == input.RelatedUrlId ||
                    this.RelatedUrlId.Equals(input.RelatedUrlId)
                ) && 
                (
                    this.RelatedUrl == input.RelatedUrl ||
                    (this.RelatedUrl != null &&
                    this.RelatedUrl.Equals(input.RelatedUrl))
                ) && 
                (
                    this.WebUrl == input.WebUrl ||
                    (this.WebUrl != null &&
                    this.WebUrl.Equals(input.WebUrl))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.BinarySize == input.BinarySize ||
                    this.BinarySize.Equals(input.BinarySize)
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    (this.DocumentType != null &&
                    this.DocumentType.Equals(input.DocumentType))
                ) && 
                (
                    this.Created == input.Created ||
                    this.Created.Equals(input.Created)
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    this.LastModified.Equals(input.LastModified)
                ) && 
                (
                    this.Child == input.Child ||
                    this.Child.Equals(input.Child)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.UrlId.GetHashCode();
                hashCode = (hashCode * 59) + this.IsChild.GetHashCode();
                hashCode = (hashCode * 59) + this.RelatedUrlId.GetHashCode();
                if (this.RelatedUrl != null)
                {
                    hashCode = (hashCode * 59) + this.RelatedUrl.GetHashCode();
                }
                if (this.WebUrl != null)
                {
                    hashCode = (hashCode * 59) + this.WebUrl.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BinarySize.GetHashCode();
                if (this.DocumentType != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Created.GetHashCode();
                hashCode = (hashCode * 59) + this.LastModified.GetHashCode();
                hashCode = (hashCode * 59) + this.Child.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
