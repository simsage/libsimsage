/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.11.4
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CMGroup;
import org.openapitools.client.model.CMGroupList;
import org.openapitools.client.model.CMImportUsers;
import org.openapitools.client.model.CMOrganisation;
import org.openapitools.client.model.CMPasswordResetRequest;
import org.openapitools.client.model.CMSessionVersion;
import org.openapitools.client.model.CMSignInParameters;
import org.openapitools.client.model.CMUserList;
import org.openapitools.client.model.CMUserPasswordReset;
import org.openapitools.client.model.CMUserWithExtras;
import org.openapitools.client.model.JsonMessage;
import org.openapitools.client.model.SignInAdmin;
import org.openapitools.client.model.SignInCmd;
import org.openapitools.client.model.SignInDmsCmd;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthApi
 */
@Disabled
public class AuthApiTest {

    private final AuthApi api = new AuthApi();

    /**
     * Delete Group
     *
     * Delete a group by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGroupTest() throws ApiException {
        String organisationId = null;
        String name = null;
        String sessionId = null;
        JsonMessage response = api.deleteGroup(organisationId, name, sessionId);
        // TODO: test validations
    }

    /**
     * Delete Organisation
     *
     * Delete / remove an organisation and its knowledge bases.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationTest() throws ApiException {
        String organisationId = null;
        String sessionId = null;
        JsonMessage response = api.deleteOrganisation(organisationId, sessionId);
        // TODO: test validations
    }

    /**
     * Get Groups
     *
     * Return a paginated, filtered list of groups for a given organisation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupsTest() throws ApiException {
        String organisationId = null;
        String sessionId = null;
        CMGroupList response = api.getGroups(organisationId, sessionId);
        // TODO: test validations
    }

    /**
     * Get a one-time token.
     *
     * Get a one-time token associated with your session.  Can be used for download items.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOTTTest() throws ApiException {
        String organisationId = null;
        String sessionId = null;
        String response = api.getOTT(organisationId, sessionId);
        // TODO: test validations
    }

    /**
     * Get a list of Organisations
     *
     * Return all organisations that a user has access to (read-only or write).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserOrganisationListTest() throws ApiException {
        String filter = null;
        String sessionId = null;
        List<CMOrganisation> response = api.getUserOrganisationList(filter, sessionId);
        // TODO: test validations
    }

    /**
     * Get Users paginated
     *
     * Return a paginated, filtered list of users for a given organisation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersPaginatedTest() throws ApiException {
        String organisationId = null;
        Integer page = null;
        Integer pageSize = null;
        String filter = null;
        String sessionId = null;
        CMUserList response = api.getUsersPaginated(organisationId, page, pageSize, filter, sessionId);
        // TODO: test validations
    }

    /**
     * Import users and groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importUsersAndGroupsTest() throws ApiException {
        String sessionId = null;
        CMImportUsers cmImportUsers = null;
        String apIVersion = null;
        JsonMessage response = api.importUsersAndGroups(sessionId, cmImportUsers, apIVersion);
        // TODO: test validations
    }

    /**
     * Get users application roles
     *
     * Get Roles of logged in user for the logged in Organisation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myRolesTest() throws ApiException {
        String organisationId = null;
        String sessionId = null;
        List<String> response = api.myRoles(organisationId, sessionId);
        // TODO: test validations
    }

    /**
     * Remove User from Organisation
     *
     * Remove an existing user from an existing Organisation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeUserFromOrganisationTest() throws ApiException {
        String userId = null;
        String organisationId = null;
        String sessionId = null;
        JsonMessage response = api.removeUserFromOrganisation(userId, organisationId, sessionId);
        // TODO: test validations
    }

    /**
     * Perform a password-reset request.
     *
     * Reset Password
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetPasswordTest() throws ApiException {
        CMUserPasswordReset cmUserPasswordReset = null;
        JsonMessage response = api.resetPassword(cmUserPasswordReset);
        // TODO: test validations
    }

    /**
     * Password Reset Request
     *
     * Start a password-reset request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetPasswordRequestTest() throws ApiException {
        CMPasswordResetRequest cmPasswordResetRequest = null;
        JsonMessage response = api.resetPasswordRequest(cmPasswordResetRequest);
        // TODO: test validations
    }

    /**
     * Save Group
     *
     * Save (update/create) a group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveGroupTest() throws ApiException {
        String sessionId = null;
        CMGroup cmGroup = null;
        JsonMessage response = api.saveGroup(sessionId, cmGroup);
        // TODO: test validations
    }

    /**
     * Sign In
     *
     * Administrator Sign-in of an existing user using username/password.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signInTest() throws ApiException {
        CMSignInParameters cmSignInParameters = null;
        CMSessionVersion response = api.signIn(cmSignInParameters);
        // TODO: test validations
    }

    /**
     * JWT MSal Sign In
     *
     * Sign-in a user using an Msal JWT.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signInAdminUsingJWTMsalTest() throws ApiException {
        String jwt = null;
        SignInAdmin response = api.signInAdminUsingJWTMsal(jwt);
        // TODO: test validations
    }

    /**
     * JWT MSal Sign In
     *
     * Sign-in a user using an Msal JWT.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signInDmsUsingJWTMsalTest() throws ApiException {
        String jwt = null;
        String organisationId = null;
        SignInDmsCmd response = api.signInDmsUsingJWTMsal(jwt, organisationId);
        // TODO: test validations
    }

    /**
     * JWT MSal Sign In
     *
     * Sign-in an Evolve user using an Msal JWT.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signInEvolveUsingJWTMsalTest() throws ApiException {
        String jwt = null;
        String organisationId = null;
        SignInDmsCmd response = api.signInEvolveUsingJWTMsal(jwt, organisationId);
        // TODO: test validations
    }

    /**
     * JWT MSal Sign In
     *
     * Sign-in a user using an Msal JWT.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signInSearchUsingJWTMsalTest() throws ApiException {
        String jwt = null;
        String organisationId = null;
        SignInCmd response = api.signInSearchUsingJWTMsal(jwt, organisationId);
        // TODO: test validations
    }

    /**
     * Sign Out
     *
     * Sign-out any signed-in user (owner of the session object only).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signOutTest() throws ApiException {
        String sessionId = null;
        String apIVersion = null;
        JsonMessage response = api.signOut(sessionId, apIVersion);
        // TODO: test validations
    }

    /**
     * Save Organisation
     *
     * Update or Create an organisation (save an organisation).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganisationTest() throws ApiException {
        String sessionId = null;
        CMOrganisation cmOrganisation = null;
        CMOrganisation response = api.updateOrganisation(sessionId, cmOrganisation);
        // TODO: test validations
    }

    /**
     * Update or Create a user (save a user).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        String organisationId = null;
        String sessionId = null;
        CMUserWithExtras cmUserWithExtras = null;
        CMUserWithExtras response = api.updateUser(organisationId, sessionId, cmUserWithExtras);
        // TODO: test validations
    }

    /**
     * Get Version
     *
     * Get the version of SimSage Auth Services.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void version8Test() throws ApiException {
        SignInCmd response = api.version8();
        // TODO: test validations
    }

}
