/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.11.4
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CMFilter;
import org.openapitools.client.model.CMKeyedSearchTerm;
import org.openapitools.client.model.CMProjectFrame;
import org.openapitools.client.model.CMSemanticTerm;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CMProjectDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-16T13:18:33.437170740+01:00[Europe/London]")
public class CMProjectDefinition {
  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_TASK_ID = "taskId";
  @SerializedName(SERIALIZED_NAME_TASK_ID)
  private String taskId;

  public static final String SERIALIZED_NAME_ORGANISATION_ID = "organisationId";
  @SerializedName(SERIALIZED_NAME_ORGANISATION_ID)
  private String organisationId;

  public static final String SERIALIZED_NAME_PROJECT_FRAME = "projectFrame";
  @SerializedName(SERIALIZED_NAME_PROJECT_FRAME)
  private CMProjectFrame projectFrame;

  public static final String SERIALIZED_NAME_KEYED_SEARCH_TERMS = "keyedSearchTerms";
  @SerializedName(SERIALIZED_NAME_KEYED_SEARCH_TERMS)
  private List<CMKeyedSearchTerm> keyedSearchTerms;

  public static final String SERIALIZED_NAME_SEMANTIC_TERMS = "semanticTerms";
  @SerializedName(SERIALIZED_NAME_SEMANTIC_TERMS)
  private List<CMSemanticTerm> semanticTerms;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private CMFilter filters;

  public static final String SERIALIZED_NAME_VALIDATION_RESULT = "validationResult";
  @SerializedName(SERIALIZED_NAME_VALIDATION_RESULT)
  private Map<String, Boolean> validationResult = new HashMap<>();

  public CMProjectDefinition() {
  }

  public CMProjectDefinition projectId(String projectId) {
    
    this.projectId = projectId;
    return this;
  }

   /**
   * Get projectId
   * @return projectId
  **/
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }


  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  public CMProjectDefinition taskId(String taskId) {
    
    this.taskId = taskId;
    return this;
  }

   /**
   * Get taskId
   * @return taskId
  **/
  @javax.annotation.Nullable
  public String getTaskId() {
    return taskId;
  }


  public void setTaskId(String taskId) {
    this.taskId = taskId;
  }


  public CMProjectDefinition organisationId(String organisationId) {
    
    this.organisationId = organisationId;
    return this;
  }

   /**
   * Get organisationId
   * @return organisationId
  **/
  @javax.annotation.Nonnull
  public String getOrganisationId() {
    return organisationId;
  }


  public void setOrganisationId(String organisationId) {
    this.organisationId = organisationId;
  }


  public CMProjectDefinition projectFrame(CMProjectFrame projectFrame) {
    
    this.projectFrame = projectFrame;
    return this;
  }

   /**
   * Get projectFrame
   * @return projectFrame
  **/
  @javax.annotation.Nonnull
  public CMProjectFrame getProjectFrame() {
    return projectFrame;
  }


  public void setProjectFrame(CMProjectFrame projectFrame) {
    this.projectFrame = projectFrame;
  }


  public CMProjectDefinition keyedSearchTerms(List<CMKeyedSearchTerm> keyedSearchTerms) {
    
    this.keyedSearchTerms = keyedSearchTerms;
    return this;
  }

  public CMProjectDefinition addKeyedSearchTermsItem(CMKeyedSearchTerm keyedSearchTermsItem) {
    if (this.keyedSearchTerms == null) {
      this.keyedSearchTerms = new ArrayList<>();
    }
    this.keyedSearchTerms.add(keyedSearchTermsItem);
    return this;
  }

   /**
   * Get keyedSearchTerms
   * @return keyedSearchTerms
  **/
  @javax.annotation.Nullable
  public List<CMKeyedSearchTerm> getKeyedSearchTerms() {
    return keyedSearchTerms;
  }


  public void setKeyedSearchTerms(List<CMKeyedSearchTerm> keyedSearchTerms) {
    this.keyedSearchTerms = keyedSearchTerms;
  }


  public CMProjectDefinition semanticTerms(List<CMSemanticTerm> semanticTerms) {
    
    this.semanticTerms = semanticTerms;
    return this;
  }

  public CMProjectDefinition addSemanticTermsItem(CMSemanticTerm semanticTermsItem) {
    if (this.semanticTerms == null) {
      this.semanticTerms = new ArrayList<>();
    }
    this.semanticTerms.add(semanticTermsItem);
    return this;
  }

   /**
   * Get semanticTerms
   * @return semanticTerms
  **/
  @javax.annotation.Nullable
  public List<CMSemanticTerm> getSemanticTerms() {
    return semanticTerms;
  }


  public void setSemanticTerms(List<CMSemanticTerm> semanticTerms) {
    this.semanticTerms = semanticTerms;
  }


  public CMProjectDefinition filters(CMFilter filters) {
    
    this.filters = filters;
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @javax.annotation.Nonnull
  public CMFilter getFilters() {
    return filters;
  }


  public void setFilters(CMFilter filters) {
    this.filters = filters;
  }


  public CMProjectDefinition validationResult(Map<String, Boolean> validationResult) {
    
    this.validationResult = validationResult;
    return this;
  }

  public CMProjectDefinition putValidationResultItem(String key, Boolean validationResultItem) {
    if (this.validationResult == null) {
      this.validationResult = new HashMap<>();
    }
    this.validationResult.put(key, validationResultItem);
    return this;
  }

   /**
   * Get validationResult
   * @return validationResult
  **/
  @javax.annotation.Nullable
  public Map<String, Boolean> getValidationResult() {
    return validationResult;
  }


  public void setValidationResult(Map<String, Boolean> validationResult) {
    this.validationResult = validationResult;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CMProjectDefinition cmProjectDefinition = (CMProjectDefinition) o;
    return Objects.equals(this.projectId, cmProjectDefinition.projectId) &&
        Objects.equals(this.taskId, cmProjectDefinition.taskId) &&
        Objects.equals(this.organisationId, cmProjectDefinition.organisationId) &&
        Objects.equals(this.projectFrame, cmProjectDefinition.projectFrame) &&
        Objects.equals(this.keyedSearchTerms, cmProjectDefinition.keyedSearchTerms) &&
        Objects.equals(this.semanticTerms, cmProjectDefinition.semanticTerms) &&
        Objects.equals(this.filters, cmProjectDefinition.filters) &&
        Objects.equals(this.validationResult, cmProjectDefinition.validationResult);
  }

  @Override
  public int hashCode() {
    return Objects.hash(projectId, taskId, organisationId, projectFrame, keyedSearchTerms, semanticTerms, filters, validationResult);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CMProjectDefinition {\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    organisationId: ").append(toIndentedString(organisationId)).append("\n");
    sb.append("    projectFrame: ").append(toIndentedString(projectFrame)).append("\n");
    sb.append("    keyedSearchTerms: ").append(toIndentedString(keyedSearchTerms)).append("\n");
    sb.append("    semanticTerms: ").append(toIndentedString(semanticTerms)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    validationResult: ").append(toIndentedString(validationResult)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("projectId");
    openapiFields.add("taskId");
    openapiFields.add("organisationId");
    openapiFields.add("projectFrame");
    openapiFields.add("keyedSearchTerms");
    openapiFields.add("semanticTerms");
    openapiFields.add("filters");
    openapiFields.add("validationResult");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("organisationId");
    openapiRequiredFields.add("projectFrame");
    openapiRequiredFields.add("filters");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CMProjectDefinition
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CMProjectDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CMProjectDefinition is not found in the empty JSON string", CMProjectDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CMProjectDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CMProjectDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CMProjectDefinition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) && !jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if ((jsonObj.get("taskId") != null && !jsonObj.get("taskId").isJsonNull()) && !jsonObj.get("taskId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskId").toString()));
      }
      if (!jsonObj.get("organisationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organisationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organisationId").toString()));
      }
      // validate the required field `projectFrame`
      CMProjectFrame.validateJsonElement(jsonObj.get("projectFrame"));
      if (jsonObj.get("keyedSearchTerms") != null && !jsonObj.get("keyedSearchTerms").isJsonNull()) {
        JsonArray jsonArraykeyedSearchTerms = jsonObj.getAsJsonArray("keyedSearchTerms");
        if (jsonArraykeyedSearchTerms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("keyedSearchTerms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `keyedSearchTerms` to be an array in the JSON string but got `%s`", jsonObj.get("keyedSearchTerms").toString()));
          }

          // validate the optional field `keyedSearchTerms` (array)
          for (int i = 0; i < jsonArraykeyedSearchTerms.size(); i++) {
            CMKeyedSearchTerm.validateJsonElement(jsonArraykeyedSearchTerms.get(i));
          };
        }
      }
      if (jsonObj.get("semanticTerms") != null && !jsonObj.get("semanticTerms").isJsonNull()) {
        JsonArray jsonArraysemanticTerms = jsonObj.getAsJsonArray("semanticTerms");
        if (jsonArraysemanticTerms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("semanticTerms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `semanticTerms` to be an array in the JSON string but got `%s`", jsonObj.get("semanticTerms").toString()));
          }

          // validate the optional field `semanticTerms` (array)
          for (int i = 0; i < jsonArraysemanticTerms.size(); i++) {
            CMSemanticTerm.validateJsonElement(jsonArraysemanticTerms.get(i));
          };
        }
      }
      // validate the required field `filters`
      CMFilter.validateJsonElement(jsonObj.get("filters"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CMProjectDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CMProjectDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CMProjectDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CMProjectDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<CMProjectDefinition>() {
           @Override
           public void write(JsonWriter out, CMProjectDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CMProjectDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CMProjectDefinition given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CMProjectDefinition
  * @throws IOException if the JSON string is invalid with respect to CMProjectDefinition
  */
  public static CMProjectDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CMProjectDefinition.class);
  }

 /**
  * Convert an instance of CMProjectDefinition to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

