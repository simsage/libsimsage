/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.11.4
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A SimSAge semantic.  A semantic is an &#39;is-a&#39; relationship.  A generalization/specialization relationship.  The &#39;word&#39; (the more specialized part) is the primary-key/id of this relationship.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-16T13:18:33.437170740+01:00[Europe/London]")
public class CMSemantic {
  public static final String SERIALIZED_NAME_WORD = "word";
  @SerializedName(SERIALIZED_NAME_WORD)
  private String word;

  public static final String SERIALIZED_NAME_SEMANTIC = "semantic";
  @SerializedName(SERIALIZED_NAME_SEMANTIC)
  private String semantic;

  public CMSemantic() {
  }

  public CMSemantic word(String word) {
    
    this.word = word;
    return this;
  }

   /**
   * The word of a semantic is the more specific concept (eg. in &#39;John is a person&#39;, then &#39;John&#39; is the more specific concept, and &#39;person&#39; is the semantic).
   * @return word
  **/
  @javax.annotation.Nonnull
  public String getWord() {
    return word;
  }


  public void setWord(String word) {
    this.word = word;
  }


  public CMSemantic semantic(String semantic) {
    
    this.semantic = semantic;
    return this;
  }

   /**
   * The semantic is the more general concept (eg. in &#39;John is a person&#39;, &#39;person&#39; is the more general concept, and &#39;John&#39; is more specific).
   * @return semantic
  **/
  @javax.annotation.Nonnull
  public String getSemantic() {
    return semantic;
  }


  public void setSemantic(String semantic) {
    this.semantic = semantic;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CMSemantic cmSemantic = (CMSemantic) o;
    return Objects.equals(this.word, cmSemantic.word) &&
        Objects.equals(this.semantic, cmSemantic.semantic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(word, semantic);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CMSemantic {\n");
    sb.append("    word: ").append(toIndentedString(word)).append("\n");
    sb.append("    semantic: ").append(toIndentedString(semantic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("word");
    openapiFields.add("semantic");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("word");
    openapiRequiredFields.add("semantic");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CMSemantic
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CMSemantic.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CMSemantic is not found in the empty JSON string", CMSemantic.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CMSemantic.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CMSemantic` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CMSemantic.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("word").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `word` to be a primitive type in the JSON string but got `%s`", jsonObj.get("word").toString()));
      }
      if (!jsonObj.get("semantic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `semantic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("semantic").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CMSemantic.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CMSemantic' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CMSemantic> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CMSemantic.class));

       return (TypeAdapter<T>) new TypeAdapter<CMSemantic>() {
           @Override
           public void write(JsonWriter out, CMSemantic value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CMSemantic read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CMSemantic given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CMSemantic
  * @throws IOException if the JSON string is invalid with respect to CMSemantic
  */
  public static CMSemantic fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CMSemantic.class);
  }

 /**
  * Convert an instance of CMSemantic to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

