/*
 * SimSage REST API
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.11.4
 * Contact: info@simsage.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CMInfo;
import org.openapitools.client.model.CMKnowledgeBase;
import org.openapitools.client.model.CMKnowledgeBaseExport;
import org.openapitools.client.model.CMVersion;
import org.openapitools.client.model.JsonMessage;
import org.openapitools.client.model.KnowledgeBase;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class KnowledgebaseApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public KnowledgebaseApi() {
        this(Configuration.getDefaultApiClient());
    }

    public KnowledgebaseApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for exportKnowledgeBase
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmKnowledgeBaseExport  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> export knowledge-base OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get search info. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportKnowledgeBaseCall(String sessionId, CMKnowledgeBaseExport cmKnowledgeBaseExport, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmKnowledgeBaseExport;

        // create path and map variables
        String localVarPath = "/api/knowledgebase/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportKnowledgeBaseValidateBeforeCall(String sessionId, CMKnowledgeBaseExport cmKnowledgeBaseExport, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling exportKnowledgeBase(Async)");
        }

        // verify the required parameter 'cmKnowledgeBaseExport' is set
        if (cmKnowledgeBaseExport == null) {
            throw new ApiException("Missing the required parameter 'cmKnowledgeBaseExport' when calling exportKnowledgeBase(Async)");
        }

        return exportKnowledgeBaseCall(sessionId, cmKnowledgeBaseExport, apIVersion, _callback);

    }

    /**
     * export Knowledge-base
     * starts the export of a knowledge-base using the passed in exporter config
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmKnowledgeBaseExport  (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> export knowledge-base OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get search info. </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage exportKnowledgeBase(String sessionId, CMKnowledgeBaseExport cmKnowledgeBaseExport, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = exportKnowledgeBaseWithHttpInfo(sessionId, cmKnowledgeBaseExport, apIVersion);
        return localVarResp.getData();
    }

    /**
     * export Knowledge-base
     * starts the export of a knowledge-base using the passed in exporter config
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmKnowledgeBaseExport  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> export knowledge-base OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get search info. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> exportKnowledgeBaseWithHttpInfo(String sessionId, CMKnowledgeBaseExport cmKnowledgeBaseExport, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = exportKnowledgeBaseValidateBeforeCall(sessionId, cmKnowledgeBaseExport, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * export Knowledge-base (asynchronously)
     * starts the export of a knowledge-base using the passed in exporter config
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmKnowledgeBaseExport  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> export knowledge-base OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get search info. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportKnowledgeBaseAsync(String sessionId, CMKnowledgeBaseExport cmKnowledgeBaseExport, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportKnowledgeBaseValidateBeforeCall(sessionId, cmKnowledgeBaseExport, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getKnowledgeBase
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base to get (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get knowledge-base response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get knowledge-base. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKnowledgeBaseCall(String organisationId, String kbId, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/knowledgebase/{organisationId}/{kbId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKnowledgeBaseValidateBeforeCall(String organisationId, String kbId, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getKnowledgeBase(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling getKnowledgeBase(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getKnowledgeBase(Async)");
        }

        return getKnowledgeBaseCall(organisationId, kbId, sessionId, apIVersion, _callback);

    }

    /**
     * Get Knowledge-base
     * Return a knowledge base by id.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base to get (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return CMKnowledgeBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get knowledge-base response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get knowledge-base. </td><td>  -  </td></tr>
     </table>
     */
    public CMKnowledgeBase getKnowledgeBase(String organisationId, String kbId, String sessionId, String apIVersion) throws ApiException {
        ApiResponse<CMKnowledgeBase> localVarResp = getKnowledgeBaseWithHttpInfo(organisationId, kbId, sessionId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Get Knowledge-base
     * Return a knowledge base by id.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base to get (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMKnowledgeBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get knowledge-base response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get knowledge-base. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMKnowledgeBase> getKnowledgeBaseWithHttpInfo(String organisationId, String kbId, String sessionId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = getKnowledgeBaseValidateBeforeCall(organisationId, kbId, sessionId, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMKnowledgeBase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Knowledge-base (asynchronously)
     * Return a knowledge base by id.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base to get (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get knowledge-base response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get knowledge-base. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKnowledgeBaseAsync(String organisationId, String kbId, String sessionId, String apIVersion, final ApiCallback<CMKnowledgeBase> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKnowledgeBaseValidateBeforeCall(organisationId, kbId, sessionId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMKnowledgeBase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getKnowledgeBases
     * @param organisationId the organisation (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get knowledge-base list. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> get knowledge-base list response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKnowledgeBasesCall(String organisationId, String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/knowledgebase/{organisationId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKnowledgeBasesValidateBeforeCall(String organisationId, String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getKnowledgeBases(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getKnowledgeBases(Async)");
        }

        return getKnowledgeBasesCall(organisationId, sessionId, _callback);

    }

    /**
     * Get Knowledge-bases
     * Return a list of knowledge bases for a given organisation.
     * @param organisationId the organisation (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return List&lt;CMKnowledgeBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get knowledge-base list. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> get knowledge-base list response </td><td>  -  </td></tr>
     </table>
     */
    public List<CMKnowledgeBase> getKnowledgeBases(String organisationId, String sessionId) throws ApiException {
        ApiResponse<List<CMKnowledgeBase>> localVarResp = getKnowledgeBasesWithHttpInfo(organisationId, sessionId);
        return localVarResp.getData();
    }

    /**
     * Get Knowledge-bases
     * Return a list of knowledge bases for a given organisation.
     * @param organisationId the organisation (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @return ApiResponse&lt;List&lt;CMKnowledgeBase&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get knowledge-base list. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> get knowledge-base list response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CMKnowledgeBase>> getKnowledgeBasesWithHttpInfo(String organisationId, String sessionId) throws ApiException {
        okhttp3.Call localVarCall = getKnowledgeBasesValidateBeforeCall(organisationId, sessionId, null);
        Type localVarReturnType = new TypeToken<List<CMKnowledgeBase>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Knowledge-bases (asynchronously)
     * Return a list of knowledge bases for a given organisation.
     * @param organisationId the organisation (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not get knowledge-base list. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> get knowledge-base list response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKnowledgeBasesAsync(String organisationId, String sessionId, final ApiCallback<List<CMKnowledgeBase>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKnowledgeBasesValidateBeforeCall(organisationId, sessionId, _callback);
        Type localVarReturnType = new TypeToken<List<CMKnowledgeBase>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSearchInfo
     * @param organisationId the organisation (its guid id) (required)
     * @param clientId the client&#39;s id (its guid id), pre-register this client as a known client. (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get search info response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get search info. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSearchInfoCall(String organisationId, String clientId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/knowledgebase/search/info/{organisationId}/{clientId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSearchInfoValidateBeforeCall(String organisationId, String clientId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getSearchInfo(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getSearchInfo(Async)");
        }

        return getSearchInfoCall(organisationId, clientId, apIVersion, _callback);

    }

    /**
     * Search Info
     * return Semantic-search and categorical information for a given organisation (by id).  This is used by search UI interfaces to pre-populate and setup knowledge-bases of this organisation, metadata-categories, and security requirements.
     * @param organisationId the organisation (its guid id) (required)
     * @param clientId the client&#39;s id (its guid id), pre-register this client as a known client. (required)
     * @param apIVersion  (optional)
     * @return CMInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get search info response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get search info. </td><td>  -  </td></tr>
     </table>
     */
    public CMInfo getSearchInfo(String organisationId, String clientId, String apIVersion) throws ApiException {
        ApiResponse<CMInfo> localVarResp = getSearchInfoWithHttpInfo(organisationId, clientId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Search Info
     * return Semantic-search and categorical information for a given organisation (by id).  This is used by search UI interfaces to pre-populate and setup knowledge-bases of this organisation, metadata-categories, and security requirements.
     * @param organisationId the organisation (its guid id) (required)
     * @param clientId the client&#39;s id (its guid id), pre-register this client as a known client. (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get search info response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get search info. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMInfo> getSearchInfoWithHttpInfo(String organisationId, String clientId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = getSearchInfoValidateBeforeCall(organisationId, clientId, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Info (asynchronously)
     * return Semantic-search and categorical information for a given organisation (by id).  This is used by search UI interfaces to pre-populate and setup knowledge-bases of this organisation, metadata-categories, and security requirements.
     * @param organisationId the organisation (its guid id) (required)
     * @param clientId the client&#39;s id (its guid id), pre-register this client as a known client. (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get search info response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get search info. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSearchInfoAsync(String organisationId, String clientId, String apIVersion, final ApiCallback<CMInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSearchInfoValidateBeforeCall(organisationId, clientId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSearchInfo2
     * @param organisationId the organisation (its guid id) (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get search info response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get search info. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSearchInfo2Call(String organisationId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/knowledgebase/search/info/{organisationId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSearchInfo2ValidateBeforeCall(String organisationId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling getSearchInfo2(Async)");
        }

        return getSearchInfo2Call(organisationId, apIVersion, _callback);

    }

    /**
     * Search Info [deprecated]
     * Return Semantic-search and categorical information for a given organisation (by id).  This is used by search UI interfaces to pre-populate and setup knowledge-bases of this organisation, metadata-categories, and security requirements.  This is an older interface.  Please use the /search/info/organisation-id/client-id interface instead.
     * @param organisationId the organisation (its guid id) (required)
     * @param apIVersion  (optional)
     * @return CMInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get search info response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get search info. </td><td>  -  </td></tr>
     </table>
     */
    public CMInfo getSearchInfo2(String organisationId, String apIVersion) throws ApiException {
        ApiResponse<CMInfo> localVarResp = getSearchInfo2WithHttpInfo(organisationId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Search Info [deprecated]
     * Return Semantic-search and categorical information for a given organisation (by id).  This is used by search UI interfaces to pre-populate and setup knowledge-bases of this organisation, metadata-categories, and security requirements.  This is an older interface.  Please use the /search/info/organisation-id/client-id interface instead.
     * @param organisationId the organisation (its guid id) (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;CMInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get search info response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get search info. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMInfo> getSearchInfo2WithHttpInfo(String organisationId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = getSearchInfo2ValidateBeforeCall(organisationId, apIVersion, null);
        Type localVarReturnType = new TypeToken<CMInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Info [deprecated] (asynchronously)
     * Return Semantic-search and categorical information for a given organisation (by id).  This is used by search UI interfaces to pre-populate and setup knowledge-bases of this organisation, metadata-categories, and security requirements.  This is an older interface.  Please use the /search/info/organisation-id/client-id interface instead.
     * @param organisationId the organisation (its guid id) (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get search info response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get search info. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSearchInfo2Async(String organisationId, String apIVersion, final ApiCallback<CMInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSearchInfo2ValidateBeforeCall(organisationId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<CMInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeKnowledgeBase
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base to delete/remove (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete knowledge-base OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not delete knowledge-base. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeKnowledgeBaseCall(String organisationId, String kbId, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/knowledgebase/{organisationId}/{kbId}"
            .replace("{" + "organisationId" + "}", localVarApiClient.escapeString(organisationId.toString()))
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeKnowledgeBaseValidateBeforeCall(String organisationId, String kbId, String sessionId, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling removeKnowledgeBase(Async)");
        }

        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling removeKnowledgeBase(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling removeKnowledgeBase(Async)");
        }

        return removeKnowledgeBaseCall(organisationId, kbId, sessionId, apIVersion, _callback);

    }

    /**
     * Delete Knowledge-base
     * Delete a knowledge-base by Id.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base to delete/remove (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return JsonMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete knowledge-base OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not delete knowledge-base. </td><td>  -  </td></tr>
     </table>
     */
    public JsonMessage removeKnowledgeBase(String organisationId, String kbId, String sessionId, String apIVersion) throws ApiException {
        ApiResponse<JsonMessage> localVarResp = removeKnowledgeBaseWithHttpInfo(organisationId, kbId, sessionId, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Delete Knowledge-base
     * Delete a knowledge-base by Id.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base to delete/remove (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;JsonMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete knowledge-base OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not delete knowledge-base. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonMessage> removeKnowledgeBaseWithHttpInfo(String organisationId, String kbId, String sessionId, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = removeKnowledgeBaseValidateBeforeCall(organisationId, kbId, sessionId, apIVersion, null);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Knowledge-base (asynchronously)
     * Delete a knowledge-base by Id.
     * @param organisationId the organisation (its guid id) (required)
     * @param kbId the knowledge-base to delete/remove (its guid id) (required)
     * @param sessionId a valid SimSage Session id. (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete knowledge-base OK response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not delete knowledge-base. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeKnowledgeBaseAsync(String organisationId, String kbId, String sessionId, String apIVersion, final ApiCallback<JsonMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeKnowledgeBaseValidateBeforeCall(organisationId, kbId, sessionId, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<JsonMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateKnowledgeBase
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmKnowledgeBase  (required)
     * @param apIVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not save knowledge-base. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> save knowledge-base response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateKnowledgeBaseCall(String sessionId, CMKnowledgeBase cmKnowledgeBase, String apIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cmKnowledgeBase;

        // create path and map variables
        String localVarPath = "/api/knowledgebase/save";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarHeaderParams.put("session-id", localVarApiClient.parameterToString(sessionId));
        }

        if (apIVersion != null) {
            localVarHeaderParams.put("API-Version", localVarApiClient.parameterToString(apIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateKnowledgeBaseValidateBeforeCall(String sessionId, CMKnowledgeBase cmKnowledgeBase, String apIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling updateKnowledgeBase(Async)");
        }

        // verify the required parameter 'cmKnowledgeBase' is set
        if (cmKnowledgeBase == null) {
            throw new ApiException("Missing the required parameter 'cmKnowledgeBase' when calling updateKnowledgeBase(Async)");
        }

        return updateKnowledgeBaseCall(sessionId, cmKnowledgeBase, apIVersion, _callback);

    }

    /**
     * Save Knowledge-base
     * Save (Create or Update) a SimSage knowledge base item.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmKnowledgeBase  (required)
     * @param apIVersion  (optional)
     * @return KnowledgeBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not save knowledge-base. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> save knowledge-base response </td><td>  -  </td></tr>
     </table>
     */
    public KnowledgeBase updateKnowledgeBase(String sessionId, CMKnowledgeBase cmKnowledgeBase, String apIVersion) throws ApiException {
        ApiResponse<KnowledgeBase> localVarResp = updateKnowledgeBaseWithHttpInfo(sessionId, cmKnowledgeBase, apIVersion);
        return localVarResp.getData();
    }

    /**
     * Save Knowledge-base
     * Save (Create or Update) a SimSage knowledge base item.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmKnowledgeBase  (required)
     * @param apIVersion  (optional)
     * @return ApiResponse&lt;KnowledgeBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not save knowledge-base. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> save knowledge-base response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KnowledgeBase> updateKnowledgeBaseWithHttpInfo(String sessionId, CMKnowledgeBase cmKnowledgeBase, String apIVersion) throws ApiException {
        okhttp3.Call localVarCall = updateKnowledgeBaseValidateBeforeCall(sessionId, cmKnowledgeBase, apIVersion, null);
        Type localVarReturnType = new TypeToken<KnowledgeBase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save Knowledge-base (asynchronously)
     * Save (Create or Update) a SimSage knowledge base item.
     * @param sessionId a valid SimSage Session id. (required)
     * @param cmKnowledgeBase  (required)
     * @param apIVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> could not save knowledge-base. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> save knowledge-base response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateKnowledgeBaseAsync(String sessionId, CMKnowledgeBase cmKnowledgeBase, String apIVersion, final ApiCallback<KnowledgeBase> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateKnowledgeBaseValidateBeforeCall(sessionId, cmKnowledgeBase, apIVersion, _callback);
        Type localVarReturnType = new TypeToken<KnowledgeBase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for version3
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get the version response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get version. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call version3Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/knowledgebase/version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call version3ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return version3Call(_callback);

    }

    /**
     * Version
     * Return the version of SimSage knowledge-base Services.
     * @return CMVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get the version response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get version. </td><td>  -  </td></tr>
     </table>
     */
    public CMVersion version3() throws ApiException {
        ApiResponse<CMVersion> localVarResp = version3WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Version
     * Return the version of SimSage knowledge-base Services.
     * @return ApiResponse&lt;CMVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get the version response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get version. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CMVersion> version3WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = version3ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CMVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Version (asynchronously)
     * Return the version of SimSage knowledge-base Services.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get the version response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> could not get version. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call version3Async(final ApiCallback<CMVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = version3ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CMVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
