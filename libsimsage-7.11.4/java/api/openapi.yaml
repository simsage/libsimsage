openapi: 3.0.1
info:
  contact:
    email: info@simsage.co.uk
    name: SimSage portal
    url: https://test.simsage.ai
  description: SimSage REST API
  license:
    name: Custom License
    url: https://simsage.ai/
  title: SimSage REST API
  version: 7.11.4
servers:
- description: SimSage API
  url: https://test.simsage.ai
tags:
- description: Document management.
  name: dms
- description: Backup and Restore.
  name: backup
- description: Crawler management and administration.
  name: crawler
- description: Document administration.
  name: document
- description: Semantic Search System.
  name: semantic
- description: Access discovery services
  name: discovery
- description: Operations pertaining to knowledge bases.
  name: knowledgebase
- description: Access statistics and reports.
  name: stats
- description: Operations pertaining to language.
  name: language
- description: Operations pertaining to document conversion micro-services.
  name: conversion
- description: "Operations pertaining to authentication, users, and organisations."
  name: auth
- description: Access Dataproject services
  name: dataproject
paths:
  /api/stats/status/{organisationId}:
    put:
      description: return SimSage indexer and parser status
      operationId: simSageStatus
      parameters:
      - description: a valid session-guid id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CMCommandQueueItem'
                type: array
          description: response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: failed
      summary: SimSage status
      tags:
      - stats
      x-accepts: application/json
  /api/semantic/text-to-search:
    put:
      description: Return a paginated list of text-to-search mappings with an optional
        filter.
      operationId: getTextToSearchPaginated
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMTextToSearchPaginated'
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMTextToSearchPaginatedReturn'
          description: response
      summary: Text to Search mappings
      tags:
      - semantic
      x-content-type: application/json
      x-accepts: application/json
  /api/semantic/text-to-search/{organisationId}/{kbId}:
    put:
      description: Create or update (save) a text-to-search item.
      operationId: saveTextToSearch
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMTextToSearchEdit'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Save a text-to-search item
      tags:
      - semantic
      x-content-type: application/json
      x-accepts: application/json
  /api/semantic/text-to-search-try:
    put:
      description: See the results of a text-to-search conversion
      operationId: tryTextToSearchConversion
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMTextToSearchConversion'
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMTextToSearchConversionReturn'
          description: response
      summary: try converting text-to-search
      tags:
      - semantic
      x-content-type: application/json
      x-accepts: application/json
  /api/language/synonyms:
    put:
      description: return a paginated list of synonyms with optional filtering.
      operationId: getPaginated
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMSynonymsPaginated'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMSynonymsPaginatedResult'
          description: response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: get Synonyms Paginated
      tags:
      - language
      x-content-type: application/json
      x-accepts: application/json
  /api/language/semantics:
    put:
      description: Return a paginated list of semantics with an optional filter.
      operationId: getSemanticsPaginated
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMSemanticsPaginated'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMSemanticsPaginatedResult'
          description: response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Semantics Paginated
      tags:
      - language
      x-content-type: application/json
      x-accepts: application/json
  /api/language/save-synonym/{organisationId}/{kbId}:
    put:
      description: Save (update/create) a synonym.
      operationId: saveSynonym
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMSynonym'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Save Synonym
      tags:
      - language
      x-content-type: application/json
      x-accepts: application/json
  /api/language/save-syn-set/{organisationId}/{kbId}:
    put:
      description: Save (update/create) a syn-set in SimSage.
      operationId: saveSynSet
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMSynSet'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Save SynSet
      tags:
      - language
      x-content-type: application/json
      x-accepts: application/json
  /api/language/save-semantic/{organisationId}/{kbId}:
    put:
      description: Create or update (save) a semantic in SimSage.
      operationId: saveSemantic
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMSemanticModelEdit'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Save Semantic
      tags:
      - language
      x-content-type: application/json
      x-accepts: application/json
  /api/language/optimize-indexes:
    put:
      description: "Force index optimization for a the given knowledge-base, now."
      operationId: optimizeIndexes
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMOptimizeIndex'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Optimize Indexes
      tags:
      - language
      x-content-type: application/json
      x-accepts: application/json
  /api/language/find-syn-sets:
    put:
      description: Find syn-sets using filters
      operationId: findSynSets
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMSynSetFind'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMSynSetList'
          description: response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Find SynSets
      tags:
      - language
      x-content-type: application/json
      x-accepts: application/json
  /api/language/default-syn-sets/{organisationId}/{kbId}:
    put:
      description: Add default syn-sets to the given org/kb
      operationId: addDefaultSynSets
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Add all default SynSets
      tags:
      - language
      x-accepts: application/json
  /api/language/categorization:
    put:
      description: create or update a specific categorization for a given org/kb
      operationId: saveCategorization
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMCategorization'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: save categorization
      tags:
      - language
      x-content-type: application/json
      x-accepts: application/json
  /api/knowledgebase/save:
    put:
      description: Save (Create or Update) a SimSage knowledge base item.
      operationId: updateKnowledgeBase
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMKnowledgeBase'
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not save knowledge-base.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeBase'
          description: save knowledge-base response
      summary: Save Knowledge-base
      tags:
      - knowledgebase
      x-content-type: application/json
      x-accepts: application/json
  /api/discovery/updategdprdocument:
    put:
      operationId: setdocumentredactions
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMRedactionData'
        required: true
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                type: object
          description: OK
      tags:
      - discovery
      x-content-type: application/json
      x-accepts: application/json;charset=UTF-8
  /api/crawler/external/document/delete:
    put:
      description: Remove an external crawler document from SimSage.
      operationId: crawlerExternalDocumentDelete
      parameters:
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMDeleteDocument'
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not remove external-crawler document.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: remove external-crawler document OK response
      summary: Remove an External Document
      tags:
      - crawler
      x-content-type: application/json
      x-accepts: application/json
  /api/auth/user/{organisationId}:
    put:
      description: Update or Create a user (save a user).
      operationId: updateUser
      parameters:
      - description: the main organisation (its guid id) to update a user in.
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMUserWithExtras'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMUserWithExtras'
          description: save user response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not save user
      tags:
      - auth
      x-content-type: application/json
      x-accepts: application/json
  /api/auth/user/import:
    put:
      description: Import users and groups.
      operationId: importUsersAndGroups
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMImportUsers'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: import user OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not import users
      tags:
      - auth
      x-content-type: application/json
      x-accepts: application/json
  /api/auth/ott/{organisationId}:
    put:
      description: Get a one-time token associated with your session.  Can be used
        for download items.
      operationId: getOTT
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not create a one-time token.
        "200":
          content:
            application/json:
              schema:
                type: string
          description: get the one-time token as a string.
      summary: Get a one-time token.
      tags:
      - auth
      x-accepts: application/json
  /api/auth/organisation:
    put:
      description: Update or Create an organisation (save an organisation).
      operationId: updateOrganisation
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMOrganisation'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMOrganisation'
          description: save organisation response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not save organisation
      summary: Save Organisation
      tags:
      - auth
      x-content-type: application/json
      x-accepts: application/json
  /api/auth/group:
    put:
      description: Save (update/create) a group.
      operationId: saveGroup
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMGroup'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: save a group OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not save group
      summary: Save Group
      tags:
      - auth
      x-content-type: application/json
      x-accepts: application/json
  /api/semantic/short-summary:
    post:
      description: Create a short summary for a given url / sentence
      operationId: shortSummary
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMShortSummary'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMShortSummaryResult'
          description: response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Short summary
      tags:
      - semantic
      x-content-type: application/json
      x-accepts: application/json
  /api/semantic/query:
    post:
      description: a SimSage client asks a question or performs a keyword-search.
      operationId: restfulClientQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMClientQuery'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMClientQueryResult'
          description: response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Client Query
      tags:
      - semantic
      x-content-type: application/json
      x-accepts: application/json
  /api/semantic/document-qa:
    post:
      description: Answer a question about a given document
      operationId: documentQuestionAndAnswer
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMDocumentQuestionAndAnswer'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMDocumentQuestionAndAnswer'
          description: response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Document Q&A
      tags:
      - semantic
      x-content-type: application/json
      x-accepts: application/json
  /api/knowledgebase/export:
    post:
      description: starts the export of a knowledge-base using the passed in exporter
        config
      operationId: exportKnowledgeBase
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMKnowledgeBaseExport'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: export knowledge-base OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get search info.
      summary: export Knowledge-base
      tags:
      - knowledgebase
      x-content-type: application/json
      x-accepts: application/json
  /api/document/zip/source:
    post:
      description: Zip all documents in a source on the local server.
      operationId: zipSource
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMZipSource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: zip source documents OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not create source document zip.
      summary: Zip source documents
      tags:
      - document
      x-content-type: application/json
      x-accepts: application/json
  /api/document/summarize/document:
    post:
      description: Summarize a single document using an extractive summarization.
      operationId: summarizeDocument
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMSingleDocumentSummaryRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMSingleDocumentSummary'
          description: summarization response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get summarization.
      summary: Summarize a document
      tags:
      - document
      x-content-type: application/json
      x-accepts: application/json
  /api/document/spreadsheet/{organisationId}/{kbId}/{dateTime}:
    post:
      description: Download an inventory breakdown spreadsheet for a given date-time.
      operationId: getSpreadsheet
      parameters:
      - description: a one-time token for downloading data.
        explode: true
        in: query
        name: ott
        required: true
        schema:
          type: string
        style: form
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: a unix date-time specifying the exact snapshot to download
        explode: false
        in: path
        name: dateTime
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get inventory spreadsheet.
        "200":
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                format: byte
                type: string
          description: inventory spreadsheet response
      summary: Inventory breakdown Spreadsheet
      tags:
      - document
      x-accepts: application/json
  /api/document/qfs:
    post:
      description: Summarize a set of documents given a list of urls and a query.
      operationId: queryFocussedSummarization
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMQueryFocussedSummarizationRequest'
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get focussed summarization.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMQueryFocussedSummarization'
          description: query focussed summarization response
      summary: Summarize Documents for Query
      tags:
      - document
      x-content-type: application/json
      x-accepts: application/json
  /api/document/preview/html:
    post:
      description: get a preview HTML page for a document if available by url
      operationId: previewHtml
      parameters:
      - description: a valid session-guid id or a anonymous user-id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMGetHtml'
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get preview HTML.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMGetHtml'
          description: get preview HTML response
      summary: Preview HTML
      tags:
      - document
      x-content-type: application/json
      x-accepts: application/json
  /api/document/parquet/{organisationId}/{kbId}/{dateTime}:
    delete:
      description: Remove an inventory breakdown spreadsheet/parquet file from the
        system
      operationId: removeParquetFile
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: a unix date-time specifying the exact snapshot to remove
        explode: false
        in: path
        name: dateTime
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/JsonMessage'
                type: array
          description: delete parquet OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get delete parquet.
      summary: Delete Parquet File
      tags:
      - document
      x-accepts: application/json
    post:
      description: Download an inventory parquet file.
      operationId: getParquetFile
      parameters:
      - description: a one-time token for downloading data.
        explode: true
        in: query
        name: ott
        required: true
        schema:
          type: string
        style: form
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: a unix date-time specifying the exact snapshot to download
        explode: false
        in: path
        name: dateTime
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get parquet download.
        "200":
          content:
            application/octet-stream:
              schema:
                format: byte
                type: string
          description: parquet download response
      summary: Download Parquet File
      tags:
      - document
      x-accepts: application/json
  /api/document/inventorize:
    post:
      description: Start the async inventorize process for documents of a given organisation/kb.
      operationId: inventorizeDocuments
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMInventorizeParameters'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: document inventory process OK result
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not start inventory process.
      summary: Document Inventory
      tags:
      - document
      x-content-type: application/json
      x-accepts: application/json
  /api/document/inventorize-indexes:
    post:
      description: Start the async inventorize process for the optimized-indexes of
        a given organisation/kb.
      operationId: inventorizeIndexes
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMInventorizeParameters'
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not start inventorize.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: start inventorize indexes OK response
      summary: Index Inventory
      tags:
      - document
      x-content-type: application/json
      x-accepts: application/json
  /api/dms/upload/document/{organisationId}/{kbId}/{sourceId}/{folderId}/{lastModified}:
    post:
      description: Upload a document into a DMS folder
      operationId: uploadDocument
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the owner source's id
        explode: false
        in: path
        name: sourceId
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: the id of the folder we're uploading into
        explode: false
        in: path
        name: folderId
        required: true
        schema:
          type: string
        style: simple
      - description: lastModified unix-date-time
        explode: false
        in: path
        name: lastModified
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/uploadDocument_request'
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMDocumentFolder'
          description: response
      summary: Upload a Document
      tags:
      - dms
      x-content-type: multipart/form-data
      x-accepts: application/json
  /api/dms/subscription:
    post:
      description: Save (create or update) a SimSage Document subscription.  Returns
        a subscription object for this user.
      operationId: saveSubscription
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMDocumentSubscription'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMSubscriptions'
          description: response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Save Subscription
      tags:
      - dms
      x-content-type: application/json
      x-accepts: application/json
  /api/dms/source:
    post:
      description: Add a new top-level folder (source folder) to the SimSage DMS.
      operationId: addSourceFolder
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMAddSourceFolder'
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMDocumentFolder'
          description: response
      summary: Add a new source-folder
      tags:
      - dms
      x-content-type: application/json
      x-accepts: application/json
  /api/dms/save-search:
    post:
      description: Save a user's search query.
      operationId: saveSearch
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMSavedSearch'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CMSavedSearch'
                type: array
          description: response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Save Search
      tags:
      - dms
      x-content-type: application/json
      x-accepts: application/json
  /api/dms/query:
    post:
      description: a SimSage DMS client asks a question or performs a keyword-search.
      operationId: restfulDMSClientQuery
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMClientQuery'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMClientQueryResult'
          description: response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: DMS Client Query
      tags:
      - dms
      x-content-type: application/json
      x-accepts: application/json
  /api/dms/note:
    post:
      description: Save (create or update) a SimSage Document Note.
      operationId: saveNote
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMDocumentNote'
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CMDocumentNote'
                type: array
          description: response
      summary: Save Note
      tags:
      - dms
      x-content-type: application/json
      x-accepts: application/json
  /api/dms/lock:
    post:
      description: Lock a document for a user.
      operationId: lockDocument
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMDocumentLock'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CMDocument'
                type: array
          description: response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Document Lock
      tags:
      - dms
      x-content-type: application/json
      x-accepts: application/json
  /api/dms/hash-tag:
    post:
      description: Save (create / update / delete) a hashTag set for a document.
      operationId: saveHashTags
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMDocumentHashTag'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Save HashTag set for a document
      tags:
      - dms
      x-content-type: application/json
      x-accepts: application/json
  /api/dms/folder:
    post:
      description: Add a new folder to the SimSage DMS.
      operationId: addFolder
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMAddFolder'
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMDocumentFolder'
          description: response
      summary: Add a new folder
      tags:
      - dms
      x-content-type: application/json
      x-accepts: application/json
  /api/dms/bookmark:
    post:
      description: Save (create or update) a SimSage Document Bookmark.
      operationId: saveBookmark
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMDocumentBookmark'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DocumentBookmark'
                type: array
          description: response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Save Bookmark
      tags:
      - dms
      x-content-type: application/json
      x-accepts: application/json
  /api/dms/acls:
    post:
      description: "Update the Access Control List of a SimSage DMS item (source,\
        \ file, or folder)."
      operationId: updateACLs
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMUpdateACLs'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Update an item's ACLs
      tags:
      - dms
      x-content-type: application/json
      x-accepts: application/json
  /api/discovery/updatedocumentset:
    post:
      operationId: updateDocumentSet
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMUpdateDocumentSet'
        required: true
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                type: object
          description: OK
      tags:
      - discovery
      x-content-type: application/json
      x-accepts: application/json;charset=UTF-8
  /api/discovery/exportredacteddoc:
    post:
      operationId: exportRedactedDoc
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMExportRedactedDocument'
        required: true
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                type: object
          description: OK
      tags:
      - discovery
      x-content-type: application/json
      x-accepts: application/json;charset=UTF-8
  /api/discovery/createproject:
    post:
      operationId: createGdprProject
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMCreateGdprProject'
        required: true
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                type: object
          description: OK
      tags:
      - discovery
      x-content-type: application/json
      x-accepts: application/json;charset=UTF-8
  /api/discovery/applyredactions:
    post:
      operationId: applyRedactions
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMRedactionData'
        required: true
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                type: object
          description: OK
      tags:
      - discovery
      x-content-type: application/json
      x-accepts: application/json;charset=UTF-8
  /api/dataproject/updateredactions:
    post:
      description: Updates the redactions applied to a document
      operationId: updateRedactions
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMUpdateRedactions'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Update Redactions OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not update redactionst.
      summary: Update document redactions
      tags:
      - dataproject
      x-content-type: application/json
      x-accepts: application/json
  /api/dataproject/updatedocstatus:
    post:
      description: Updates the status applied to a slice document
      operationId: updateDocumentStatus
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMUpdateDocumentStatus'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Update Document Status OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: Could not update document status.
      summary: Update document status
      tags:
      - dataproject
      x-content-type: application/json
      x-accepts: application/json
  /api/dataproject/startproject:
    post:
      operationId: startProject
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMStartProject'
        required: true
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                type: object
          description: OK
      tags:
      - dataproject
      x-content-type: application/json
      x-accepts: application/json;charset=UTF-8
  /api/dataproject/sliceddocuments:
    post:
      description: Returns paged list of documents for the passed in slice and filters
        as well as totals
      operationId: slicedDocuments
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMSlicedDocumentRequest'
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not retrieve document list.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMSlicedDocumentListAndTotals'
          description: Paged list of documents for the passed in slice and filters
            as well as totals
      summary: Document list for given slice and filters
      tags:
      - dataproject
      x-content-type: application/json
      x-accepts: application/json
  /api/dataproject/setsliceconfig:
    post:
      description: Saves/updates the slices configured for a running project
      operationId: setSliceConfig
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMSetSliceDefinitions'
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: Could not set Slice configuration.
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Set Slice config OK response
      summary: Set Slice configuration
      tags:
      - dataproject
      x-content-type: application/json
      x-accepts: application/json
  /api/dataproject/saveprojectdefinition:
    post:
      description: Inserts/Updates the details for a project definition
      operationId: saveProjectDefinition
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMProjectDefinition'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMCreatedProject'
          description: Object containing the task and project ids to use to further
            refine the project details
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not save project-definition.
      summary: Inserts/Updates a project definition
      tags:
      - dataproject
      x-content-type: application/json
      x-accepts: application/json
  /api/dataproject/runningprojects:
    post:
      description: Get the list of running projects
      operationId: allTasks
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMQueueFilter'
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get running projects list.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMPagedQueueItems'
          description: running project list response
      summary: get Running Projects
      tags:
      - dataproject
      x-content-type: application/json
      x-accepts: application/json
  /api/dataproject/reset/{organisationId}:
    post:
      description: Fully resets Evolve to an empty system
      operationId: resetEvolve
      parameters:
      - description: a valid SimSage Organisation id.
        explode: false
        in: header
        name: organisation-id
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: Exception during reset.
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Evolve successfully reset
      summary: Reset Evolve Application
      tags:
      - dataproject
      x-accepts: application/json
  /api/dataproject/removeslicedoc:
    post:
      operationId: removeSliceDocument
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMRemoveSliceDocument'
        required: true
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                type: object
          description: OK
      tags:
      - dataproject
      x-content-type: application/json
      x-accepts: application/json;charset=UTF-8
  /api/dataproject/redacteddocument:
    post:
      description: Retrieves the redacted document binary
      operationId: redactedDocument
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMRedactionDetails'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReturnedDocument'
          description: Wrapper containing the document binary
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not retrieve redacted document.
      summary: Get Redacted Document
      tags:
      - dataproject
      x-content-type: application/json
      x-accepts: application/json
  /api/dataproject/reassignslicedoc:
    post:
      operationId: reassignSliceDocument
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMReassignSliceDocument'
        required: true
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                type: object
          description: OK
      tags:
      - dataproject
      x-content-type: application/json
      x-accepts: application/json;charset=UTF-8
  /api/dataproject/nextdocument:
    post:
      description: Returns paged list of documents for the passed in slice and filters
        as well as totals
      operationId: nextDocument
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMNextDocument'
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not retrieve document list.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMSlicedDocumentListAndTotals'
          description: Paged list of documents for the passed in slice and filters
            as well as totals
      summary: Document list for given slice and filters
      tags:
      - dataproject
      x-content-type: application/json
      x-accepts: application/json
  /api/dataproject/filteredcomments:
    post:
      description: Retrieves the list of comments for the passed in Filter
      operationId: filteredComments
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMCommentFilter'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CMRecordedComment'
                type: array
          description: Create Comment Status OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: Could not get comments.
      summary: Retrieve Comments
      tags:
      - dataproject
      x-content-type: application/json
      x-accepts: application/json
  /api/dataproject/documentsbytokens:
    post:
      description: Returns paged list of documents for the given set of query tokens
      operationId: documentsByTokens
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMDocumentsByToken'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMPagedProjectDocuments'
          description: returns paged list of documents for the given set of query
            tokens
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not retrieve document list.
      summary: Returns document list for tokens
      tags:
      - dataproject
      x-content-type: application/json
      x-accepts: application/json
  /api/dataproject/comment:
    post:
      description: Adds a comment with the given level and ids
      operationId: addComment
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMNewComment'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Create Comment Status OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: Could not add comment.
      summary: Create Comment
      tags:
      - dataproject
      x-content-type: application/json
      x-accepts: application/json
  /api/dataproject/claimdocument:
    post:
      description: Claim sliced document for signed in user
      operationId: claimDocument
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMClaimDocument'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReturnedDocument'
          description: Wrapper containing the document binary
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not retrieve redacted document.
      summary: Claim sliced document
      tags:
      - dataproject
      x-content-type: application/json
      x-accepts: application/json
  /api/dataproject/changetaskphase:
    post:
      description: Notifies Workflow engine that a task changed it's status and passes
        results in
      operationId: changeTaskPhase
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMChangeTaskPhase'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: change task-phase OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not change task-phase.
      summary: Change Task Phase
      tags:
      - dataproject
      x-content-type: application/json
      x-accepts: application/json
  /api/crawler/start:
    post:
      description: Start a crawler by source-id if after it has stopped.
      operationId: startCrawler
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMStartCrawler'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: start crawler OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not start crawler.
      summary: Start crawler
      tags:
      - crawler
      x-content-type: application/json
      x-accepts: application/json
  /api/crawler/process-all-files:
    post:
      description: Start and force processing all files for a crawler/source
      operationId: processAllFiles
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMStartCrawler'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: start processing all OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not start processing files.
      summary: Process all files of crawler/source
      tags:
      - crawler
      x-content-type: application/json
      x-accepts: application/json
  /api/crawler/external/secure/{seed}:
    post:
      description: Secure Communications end-point.  Send encrypted messages from
        external crawlers and edge devices to this end-point.
      operationId: encryptedCommunications
      parameters:
      - description: a random integer used for the communications
        explode: false
        in: path
        name: seed
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              description: The encrypted object
              type: string
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not execute command.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: secure communication result (various)
      summary: Secure Communication
      tags:
      - crawler
      x-content-type: application/json
      x-accepts: application/json
  /api/crawler/external/document/upload:
    post:
      description: An external crawler document wants to upload a document to SimSage.
      operationId: crawlerExternalDocumentUpload
      parameters:
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMUploadDocument'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: upload external-crawler document OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not start external crawler.
      summary: Upload External Document
      tags:
      - crawler
      x-content-type: application/json
      x-accepts: application/json
  /api/crawler/external/document/upload/image:
    post:
      description: An external crawler uploads an image for a document.
      operationId: crawlerExternalImageUpload
      parameters:
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMUploadImage'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: upload external-crawler document-image OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not upload external-crawler document image.
      summary: Upload External Image
      tags:
      - crawler
      x-content-type: application/json
      x-accepts: application/json
  /api/crawler/external/document/un-changed:
    post:
      description: An external crawler document marks a document as not having changed.
      operationId: crawlerExternalDocumentUnChanged
      parameters:
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMDocumentUnChanged'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: mark external-crawler document unchanged OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not mark external-document as unchanged.
      summary: Mark External Document Unchanged
      tags:
      - crawler
      x-content-type: application/json
      x-accepts: application/json
  /api/crawler/external/crawler:
    post:
      description: Retrieve a crawler data-structure by orgId/kbId/sid and sourceId.  Used
        by External Crawlers to do their job.
      operationId: externalCrawler
      parameters:
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMExternalCrawler'
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get external crawler source.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMSource'
          description: external-crawler source response
      summary: External Crawler
      tags:
      - crawler
      x-content-type: application/json
      x-accepts: application/json
  /api/crawler/external/crawler/start:
    post:
      description: An external crawler notifies SimSage is it starting a new run.
      operationId: externalCrawlerStart
      parameters:
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMExternalCrawlerStart'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: external-crawler start OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not start external crawler.
      summary: Start External Crawler
      tags:
      - crawler
      x-content-type: application/json
      x-accepts: application/json
  /api/crawler/external/crawler/finish:
    post:
      description: "An external crawler notifies SimSage it has finished its job,\
        \ its run through the data once."
      operationId: externalCrawlerFinished
      parameters:
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMExternalCrawlerStop'
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not stop external crawler.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: external-crawler stop OK response
      summary: Stop External Crawler
      tags:
      - crawler
      x-content-type: application/json
      x-accepts: application/json
  /api/crawler/crawler:
    post:
      description: Save (create or update) a SimSage source.
      operationId: updateCrawler
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMSource'
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not save source.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMSource'
          description: save source response
      summary: Update Source
      tags:
      - crawler
      x-content-type: application/json
      x-accepts: application/json
  /api/crawler/crawler/reset-delta/{organisationId}/{kbId}/{sourceId}:
    post:
      description: reset a SimSage source's delta token.
      operationId: resetSourceDelta
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation's id (a guid)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base's id (a guid)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the crawler's id
        explode: false
        in: path
        name: sourceId
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMSource'
          description: reset delta response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not reset source delta-token.
      summary: Reset Source delta-token
      tags:
      - crawler
      x-accepts: application/json
  /api/backup/restore:
    post:
      description: "Restore parts of SimSage (documents, users, organisation/kb, roles)\
        \ from a text-file."
      operationId: restoreFromText
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMRestoreFromText'
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not restore backup.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: restore backup OK response
      summary: restore backup
      tags:
      - backup
      x-content-type: application/json
      x-accepts: application/json
  /api/backup/backup/{organisationId}/{regime}:
    post:
      description: Backup all of SimSage (excludes indexes and documents).  Create
        a SimSage text file with all relevant information for a SimSage Restore on
        the cloud node.
      operationId: backup
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation's id (a guid) to backup
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: "what to backup, one of 'all' (all organisations, requires admin\
          \ privileges) or 'specific' (only the given organisation)"
        explode: false
        in: path
        name: regime
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not create backup.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: create backup OK response
      summary: create backup
      tags:
      - backup
      x-accepts: application/json
  /api/auth/sign-in:
    post:
      description: Administrator Sign-in of an existing user using username/password.
      operationId: signIn
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMSignInParameters'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMSessionVersion'
          description: a sign-in response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not sign-in username/password
      summary: Sign In
      tags:
      - auth
      x-content-type: application/json
      x-accepts: application/json
  /api/auth/reset-password:
    post:
      description: Reset Password
      operationId: resetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMUserPasswordReset'
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not reset-password
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: an reset password OK response
      summary: Perform a password-reset request.
      tags:
      - auth
      x-content-type: application/json
      x-accepts: application/json
  /api/auth/reset-password-request:
    post:
      description: Start a password-reset request.
      operationId: resetPasswordRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMPasswordResetRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: an email reset OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not start password-reset
      summary: Password Reset Request
      tags:
      - auth
      x-content-type: application/json
      x-accepts: application/json
  /api/stats/version:
    get:
      description: Get the version of SimSage Stats Services.
      operationId: version
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMVersion'
          description: get the version response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get version.
      summary: Version
      tags:
      - stats
      x-accepts: application/json
  /api/stats/system-logs/{organisationId}/{year}/{month}/{day}/{hour}/{hours}:
    get:
      description: return SimSage System-logs
      operationId: systemLogs
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the year to get the log for
        explode: false
        in: path
        name: year
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: the month to get the log for
        explode: false
        in: path
        name: month
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: the day to get the log for
        explode: false
        in: path
        name: day
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: the hour to get the log for
        explode: false
        in: path
        name: hour
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: the number of hours to get the logs for starting at hour
        explode: false
        in: path
        name: hours
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CMLoggerEntry'
                type: array
          description: response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: failed
      summary: System Logs
      tags:
      - stats
      x-accepts: application/json
  /api/stats/stats/{organisationId}/{kbId}/{year}/{month}/{top}:
    get:
      description: "Get all statistics for a given month, including some global ones."
      operationId: getStats
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the year to get stats for
        explode: false
        in: path
        name: year
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: the month to get stats for
        explode: false
        in: path
        name: month
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: how many stats to return
        explode: false
        in: path
        name: top
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMReturnStatistics'
          description: response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: failed
      summary: Get usage Statistics
      tags:
      - stats
      x-accepts: application/json
  /api/stats/reports/{organisationId}/{kbId}:
    get:
      description: return a list of optimization reports
      operationId: getIndexOptimzationReports
      parameters:
      - description: a valid session-guid id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OptimizeIndexesGetReportsCmd'
                type: array
          description: response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: failed
      summary: get optimization report list
      tags:
      - stats
      x-accepts: application/json
  /api/stats/report/{organisationId}/{kbId}/{id}:
    get:
      description: return an optimization report
      operationId: getIndexOptimzationReport
      parameters:
      - description: a valid session-guid id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the id of the report
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OptimizeIndexesGetReportCmd'
                type: array
          description: response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: failed
      summary: get an optimization report
      tags:
      - stats
      x-accepts: application/json
  /api/semantic/version:
    get:
      description: Get the version of SimSage Search Services.
      operationId: version_1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMVersion'
          description: get the version response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get version.
      summary: Version
      tags:
      - semantic
      x-accepts: application/json
  /api/language/version:
    get:
      description: Return the version of the SimSage Language Services.
      operationId: version_2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMVersion'
          description: get the version response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get version.
      summary: Version
      tags:
      - language
      x-accepts: application/json
  /api/language/tune-graph/{organisationId}/{kbId}:
    get:
      description: Create a tuned language graph for a given organisation/knowledge-base.
      operationId: tuneLanguageGraph
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Tune Graph
      tags:
      - language
      x-accepts: application/json
  /api/language/truncate-slow-indexes/{organisationId}/{kbId}:
    get:
      description: "Force slow-index truncation for a the given knowledge-base, now."
      operationId: truncateSlowIndexes
      parameters:
      - description: the organisation's id (a guid)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-bases' id (a guid)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Truncate slow Indexes
      tags:
      - language
      x-accepts: application/json
  /api/language/redact/{organisationId}/{kbId}/{url}/{entityCsv}/{wordCsv}/{allowWordsCsv}:
    get:
      description: Create a redacted version of a document as a PDF given its url.
      operationId: redactDocument
      parameters:
      - description: an optional SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: false
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the base-64 encoded (no-prefix) url of the document
        explode: false
        in: path
        name: url
        required: true
        schema:
          type: string
        style: simple
      - description: "a csv list of entities to redact (e.g. person,location)"
        explode: false
        in: path
        name: entityCsv
        required: true
        schema:
          type: string
        style: simple
      - description: "a csv list of additional words to redact (e.g. John,Markov.\
          \  Use null for ignore.)"
        explode: false
        in: path
        name: wordCsv
        required: true
        schema:
          type: string
        style: simple
      - description: "a csv list of words to not-redact (e.g. John,Markov.  Use null\
          \ for ignore.)"
        explode: false
        in: path
        name: allowWordsCsv
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/pdf:
              schema:
                format: byte
                type: string
          description: OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Redact Document
      tags:
      - language
      x-accepts: application/json
  /api/language/categorization/{organisationId}/{kbId}/{prevCategorizationLabel}/{pageSize}:
    get:
      description: get all categorizations for a given org/kb paginated
      operationId: getCategorizationList
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: "the previous categorization label for pagination, or null if\
          \ first page"
        explode: false
        in: path
        name: prevCategorizationLabel
        required: true
        schema:
          type: string
        style: simple
      - description: the size of the page returned
        explode: false
        in: path
        name: pageSize
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMCategorizationPaginatedList'
          description: response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: categorization list
      tags:
      - language
      x-accepts: application/json
  /api/knowledgebase/{organisationId}:
    get:
      description: Return a list of knowledge bases for a given organisation.
      operationId: getKnowledgeBases
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get knowledge-base list.
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CMKnowledgeBase'
                type: array
          description: get knowledge-base list response
      summary: Get Knowledge-bases
      tags:
      - knowledgebase
      x-accepts: application/json
  /api/knowledgebase/{organisationId}/{kbId}:
    delete:
      description: Delete a knowledge-base by Id.
      operationId: removeKnowledgeBase
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base to delete/remove (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: delete knowledge-base OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not delete knowledge-base.
      summary: Delete Knowledge-base
      tags:
      - knowledgebase
      x-accepts: application/json
    get:
      description: Return a knowledge base by id.
      operationId: getKnowledgeBase
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base to get (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMKnowledgeBase'
          description: get knowledge-base response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get knowledge-base.
      summary: Get Knowledge-base
      tags:
      - knowledgebase
      x-accepts: application/json
  /api/knowledgebase/version:
    get:
      description: Return the version of SimSage knowledge-base Services.
      operationId: version_3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMVersion'
          description: get the version response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get version.
      summary: Version
      tags:
      - knowledgebase
      x-accepts: application/json
  /api/knowledgebase/search/info/{organisationId}:
    get:
      description: "Return Semantic-search and categorical information for a given\
        \ organisation (by id).  This is used by search UI interfaces to pre-populate\
        \ and setup knowledge-bases of this organisation, metadata-categories, and\
        \ security requirements.  This is an older interface.  Please use the /search/info/organisation-id/client-id\
        \ interface instead."
      operationId: getSearchInfo2
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMInfo'
          description: get search info response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get search info.
      summary: "Search Info [deprecated]"
      tags:
      - knowledgebase
      x-accepts: application/json
  /api/knowledgebase/search/info/{organisationId}/{clientId}:
    get:
      description: "return Semantic-search and categorical information for a given\
        \ organisation (by id).  This is used by search UI interfaces to pre-populate\
        \ and setup knowledge-bases of this organisation, metadata-categories, and\
        \ security requirements."
      operationId: getSearchInfo
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: "the client's id (its guid id), pre-register this client as a\
          \ known client."
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMInfo'
          description: get search info response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get search info.
      summary: Search Info
      tags:
      - knowledgebase
      x-accepts: application/json
  /api/document/version:
    get:
      description: Get the version of SimSage Document Services.
      operationId: version_4
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMVersion'
          description: get the version response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get version.
      summary: Version
      tags:
      - document
      x-accepts: application/json
  /api/document/stats/frequencies/{organisationId}/{kbId}/{dateTime}:
    get:
      description: Return a document frequency statistics report - frequencies of
        different document types
      operationId: getStats1
      parameters:
      - description: a one-time token for downloading data.
        explode: true
        in: query
        name: ott
        required: true
        schema:
          type: string
        style: form
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: a unix date-time specifying the exact snapshot to download
        explode: false
        in: path
        name: dateTime
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get document statistics.
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CMDocumentTypeFrequency'
                type: array
          description: document statistic response
      summary: Document Frequency Statistics
      tags:
      - document
      x-accepts: application/json
  /api/document/preview/{organisationId}/{kbId}/{clientId}/{sessionId}/{urlId}/{page}:
    get:
      description: get a preview for a document if available by url
      operationId: preview
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: "the client-id, a persistent id identifying the remote client\
          \ making this request."
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      - description: "the session-id, the security required for making this request."
        explode: false
        in: path
        name: sessionId
        required: true
        schema:
          type: string
        style: simple
      - description: the SimSage id for this url
        explode: false
        in: path
        name: urlId
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: what page to render
        example: "must be one of -1: the thumbnail image, 0: the first page view"
        explode: false
        in: path
        name: page
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            image/jpeg:
              schema:
                format: byte
                type: string
            image/svg+xml:
              schema:
                format: byte
                type: string
          description: image response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get image.
      summary: get Preview
      tags:
      - document
      x-accepts: application/json
  /api/document/parquets/{organisationId}/{kbId}/{page}/{pageSize}:
    get:
      description: Return a list of inventory times available for download.
      operationId: getParquetList
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: "pagination control, the page index"
        example: 0
        explode: false
        in: path
        name: page
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: "pagination control, the size of a page"
        example: 10
        explode: false
        in: path
        name: pageSize
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get parquet list.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMParquetTimeList'
          description: parquet list response
      summary: Parquet available time list
      tags:
      - document
      x-accepts: application/json
  /api/document/document/{organisationId}/{kbId}/{url}:
    get:
      description: return a document's details given a base64 encoded url
      operationId: document
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: "the document's url, base64 encoded, a unique id identifying\
          \ a document."
        explode: false
        in: path
        name: url
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get document.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMDocument'
          description: document object response
      summary: get Document
      tags:
      - document
      x-accepts: application/json
  /api/dms/subscriptions/{organisationId}/{kbId}/{userId}:
    get:
      description: Return a subscriptions object for a given user
      operationId: getSubscriptionList
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the user's id
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMSubscriptions'
          description: response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Get Subscriptions
      tags:
      - dms
      x-accepts: application/json
  /api/dms/source/{organisationId}/{kbId}/{sourceId}:
    delete:
      description: Remove an existing top-level folder (source folder) from the SimSage
        DMS.
      operationId: deleteSourceFolder
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the sourceId of the source-folder to remove
        explode: false
        in: path
        name: sourceId
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMDocumentFolder'
          description: response
      summary: Remove source-folder
      tags:
      - dms
      x-accepts: application/json
    get:
      description: Return the content of a top-level folder (source folder).
      operationId: getSourceFolder
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the source-id of the item being deleted
        explode: false
        in: path
        name: sourceId
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMDocumentFolder'
          description: response
      summary: Get source-folder
      tags:
      - dms
      x-accepts: application/json
  /api/dms/saved-searches/{organisationId}/{kbId}/{userId}/{top}:
    get:
      description: Return a user's saved searches
      operationId: getSavedSearches
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the user's id
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: how many records to return
        explode: false
        in: path
        name: top
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CMSavedSearch'
                type: array
          description: response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: User's saved searches
      tags:
      - dms
      x-accepts: application/json
  /api/dms/notifications/{organisationId}/{kbId}/{year}/{month}:
    get:
      description: Return all user notifications from the DMS for a given user by
        id.
      operationId: getUserNotifications
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the year for the notifications
        explode: false
        in: path
        name: year
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: the month for the notifications
        explode: false
        in: path
        name: month
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CMUserNotification'
                type: array
          description: response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Get User Notifications
      tags:
      - dms
      x-accepts: application/json
  /api/dms/note/{organisationId}/{kbId}/{url}:
    delete:
      description: delete all notes associated with a document
      operationId: deleteAllNotes
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the base64 encoded url value
        explode: false
        in: path
        name: url
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: delete all Notes
      tags:
      - dms
      x-accepts: application/json
    get:
      description: Return a list of notes for a given url
      operationId: getNoteList
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the base64 encoded url value
        explode: false
        in: path
        name: url
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CMDocumentNote'
                type: array
          description: response
      summary: Get Notes
      tags:
      - dms
      x-accepts: application/json
  /api/dms/lock/{organisationId}/{kbId}/{userId}:
    get:
      description: Return a list of locked documents for a given user
      operationId: getLockedList
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the user's id
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CMDocument'
                type: array
          description: response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Get locked documents for user
      tags:
      - dms
      x-accepts: application/json
  /api/dms/folder/{organisationId}/{kbId}/{sourceId}/{folderId}/{prevUrl}/{pageSize}:
    get:
      description: Return a folder's content
      operationId: getFolder
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the owner source's id
        explode: false
        in: path
        name: sourceId
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: the folder's id
        explode: false
        in: path
        name: folderId
        required: true
        schema:
          type: string
        style: simple
      - description: "pagination, the previous last URL for the page-set ('null' is\
          \ first page)"
        explode: false
        in: path
        name: prevUrl
        required: true
        schema:
          type: string
        style: simple
      - description: page-size for a paginated set
        explode: false
        in: path
        name: pageSize
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMDocumentFolder'
          description: response
      summary: Get Folder Content
      tags:
      - dms
      x-accepts: application/json
  /api/dms/folder/filter/{organisationId}/{kbId}/{text}:
    get:
      description: Filter a set of folders using Search
      operationId: filterFolders
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the text to use to filter (base64 encoded)
        explode: false
        in: path
        name: text
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMDocumentFolder'
          description: response
      summary: Filter Folders
      tags:
      - dms
      x-accepts: application/json
  /api/dms/document/{organisationId}/{kbId}/{urlId}:
    get:
      description: Return a document's details by url-id
      operationId: document_1
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: "the document's url-id, a unique id identifying a document."
        explode: false
        in: path
        name: urlId
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMDocument'
          description: response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Get Document
      tags:
      - dms
      x-accepts: application/json
  /api/dms/deleted/{organisationId}/{kbId}/{filter}:
    get:
      description: Return a list of deleted document records for an administrator
        (all records) with an optional filter set.
      operationId: getDeletedDocuments
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: an optional text filter for URLs
        explode: false
        in: path
        name: filter
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DocumentDeleted'
                type: array
          description: response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Deleted records with optional filter
      tags:
      - dms
      x-accepts: application/json
  /api/dms/dashboard/{organisationId}/{kbId}:
    get:
      description: Return a the user's DMS dashboard
      operationId: getUserDashboard
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMDUserDashboard'
          description: response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: User Dashboard
      tags:
      - dms
      x-accepts: application/json
  /api/dms/bookmark/{organisationId}/{kbId}/{userId}:
    get:
      description: Return a list of bookmarks for a given user
      operationId: getBookmarkList
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the user's id
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CMDocumentBookmark'
                type: array
          description: response
      summary: Get Bookmarks
      tags:
      - dms
      x-accepts: application/json
  /api/dms/binary/{organisationId}/{kbId}/{url}/{version}:
    get:
      description: Return a document's binary by url and version
      operationId: documentVersion
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: "the document's url, base64 encoded.  A unique id identifying\
          \ a document."
        explode: false
        in: path
        name: url
        required: true
        schema:
          type: string
        style: simple
      - description: the document's binary version.
        explode: false
        in: path
        name: version
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
        "200":
          content:
            application/octet-stream:
              schema:
                format: byte
                type: string
          description: document binary response
      summary: Get Binary Document
      tags:
      - dms
      x-accepts: application/json
  /api/dms/binary/latest/{organisationId}/{kbId}/{url}:
    get:
      description: Get the original for a document if available by url (latest version)
      operationId: documentBinary
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: a base64 encoded url
        explode: false
        in: path
        name: url
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
        "200":
          content:
            application/octet-stream:
              schema:
                format: byte
                type: string
          description: document binary response
      summary: Binary
      tags:
      - dms
      x-accepts: application/json
  /api/dms/audit/{organisationId}/{kbId}/{year}/{month}:
    get:
      description: Return document audit records for a user (filtered) or administrator
        (all records) for a given month
      operationId: getFullAudit
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the year for the notifications
        explode: false
        in: path
        name: year
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: the month for the notifications
        explode: false
        in: path
        name: month
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CMDocumentAudit'
                type: array
          description: response
      summary: Audit records for a month
      tags:
      - dms
      x-accepts: application/json
  /api/dms/audit/{organisationId}/{kbId}/{year}/{month}/{url}:
    get:
      description: Return document audit records for a user (filtered) or administrator
        (all records) for a given document / month
      operationId: getDocumentAudit
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the year for the notifications
        explode: false
        in: path
        name: year
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: the month for the notifications
        explode: false
        in: path
        name: month
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: the document url (base64 encoded) to get audit records for
        explode: false
        in: path
        name: url
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CMDocumentAudit'
                type: array
          description: response
      summary: Audit records for a document for a month
      tags:
      - dms
      x-accepts: application/json
  /api/discovery/version:
    get:
      description: Get the version of SimSage Discovery Services.
      operationId: version_5
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMVersion'
          description: get the version response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get version.
      summary: Version
      tags:
      - discovery
      x-accepts: application/json
  /api/discovery/storage/{organisationId}/{kbId}:
    get:
      description: Get the current amount of storage used by source
      operationId: storageBySource
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                type: object
          description: OK
      summary: storage
      tags:
      - discovery
      x-accepts: application/json;charset=UTF-8
  ? /api/discovery/projectdocument/{organisationId}/{kbId}/{projectId}/{page}/{pageSize}/{textFilter}/{typeFilter}/{statusFilter}/{sortColumn}/{sortDirection}
  : get:
      operationId: getPagedProjectDocuments
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: Project Id for the items
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      - description: the page to render
        explode: false
        in: path
        name: page
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: the page size to use
        explode: false
        in: path
        name: pageSize
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: the text filter passed in or blank if empty
        explode: false
        in: path
        name: textFilter
        required: true
        schema:
          type: string
        style: simple
      - description: the type filter passed in
        explode: false
        in: path
        name: typeFilter
        required: true
        schema:
          type: string
        style: simple
      - description: the status filter passed in
        explode: false
        in: path
        name: statusFilter
        required: true
        schema:
          type: string
        style: simple
      - description: the sort column used for the results
        explode: false
        in: path
        name: sortColumn
        required: true
        schema:
          type: string
        style: simple
      - description: sort direction to use (0/1)
        explode: false
        in: path
        name: sortDirection
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                type: object
          description: OK
      tags:
      - discovery
      x-accepts: application/json;charset=UTF-8
  /api/discovery/pdf/latest/{organisationId}/{kbId}/{url}:
    get:
      description: Get the original for a document if available by url (latest version)
      operationId: pdfBinary
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: false
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: a base64 encoded url
        explode: false
        in: path
        name: url
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                type: object
          description: OK
      summary: Binary
      tags:
      - discovery
      x-accepts: '*/*'
  /api/discovery/growth/{organisationId}/{kbId}:
    get:
      description: Get the storage growth delta per month
      operationId: growthPerMonth
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                type: object
          description: OK
      summary: growth
      tags:
      - discovery
      x-accepts: application/json;charset=UTF-8
  /api/discovery/gdprproject/{organisationId}/{kbId}/{page}/{pageSize}/{textFilter}/{statusFilter}/{sortColumn}/{sortDirection}:
    get:
      operationId: allGdprProjects
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the page to render
        explode: false
        in: path
        name: page
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: the page size to use
        explode: false
        in: path
        name: pageSize
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: the text filter passed in or blank if empty
        explode: false
        in: path
        name: textFilter
        required: true
        schema:
          type: string
        style: simple
      - description: the status filter passed in
        explode: false
        in: path
        name: statusFilter
        required: true
        schema:
          type: string
        style: simple
      - description: the sort column used for the results
        explode: false
        in: path
        name: sortColumn
        required: true
        schema:
          type: string
        style: simple
      - description: sort direction to use (0/1)
        explode: false
        in: path
        name: sortDirection
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                type: object
          description: OK
      tags:
      - discovery
      x-accepts: application/json;charset=UTF-8
  /api/discovery/gdprdocument/{organisationId}/{kbId}/{projectId}/{url}:
    get:
      operationId: getGdprDocument
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: Project Id for the items
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      - description: The url of the document to retrieve
        explode: false
        in: path
        name: url
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                type: object
          description: OK
      tags:
      - discovery
      x-accepts: application/json;charset=UTF-8
  /api/discovery/doctypesummary/{organisationId}/{kbId}:
    get:
      description: Get the current amount of storage used by source and document type
      operationId: summaryByDocumentType
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                type: object
          description: OK
      summary: storage
      tags:
      - discovery
      x-accepts: application/json;charset=UTF-8
  /api/dataproject/searchresult/{organisationId}/{taskId}:
    get:
      description: Get the summary information for the search results of a given project
        by task id
      operationId: getSearchResultSummary
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the id of the task
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get search result summary.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMSearchResultSummaryTask'
          description: search result summary response
      summary: get Search Result Summary
      tags:
      - dataproject
      x-accepts: application/json
  /api/dataproject/projectslice/{organisationId}/{taskId}:
    get:
      description: Get the project project slice for the given task id
      operationId: getProjectSlice
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the id of the task
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CMProjectSliceTask'
                type: array
          description: Project slice data
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not retrieve project slice.
      summary: get project slice
      tags:
      - dataproject
      x-accepts: application/json
  /api/dataproject/projects/{organisationId}:
    get:
      description: Get the list of available project types
      operationId: projectTypes
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CMProjectInfo'
                type: array
          description: project-type list response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get project-type list.
      summary: get Project Types
      tags:
      - dataproject
      x-accepts: application/json
  /api/dataproject/projectdefinition/{organisationId}/{taskId}:
    get:
      description: Get the project definition of the project for the given task id
      operationId: getProjectDefinition
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the id of the task
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMProjectDefinitionTask'
          description: project definition response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get project definition.
      summary: get Project Definition
      tags:
      - dataproject
      x-accepts: application/json
  /api/dataproject/docredactioninfo/{organisationId}/{sliceId}/{documentKey}:
    get:
      description: Get list of all identified potential Redaction locations for the
        document
      operationId: getDocumentRedactionInfo
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the id of the slice
        explode: false
        in: path
        name: sliceId
        required: true
        schema:
          type: string
        style: simple
      - description: the document key of the document to be redacted
        explode: false
        in: path
        name: documentKey
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not retrieve redaction info.
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LocatedRedaction'
                type: array
          description: List of all identified potential Redaction locations for the
            document
      summary: Get Document Redaction info
      tags:
      - dataproject
      x-accepts: application/json
  /api/dataproject/crawlerstatus/{organisationId}/{taskId}:
    get:
      description: Get the crawler status for the given task id
      operationId: crawlerStatus
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the id of the task
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get crawler-status.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMCrawlerStatusTask'
          description: crawler-status response
      summary: get Crawler Status
      tags:
      - dataproject
      x-accepts: application/json
  /api/crawler/version:
    get:
      description: Get the version of SimSage crawler-services.
      operationId: version_6
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMVersion'
          description: get the version response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get version.
      summary: Version
      tags:
      - crawler
      x-accepts: application/json
  /api/crawler/dropbox-oidc-code/{oidcKey}:
    get:
      description: used for OIDC systems to receive codes
      operationId: oidcCode
      parameters:
      - description: the Dropbox OIDC key
        explode: false
        in: path
        name: oidcKey
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: allRequestParams
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
        style: form
      responses:
        "401":
          content:
            text/html: {}
          description: something went wrong with the OIDC request set-up.
        "200":
          content:
            text/html: {}
          description: OK response
      summary: OIDC code receiver
      tags:
      - crawler
      x-accepts: text/html
  /api/crawler/crawlers/{organisationId}/{kbId}:
    get:
      description: Get a list of sources for a given organisation / knowledge base.
      operationId: getSourceList
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation's id (a guid)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base's id (a guid)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get source list.
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CMSource'
                type: array
          description: source list response
      summary: Get source List
      tags:
      - crawler
      x-accepts: application/json
  /api/crawler/crawler/{organisationId}/{kbId}/{sourceId}:
    delete:
      description: Remove a source and all its content by its source-id.
      operationId: delete
      parameters:
      - description: the organisation's id (a guid)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base's id (a guid)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the crawler's id
        explode: false
        in: path
        name: sourceId
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: remove a source OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not remove source.
      summary: Delete source
      tags:
      - crawler
      x-accepts: application/json
    get:
      description: Return the data-structure for a source by id.
      operationId: getCrawler
      parameters:
      - description: the organisation's id (a guid)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base's id (a guid)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the crawler's id
        explode: false
        in: path
        name: sourceId
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMSource'
          description: the source
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get source.
      summary: Get source
      tags:
      - crawler
      x-accepts: application/json
  /api/crawler/crawler/test/{organisationId}/{kbId}/{sourceId}:
    get:
      description: "Some crawlers (platform crawlers, not external crawlers) can check\
        \ if the given information is enough for it to operator."
      operationId: testCrawler
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation's id (a guid)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base's id (a guid)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the crawler's id
        explode: false
        in: path
        name: sourceId
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: test crawler connection OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not test crawler.
      summary: Test Crawler
      tags:
      - crawler
      x-accepts: application/json
  /api/conversion/version:
    get:
      description: Get the version of SimSage Conversion Services.
      operationId: version_7
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get version
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInCmd'
          description: the version response
      summary: Get Version
      tags:
      - conversion
      x-accepts: application/json
  /api/conversion/stt/version:
    get:
      description: Get the version of SimSage speech-to-text system.
      operationId: sttVersion
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get version
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInCmd'
          description: the version response
      summary: Get speech-to-text Version
      tags:
      - conversion
      x-accepts: application/json
  /api/conversion/preview-generator/version:
    get:
      description: Get the version of SimSage preview-generator.
      operationId: previewVersion
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get version
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInCmd'
          description: the version response
      summary: Get preview-generator Version
      tags:
      - conversion
      x-accepts: application/json
  /api/backup/{organisationId}/{backupId}:
    get:
      description: return the backup data for a given backup-id
      operationId: getBackup
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation's id (a guid) for access control
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the backup's id (along)
        explode: false
        in: path
        name: backupId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Backup'
          description: get backup response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get backup.
      summary: get backup
      tags:
      - backup
      x-accepts: application/json
  /api/backup/backups/{organisationId}:
    get:
      description: Get a list of all Backups present in this SimSage instance
      operationId: getBackupList
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation's id (a guid) to backup
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get backup-list.
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Backup'
                type: array
          description: get backup-list response
      summary: get backup list
      tags:
      - backup
      x-accepts: application/json
  /api/auth/version:
    get:
      description: Get the version of SimSage Auth Services.
      operationId: version_8
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get version
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInCmd'
          description: the version response
      summary: Get Version
      tags:
      - auth
      x-accepts: application/json
  /api/auth/users-paginated/{organisationId}/{page}/{pageSize}/{filter}:
    get:
      description: "Return a paginated, filtered list of users for a given organisation."
      operationId: getUsersPaginated
      parameters:
      - description: the main organisation (its guid id) to get users for
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: "the starting page, starting at zero"
        explode: false
        in: path
        name: page
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: the number of users per page
        explode: false
        in: path
        name: pageSize
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: a text filter for partial string matching users
        explode: false
        in: path
        name: filter
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get users paginated
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMUserList'
          description: get users paginated response
      summary: Get Users paginated
      tags:
      - auth
      x-accepts: application/json
  /api/auth/user/organisations/{filter}:
    get:
      description: Return all organisations that a user has access to (read-only or
        write).
      operationId: getUserOrganisationList
      parameters:
      - description: a text filter for partial string matching organisations
        explode: false
        in: path
        name: filter
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CMOrganisation'
                type: array
          description: get a list of organisations
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get organisation list
      summary: Get a list of Organisations
      tags:
      - auth
      x-accepts: application/json
  /api/auth/search/authenticate/msal/{organisationId}:
    get:
      description: Sign-in a user using an Msal JWT.
      operationId: signInSearchUsingJWTMsal
      parameters:
      - description: Schema valid JWT token.
        explode: false
        in: header
        name: jwt
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not sign-in
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInCmd'
          description: a sign-in search response
      summary: JWT MSal Sign In
      tags:
      - auth
      x-accepts: application/json
  /api/auth/myroles/{organisationId}:
    get:
      description: Get Roles of logged in user for the logged in Organisation
      operationId: myRoles
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get role list.
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: project-type list response
      summary: Get users application roles
      tags:
      - auth
      x-accepts: application/json
  /api/auth/groups/{organisationId}:
    get:
      description: "Return a paginated, filtered list of groups for a given organisation."
      operationId: getGroups
      parameters:
      - description: the main organisation (its guid id) to get users for
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMGroupList'
          description: get a list of groups
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not get group list
      summary: Get Groups
      tags:
      - auth
      x-accepts: application/json
  /api/auth/evolve/authenticate/msal/{organisationId}:
    get:
      description: Sign-in an Evolve user using an Msal JWT.
      operationId: signInEvolveUsingJWTMsal
      parameters:
      - description: a valid JWT token.
        explode: false
        in: header
        name: jwt
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInDmsCmd'
          description: a sign-in Evolve response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not sign-in
      summary: JWT MSal Sign In
      tags:
      - auth
      x-accepts: application/json
  /api/auth/dms/authenticate/msal/{organisationId}:
    get:
      description: Sign-in a user using an Msal JWT.
      operationId: signInDmsUsingJWTMsal
      parameters:
      - description: a valid JWT token.
        explode: false
        in: header
        name: jwt
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInDmsCmd'
          description: a sign-in dms response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not sign-in
      summary: JWT MSal Sign In
      tags:
      - auth
      x-accepts: application/json
  /api/auth/admin/authenticate/msal:
    get:
      description: Sign-in a user using an Msal JWT.
      operationId: signInAdminUsingJWTMsal
      parameters:
      - description: a valid JWT token.
        explode: false
        in: header
        name: jwt
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInAdmin'
          description: a sign-in admin response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not sign-in
      summary: JWT MSal Sign In
      tags:
      - auth
      x-accepts: application/json
  /api/semantic/text-to-search/{organisationId}/{kbId}/{word}:
    delete:
      description: Remove an existing text-to-search item.
      operationId: deleteTextToSearch
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the word of the text-to-search word
        example: sort()
        explode: false
        in: path
        name: word
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Delete text-to-search
      tags:
      - semantic
      x-accepts: application/json
  /api/language/delete-synonym/{organisationId}/{kbId}/{id}:
    delete:
      description: Delete a synonym using its id.
      operationId: deleteSynonym
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the id of the synonym to remove.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Delete Synonym
      tags:
      - language
      x-accepts: application/json
  /api/language/delete-syn-set/{organisationId}/{kbId}/{lemma}:
    delete:
      description: Remove a syn-set from SimSage by lemma.
      operationId: deleteSynSet
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the lemma (base word) of the syn-set to remove.
        explode: false
        in: path
        name: lemma
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Delete SynSet
      tags:
      - language
      x-accepts: application/json
  /api/language/delete-semantic/{organisationId}/{kbId}/{word}/{semantic}:
    delete:
      description: Remove an existing semantic from SimSage.
      operationId: deleteSemantic
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the word (more specific item) of the semantic to delete (eg.
          "John")
        example: John
        explode: false
        in: path
        name: word
        required: true
        schema:
          type: string
        style: simple
      - description: the semantic of the word to delete (eg. "person")
        example: person
        explode: false
        in: path
        name: semantic
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Delete Semantic
      tags:
      - language
      x-accepts: application/json
  /api/language/delete-all-synonyms/{organisationId}/{kbId}:
    delete:
      description: Delete all synonyms for a given org/kb
      operationId: deleteAllSynonyms
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base to delete/remove (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Delete All Synonyms
      tags:
      - language
      x-accepts: application/json
  /api/language/categorization/{organisationId}/{kbId}/{categorizationLabel}:
    delete:
      description: remove a specific categorization for a given org/kb
      operationId: deleteCategorization
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the metadata (name) to remove
        explode: false
        in: path
        name: categorizationLabel
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: remove categorization
      tags:
      - language
      x-accepts: application/json
  /api/document/document/{organisationId}/{kbId}/{url}/{sourceId}:
    delete:
      description: Remove/delete a document by its url.
      operationId: removeDocument
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the base-64 encoded (no-prefix) url of the document
        explode: false
        in: path
        name: url
        required: true
        schema:
          type: string
        style: simple
      - description: the source-id of the crawler this document belongs to
        explode: false
        in: path
        name: sourceId
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not remove document.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: remove document OK response
      summary: Remove Document
      tags:
      - document
      x-accepts: application/json
  /api/dms/un-delete/{organisationId}/{kbId}/{sourceId}/{url}/{filter}:
    delete:
      description: Un-delete a previously deleted document and return a list of deleted
        document records for an administrator (all records).
      operationId: undeleteDocument
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the item's source id
        explode: false
        in: path
        name: sourceId
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: "the document's url, base64 encoded.  A unique id identifying\
          \ a document."
        explode: false
        in: path
        name: url
        required: true
        schema:
          type: string
        style: simple
      - description: an optional text filter for URLs
        explode: false
        in: path
        name: filter
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DocumentDeleted'
                type: array
          description: response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: un-delete a record
      tags:
      - dms
      x-accepts: application/json
  /api/dms/subscription/{organisationId}/{kbId}/{userId}/{url}:
    delete:
      description: "Delete a user's subscription associated with a document, returns\
        \ an updated subscription set."
      operationId: deleteSubscription
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the user's id
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: the base64 encoded url value
        explode: false
        in: path
        name: url
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMSubscriptions'
          description: response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Delete a Subscription
      tags:
      - dms
      x-accepts: application/json
  /api/dms/saved-search/{organisationId}/{kbId}/{userId}/{text}/{top}:
    delete:
      description: Delete a user's saved search
      operationId: deleteUserSearch
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the user's id
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: the base64 encoded search-text value
        explode: false
        in: path
        name: text
        required: true
        schema:
          type: string
        style: simple
      - description: how many records to return
        explode: false
        in: path
        name: top
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CMSavedSearch'
                type: array
          description: response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Delete a Saved Search
      tags:
      - dms
      x-accepts: application/json
  /api/dms/note/{organisationId}/{kbId}/{url}/{noteId}:
    delete:
      description: Delete a note associated with a document
      operationId: deleteNote
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the base64 encoded url value
        explode: false
        in: path
        name: url
        required: true
        schema:
          type: string
        style: simple
      - description: the id of the note to delete
        explode: false
        in: path
        name: noteId
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CMDocumentNote'
                type: array
          description: response
      summary: Delete a Note
      tags:
      - dms
      x-accepts: application/json
  /api/dms/lock/{organisationId}/{kbId}/{userId}/{url}:
    delete:
      description: The originator of a lock releases a locked document.
      operationId: releaseLock
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the user's id
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: the base64 encoded url value
        explode: false
        in: path
        name: url
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CMDocument'
                type: array
          description: response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Release a lock
      tags:
      - dms
      x-accepts: application/json
  /api/dms/lock/release/{organisationId}/{kbId}/{userId}/{url}:
    delete:
      description: A system administrator or manager can force-unlock a document.
      operationId: forceReleaseLock
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the user's id
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: the base64 encoded url value
        explode: false
        in: path
        name: url
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
      summary: Force-release a lock
      tags:
      - dms
      x-accepts: application/json
  /api/dms/document/delete/{organisationId}/{kbId}/{isFolder}/{sourceId}/{url}/{folderId}:
    delete:
      description: Mark a document/folder as deleted in the SimSage DMS.
      operationId: deleteDocumentOrFolder
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: is this a folder or a document?
        explode: false
        in: path
        name: isFolder
        required: true
        schema:
          type: boolean
        style: simple
      - description: the source-id of the item being deleted
        explode: false
        in: path
        name: sourceId
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: the base64 encoded url value
        explode: false
        in: path
        name: url
        required: true
        schema:
          type: string
        style: simple
      - description: the folder's id
        explode: false
        in: path
        name: folderId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMDocumentFolder'
          description: response
      summary: Delete a document or a folder
      tags:
      - dms
      x-accepts: application/json
  /api/dms/bookmark/{organisationId}/{kbId}/{userId}/{url}:
    delete:
      description: Delete a user's bookmark associated with a document
      operationId: deleteBookmark
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base (its guid id)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: the user's id
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: the base64 encoded url value
        explode: false
        in: path
        name: url
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: fail response
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CMDocumentBookmark'
                type: array
          description: response
      summary: Delete a Bookmark
      tags:
      - dms
      x-accepts: application/json
  /api/discovery/deleteproject:
    delete:
      operationId: deleteProject
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMDeleteProjectCmd'
        required: true
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                type: object
          description: OK
      tags:
      - discovery
      x-content-type: application/json
      x-accepts: application/json;charset=UTF-8
  /api/crawler/crawler/document/{organisationId}/{kbId}/{sourceId}:
    delete:
      description: Remove a source's documents and stop the crawler if it's running.  Return
        an updated sources.
      operationId: deleteDocuments
      parameters:
      - description: the organisation's id (a guid)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the knowledge-base's id (a guid)
        explode: false
        in: path
        name: kbId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the crawler's id
        explode: false
        in: path
        name: sourceId
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMSource'
          description: updated source response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not remove a source's documents.
      summary: Delete source's documents
      tags:
      - crawler
      x-accepts: application/json
  /api/backup/backup/{organisationId}/{backupId}:
    delete:
      description: Delete a backup by ID and return list of all Backups present in
        this SimSage instance
      operationId: deleteBackup
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation's id (a guid) to backup
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the backup's id (along)
        explode: false
        in: path
        name: backupId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not remove backup
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Backup'
                type: array
          description: "remove backup, updated backup-list response"
      summary: remove backup
      tags:
      - backup
      x-accepts: application/json
  /api/auth/sign-out:
    delete:
      description: Sign-out any signed-in user (owner of the session object only).
      operationId: signOut
      parameters:
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: API-Version
        required: false
        schema:
          enum:
          - "1"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: a sign-out OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not sign-out
      summary: Sign Out
      tags:
      - auth
      x-accepts: application/json
  /api/auth/organisation/{organisationId}:
    delete:
      description: Delete / remove an organisation and its knowledge bases.
      operationId: deleteOrganisation
      parameters:
      - description: the organisation's id (a guid)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: remove organisation OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not remove organisation
      summary: Delete Organisation
      tags:
      - auth
      x-accepts: application/json
  /api/auth/organisation/user/{userId}/{organisationId}:
    delete:
      description: Remove an existing user from an existing Organisation.
      operationId: removeUserFromOrganisation
      parameters:
      - description: the user's id (a guid)
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: the organisation's id (a guid)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: remove user from organisation OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not remove user from organisation
      summary: Remove User from Organisation
      tags:
      - auth
      x-accepts: application/json
  /api/auth/group/{organisationId}/{name}:
    delete:
      description: Delete a group by name.
      operationId: deleteGroup
      parameters:
      - description: the organisation (its guid id)
        explode: false
        in: path
        name: organisationId
        required: true
        schema:
          type: string
        style: simple
      - description: the name of the group to remove.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: a valid SimSage Session id.
        explode: false
        in: header
        name: session-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: delete group OK response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonMessage'
          description: could not delete group
      summary: Delete Group
      tags:
      - auth
      x-accepts: application/json
components:
  schemas:
    CMCommandQueueItem:
      description: a progress/status item from the async command queue
      example:
        jobId: jobId
        expiry: 0
        key: key
      properties:
        jobId:
          description: "the job-id, primary key"
          type: string
        key:
          description: the name of the lock
          type: string
        expiry:
          description: when this lock will expire as a Unix date-time
          format: int64
          type: integer
      required:
      - expiry
      - jobId
      - key
      type: object
    JsonMessage:
      description: A generic SimSage message class used throughout the system.  This
        class can be used to either send a success message (information) or an error
        message (error) but will never send you both at the same time.  Version might
        not always be set but is the version of the service-layer you're communicating
        with.
      example:
        information: OK (empty if error is set)
        time: 0
        error: something went wrong (empty if information is set)
        version: 5.0.0
      properties:
        error:
          description: "A possible error message, empty if information is set"
          example: something went wrong (empty if information is set)
          type: string
        information:
          description: "An informational message, empty if error is set"
          example: OK (empty if error is set)
          type: string
        version:
          description: The version of this service (can be empty)
          example: 5.0.0
          type: string
        time:
          description: The time this event occurred
          example: 0
          format: int64
          type: integer
      required:
      - error
      - information
      - time
      - version
      type: object
    CMTextToSearchPaginated:
      description: A text-to-search pagination object.
      example:
        kbId: 00000000-0000-0000-0000-000000000001
        filter: filter
        organisationId: 00000000-0000-0000-0000-000000000001
        prevWord: "0"
        pageSize: 10
      properties:
        organisationId:
          description: the organisation (its guid id).
          example: 00000000-0000-0000-0000-000000000001
          type: string
        kbId:
          description: the knowledge-base (its guid id).
          example: 00000000-0000-0000-0000-000000000001
          type: string
        prevWord:
          description: "pagination control, the last text-to-search word we looked\
            \ for previously"
          example: "0"
          type: string
        pageSize:
          description: the number of text-to-search to return at a time.
          example: 10
          format: int32
          type: integer
        filter:
          description: An optional string filter to apply to all text-to-search in
            the search.  Can be empty in which case SimSage will return all semantics
            paginated.
          type: string
      required:
      - filter
      - kbId
      - organisationId
      - pageSize
      - prevWord
      type: object
    CMTextToSearchPaginatedReturn:
      description: A set of paginated text-to-search objects for a given organisation/knowledge-base
        with a total count.
      example:
        textToSearchList:
        - type: type
          searchPart: searchPart
          matchWords:
          - - matchWords
            - matchWords
          - - matchWords
            - matchWords
        - type: type
          searchPart: searchPart
          matchWords:
          - - matchWords
            - matchWords
          - - matchWords
            - matchWords
        numTextToSearch: 100
      properties:
        textToSearchList:
          description: a list of text-to-search items
          items:
            $ref: '#/components/schemas/TextToSearch'
          type: array
        numTextToSearch:
          description: the total number of text-to-search items
          example: 100
          format: int32
          type: integer
      required:
      - numTextToSearch
      - textToSearchList
      type: object
    TextToSearch:
      description: a list of text-to-search items
      example:
        type: type
        searchPart: searchPart
        matchWords:
        - - matchWords
          - matchWords
        - - matchWords
          - matchWords
      properties:
        type:
          type: string
        searchPart:
          type: string
        matchWords:
          items:
            items:
              type: string
            type: array
          type: array
      required:
      - matchWords
      - searchPart
      - type
      type: object
    CMTextToSearchEdit:
      description: a semantic update/create object
      example:
        searchType: and
        matchWordCsv: "what city,where"
        searchPart: sort()
      properties:
        searchType:
          description: "the type, either \"and\" or \"sub\""
          example: and
          type: string
        searchPart:
          description: the search-part
          example: sort()
          type: string
        matchWordCsv:
          description: A list of query matches
          example: "what city,where"
          type: string
      required:
      - matchWordCsv
      - searchPart
      - searchType
      type: object
    CMTextToSearchConversion:
      description: a try text-to-search object
      example:
        kbId: 00000000-0000-0000-0000-000000000001
        filter: filter
        organisationId: 00000000-0000-0000-0000-000000000001
        text: text
      properties:
        organisationId:
          description: the organisation (its guid id).
          example: 00000000-0000-0000-0000-000000000001
          type: string
        kbId:
          description: the knowledge-base (its guid id).
          example: 00000000-0000-0000-0000-000000000001
          type: string
        text:
          description: the text to convert
          type: string
        filter:
          description: An optional string filter to apply to all text-to-search in
            the search.  Can be empty in which case SimSage will return all semantics
            paginated.
          type: string
      required:
      - filter
      - kbId
      - organisationId
      - text
      type: object
    CMTextToSearchConversionReturn:
      description: A result from a text-to-search try-out.
      example:
        text: text
      properties:
        text:
          description: a return value of the try text-to-search
          type: string
      required:
      - text
      type: object
    CMSynonymsPaginated:
      description: a synonym paginated filter object.
      example:
        kbId: 00000000-0000-0000-0000-000000000001
        filter: filter
        organisationId: 00000000-0000-0000-0000-000000000001
        pageSize: 10
        prevId: 1
      properties:
        organisationId:
          description: the organisation (its guid id).
          example: 00000000-0000-0000-0000-000000000001
          type: string
        kbId:
          description: the knowledge-base (its guid id).
          example: 00000000-0000-0000-0000-000000000001
          type: string
        prevId:
          description: "pagination control, the last synonym we looked for previously"
          example: 1
          format: int32
          type: integer
        pageSize:
          description: the number of synonyms to return at a time.
          example: 10
          format: int32
          type: integer
        filter:
          description: An optional string filter to apply to all synonyms in the search.  Can
            be empty in which case SimSage will return all synonyms paginated.
          type: string
      required:
      - filter
      - kbId
      - organisationId
      - pageSize
      type: object
    CMSynonym:
      description: "the synonym object to update or create.  If it has no id, it will\
        \ be created, otherwise SimSage will use it's id to find it and update it."
      example:
        words: "dog, canine, woof-woof"
        id: id
      properties:
        id:
          description: "A unique id for this synonym, an integer"
          type: string
        words:
          description: A csv list of words (per word with spaces and hyphens allowed)
            forming the synonyms
          example: "dog, canine, woof-woof"
          type: string
      required:
      - id
      - words
      type: object
    CMSynonymsPaginatedResult:
      description: A paginated synonym return list matching a request for the same.
      example:
        kbId: 00000000-0000-0000-0000-000000000001
        filter: dog
        synonymList:
        - words: "dog, canine, woof-woof"
          id: id
        - words: "dog, canine, woof-woof"
          id: id
        organisationId: 00000000-0000-0000-0000-000000000001
        numSynonyms: 123
      properties:
        organisationId:
          description: the organisation (its guid id).
          example: 00000000-0000-0000-0000-000000000001
          type: string
        kbId:
          description: the knowledge-base (its guid id).
          example: 00000000-0000-0000-0000-000000000001
          type: string
        filter:
          description: The filter that was used to find these items.
          example: dog
          type: string
        synonymList:
          description: the resulting list of synonyms (return)
          items:
            $ref: '#/components/schemas/CMSynonym'
          type: array
        numSynonyms:
          description: the total number of synonyms that matched.
          example: 123
          format: int32
          type: integer
      required:
      - filter
      - kbId
      - numSynonyms
      - organisationId
      - synonymList
      type: object
    CMSemanticsPaginated:
      description: A semantic pagination object.
      example:
        kbId: 00000000-0000-0000-0000-000000000001
        filter: filter
        organisationId: 00000000-0000-0000-0000-000000000001
        prevWord: "0"
        pageSize: 10
      properties:
        organisationId:
          description: the organisation (its guid id).
          example: 00000000-0000-0000-0000-000000000001
          type: string
        kbId:
          description: the knowledge-base (its guid id).
          example: 00000000-0000-0000-0000-000000000001
          type: string
        prevWord:
          description: "pagination control, the last semantic word we looked for previously"
          example: "0"
          type: string
        pageSize:
          description: the number of semantics to return at a time.
          example: 10
          format: int32
          type: integer
        filter:
          description: An optional string filter to apply to all semantics in the
            search.  Can be empty in which case SimSage will return all semantics
            paginated.
          type: string
      required:
      - filter
      - kbId
      - organisationId
      - pageSize
      - prevWord
      type: object
    CMSemantic:
      description: A SimSAge semantic.  A semantic is an 'is-a' relationship.  A generalization/specialization
        relationship.  The 'word' (the more specialized part) is the primary-key/id
        of this relationship.
      example:
        semantic: person
        word: John
      properties:
        word:
          description: "The word of a semantic is the more specific concept (eg. in\
            \ 'John is a person', then 'John' is the more specific concept, and 'person'\
            \ is the semantic)."
          example: John
          type: string
        semantic:
          description: "The semantic is the more general concept (eg. in 'John is\
            \ a person', 'person' is the more general concept, and 'John' is more\
            \ specific)."
          example: person
          type: string
      required:
      - semantic
      - word
      type: object
    CMSemanticsPaginatedResult:
      description: A paginated semantics return list matching a request for the same.
      example:
        kbId: 00000000-0000-0000-0000-000000000001
        filter: dog
        organisationId: 00000000-0000-0000-0000-000000000001
        semanticList:
        - semantic: person
          word: John
        - semantic: person
          word: John
        numSemantics: 4121
      properties:
        organisationId:
          description: the organisation (its guid id).
          example: 00000000-0000-0000-0000-000000000001
          type: string
        kbId:
          description: the knowledge-base (its guid id).
          example: 00000000-0000-0000-0000-000000000001
          type: string
        filter:
          description: The filter that was used to find these items.
          example: dog
          type: string
        semanticList:
          description: the resulting list of semantics (return)
          items:
            $ref: '#/components/schemas/CMSemantic'
          type: array
        numSemantics:
          description: the total number of semantics that matched.
          example: 4121
          format: int32
          type: integer
      required:
      - filter
      - kbId
      - numSemantics
      - organisationId
      - semanticList
      type: object
    CMSynSet:
      description: A SynSet is an ambiguous noun.  A SynSet tells SimSage how to distinguish
        between different homoglyphs (same word) with different meanings.
      example:
        lemma: bank
        wordCloudCsvList: "[\"finance,money,cashier,teller,industry\",\"tree,river,nature,water\"\
          ]"
        word: bank
      properties:
        word:
          description: the word that makes a synset group (an ambiguous noun language
            concept) (eg. 'bank')
          example: bank
          type: string
        lemma:
          description: "the lemma of this word (ie. the simplified base, usually the\
            \ same as the word, but the lemma of 'banks' is 'bank')"
          example: bank
          type: string
        wordCloudCsvList:
          description: A list of word-clouds that form each distinct synset.  Each
            string in this variable is itself a csv string.  The first word of this
            cloud forms the distinct marker of the synset.
          example: "[\"finance,money,cashier,teller,industry\",\"tree,river,nature,water\"\
            ]"
          type: string
      required:
      - lemma
      - word
      - wordCloudCsvList
      type: object
    CMSemanticModelEdit:
      description: a semantic update/create object
      example:
        semantic: person
        prevWord: Bart
        word: John
      properties:
        word:
          description: "The word of a semantic is the more specific concept (eg. in\
            \ 'John is a person', then 'John' is the more specific concept, and 'person'\
            \ is the semantic)."
          example: John
          type: string
        prevWord:
          description: The previous value for 'word' if this is a semantic changing
            its word value (update)
          example: Bart
          type: string
        semantic:
          description: "The semantic is the more general concept (eg. in 'John is\
            \ a person', 'person' is the more general concept, and 'John' is more\
            \ specific)."
          example: person
          type: string
      required:
      - prevWord
      - semantic
      - word
      type: object
    CMOptimizeIndex:
      description: an optimize indexes object.
      example:
        kbId: 00000000-0000-0000-0000-000000000001
        organisationId: 00000000-0000-0000-0000-000000000001
        optimizeAllIndexes: false
      properties:
        organisationId:
          description: the organisation (its guid id).
          example: 00000000-0000-0000-0000-000000000001
          type: string
        kbId:
          description: the knowledge-base (its guid id).
          example: 00000000-0000-0000-0000-000000000001
          type: string
        optimizeAllIndexes:
          description: Whether to optimize just the deltas (false) or the full set
            (true).
          example: false
          type: boolean
      required:
      - kbId
      - optimizeAllIndexes
      - organisationId
      type: object
    CMSynSetFind:
      description: a SynSet find object.
      example:
        kbId: 00000000-0000-0000-0000-000000000001
        filter: bank
        organisationId: 00000000-0000-0000-0000-000000000001
        pageSize: 1
        page: 0
      properties:
        organisationId:
          description: the organisation (its guid id).
          example: 00000000-0000-0000-0000-000000000001
          type: string
        kbId:
          description: the knowledge-base (its guid id).
          example: 00000000-0000-0000-0000-000000000001
          type: string
        page:
          description: "pagination control, the page to get (starting at zero (0))"
          example: 0
          format: int32
          type: integer
        pageSize:
          description: The number of results to return maximum
          example: 1
          format: int32
          type: integer
        filter:
          description: the synset(s) to look for
          example: bank
          type: string
      required:
      - filter
      - kbId
      - organisationId
      - page
      - pageSize
      type: object
    CMSynSetList:
      description: A list of SynSets for returning from SimSage for viewing.
      example:
        totalSize: 0
        list: list
      properties:
        list:
          description: A list of CMSynSet items
          type: string
        totalSize:
          description: the number of total SynSet items in your query
          format: int32
          type: integer
      required:
      - list
      - totalSize
      type: object
    CMCategorization:
      description: A categorization object.
      example:
        kbId: kbId
        categorizationLabel: top security
        organisationId: organisationId
        rule: "(body: test))"
      properties:
        organisationId:
          description: the organisation (its guid id)
          type: string
        kbId:
          description: the knowledge-base (its guid id)
          type: string
        categorizationLabel:
          description: the categorization label (the value field) for a categorization
          example: top security
          type: string
        rule:
          description: the SimSage SuperSearch rule to match for adding this categorization
            label to a document
          example: "(body: test))"
          type: string
      required:
      - categorizationLabel
      - kbId
      - organisationId
      - rule
      type: object
    CMKnowledgeBase:
      description: "A knowledge-base is SimSage's representation of a list of information\
        \ silos belonging to an organisation.  A knowledge-base represents a second\
        \ level of isolation between data in SimSage.  The first level is an Organisation.\
        \  Each organisation in SimSage has a list of knowledge-bases, strictly isolated\
        \ from each other.  Each knowledge-base in turn can have many sources (information\
        \ collectors that add items to a knowledge-base like a file-crawler, or a\
        \ web-crawler)"
      example:
        kbId: kbId
        organisationId: organisationId
        analyticsWindowInMonths: 12
        created: 0
        lastIndexOptimizationTime: 6
        maxQueriesPerDay: 5000
        securityId: securityId
        enabled: true
        capacityWarnings: true
        name: My little Pony knowledge-base
        operatorEnabled: true
        email: example@simsage.co.uk
        indexSchedule: "eg. If we want to optimize the indexes every Monday from midnight\
          \ to 1am, and Tuesday 5pm (GMT), we'd use: \"mon-00,tue-17\""
      properties:
        organisationId:
          description: the main organisation (its guid id)
          type: string
        kbId:
          description: the knowledge-base id (its guid id)
          type: string
        name:
          description: the name of this knowledge-base (must be unique within an organisation)
          example: My little Pony knowledge-base
          type: string
        email:
          description: the support email of the person to email with any UI generated
            questions
          example: example@simsage.co.uk
          type: string
        securityId:
          description: the security id (a guid) of this knowledge-base.  This is a
            shared secret between SimSage and external systems.
          type: string
        created:
          description: "when this knowledge-base was created, a unix date-time long"
          format: int64
          type: integer
        maxQueriesPerDay:
          description: limit the number of queries per day (if greater than 0).  A
            value of zero (0) indicates no limits.
          example: 5000
          format: int64
          type: integer
        analyticsWindowInMonths:
          description: How long to keep analytics for in months.  A value of zero
            (0) indicates forever
          example: 12
          format: int32
          type: integer
        enabled:
          description: a flag signalling this knowledge-base is active (can be used).  An
            inactive knowledge-base cannot be queried.
          example: true
          type: boolean
        operatorEnabled:
          description: a flag signalling this knowledge-base has operator support.  A
            value of false prevents this knowledge-base's operator from interacting
            with end-users.
          example: true
          type: boolean
        capacityWarnings:
          description: "All queries are given a 10% grace when daily-limits (maxQueriesPerDay)\
            \ are enforced.  If this flag is true, the owner of this knowledge-base\
            \ (email) is sent a warning at 100% daily utiliziation."
          example: true
          type: boolean
        indexSchedule:
          description: "the time-schedule for index-optimization, when active."
          example: "eg. If we want to optimize the indexes every Monday from midnight\
            \ to 1am, and Tuesday 5pm (GMT), we'd use: \"mon-00,tue-17\""
          type: string
        lastIndexOptimizationTime:
          description: the last time this triggered and ran as a unix date-time (read
            only)
          format: int64
          type: integer
      required:
      - analyticsWindowInMonths
      - capacityWarnings
      - created
      - email
      - enabled
      - indexSchedule
      - kbId
      - lastIndexOptimizationTime
      - maxQueriesPerDay
      - name
      - operatorEnabled
      - organisationId
      - securityId
      type: object
    KnowledgeBase:
      example:
        kbId: kbId
        organisationId: organisationId
        analyticsWindowInMonths: 1
        created: 0
        lastIndexOptimizationTime: 5
        maxQueriesPerDay: 6
        securityId: securityId
        enabled: true
        capacityWarnings: true
        name: name
        operatorEnabled: true
        email: email
        indexSchedule: indexSchedule
      properties:
        kbId:
          type: string
        organisationId:
          type: string
        name:
          type: string
        email:
          type: string
        securityId:
          type: string
        created:
          format: int64
          type: integer
        maxQueriesPerDay:
          format: int64
          type: integer
        analyticsWindowInMonths:
          format: int32
          type: integer
        enabled:
          type: boolean
        operatorEnabled:
          type: boolean
        capacityWarnings:
          type: boolean
        indexSchedule:
          type: string
        lastIndexOptimizationTime:
          format: int64
          type: integer
      required:
      - analyticsWindowInMonths
      - capacityWarnings
      - created
      - email
      - enabled
      - indexSchedule
      - kbId
      - lastIndexOptimizationTime
      - maxQueriesPerDay
      - name
      - operatorEnabled
      - organisationId
      - securityId
      type: object
    CMRedaction:
      example:
        typeKey: typeKey
        top: 5.962133916683182
        left: 1.4658129805029452
        redactionType: SEARCH
        width: 5.637376656633329
        page: 0
        value: value
        height: 6.027456183070403
      properties:
        redactionType:
          enum:
          - SEARCH
          - SEMANTIC
          - MANUAL
          type: string
        typeKey:
          type: string
        value:
          type: string
        page:
          format: int32
          type: integer
        height:
          format: double
          type: number
        left:
          format: double
          type: number
        top:
          format: double
          type: number
        width:
          format: double
          type: number
      required:
      - height
      - left
      - page
      - redactionType
      - top
      - typeKey
      - value
      - width
      type: object
    CMRedactionData:
      example:
        kbId: kbId
        organisationId: organisationId
        redactions:
        - typeKey: typeKey
          top: 5.962133916683182
          left: 1.4658129805029452
          redactionType: SEARCH
          width: 5.637376656633329
          page: 0
          value: value
          height: 6.027456183070403
        - typeKey: typeKey
          top: 5.962133916683182
          left: 1.4658129805029452
          redactionType: SEARCH
          width: 5.637376656633329
          page: 0
          value: value
          height: 6.027456183070403
        createForExport: true
        documentAction: NONE
        exportNativeFormat: true
        documentStatus: NEW
        projectId: projectId
        url: url
        annotated: true
      properties:
        organisationId:
          type: string
        kbId:
          type: string
        projectId:
          type: string
        url:
          type: string
        redactions:
          items:
            $ref: '#/components/schemas/CMRedaction'
          type: array
        documentStatus:
          enum:
          - NEW
          - IN_PROGRESS
          - COMPLETED
          type: string
        documentAction:
          enum:
          - NONE
          - REDACT
          - IGNORE
          - DELETE
          type: string
        annotated:
          type: boolean
        createForExport:
          type: boolean
        exportNativeFormat:
          type: boolean
      required:
      - annotated
      - createForExport
      - documentAction
      - documentStatus
      - exportNativeFormat
      - kbId
      - organisationId
      - projectId
      - redactions
      - url
      type: object
    CMDeleteDocument:
      description: An external document delete object.
      example:
        kbId: kbId
        sourceId: 1
        organisationId: organisationId
        encrypted: true
        seed: 0
        url: document-1
        sid: sid
      properties:
        organisationId:
          description: the organisation (its guid id) this document is to be deleted
            for.
          type: string
        kbId:
          description: the knowledge-base (its guid id) this document is to be deleted
            for.
          type: string
        sid:
          description: the security-id (a guid) of the knowledge-base.  This is effectively
            the shared secret between SimSage and the external-crawler system.
          type: string
        sourceId:
          description: the source-id of this crawler (ie. the crawler's id) this document
            belongs to.
          example: 1
          format: int32
          type: integer
        url:
          description: A unique URL for this document.
          example: document-1
          type: string
        encrypted:
          description: Do we need to add transport encryption
          example: true
          type: boolean
        seed:
          description: The seed used if encrypted
          example: 0
          format: int32
          type: integer
      required:
      - encrypted
      - kbId
      - organisationId
      - seed
      - sid
      - sourceId
      - url
      type: object
    CMGroup:
      description: A security-group object.  Groups can contain security users and
        are used to group/clump users.
      example:
        organisationId: 00000000-0000-0000-0000-000000000001
        userIdList:
        - userIdList
        - userIdList
        name: Domain Users
      properties:
        organisationId:
          description: the organisation (its guid id) this group is associated with
          example: 00000000-0000-0000-0000-000000000001
          type: string
        name:
          description: the name of this group
          example: Domain Users
          type: string
        userIdList:
          description: a list of user-ids (can be empty) part of this group
          items:
            description: a list of user-ids (can be empty) part of this group
            type: string
          type: array
      required:
      - name
      - organisationId
      - userIdList
      type: object
    CMUserWithExtras:
      description: An object used for updating a SimSage user.  This object can be
        used to update the user's password too.
      example:
        firstName: firstName
        password: password
        operatorKBList: operatorKBList
        surname: surname
        roles: roles
        groupList:
        - organisationId: 00000000-0000-0000-0000-000000000001
          userIdList:
          - userIdList
          - userIdList
          name: Domain Users
        - organisationId: 00000000-0000-0000-0000-000000000001
          userIdList:
          - userIdList
          - userIdList
          name: Domain Users
        id: id
        email: email
      properties:
        id:
          description: the user's id (its guid id).
          type: string
        email:
          description: the email of this user
          type: string
        password:
          description: a password for this user (or blank if not to be changed)
          type: string
        firstName:
          description: the first-name of this user
          type: string
        surname:
          description: the last-name (surname) of this user
          type: string
        roles:
          description: the roles to be associated with this user
          type: string
        operatorKBList:
          description: the operator-id and knowledge-base id to be associated with
            this user.  This user is to be an operator if set.
          type: string
        groupList:
          description: a list of groups this user is part of (can be empty)
          items:
            $ref: '#/components/schemas/CMGroup'
          type: array
      required:
      - email
      - firstName
      - groupList
      - id
      - operatorKBList
      - password
      - roles
      - surname
      type: object
    CMImportUsers:
      description: a CSV file with users and group memberships.
      example:
        organisationId: organisationId
        fileType: text/csv
        base64Text: base64Text
      properties:
        organisationId:
          description: the organisation to import the users into (its guid id)
          type: string
        fileType:
          description: the upload allows SimSage programs in text format (text/plain)
            or spreadsheets to be uploaded.
          example: text/csv
          type: string
        base64Text:
          description: "the base64 encoded comma separated values (csv).  Must be\
            \ prefixed with ';base64,'"
          type: string
      required:
      - base64Text
      - fileType
      - organisationId
      type: object
    CMOrganisation:
      description: "A SimSage organisation object.  Represents a SimSage top-level\
        \ tenant, aka. an organisation."
      example:
        autoCreateSSOUsers: true
        name: name
        autoCreateSSOACLList:
        - autoCreateSSOACLList
        - autoCreateSSOACLList
        autoCreateSSORoleList:
        - autoCreateSSORoleList
        - autoCreateSSORoleList
        id: id
        enabled: true
        autoCreateSSODomainList:
        - autoCreateSSODomainList
        - autoCreateSSODomainList
      properties:
        id:
          description: the organisation (its guid id).
          type: string
        name:
          description: the name of the organisation
          type: string
        enabled:
          description: true if the organisation is enabled (active/operational)
          type: boolean
        autoCreateSSOUsers:
          description: "if enabled, SSO users will auto-create their accounts"
          type: boolean
        autoCreateSSODomainList:
          description: a list of the allowed domain postfixes for the emails (e.g.
            simsage.co.uk)
          items:
            description: a list of the allowed domain postfixes for the emails (e.g.
              simsage.co.uk)
            type: string
          type: array
        autoCreateSSOACLList:
          description: a list of the ACLs initially assigned to each new user of they
            need creating
          items:
            description: a list of the ACLs initially assigned to each new user of
              they need creating
            type: string
          type: array
        autoCreateSSORoleList:
          description: a list of the SimSage Roles initially assigned to each new
            user of they need creating
          items:
            description: a list of the SimSage Roles initially assigned to each new
              user of they need creating
            type: string
          type: array
      required:
      - autoCreateSSOACLList
      - autoCreateSSODomainList
      - autoCreateSSORoleList
      - autoCreateSSOUsers
      - enabled
      - id
      - name
      type: object
    CMShortSummary:
      description: a client query object
      example:
        kbId: kbId
        organisationId: 00000000-0000-0000-0000-000000000001
        clientId: clientId
        sentenceId: 0
        url: document-1
        span: 3
      properties:
        organisationId:
          description: the organisation (its guid id).
          example: 00000000-0000-0000-0000-000000000001
          type: string
        kbId:
          description: the knowledge-base id (guid) to use
          type: string
        clientId:
          description: the client's id (a unique guid for keeping state against clients)
          type: string
        url:
          description: The unique URL of a document.
          example: document-1
          type: string
        sentenceId:
          description: The sentence id to start from in the document.
          example: 0
          format: int32
          type: integer
        span:
          description: The surrounding span / offset size for around the sentence
          example: 3
          format: int32
          type: integer
      required:
      - clientId
      - kbId
      - organisationId
      - sentenceId
      - span
      - url
      type: object
    CMShortSummaryResult:
      description: The result of a short summary for a given url
      example:
        kbId: kbId
        summary: some text
        organisationId: 00000000-0000-0000-0000-000000000001
        url: document-1
      properties:
        organisationId:
          description: the organisation (its guid id).
          example: 00000000-0000-0000-0000-000000000001
          type: string
        kbId:
          description: the knowledge-base id (guid) to use
          type: string
        url:
          description: The unique URL of a document.
          example: document-1
          type: string
        summary:
          description: The summary for this document.
          example: some text
          type: string
      required:
      - kbId
      - organisationId
      - summary
      - url
      type: object
    CMClientQuery:
      description: a client query object
      example:
        qnaQuery: true
        scoreThreshold: 0.8125
        sourceId: "0"
        groupSimilarDocuments: false
        organisationId: 00000000-0000-0000-0000-000000000001
        clientId: clientId
        useQuestionAnsweringAi: false
        maxWordDistance: 20
        query: most recent similar PDF files for annual reports
        numResults: 1
        pageSize: 10
        kbList:
        - kbList
        - kbList
        shardSizeList:
        - 1
        - 3
        - 2
        filter: "(doc(document-type,pdf) or doc(document-type,docx))"
        spellingSuggest: false
        sortByAge: false
        page: 0
        semanticSearch: true
        fragmentCount: 3
      properties:
        organisationId:
          description: the organisation (its guid id).
          example: 00000000-0000-0000-0000-000000000001
          type: string
        kbList:
          description: a list of knowledge-base id's (guids) to use
          items:
            description: a list of knowledge-base id's (guids) to use
            type: string
          type: array
        clientId:
          description: the client's id (a unique guid for keeping state against clients)
          type: string
        semanticSearch:
          description: should we perform a semantic-search?
          example: true
          type: boolean
        qnaQuery:
          description: should we perform a Q&A search?
          example: true
          type: boolean
        query:
          description: the user's search query
          example: most recent similar PDF files for annual reports
          type: string
        filter:
          description: a filter expression generated by the UX
          example: "(doc(document-type,pdf) or doc(document-type,docx))"
          type: string
        numResults:
          description: "the number of results to return for the Q&A system (recommend\
            \ 1, which returns the 'best match' only)"
          example: 1
          format: int32
          type: integer
        scoreThreshold:
          description: "A threshold for answer rejection, recommend a value of around\
            \ 81.25% (0.8125).  This value is between 0.0 and 1.0.  If this value\
            \ is too low, you'll get bad answers, and if this value is too high you\
            \ will only get exact matches."
          example: 0.8125
          format: float
          type: number
        page:
          description: "search engine pagination, the offset page starting at 0"
          example: 0
          format: int32
          type: integer
        pageSize:
          description: "search engine pagination, the number of results per page"
          example: 10
          format: int32
          type: integer
        fragmentCount:
          description: "search engine pagination, the number of sentences matching\
            \ per document (aka. document-sentence fragments)"
          example: 3
          format: int32
          type: integer
        maxWordDistance:
          description: how far apart words are allowed to be before they stop matching.  A
            value of zero (0) allows any distance within the document and is akin
            to a document level keyword search.
          example: 20
          format: int32
          type: integer
        sourceId:
          description: The id of source (an integer) to filter results for.  You can
            only filter on one source per knowledge-base.  Leaving this value zero
            (0) indicates all sources should be searched.
          example: "0"
          type: string
        shardSizeList:
          description: Index sharding values.  These are used by the internal engine
            to determine the status of results across different shards in SimSage.  Leave
            this value alone.  It is set by SimSage.  Pass it back to SimSage as you
            got it if you're paginating the same query.
          example:
          - 1
          - 3
          - 2
          items:
            description: Index sharding values.  These are used by the internal engine
              to determine the status of results across different shards in SimSage.  Leave
              this value alone.  It is set by SimSage.  Pass it back to SimSage as
              you got it if you're paginating the same query.
            format: int32
            type: integer
          type: array
        spellingSuggest:
          description: should the search-engine return spelling-suggestions for items
            not understood?
          example: false
          type: boolean
        groupSimilarDocuments:
          description: should the search-engine group similar documents together
          example: false
          type: boolean
        sortByAge:
          description: should the search-engine sort results by age
          example: false
          type: boolean
        useQuestionAnsweringAi:
          description: use ChatGPT or equivalent to answer queries
          example: false
          type: boolean
      required:
      - clientId
      - filter
      - fragmentCount
      - groupSimilarDocuments
      - kbList
      - maxWordDistance
      - numResults
      - organisationId
      - page
      - pageSize
      - qnaQuery
      - query
      - scoreThreshold
      - semanticSearch
      - shardSizeList
      - sortByAge
      - sourceId
      - spellingSuggest
      - useQuestionAnsweringAi
      type: object
    CMClientQueryResult:
      description: A SimSage return search-result message for Q&A and semantic-search
        queries.
      example:
        kbId: 00000000-0000-0000-0000-000000000001
        metadata: some user data
        organisationId: 00000000-0000-0000-0000-000000000001
        querySummarization: querySummarization
        synSetList:
        - lemma: bank
          wordCloudCsvList: "[\"finance,money,cashier,teller,industry\",\"tree,river,nature,water\"\
            ]"
          word: bank
        - lemma: bank
          wordCloudCsvList: "[\"finance,money,cashier,teller,industry\",\"tree,river,nature,water\"\
            ]"
          word: bank
        assignedOperatorId: 00000000-0000-0000-0000-000000000001
        hasResult: true
        spellingCorrection: spellingCorrection
        shardSizeList:
        - 1
        - 3
        - 2
        operatorName: John
        savedSearchList:
        - kbId: kbId
          organisationId: organisationId
          top: 5
          created: 5
          text: what is SimSage?
          userId: "1234"
        - kbId: kbId
          organisationId: organisationId
          top: 5
          created: 5
          text: what is SimSage?
          userId: "1234"
        knowEmail: true
        totalDocumentCount: 1000
        messageType: messageType
        customRender: false
        qnaScore: 1.0
        categoryList: []
        urlList:
        - urlList
        - urlList
        text: hello there!
        semanticSet:
          key:
          - word: test
            frequency: 10
          - word: test
            frequency: 10
        imageList:
        - http://server/image1.jpg
        resultList:
        - sourceId: 1
          textList:
          - The little ponies were very excited.
          metadata:
            person: 3
            ms-file-type: doc
          numSentences: 3121
          qnaResult: false
          documentType: pdf
          sortDesc: true
          textIndex: 0
          urlId: 22
          title: my little pony returns
          score: 231.22
          similarDocumentList:
          - similarity: 0.8008282
            urlId: 1
            url: some-document.txt
          - similarity: 0.8008282
            urlId: 1
            url: some-document.txt
          uploaded: 0
          renderType: rt search
          kbId: 00000000-0000-0000-0000-000000000001
          textSize: 31211
          indexed: 0
          author: John Elderberries
          created: 0
          crawled: 0
          binarySize: 31211
          url: https://simsage.ai/some/document.pdf
          folderId: (a guid)
          filename: index.html
          firstSentence: 0
          converted: 0
          numRelationships: 231211
          previewed: 0
          parsed: 0
          relatedList:
          - documentType: pdf
            webUrl: https://server.com/related-document.txt
            created: 6
            binarySize: 1234
            relatedUrlId: 5
            relatedUrl: related-document.txt
            lastModified: 1
            urlId: 1
            title: my title
            isChild: true
            child: true
          - documentType: pdf
            webUrl: https://server.com/related-document.txt
            created: 6
            binarySize: 1234
            relatedUrlId: 5
            relatedUrl: related-document.txt
            lastModified: 1
            urlId: 1
            title: my title
            isChild: true
            child: true
          lastModified: 0
          numWords: 31211
          fileType: Acrobat PDF 1.0.1
        - sourceId: 1
          textList:
          - The little ponies were very excited.
          metadata:
            person: 3
            ms-file-type: doc
          numSentences: 3121
          qnaResult: false
          documentType: pdf
          sortDesc: true
          textIndex: 0
          urlId: 22
          title: my little pony returns
          score: 231.22
          similarDocumentList:
          - similarity: 0.8008282
            urlId: 1
            url: some-document.txt
          - similarity: 0.8008282
            urlId: 1
            url: some-document.txt
          uploaded: 0
          renderType: rt search
          kbId: 00000000-0000-0000-0000-000000000001
          textSize: 31211
          indexed: 0
          author: John Elderberries
          created: 0
          crawled: 0
          binarySize: 31211
          url: https://simsage.ai/some/document.pdf
          folderId: (a guid)
          filename: index.html
          firstSentence: 0
          converted: 0
          numRelationships: 231211
          previewed: 0
          parsed: 0
          relatedList:
          - documentType: pdf
            webUrl: https://server.com/related-document.txt
            created: 6
            binarySize: 1234
            relatedUrlId: 5
            relatedUrl: related-document.txt
            lastModified: 1
            urlId: 1
            title: my title
            isChild: true
            child: true
          - documentType: pdf
            webUrl: https://server.com/related-document.txt
            created: 6
            binarySize: 1234
            relatedUrlId: 5
            relatedUrl: related-document.txt
            lastModified: 1
            urlId: 1
            title: my title
            isChild: true
            child: true
          lastModified: 0
          numWords: 31211
          fileType: Acrobat PDF 1.0.1
      properties:
        messageType:
          type: string
        assignedOperatorId:
          description: A unique id for this operator's session.
          example: 00000000-0000-0000-0000-000000000001
          type: string
        operatorName:
          description: the name of the operator for clients
          example: John
          type: string
        organisationId:
          description: the organisation (its guid id).
          example: 00000000-0000-0000-0000-000000000001
          type: string
        kbId:
          description: the knowledge-base id (its guid id)
          example: 00000000-0000-0000-0000-000000000001
          type: string
        text:
          description: the text sent.
          example: hello there!
          type: string
        hasResult:
          description: is there a result/reply or not?
          example: true
          type: boolean
        urlList:
          description: a list of reference urls associated with this answer
          items:
            description: a list of reference urls associated with this answer
            type: string
          type: array
        metadata:
          description: "metadata associated with the Question/Answer pair, user defined."
          example: some user data
          type: string
        qnaScore:
          description: how well the Q&A matcher performed a value between 0.0 and
            1.0
          example: 1.0
          format: float
          type: number
        imageList:
          description: A list of image urls associated with the Q&A pair
          example:
          - http://server/image1.jpg
          items:
            description: A list of image urls associated with the Q&A pair
            example: "[\"http://server/image1.jpg\"]"
            type: string
          type: array
        totalDocumentCount:
          description: the total number of documents found (but not included necessarily)
          example: 1000
          format: int32
          type: integer
        shardSizeList:
          description: Index sharding values.  These are used by the internal engine
            to determine the status of results across different shards in SimSage.  Leave
            this value alone.  It is set by SimSage.  Pass it back to SimSage as you
            got it if you're paginating the same query.
          example:
          - 1
          - 3
          - 2
          items:
            description: Index sharding values.  These are used by the internal engine
              to determine the status of results across different shards in SimSage.  Leave
              this value alone.  It is set by SimSage.  Pass it back to SimSage as
              you got it if you're paginating the same query.
            format: int32
            type: integer
          type: array
        resultList:
          description: "the actual search results, one for each item found"
          items:
            $ref: '#/components/schemas/CMSearchResult'
          type: array
        spellingCorrection:
          description: a spelling correction suggestion if appropriate and enabled.
          type: string
        semanticSet:
          additionalProperties:
            description: A descriptor of semantic categories and words with frequencies
              in each category
            items:
              $ref: '#/components/schemas/CMWordFrequency'
            type: array
          description: A descriptor of semantic categories and words with frequencies
            in each category
          type: object
        knowEmail:
          description: do we know the email address of this person?  if they've supplied
            it in the past this will be set to true.
          example: true
          type: boolean
        categoryList:
          description: updated categories (if applicable) with updated counts
          example: []
          items:
            $ref: '#/components/schemas/SearchCategory'
          type: array
        synSetList:
          description: A list of syn-sets used in the query
          items:
            $ref: '#/components/schemas/CMSynSet'
          type: array
        customRender:
          description: Does this source require custom render templates or use ordinary
            search-results?
          example: false
          type: boolean
        savedSearchList:
          description: a list of previous searches if applicable
          items:
            $ref: '#/components/schemas/CMSavedSearch'
          type: array
        querySummarization:
          description: an optional summarization of the search results
          type: string
      required:
      - assignedOperatorId
      - categoryList
      - customRender
      - hasResult
      - imageList
      - kbId
      - knowEmail
      - messageType
      - metadata
      - operatorName
      - organisationId
      - qnaScore
      - querySummarization
      - resultList
      - savedSearchList
      - semanticSet
      - shardSizeList
      - spellingCorrection
      - synSetList
      - text
      - totalDocumentCount
      - urlList
      type: object
    CMDocumentRelationship:
      description: A document that related to this document in some fashion (parent
        or child)
      example:
        documentType: pdf
        webUrl: https://server.com/related-document.txt
        created: 6
        binarySize: 1234
        relatedUrlId: 5
        relatedUrl: related-document.txt
        lastModified: 1
        urlId: 1
        title: my title
        isChild: true
        child: true
      properties:
        urlId:
          description: the url-id of this document
          example: 1
          format: int32
          type: integer
        isChild:
          description: "if true, this is a child relationship, otherwise a parent\
            \ relationship"
          example: true
          type: boolean
        relatedUrlId:
          description: the related document's id
          example: 5
          format: int32
          type: integer
        relatedUrl:
          description: the url of the related document
          example: related-document.txt
          type: string
        webUrl:
          description: the web-url (if set) if there is a web-link for this document
          example: https://server.com/related-document.txt
          type: string
        title:
          description: the title of the related document for display
          example: my title
          type: string
        binarySize:
          description: size in bytes of the related document
          example: 1234
          format: int64
          type: integer
        documentType:
          description: the type of the related document
          example: pdf
          type: string
        created:
          description: The unix creation date-time of the related item
          format: int64
          type: integer
        lastModified:
          description: The unix last-modified date-time of the related item
          format: int64
          type: integer
        child:
          type: boolean
          writeOnly: true
      required:
      - binarySize
      - created
      - documentType
      - isChild
      - lastModified
      - relatedUrl
      - relatedUrlId
      - title
      - urlId
      - webUrl
      type: object
    CMSavedSearch:
      description: A saved search item for a user.
      example:
        kbId: kbId
        organisationId: organisationId
        top: 5
        created: 5
        text: what is SimSage?
        userId: "1234"
      properties:
        organisationId:
          description: the main organisation (its guid id) for this history item
          type: string
        kbId:
          description: "the knowledge-base id of this context item, a guid-string"
          type: string
        userId:
          description: The user's id
          example: "1234"
          type: string
        text:
          description: the search text
          example: what is SimSage?
          type: string
        created:
          description: a unix-timestamp of the creation date-time of this record
          format: int64
          type: integer
        top:
          description: "if set, the number of records to return for viewing"
          format: int32
          type: integer
      required:
      - created
      - kbId
      - organisationId
      - text
      - top
      - userId
      type: object
    CMSearchResult:
      description: A single search result from the Semantic Search engine.  This presents
        a hit inside a SimSage document.
      example:
        sourceId: 1
        textList:
        - The little ponies were very excited.
        metadata:
          person: 3
          ms-file-type: doc
        numSentences: 3121
        qnaResult: false
        documentType: pdf
        sortDesc: true
        textIndex: 0
        urlId: 22
        title: my little pony returns
        score: 231.22
        similarDocumentList:
        - similarity: 0.8008282
          urlId: 1
          url: some-document.txt
        - similarity: 0.8008282
          urlId: 1
          url: some-document.txt
        uploaded: 0
        renderType: rt search
        kbId: 00000000-0000-0000-0000-000000000001
        textSize: 31211
        indexed: 0
        author: John Elderberries
        created: 0
        crawled: 0
        binarySize: 31211
        url: https://simsage.ai/some/document.pdf
        folderId: (a guid)
        filename: index.html
        firstSentence: 0
        converted: 0
        numRelationships: 231211
        previewed: 0
        parsed: 0
        relatedList:
        - documentType: pdf
          webUrl: https://server.com/related-document.txt
          created: 6
          binarySize: 1234
          relatedUrlId: 5
          relatedUrl: related-document.txt
          lastModified: 1
          urlId: 1
          title: my title
          isChild: true
          child: true
        - documentType: pdf
          webUrl: https://server.com/related-document.txt
          created: 6
          binarySize: 1234
          relatedUrlId: 5
          relatedUrl: related-document.txt
          lastModified: 1
          urlId: 1
          title: my title
          isChild: true
          child: true
        lastModified: 0
        numWords: 31211
        fileType: Acrobat PDF 1.0.1
      properties:
        kbId:
          description: the knowledge-base id (its guid id)
          example: 00000000-0000-0000-0000-000000000001
          type: string
        url:
          description: the url of the document that matched
          example: https://simsage.ai/some/document.pdf
          type: string
        urlId:
          description: the internal SimSage id for this url (unique only within a
            knowledge-base)
          example: 22
          format: int32
          type: integer
        sourceId:
          description: the source-id of this result (ie. the source's id)
          example: 1
          format: int32
          type: integer
        title:
          description: the title of this document/record (can be empty)
          example: my little pony returns
          type: string
        author:
          description: the author of this document/record (can be empty)
          example: John Elderberries
          type: string
        textList:
          description: "A list of matching fragments in this document, with highlight\
            \ markers."
          example:
          - The little ponies were very excited.
          items:
            description: "A list of matching fragments in this document, with highlight\
              \ markers."
            example: "[\"The little ponies were very excited.\"]"
            type: string
          type: array
        textIndex:
          description: "in case of multiple matches in textList, the best match index\
            \ of these items starting at zero (0)"
          example: 0
          format: int32
          type: integer
        score:
          description: "the relative score of this match, the bigger, the better"
          example: 231.22
          format: float
          type: number
        sortDesc:
          description: was this document along with any others sorted ascending or
            descending?
          example: true
          type: boolean
        qnaResult:
          description: is this item a Q&A result or a search result?
          example: false
          type: boolean
        firstSentence:
          description: the id of the first sentence in this result
          example: 0
          format: int32
          type: integer
        created:
          description: document creation date-time as a unix date-time
          example: 0
          format: int64
          type: integer
        uploaded:
          description: document uploaded to SimSage date-time as a unix date-time
          example: 0
          format: int64
          type: integer
        lastModified:
          description: document last-modified date-time as a unix date-time
          example: 0
          format: int64
          type: integer
        documentType:
          description: the type of this document/record as a three or four letter
            file extension
          example: pdf
          type: string
        numSentences:
          description: the total number of sentences in the body of this document
          example: 3121
          format: int32
          type: integer
        numWords:
          description: the total number of words and tokens (eg. '.') in the body
            of this document
          example: 31211
          format: int32
          type: integer
        numRelationships:
          description: the total number of relationships expanded from the words in
            this document
          example: 231211
          format: int32
          type: integer
        binarySize:
          description: the binary-size of the original document in bytes
          example: 31211
          format: int64
          type: integer
        textSize:
          description: the text-size of the original document in number of characters
          example: 31211
          format: int32
          type: integer
        fileType:
          description: the DROID file-type of this document/record (can be empty)
          example: Acrobat PDF 1.0.1
          type: string
        crawled:
          description: document crawled (ie. picked up by SimSage) date-time as a
            unix date-time
          example: 0
          format: int64
          type: integer
        converted:
          description: document conversion (ie. turned into text by SimSage) date-time
            as a unix date-time
          example: 0
          format: int64
          type: integer
        parsed:
          description: document parsed (ie. language analyzed by SimSage) date-time
            as a unix date-time
          example: 0
          format: int64
          type: integer
        indexed:
          description: document indexed (ie. creation of inverted indices by SimSage)
            date-time as a unix date-time
          example: 0
          format: int64
          type: integer
        previewed:
          description: document preview generated (ie. creation of thumb-nail images
            for this document by SimSage) date-time as a unix date-time
          example: 0
          format: int64
          type: integer
        similarDocumentList:
          description: A list of similar documents matched by this query.
          items:
            $ref: '#/components/schemas/CMSimilarDocument'
          type: array
        relatedList:
          description: A list of similar documents matched by this query.
          items:
            $ref: '#/components/schemas/CMDocumentRelationship'
          type: array
        metadata:
          additionalProperties:
            description: A set of name-values of metadata associated with this document
            example: "{\"person\":3,\"ms-file-type\":\"doc\"}"
            type: string
          description: A set of name-values of metadata associated with this document
          example:
            person: 3
            ms-file-type: doc
          type: object
        filename:
          description: the filename of this document in the DMS system
          example: index.html
          type: string
        folderId:
          description: the folderId of this item in the DMS system
          example: (a guid)
          type: string
        renderType:
          description: how should this item be rendered? (default "rt search")
          example: rt search
          type: string
      required:
      - author
      - binarySize
      - converted
      - crawled
      - created
      - documentType
      - fileType
      - filename
      - firstSentence
      - folderId
      - indexed
      - kbId
      - lastModified
      - metadata
      - numRelationships
      - numSentences
      - numWords
      - parsed
      - previewed
      - qnaResult
      - relatedList
      - renderType
      - score
      - similarDocumentList
      - sortDesc
      - sourceId
      - textIndex
      - textList
      - textSize
      - title
      - uploaded
      - url
      - urlId
      type: object
    CMSimilarDocument:
      description: A document that is similar to another document.
      example:
        similarity: 0.8008282
        urlId: 1
        url: some-document.txt
      properties:
        url:
          description: the url of the document that is similar
          example: some-document.txt
          type: string
        urlId:
          description: the url-id of the document that is similar
          example: 1
          format: int32
          type: integer
        similarity:
          description: how similar that document is (e.g. 1.0 = 100%)
          format: float
          type: number
      required:
      - similarity
      - url
      - urlId
      type: object
    CMWordFrequency:
      description: A word or piece of text with a frequency counter.
      example:
        word: test
        frequency: 10
      properties:
        word:
          description: the word
          example: test
          type: string
        frequency:
          description: its frequency
          example: 10
          format: int32
          type: integer
      required:
      - frequency
      - word
      type: object
    NameCounterLevel:
      example:
        name: name
        count: 5
      properties:
        name:
          type: string
        count:
          format: int32
          type: integer
      required:
      - count
      - name
      type: object
    SearchCategory:
      description: Search categories / metadata searching
      example:
        categoryType: categoryType
        sortDefault: sortDefault
        scType: SCT_PLAIN
        metadata: metadata
        minValue: 6
        sortAscText: sortAscText
        sortDescText: sortDescText
        displayName: displayName
        maxValue: 1
        sort: true
        items:
        - name: name
          count: 5
        - name: name
          count: 5
        order: 0
      properties:
        scType:
          enum:
          - SCT_PLAIN
          - SCT_TWO_LEVEL
          - SCT_NUMBER
          type: string
        categoryType:
          type: string
        order:
          format: int32
          type: integer
        sortDefault:
          type: string
        sortAscText:
          type: string
        sortDescText:
          type: string
        metadata:
          type: string
        displayName:
          type: string
        sort:
          type: boolean
        minValue:
          format: int64
          type: integer
        maxValue:
          format: int64
          type: integer
        items:
          items:
            $ref: '#/components/schemas/NameCounterLevel'
          type: array
      required:
      - categoryType
      - displayName
      - items
      - maxValue
      - metadata
      - minValue
      - order
      - scType
      - sort
      - sortAscText
      - sortDefault
      - sortDescText
      type: object
    CMDocumentQuestionAndAnswer:
      description: A basic document question/answer pair for AI
      example:
        kbId: kbId
        organisationId: 00000000-0000-0000-0000-000000000001
        answer: some answer
        conversationList: "[]"
        urlId: 1
        url: document-1
      properties:
        organisationId:
          description: the organisation (its guid id).
          example: 00000000-0000-0000-0000-000000000001
          type: string
        kbId:
          description: the knowledge-base id (guid) to use
          type: string
        url:
          description: The unique URL of a document.
          example: document-1
          type: string
        urlId:
          description: The unique URL-ID of a document.
          example: 1
          format: int32
          type: integer
        conversationList:
          description: the context of the conversation thusfar
          example: "[]"
          type: string
        answer:
          description: The answer for the given question
          example: some answer
          type: string
      required:
      - answer
      - conversationList
      - kbId
      - organisationId
      - url
      - urlId
      type: object
    CMKnowledgeBaseExport:
      description: the knowledge-base export config
      example:
        kbId: kbId
        exporter: exporter
        exportConfig:
          key: "{}"
        organisationId: organisationId
      properties:
        organisationId:
          type: string
        kbId:
          type: string
        exporter:
          type: string
        exportConfig:
          additionalProperties:
            type: object
          type: object
      required:
      - exportConfig
      - exporter
      - kbId
      - organisationId
      type: object
    CMZipSource:
      description: a zip source model
      example:
        kbId: kbId
        sourceId: 1
        organisationId: organisationId
      properties:
        organisationId:
          description: the organisation (its guid id)
          type: string
        kbId:
          description: the knowledge-base (its guid id)
          type: string
        sourceId:
          description: the source-id of this crawler (ie. the crawler's id)
          example: 1
          format: int32
          type: integer
      required:
      - kbId
      - organisationId
      - sourceId
      type: object
    CMSingleDocumentSummaryRequest:
      description: a document summarization object.
      example:
        kbId: kbId
        organisationId: organisationId
        top: 0
        url: url
      properties:
        organisationId:
          description: the organisation (its guid id)
          type: string
        kbId:
          description: the knowledge-base id (its guid id)
          type: string
        url:
          description: the url of the document to summarize
          type: string
        top:
          description: the top-n sentences to return for the summary of the documents
          format: int32
          type: integer
      required:
      - kbId
      - organisationId
      - top
      - url
      type: object
    CMSingleDocumentSummary:
      description: A document summarization result (extractive summarization)
      example:
        summary:
        - summary
        - summary
        url: url
      properties:
        url:
          description: the url this text came from
          type: string
        summary:
          description: the list of summary items for the given document
          items:
            description: the list of summary items for the given document
            type: string
          type: array
      required:
      - summary
      - url
      type: object
    CMQueryFocussedSummarizationRequest:
      description: a query focussed summarization object.
      example:
        kbId: kbId
        organisationId: organisationId
        query: query
        maximumNumberOfDocuments: 0
      properties:
        organisationId:
          description: the organisation (its guid id)
          type: string
        kbId:
          description: the knowledge-base id (its guid id)
          type: string
        query:
          description: the query to use for a query
          type: string
        maximumNumberOfDocuments:
          description: the maximum number of documents to consider in a summarization
            event
          format: int32
          type: integer
      required:
      - kbId
      - maximumNumberOfDocuments
      - organisationId
      - query
      type: object
    CMDParagraphSummary:
      description: A multiple document summarization result.  Multi Document Summarization
        (MSD) uses SimSage's graph to create relevant extracts of series of documents
        matching a specific query.
      example:
        score: 0.8008282
        text: text
        url: url
      properties:
        url:
          description: the url this text came from
          type: string
        text:
          description: a paragraph of text
          type: string
        score:
          description: the score relative to the others of this sentence
          format: float
          type: number
      required:
      - score
      - text
      - url
      type: object
    CMQueryFocussedSummarization:
      description: A document summarization result (Multi Document Summarization)
      example:
        summary:
        - score: 0.8008282
          text: text
          url: url
        - score: 0.8008282
          text: text
          url: url
        message: message
      properties:
        summary:
          description: the list of summary items
          items:
            $ref: '#/components/schemas/CMDParagraphSummary'
          type: array
        message:
          description: a possible return message if not empty
          type: string
      required:
      - message
      - summary
      type: object
    CMGetHtml:
      description: get an HTML preview of a document by page
      example:
        kbId: kbId
        numPages: 5
        organisationId: organisationId
        width: 1
        html: html
        page: 6
        urlId: 0
        url: https://server.com/document-1
        height: 5
      properties:
        organisationId:
          description: the organisation (its guid id)
          type: string
        kbId:
          description: the knowledge-base id (its guid id)
          type: string
        urlId:
          description: the url Id of the document
          format: int32
          type: integer
        url:
          description: The unique URL of this document.
          example: https://server.com/document-1
          type: string
        page:
          description: "the page of this document get, starting at 1"
          format: int32
          type: integer
        html:
          description: the HTML of the document returned
          type: string
        width:
          description: the display width of the HMTL document
          format: int32
          type: integer
        height:
          description: the display height of the HMTL document
          format: int32
          type: integer
        numPages:
          description: the total number of pages in this document
          format: int32
          type: integer
      required:
      - height
      - html
      - kbId
      - numPages
      - organisationId
      - page
      - url
      - urlId
      - width
      type: object
    CMInventorizeParameters:
      description: an inventory creation object.
      example:
        kbId: kbId
        organisationId: organisationId
      properties:
        organisationId:
          description: the organisation (its guid id)
          type: string
        kbId:
          description: the knowledge-base id (its guid id)
          type: string
      required:
      - kbId
      - organisationId
      type: object
    CMDocument:
      description: "A document is the main data carrying entity in SimSage.  A document\
        \ can literally be a document like a pdf file found on a file-server, or a\
        \ database-record, or something captured from a remote system like a web-page,\
        \ or an image on a web-page."
      example:
        sourceId: 1
        metadata:
          file-extension: txt
        organisationId: organisationId
        parentUrl: parentUrl
        numSentences: 3
        acls:
        - access: RW
          acl: e.g. "example@simsage.co.uk" or "domain users"
          isUser: true
          user: true
        - access: RW
          acl: e.g. "example@simsage.co.uk" or "domain users"
          isUser: true
          user: true
        documentType: "many possible values, eg. doc,pdf,html"
        origin: uploaded
        noteList:
        - kbId: kbId
          noteText: example text
          organisationId: organisationId
          created: 1
          noteId: 1
          userId: "1234"
          url: document-1
          email: joe@bloggs.com
        - kbId: kbId
          noteText: example text
          organisationId: organisationId
          created: 1
          noteId: 1
          userId: "1234"
          url: document-1
          email: joe@bloggs.com
        urlId: 1
        title: My little pony.
        uploaded: 6
        versionList:
        - created: 1
          changeHash: 098f6bcd4621d373cade4e832627b4f6
          version: 1
          url: https://server.com/document-1
        - created: 1
          changeHash: 098f6bcd4621d373cade4e832627b4f6
          version: 1
          url: https://server.com/document-1
        activityList:
        - kbId: kbId
          organisationId: organisationId
          created: 6
          description: something happened
          userId: "1234"
          url: document-1
          email: joe@bloggs.com
        - kbId: kbId
          organisationId: organisationId
          created: 6
          description: something happened
          userId: "1234"
          url: document-1
          email: joe@bloggs.com
        kbId: kbId
        textSize: 1
        indexed: 7
        author: John Manyberries
        created: 0
        crawled: 5
        binarySize: 7
        typeDescription: Portable Network Graphics
        url: document-1
        folderId: (a guid)
        contentHash: 098f6bcd4621d373cade4e832627b4f6
        filename: index.html
        converted: 5
        previewed: 9
        numRelationships: 4
        changeHash: 118f6bcd4621d373cade4e832627b4cc
        parsed: 2
        lastModified: 1
        numWords: 2
      properties:
        organisationId:
          description: the organisation (its guid id)
          type: string
        kbId:
          description: the knowledge-base id (its guid id)
          type: string
        url:
          description: A unique URL for this document.
          example: document-1
          type: string
        urlId:
          description: A unique URL-id for this document.
          example: 1
          format: int32
          type: integer
        origin:
          description: Where the document was sourced from (for external documents).
          example: uploaded
          type: string
        title:
          description: "The title of this document, can be empty."
          example: My little pony.
          type: string
        author:
          description: "The author of this document, can be empty."
          example: John Manyberries
          type: string
        documentType:
          description: "The file extension of this document, its type."
          example: "many possible values, eg. doc,pdf,html"
          type: string
        created:
          description: a unix-timestamp for the creation date-time of this document
          format: int64
          type: integer
        uploaded:
          description: a unix-timestamp for the upload date-time of this document
            to SimSage
          format: int64
          type: integer
        lastModified:
          description: a unix-timestamp for the last-modified date-time of this document
          format: int64
          type: integer
        crawled:
          description: a unix-timestamp for when a SimSage crawler last looked at
            this document
          format: int64
          type: integer
        converted:
          description: a unix-timestamp for when a SimSage converter last looked at
            this document
          format: int64
          type: integer
        parsed:
          description: a unix-timestamp for when a SimSage parser last looked at this
            document
          format: int64
          type: integer
        indexed:
          description: a unix-timestamp for when a SimSage indexer last looked at
            this document
          format: int64
          type: integer
        previewed:
          description: a unix-timestamp for when a SimSage image-converter last looked
            at this document
          format: int64
          type: integer
        changeHash:
          description: A unique hash-string identifying SimSage changes to this document.  SimSage
            uses the value to see if the content has changed since last.
          example: 118f6bcd4621d373cade4e832627b4cc
          type: string
        contentHash:
          description: A unique hash-string identifying the content of this document.  SimSage
            uses this value to find exact duplicates.
          example: 098f6bcd4621d373cade4e832627b4f6
          type: string
        sourceId:
          description: the source-id of this crawler (ie. the crawler's id)
          example: 1
          format: int32
          type: integer
        parentUrl:
          description: a related url if there is parentage to be considered for an
            item
          type: string
        acls:
          description: a list of the exact ACLs applying to this document (can be
            empty)
          items:
            $ref: '#/components/schemas/CMDocumentAcl'
          type: array
        metadata:
          additionalProperties:
            description: a series of name values for other metadata values found in
              the container of this document
            example: "{\"file-extension\":\"txt\"}"
            type: string
          description: a series of name values for other metadata values found in
            the container of this document
          example:
            file-extension: txt
          type: object
        numSentences:
          description: the number of sentences in this document.
          format: int32
          type: integer
        numWords:
          description: the total number of words in this document.
          format: int32
          type: integer
        numRelationships:
          description: the total number of relationships in this document.
          format: int32
          type: integer
        binarySize:
          description: the size of the original document's binary in bytes.
          format: int64
          type: integer
        textSize:
          description: the size of the converted document's text in bytes.
          format: int32
          type: integer
        versionList:
          description: list of binary versions of this document
          items:
            $ref: '#/components/schemas/CMDocumentVersion'
          type: array
        noteList:
          description: list of checkout notes about this document
          items:
            $ref: '#/components/schemas/CMDocumentNote'
          type: array
        activityList:
          description: list of activities for the last two months of this document
          items:
            $ref: '#/components/schemas/CMDocumentAudit'
          type: array
        typeDescription:
          description: a description of the type of this document
          example: Portable Network Graphics
          type: string
        filename:
          description: the filename of this document in the DMS system
          example: index.html
          type: string
        folderId:
          description: the folderId of this item in the DMS system
          example: (a guid)
          type: string
      required:
      - acls
      - activityList
      - author
      - binarySize
      - changeHash
      - contentHash
      - converted
      - crawled
      - created
      - documentType
      - filename
      - folderId
      - indexed
      - kbId
      - lastModified
      - metadata
      - noteList
      - numRelationships
      - numSentences
      - numWords
      - organisationId
      - origin
      - parentUrl
      - parsed
      - previewed
      - sourceId
      - textSize
      - title
      - typeDescription
      - uploaded
      - url
      - urlId
      - versionList
      type: object
    CMDocumentAcl:
      description: A document Access Control List (ACL) item.  This item represents
        a user's/group's access to a document (hasAccess or not).
      example:
        access: RW
        acl: e.g. "example@simsage.co.uk" or "domain users"
        isUser: true
        user: true
      properties:
        acl:
          description: "Some acl value, can represent a user's email address or the\
            \ name of a remote security-group."
          example: e.g. "example@simsage.co.uk" or "domain users"
          type: string
        access:
          description: is this ACL allowing access (Read/Write/Delete/Modify (RWDM))
            or denying access (empty)
          example: RW
          type: string
        isUser:
          description: "\"true\" if this a security-user (email address), \"false\"\
            \ if this ACL pertains to a security-group (group name)"
          example: true
          type: boolean
        user:
          type: boolean
          writeOnly: true
      required:
      - access
      - acl
      - isUser
      type: object
    CMDocumentAudit:
      description: An audit record for a document.
      example:
        kbId: kbId
        organisationId: organisationId
        created: 6
        description: something happened
        userId: "1234"
        url: document-1
        email: joe@bloggs.com
      properties:
        organisationId:
          description: the main organisation (its guid id) for this source/crawler
          type: string
        kbId:
          description: "the knowledge-base id of this context item, a guid-string"
          type: string
        url:
          description: The unique URL of a document.
          example: document-1
          type: string
        userId:
          description: The user's id
          example: "1234"
          type: string
        email:
          description: the email address of the user for this audit record
          example: joe@bloggs.com
          type: string
        description:
          description: The description of the audit event
          example: something happened
          type: string
        created:
          description: a unix-timestamp of the creation date-time of this record
          format: int64
          type: integer
      required:
      - created
      - description
      - email
      - kbId
      - organisationId
      - url
      - userId
      type: object
    CMDocumentFolder:
      description: A document folder content item.
      example:
        sourceId: 1
        itemType: dms
        acls:
        - access: RW
          acl: e.g. "example@simsage.co.uk" or "domain users"
          isUser: true
          user: true
        - access: RW
          acl: e.g. "example@simsage.co.uk" or "domain users"
          isUser: true
          user: true
        parentFolderId: parentFolderId
        folderName: folder-1
        urlId: 22
        folderList:
        - null
        - null
        url: /folder-1/document-1
        folderId: folderId
        fileList:
        - sourceId: 1
          metadata:
            file-extension: txt
          organisationId: organisationId
          parentUrl: parentUrl
          numSentences: 3
          acls:
          - access: RW
            acl: e.g. "example@simsage.co.uk" or "domain users"
            isUser: true
            user: true
          - access: RW
            acl: e.g. "example@simsage.co.uk" or "domain users"
            isUser: true
            user: true
          documentType: "many possible values, eg. doc,pdf,html"
          origin: uploaded
          noteList:
          - kbId: kbId
            noteText: example text
            organisationId: organisationId
            created: 1
            noteId: 1
            userId: "1234"
            url: document-1
            email: joe@bloggs.com
          - kbId: kbId
            noteText: example text
            organisationId: organisationId
            created: 1
            noteId: 1
            userId: "1234"
            url: document-1
            email: joe@bloggs.com
          urlId: 1
          title: My little pony.
          uploaded: 6
          versionList:
          - created: 1
            changeHash: 098f6bcd4621d373cade4e832627b4f6
            version: 1
            url: https://server.com/document-1
          - created: 1
            changeHash: 098f6bcd4621d373cade4e832627b4f6
            version: 1
            url: https://server.com/document-1
          activityList:
          - kbId: kbId
            organisationId: organisationId
            created: 6
            description: something happened
            userId: "1234"
            url: document-1
            email: joe@bloggs.com
          - kbId: kbId
            organisationId: organisationId
            created: 6
            description: something happened
            userId: "1234"
            url: document-1
            email: joe@bloggs.com
          kbId: kbId
          textSize: 1
          indexed: 7
          author: John Manyberries
          created: 0
          crawled: 5
          binarySize: 7
          typeDescription: Portable Network Graphics
          url: document-1
          folderId: (a guid)
          contentHash: 098f6bcd4621d373cade4e832627b4f6
          filename: index.html
          converted: 5
          previewed: 9
          numRelationships: 4
          changeHash: 118f6bcd4621d373cade4e832627b4cc
          parsed: 2
          lastModified: 1
          numWords: 2
        - sourceId: 1
          metadata:
            file-extension: txt
          organisationId: organisationId
          parentUrl: parentUrl
          numSentences: 3
          acls:
          - access: RW
            acl: e.g. "example@simsage.co.uk" or "domain users"
            isUser: true
            user: true
          - access: RW
            acl: e.g. "example@simsage.co.uk" or "domain users"
            isUser: true
            user: true
          documentType: "many possible values, eg. doc,pdf,html"
          origin: uploaded
          noteList:
          - kbId: kbId
            noteText: example text
            organisationId: organisationId
            created: 1
            noteId: 1
            userId: "1234"
            url: document-1
            email: joe@bloggs.com
          - kbId: kbId
            noteText: example text
            organisationId: organisationId
            created: 1
            noteId: 1
            userId: "1234"
            url: document-1
            email: joe@bloggs.com
          urlId: 1
          title: My little pony.
          uploaded: 6
          versionList:
          - created: 1
            changeHash: 098f6bcd4621d373cade4e832627b4f6
            version: 1
            url: https://server.com/document-1
          - created: 1
            changeHash: 098f6bcd4621d373cade4e832627b4f6
            version: 1
            url: https://server.com/document-1
          activityList:
          - kbId: kbId
            organisationId: organisationId
            created: 6
            description: something happened
            userId: "1234"
            url: document-1
            email: joe@bloggs.com
          - kbId: kbId
            organisationId: organisationId
            created: 6
            description: something happened
            userId: "1234"
            url: document-1
            email: joe@bloggs.com
          kbId: kbId
          textSize: 1
          indexed: 7
          author: John Manyberries
          created: 0
          crawled: 5
          binarySize: 7
          typeDescription: Portable Network Graphics
          url: document-1
          folderId: (a guid)
          contentHash: 098f6bcd4621d373cade4e832627b4f6
          filename: index.html
          converted: 5
          previewed: 9
          numRelationships: 4
          changeHash: 118f6bcd4621d373cade4e832627b4cc
          parsed: 2
          lastModified: 1
          numWords: 2
      properties:
        sourceId:
          description: the source-id of the owner of this folder
          example: 1
          format: int32
          type: integer
        url:
          description: The unique URL of a document or folder.
          example: /folder-1/document-1
          type: string
        parentFolderId:
          description: The id of the parent folder of this folder.
          type: string
        folderId:
          description: The id of this folder.
          type: string
        urlId:
          description: the internal SimSage id for this url
          example: 22
          format: int32
          type: integer
        folderName:
          description: the display name of the folder
          example: folder-1
          type: string
        itemType:
          description: the type of folder (crawlerType for sources)
          example: dms
          type: string
        folderList:
          description: the folder items in this folder
          items:
            $ref: '#/components/schemas/CMDocumentFolder'
          type: array
        fileList:
          description: the files in this folder
          items:
            $ref: '#/components/schemas/CMDocument'
          type: array
        acls:
          description: the security permissions for this item
          items:
            $ref: '#/components/schemas/CMDocumentAcl'
          type: array
      required:
      - acls
      - fileList
      - folderId
      - folderList
      - folderName
      - itemType
      - parentFolderId
      - sourceId
      - url
      - urlId
      type: object
    CMDocumentNote:
      description: A note attached to a document.
      example:
        kbId: kbId
        noteText: example text
        organisationId: organisationId
        created: 1
        noteId: 1
        userId: "1234"
        url: document-1
        email: joe@bloggs.com
      properties:
        organisationId:
          description: the main organisation (its guid id) for this source/crawler
          type: string
        kbId:
          description: "the knowledge-base id of this context item, a guid-string"
          type: string
        url:
          description: The unique URL of a document.
          example: document-1
          type: string
        noteId:
          description: "The id of the note, starting at 1 note of 0 means create a\
            \ new note"
          example: 1
          format: int32
          type: integer
        noteText:
          description: The text of the note
          example: example text
          type: string
        userId:
          description: The user's id
          example: "1234"
          type: string
        email:
          description: the email address of the user that made the change
          example: joe@bloggs.com
          type: string
        created:
          description: a unix-timestamp of the creation date-time of this record
          format: int64
          type: integer
      required:
      - created
      - email
      - kbId
      - noteId
      - noteText
      - organisationId
      - url
      - userId
      type: object
    CMDocumentVersion:
      description: A version object description for a binary-document.
      example:
        created: 1
        changeHash: 098f6bcd4621d373cade4e832627b4f6
        version: 1
        url: https://server.com/document-1
      properties:
        url:
          description: The unique URL of this document.
          example: https://server.com/document-1
          type: string
        version:
          description: version of this binary
          example: 1
          format: int32
          type: integer
        changeHash:
          description: A unique hash-string identifying SimSage level changes of this
            document.
          example: 098f6bcd4621d373cade4e832627b4f6
          type: string
        created:
          description: a unix-timestamp for the creation of this document version
          format: int64
          type: integer
      required:
      - changeHash
      - created
      - url
      - version
      type: object
    CMDocumentSubscription:
      description: the document subscription
      example:
        kbId: kbId
        sourceId: 1
        isFolder: false
        organisationId: organisationId
        folder: true
        name: document-1
        urlId: 22
        userId: userId
        parentId: parentId
        objectId: objectId
        url: document-1
      properties:
        organisationId:
          description: the main organisation (its guid id) for this source/crawler
          type: string
        kbId:
          description: "the knowledge-base id of this context item, a guid-string"
          type: string
        userId:
          description: "the user's id, a guid"
          type: string
        sourceId:
          description: the source-id of the owner of the url
          example: 1
          format: int32
          type: integer
        parentId:
          description: The parent of a folder or a file (a guid or an empty string
            for a top-level folder)
          type: string
        objectId:
          description: Either a file or a folder ID
          type: string
        url:
          description: The unique URL of a document.
          example: document-1
          type: string
        urlId:
          description: the internal SimSage id for this url
          example: 22
          format: int32
          type: integer
        name:
          description: The name of the folder or file
          example: document-1
          type: string
        isFolder:
          description: is this a subscription to a folder or a file?
          example: false
          type: boolean
        folder:
          type: boolean
          writeOnly: true
      required:
      - isFolder
      - kbId
      - name
      - objectId
      - organisationId
      - parentId
      - sourceId
      - url
      - urlId
      - userId
      type: object
    CMSubscriptions:
      description: A set of items subscribed to.
      example:
        documentList:
        - sourceId: 1
          metadata:
            file-extension: txt
          organisationId: organisationId
          parentUrl: parentUrl
          numSentences: 3
          acls:
          - access: RW
            acl: e.g. "example@simsage.co.uk" or "domain users"
            isUser: true
            user: true
          - access: RW
            acl: e.g. "example@simsage.co.uk" or "domain users"
            isUser: true
            user: true
          documentType: "many possible values, eg. doc,pdf,html"
          origin: uploaded
          noteList:
          - kbId: kbId
            noteText: example text
            organisationId: organisationId
            created: 1
            noteId: 1
            userId: "1234"
            url: document-1
            email: joe@bloggs.com
          - kbId: kbId
            noteText: example text
            organisationId: organisationId
            created: 1
            noteId: 1
            userId: "1234"
            url: document-1
            email: joe@bloggs.com
          urlId: 1
          title: My little pony.
          uploaded: 6
          versionList:
          - created: 1
            changeHash: 098f6bcd4621d373cade4e832627b4f6
            version: 1
            url: https://server.com/document-1
          - created: 1
            changeHash: 098f6bcd4621d373cade4e832627b4f6
            version: 1
            url: https://server.com/document-1
          activityList:
          - kbId: kbId
            organisationId: organisationId
            created: 6
            description: something happened
            userId: "1234"
            url: document-1
            email: joe@bloggs.com
          - kbId: kbId
            organisationId: organisationId
            created: 6
            description: something happened
            userId: "1234"
            url: document-1
            email: joe@bloggs.com
          kbId: kbId
          textSize: 1
          indexed: 7
          author: John Manyberries
          created: 0
          crawled: 5
          binarySize: 7
          typeDescription: Portable Network Graphics
          url: document-1
          folderId: (a guid)
          contentHash: 098f6bcd4621d373cade4e832627b4f6
          filename: index.html
          converted: 5
          previewed: 9
          numRelationships: 4
          changeHash: 118f6bcd4621d373cade4e832627b4cc
          parsed: 2
          lastModified: 1
          numWords: 2
        - sourceId: 1
          metadata:
            file-extension: txt
          organisationId: organisationId
          parentUrl: parentUrl
          numSentences: 3
          acls:
          - access: RW
            acl: e.g. "example@simsage.co.uk" or "domain users"
            isUser: true
            user: true
          - access: RW
            acl: e.g. "example@simsage.co.uk" or "domain users"
            isUser: true
            user: true
          documentType: "many possible values, eg. doc,pdf,html"
          origin: uploaded
          noteList:
          - kbId: kbId
            noteText: example text
            organisationId: organisationId
            created: 1
            noteId: 1
            userId: "1234"
            url: document-1
            email: joe@bloggs.com
          - kbId: kbId
            noteText: example text
            organisationId: organisationId
            created: 1
            noteId: 1
            userId: "1234"
            url: document-1
            email: joe@bloggs.com
          urlId: 1
          title: My little pony.
          uploaded: 6
          versionList:
          - created: 1
            changeHash: 098f6bcd4621d373cade4e832627b4f6
            version: 1
            url: https://server.com/document-1
          - created: 1
            changeHash: 098f6bcd4621d373cade4e832627b4f6
            version: 1
            url: https://server.com/document-1
          activityList:
          - kbId: kbId
            organisationId: organisationId
            created: 6
            description: something happened
            userId: "1234"
            url: document-1
            email: joe@bloggs.com
          - kbId: kbId
            organisationId: organisationId
            created: 6
            description: something happened
            userId: "1234"
            url: document-1
            email: joe@bloggs.com
          kbId: kbId
          textSize: 1
          indexed: 7
          author: John Manyberries
          created: 0
          crawled: 5
          binarySize: 7
          typeDescription: Portable Network Graphics
          url: document-1
          folderId: (a guid)
          contentHash: 098f6bcd4621d373cade4e832627b4f6
          filename: index.html
          converted: 5
          previewed: 9
          numRelationships: 4
          changeHash: 118f6bcd4621d373cade4e832627b4cc
          parsed: 2
          lastModified: 1
          numWords: 2
        folderList:
        - sourceId: 1
          itemType: dms
          acls:
          - access: RW
            acl: e.g. "example@simsage.co.uk" or "domain users"
            isUser: true
            user: true
          - access: RW
            acl: e.g. "example@simsage.co.uk" or "domain users"
            isUser: true
            user: true
          parentFolderId: parentFolderId
          folderName: folder-1
          urlId: 22
          folderList:
          - null
          - null
          url: /folder-1/document-1
          folderId: folderId
          fileList:
          - sourceId: 1
            metadata:
              file-extension: txt
            organisationId: organisationId
            parentUrl: parentUrl
            numSentences: 3
            acls:
            - access: RW
              acl: e.g. "example@simsage.co.uk" or "domain users"
              isUser: true
              user: true
            - access: RW
              acl: e.g. "example@simsage.co.uk" or "domain users"
              isUser: true
              user: true
            documentType: "many possible values, eg. doc,pdf,html"
            origin: uploaded
            noteList:
            - kbId: kbId
              noteText: example text
              organisationId: organisationId
              created: 1
              noteId: 1
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            - kbId: kbId
              noteText: example text
              organisationId: organisationId
              created: 1
              noteId: 1
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            urlId: 1
            title: My little pony.
            uploaded: 6
            versionList:
            - created: 1
              changeHash: 098f6bcd4621d373cade4e832627b4f6
              version: 1
              url: https://server.com/document-1
            - created: 1
              changeHash: 098f6bcd4621d373cade4e832627b4f6
              version: 1
              url: https://server.com/document-1
            activityList:
            - kbId: kbId
              organisationId: organisationId
              created: 6
              description: something happened
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            - kbId: kbId
              organisationId: organisationId
              created: 6
              description: something happened
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            kbId: kbId
            textSize: 1
            indexed: 7
            author: John Manyberries
            created: 0
            crawled: 5
            binarySize: 7
            typeDescription: Portable Network Graphics
            url: document-1
            folderId: (a guid)
            contentHash: 098f6bcd4621d373cade4e832627b4f6
            filename: index.html
            converted: 5
            previewed: 9
            numRelationships: 4
            changeHash: 118f6bcd4621d373cade4e832627b4cc
            parsed: 2
            lastModified: 1
            numWords: 2
          - sourceId: 1
            metadata:
              file-extension: txt
            organisationId: organisationId
            parentUrl: parentUrl
            numSentences: 3
            acls:
            - access: RW
              acl: e.g. "example@simsage.co.uk" or "domain users"
              isUser: true
              user: true
            - access: RW
              acl: e.g. "example@simsage.co.uk" or "domain users"
              isUser: true
              user: true
            documentType: "many possible values, eg. doc,pdf,html"
            origin: uploaded
            noteList:
            - kbId: kbId
              noteText: example text
              organisationId: organisationId
              created: 1
              noteId: 1
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            - kbId: kbId
              noteText: example text
              organisationId: organisationId
              created: 1
              noteId: 1
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            urlId: 1
            title: My little pony.
            uploaded: 6
            versionList:
            - created: 1
              changeHash: 098f6bcd4621d373cade4e832627b4f6
              version: 1
              url: https://server.com/document-1
            - created: 1
              changeHash: 098f6bcd4621d373cade4e832627b4f6
              version: 1
              url: https://server.com/document-1
            activityList:
            - kbId: kbId
              organisationId: organisationId
              created: 6
              description: something happened
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            - kbId: kbId
              organisationId: organisationId
              created: 6
              description: something happened
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            kbId: kbId
            textSize: 1
            indexed: 7
            author: John Manyberries
            created: 0
            crawled: 5
            binarySize: 7
            typeDescription: Portable Network Graphics
            url: document-1
            folderId: (a guid)
            contentHash: 098f6bcd4621d373cade4e832627b4f6
            filename: index.html
            converted: 5
            previewed: 9
            numRelationships: 4
            changeHash: 118f6bcd4621d373cade4e832627b4cc
            parsed: 2
            lastModified: 1
            numWords: 2
        - sourceId: 1
          itemType: dms
          acls:
          - access: RW
            acl: e.g. "example@simsage.co.uk" or "domain users"
            isUser: true
            user: true
          - access: RW
            acl: e.g. "example@simsage.co.uk" or "domain users"
            isUser: true
            user: true
          parentFolderId: parentFolderId
          folderName: folder-1
          urlId: 22
          folderList:
          - null
          - null
          url: /folder-1/document-1
          folderId: folderId
          fileList:
          - sourceId: 1
            metadata:
              file-extension: txt
            organisationId: organisationId
            parentUrl: parentUrl
            numSentences: 3
            acls:
            - access: RW
              acl: e.g. "example@simsage.co.uk" or "domain users"
              isUser: true
              user: true
            - access: RW
              acl: e.g. "example@simsage.co.uk" or "domain users"
              isUser: true
              user: true
            documentType: "many possible values, eg. doc,pdf,html"
            origin: uploaded
            noteList:
            - kbId: kbId
              noteText: example text
              organisationId: organisationId
              created: 1
              noteId: 1
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            - kbId: kbId
              noteText: example text
              organisationId: organisationId
              created: 1
              noteId: 1
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            urlId: 1
            title: My little pony.
            uploaded: 6
            versionList:
            - created: 1
              changeHash: 098f6bcd4621d373cade4e832627b4f6
              version: 1
              url: https://server.com/document-1
            - created: 1
              changeHash: 098f6bcd4621d373cade4e832627b4f6
              version: 1
              url: https://server.com/document-1
            activityList:
            - kbId: kbId
              organisationId: organisationId
              created: 6
              description: something happened
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            - kbId: kbId
              organisationId: organisationId
              created: 6
              description: something happened
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            kbId: kbId
            textSize: 1
            indexed: 7
            author: John Manyberries
            created: 0
            crawled: 5
            binarySize: 7
            typeDescription: Portable Network Graphics
            url: document-1
            folderId: (a guid)
            contentHash: 098f6bcd4621d373cade4e832627b4f6
            filename: index.html
            converted: 5
            previewed: 9
            numRelationships: 4
            changeHash: 118f6bcd4621d373cade4e832627b4cc
            parsed: 2
            lastModified: 1
            numWords: 2
          - sourceId: 1
            metadata:
              file-extension: txt
            organisationId: organisationId
            parentUrl: parentUrl
            numSentences: 3
            acls:
            - access: RW
              acl: e.g. "example@simsage.co.uk" or "domain users"
              isUser: true
              user: true
            - access: RW
              acl: e.g. "example@simsage.co.uk" or "domain users"
              isUser: true
              user: true
            documentType: "many possible values, eg. doc,pdf,html"
            origin: uploaded
            noteList:
            - kbId: kbId
              noteText: example text
              organisationId: organisationId
              created: 1
              noteId: 1
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            - kbId: kbId
              noteText: example text
              organisationId: organisationId
              created: 1
              noteId: 1
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            urlId: 1
            title: My little pony.
            uploaded: 6
            versionList:
            - created: 1
              changeHash: 098f6bcd4621d373cade4e832627b4f6
              version: 1
              url: https://server.com/document-1
            - created: 1
              changeHash: 098f6bcd4621d373cade4e832627b4f6
              version: 1
              url: https://server.com/document-1
            activityList:
            - kbId: kbId
              organisationId: organisationId
              created: 6
              description: something happened
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            - kbId: kbId
              organisationId: organisationId
              created: 6
              description: something happened
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            kbId: kbId
            textSize: 1
            indexed: 7
            author: John Manyberries
            created: 0
            crawled: 5
            binarySize: 7
            typeDescription: Portable Network Graphics
            url: document-1
            folderId: (a guid)
            contentHash: 098f6bcd4621d373cade4e832627b4f6
            filename: index.html
            converted: 5
            previewed: 9
            numRelationships: 4
            changeHash: 118f6bcd4621d373cade4e832627b4cc
            parsed: 2
            lastModified: 1
            numWords: 2
      properties:
        folderList:
          description: list of folders subscribed to
          items:
            $ref: '#/components/schemas/CMDocumentFolder'
          type: array
        documentList:
          description: list of documents subscribed to
          items:
            $ref: '#/components/schemas/CMDocument'
          type: array
      required:
      - documentList
      - folderList
      type: object
    CMAddSourceFolder:
      description: the source-folder add object
      example:
        kbId: kbId
        organisationId: organisationId
        acls:
        - access: RW
          acl: e.g. "example@simsage.co.uk" or "domain users"
          isUser: true
          user: true
        - access: RW
          acl: e.g. "example@simsage.co.uk" or "domain users"
          isUser: true
          user: true
        sourceName: source-folder 1
      properties:
        organisationId:
          description: the main organisation (its guid id) for this source/crawler
          type: string
        kbId:
          description: "the knowledge-base id of this context item, a guid-string"
          type: string
        sourceName:
          description: the source-folder's new name.
          example: source-folder 1
          type: string
        acls:
          description: the initial ACLs for this source-folder.
          items:
            $ref: '#/components/schemas/CMDocumentAcl'
          type: array
      required:
      - acls
      - kbId
      - organisationId
      - sourceName
      type: object
    CMDocumentLock:
      description: the document checkout request
      example:
        kbId: kbId
        sourceId: 1
        organisationId: organisationId
        checkoutDate: 0
        name: name
        urlId: 22
        userId: userId
        url: document-1
      properties:
        organisationId:
          description: the main organisation (its guid id) for this source/crawler
          type: string
        kbId:
          description: "the knowledge-base id of this context item, a guid-string"
          type: string
        url:
          description: The unique URL of a document.
          example: document-1
          type: string
        urlId:
          description: the internal SimSage id for this url
          example: 22
          format: int32
          type: integer
        sourceId:
          description: the source-id of the owner of the url
          example: 1
          format: int32
          type: integer
        userId:
          description: "the user's id, a guid"
          type: string
        name:
          description: the name of the checkout folder/file object
          type: string
        checkoutDate:
          description: a unix-timestamp for the creation of this checkout object
          format: int64
          type: integer
      required:
      - checkoutDate
      - kbId
      - name
      - organisationId
      - sourceId
      - url
      - urlId
      - userId
      type: object
    CMDocumentHashTag:
      description: "the document hash-tag object.  A list of hash-tags.  Each hash-tag\
        \ must start with a '#' and only contain a..z,A..Z.  Minimum size 3 characters,\
        \ maximum size 50 characters."
      example:
        kbId: kbId
        organisationId: organisationId
        url: document-1
        hashTagList:
        - hashTagList
        - hashTagList
      properties:
        organisationId:
          description: the main organisation (its guid id) for this source/crawler
          type: string
        kbId:
          description: "the knowledge-base id of this context item, a guid-string"
          type: string
        url:
          description: The unique URL of a document.
          example: document-1
          type: string
        hashTagList:
          description: a list of hash-tags for this document
          items:
            description: a list of hash-tags for this document
            type: string
          type: array
      required:
      - hashTagList
      - kbId
      - organisationId
      - url
      type: object
    CMAddFolder:
      description: the folder add object
      example:
        kbId: kbId
        sourceId: 1
        organisationId: organisationId
        prevUrl: prevUrl
        pageSize: 25
        folderName: folder 1
        folderId: folderId
      properties:
        organisationId:
          description: the main organisation (its guid id) for this source/crawler
          type: string
        kbId:
          description: "the knowledge-base id of this context item, a guid-string"
          type: string
        sourceId:
          description: the source-id of the owner of the url
          example: 1
          format: int32
          type: integer
        folderId:
          description: the id of the folder.
          type: string
        folderName:
          description: the folder's new name.
          example: folder 1
          type: string
        prevUrl:
          description: "pagination, the previous last URL for the page-set (null is\
            \ first page)"
          type: string
        pageSize:
          description: page-size for a paginated set
          example: 25
          format: int32
          type: integer
      required:
      - folderId
      - folderName
      - kbId
      - organisationId
      - pageSize
      - sourceId
      type: object
    CMDocumentBookmark:
      description: A bookmark to a document or folder.
      example:
        kbId: kbId
        sourceId: 1
        isFolder: false
        organisationId: organisationId
        folder: true
        urlId: 22
        userId: userId
        url: document-1
      properties:
        organisationId:
          description: the main organisation (its guid id) for this source/crawler
          type: string
        kbId:
          description: "the knowledge-base id of this context item, a guid-string"
          type: string
        userId:
          description: "the user's id, a guid"
          type: string
        sourceId:
          description: the source-id of the owner of the url
          example: 1
          format: int32
          type: integer
        url:
          description: The unique URL of a document.
          example: document-1
          type: string
        urlId:
          description: the internal SimSage id for this url
          example: 22
          format: int32
          type: integer
        isFolder:
          description: is this a bookmark to a folder or a file?
          example: false
          type: boolean
        folder:
          type: boolean
          writeOnly: true
      required:
      - isFolder
      - kbId
      - organisationId
      - sourceId
      - url
      - urlId
      - userId
      type: object
    DocumentBookmark:
      example:
        sourceId: 0
        isFolder: true
        folder: true
        urlId: 6
        userId: userId
        url: url
      properties:
        userId:
          type: string
        sourceId:
          format: int32
          type: integer
        url:
          type: string
        urlId:
          format: int32
          type: integer
        isFolder:
          type: boolean
        folder:
          type: boolean
          writeOnly: true
      required:
      - isFolder
      - sourceId
      - url
      - urlId
      - userId
      type: object
    CMUpdateACLs:
      description: the ACLs for the object
      example:
        kbId: kbId
        sourceId: 1
        itemType: source
        organisationId: organisationId
        acls:
        - access: RW
          acl: e.g. "example@simsage.co.uk" or "domain users"
          isUser: true
          user: true
        - access: RW
          acl: e.g. "example@simsage.co.uk" or "domain users"
          isUser: true
          user: true
        applyToChildren: true
        parentId: parentId
        objectId: objectId
      properties:
        organisationId:
          description: the main organisation (its guid id) for this source/crawler
          type: string
        kbId:
          description: "the knowledge-base id of this context item, a guid-string"
          type: string
        sourceId:
          description: the source-id of the owner of the url
          example: 1
          format: int32
          type: integer
        parentId:
          description: the parent id of the update to update
          type: string
        objectId:
          description: the id of the update to update
          type: string
        itemType:
          description: "the type of item to update, one of source, file or folder"
          example: source
          type: string
        acls:
          description: the initial ACLs for this source-folder.
          items:
            $ref: '#/components/schemas/CMDocumentAcl'
          type: array
        applyToChildren:
          description: apply these ACLs to any children of this object?
          type: boolean
      required:
      - acls
      - applyToChildren
      - itemType
      - kbId
      - objectId
      - organisationId
      - parentId
      - sourceId
      type: object
    CMGdprSearchDetails:
      example:
        firstName: firstName
        lastName: lastName
        otherIdentifiers:
        - identifier: identifier
          identifierType: CREDIT_CARD_NUMBER
        - identifier: identifier
          identifierType: CREDIT_CARD_NUMBER
        documentTitle: documentTitle
      properties:
        firstName:
          type: string
        lastName:
          type: string
        documentTitle:
          type: string
        otherIdentifiers:
          items:
            $ref: '#/components/schemas/Identifier'
          type: array
      required:
      - documentTitle
      - firstName
      - lastName
      - otherIdentifiers
      type: object
    CMUpdateDocumentSet:
      example:
        kbId: kbId
        jobId: jobId
        async: true
        organisationId: organisationId
        returnResult: true
        projectDetails:
          createdBy: createdBy
          created: 2000-01-23T04:56:07.000+00:00
          lastResultUpdate: 2000-01-23T04:56:07.000+00:00
          lastModifiedBy: lastModifiedBy
          projectType: FREESTYLE
          searchDetails:
            firstName: firstName
            lastName: lastName
            otherIdentifiers:
            - identifier: identifier
              identifierType: CREDIT_CARD_NUMBER
            - identifier: identifier
              identifierType: CREDIT_CARD_NUMBER
            documentTitle: documentTitle
          id: id
          lastModified: 2000-01-23T04:56:07.000+00:00
          status: NEW
        isReturnResult: true
        returnAddress: returnAddress
        errorStr: errorStr
        timeOut: 0
      properties:
        organisationId:
          type: string
        kbId:
          type: string
        projectDetails:
          $ref: '#/components/schemas/GdprProject'
        jobId:
          type: string
        returnAddress:
          type: string
        errorStr:
          type: string
        timeOut:
          format: int64
          type: integer
        async:
          type: boolean
        isReturnResult:
          type: boolean
        returnResult:
          type: boolean
          writeOnly: true
      required:
      - async
      - errorStr
      - isReturnResult
      - jobId
      - kbId
      - organisationId
      - projectDetails
      - returnAddress
      - timeOut
      type: object
    GdprProject:
      example:
        createdBy: createdBy
        created: 2000-01-23T04:56:07.000+00:00
        lastResultUpdate: 2000-01-23T04:56:07.000+00:00
        lastModifiedBy: lastModifiedBy
        projectType: FREESTYLE
        searchDetails:
          firstName: firstName
          lastName: lastName
          otherIdentifiers:
          - identifier: identifier
            identifierType: CREDIT_CARD_NUMBER
          - identifier: identifier
            identifierType: CREDIT_CARD_NUMBER
          documentTitle: documentTitle
        id: id
        lastModified: 2000-01-23T04:56:07.000+00:00
        status: NEW
      properties:
        id:
          type: string
        createdBy:
          type: string
        lastModifiedBy:
          type: string
        created:
          format: date-time
          type: string
        lastModified:
          format: date-time
          type: string
        lastResultUpdate:
          format: date-time
          type: string
        projectType:
          enum:
          - FREESTYLE
          - RIGHT_TO_BE_FORGOTTEN_REQUEST
          - DATA_ACCESS_REQUEST
          type: string
        status:
          enum:
          - NEW
          - IN_PROGRESS
          - COMPLETED
          type: string
        searchDetails:
          $ref: '#/components/schemas/CMGdprSearchDetails'
      required:
      - created
      - createdBy
      - lastModified
      - lastModifiedBy
      - projectType
      - searchDetails
      - status
      type: object
    Identifier:
      example:
        identifier: identifier
        identifierType: CREDIT_CARD_NUMBER
      properties:
        identifierType:
          enum:
          - CREDIT_CARD_NUMBER
          - ACCOUNT_NUMBER
          - POLICY_NUMBER
          type: string
        identifier:
          type: string
      required:
      - identifier
      - identifierType
      type: object
    CMExportRedactedDocument:
      example:
        kbId: kbId
        organisationId: organisationId
        exportNativeFormat: true
        projectId: projectId
        url: url
      properties:
        organisationId:
          type: string
        kbId:
          type: string
        projectId:
          type: string
        url:
          type: string
        exportNativeFormat:
          type: boolean
      required:
      - exportNativeFormat
      - kbId
      - organisationId
      - projectId
      - url
      type: object
    CMCreateGdprProject:
      example:
        kbId: kbId
        organisationId: organisationId
        projectDetails:
          createdBy: createdBy
          created: 2000-01-23T04:56:07.000+00:00
          lastResultUpdate: 2000-01-23T04:56:07.000+00:00
          lastModifiedBy: lastModifiedBy
          projectType: FREESTYLE
          searchDetails:
            firstName: firstName
            lastName: lastName
            otherIdentifiers:
            - identifier: identifier
              identifierType: CREDIT_CARD_NUMBER
            - identifier: identifier
              identifierType: CREDIT_CARD_NUMBER
            documentTitle: documentTitle
          id: id
          lastModified: 2000-01-23T04:56:07.000+00:00
          status: NEW
      properties:
        organisationId:
          type: string
        kbId:
          type: string
        projectDetails:
          $ref: '#/components/schemas/GdprProject'
      required:
      - kbId
      - organisationId
      type: object
    CMLocatedRedaction:
      example:
        sliceId: sliceId
        bottom: 5.962134
        redactionType: redactionType
        queryId: 0
        redactionKey: redactionKey
        left: 1.4658129
        documentKey: documentKey
        isRedacted: true
        width: 5.637377
        page: 6
        projectId: projectId
        word: word
        height: 2.302136
      properties:
        projectId:
          type: string
        sliceId:
          type: string
        documentKey:
          type: string
        redactionType:
          type: string
        queryId:
          format: int32
          type: integer
        word:
          type: string
        redactionKey:
          type: string
        isRedacted:
          type: boolean
        page:
          format: int32
          type: integer
        left:
          format: float
          type: number
        bottom:
          format: float
          type: number
        width:
          format: float
          type: number
        height:
          format: float
          type: number
      required:
      - bottom
      - documentKey
      - height
      - isRedacted
      - left
      - page
      - projectId
      - redactionType
      - sliceId
      - width
      type: object
    CMUpdateRedactions:
      example:
        organisationId: organisationId
        sliceId: sliceId
        nextStatus: nextStatus
        redactions:
        - sliceId: sliceId
          bottom: 5.962134
          redactionType: redactionType
          queryId: 0
          redactionKey: redactionKey
          left: 1.4658129
          documentKey: documentKey
          isRedacted: true
          width: 5.637377
          page: 6
          projectId: projectId
          word: word
          height: 2.302136
        - sliceId: sliceId
          bottom: 5.962134
          redactionType: redactionType
          queryId: 0
          redactionKey: redactionKey
          left: 1.4658129
          documentKey: documentKey
          isRedacted: true
          width: 5.637377
          page: 6
          projectId: projectId
          word: word
          height: 2.302136
        documentKey: documentKey
        projectId: projectId
      properties:
        organisationId:
          type: string
        projectId:
          type: string
        sliceId:
          type: string
        documentKey:
          type: string
        nextStatus:
          type: string
        redactions:
          items:
            $ref: '#/components/schemas/CMLocatedRedaction'
          type: array
      required:
      - documentKey
      - nextStatus
      - organisationId
      - projectId
      - redactions
      - sliceId
      type: object
    CMUpdateDocumentStatus:
      example:
        organisationId: organisationId
        sliceId: sliceId
        nextStatus: nextStatus
        documentKey: documentKey
        projectId: projectId
      properties:
        organisationId:
          type: string
        projectId:
          type: string
        sliceId:
          type: string
        documentKey:
          type: string
        nextStatus:
          type: string
      required:
      - documentKey
      - nextStatus
      - organisationId
      - projectId
      - sliceId
      type: object
    CMStartProject:
      example:
        organisationId: organisationId
        taskId: taskId
      properties:
        taskId:
          type: string
        organisationId:
          type: string
      required:
      - organisationId
      - taskId
      type: object
    CMSlicedDocumentFilter:
      example:
        sortDirection: 1
        sortColumn: sortColumn
        selectedConfidences:
        - selectedConfidences
        - selectedConfidences
        pageSize: 6
        statuses:
        - statuses
        - statuses
        selectedUsers:
        - selectedUsers
        - selectedUsers
        page: 0
        selectedSources:
        - selectedSources
        - selectedSources
      properties:
        page:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
        sortDirection:
          format: int32
          type: integer
        sortColumn:
          type: string
        statuses:
          items:
            type: string
          type: array
        selectedUsers:
          items:
            type: string
          type: array
        selectedSources:
          items:
            type: string
          type: array
        selectedConfidences:
          items:
            type: string
          type: array
      required:
      - page
      - pageSize
      - selectedConfidences
      - selectedSources
      - selectedUsers
      - sortColumn
      - sortDirection
      - statuses
      type: object
    CMSlicedDocumentRequest:
      example:
        filter:
          sortDirection: 1
          sortColumn: sortColumn
          selectedConfidences:
          - selectedConfidences
          - selectedConfidences
          pageSize: 6
          statuses:
          - statuses
          - statuses
          selectedUsers:
          - selectedUsers
          - selectedUsers
          page: 0
          selectedSources:
          - selectedSources
          - selectedSources
        organisationId: organisationId
        sliceId: sliceId
        taskId: taskId
      properties:
        organisationId:
          type: string
        taskId:
          type: string
        sliceId:
          type: string
        filter:
          $ref: '#/components/schemas/CMSlicedDocumentFilter'
      required:
      - filter
      - organisationId
      - sliceId
      - taskId
      type: object
    CMPagedResultsCMSlicedDocument:
      example:
        total: 0
        results:
        - extension: extension
          sliceId: sliceId
          canClaim: true
          confidence: 5
          count: 1
          source: source
          title: title
          folderId: folderId
          size: 6
          ownsItem: true
          documentKey: documentKey
          projectId: projectId
          assignedUser: assignedUser
          status: status
        - extension: extension
          sliceId: sliceId
          canClaim: true
          confidence: 5
          count: 1
          source: source
          title: title
          folderId: folderId
          size: 6
          ownsItem: true
          documentKey: documentKey
          projectId: projectId
          assignedUser: assignedUser
          status: status
      properties:
        total:
          format: int64
          type: integer
        results:
          items:
            $ref: '#/components/schemas/CMSlicedDocument'
          type: array
      required:
      - results
      - total
      type: object
    CMSlicedDocument:
      example:
        extension: extension
        sliceId: sliceId
        canClaim: true
        confidence: 5
        count: 1
        source: source
        title: title
        folderId: folderId
        size: 6
        ownsItem: true
        documentKey: documentKey
        projectId: projectId
        assignedUser: assignedUser
        status: status
      properties:
        projectId:
          type: string
        sliceId:
          type: string
        source:
          type: string
        extension:
          type: string
        documentKey:
          type: string
        title:
          type: string
        size:
          format: int64
          type: integer
        folderId:
          type: string
        count:
          format: int64
          type: integer
        confidence:
          format: int32
          type: integer
        status:
          type: string
        assignedUser:
          type: string
        ownsItem:
          type: boolean
        canClaim:
          type: boolean
      required:
      - assignedUser
      - canClaim
      - confidence
      - count
      - documentKey
      - extension
      - folderId
      - ownsItem
      - projectId
      - size
      - sliceId
      - source
      - status
      - title
      type: object
    CMSlicedDocumentListAndTotals:
      example:
        pagedResults:
          total: 0
          results:
          - extension: extension
            sliceId: sliceId
            canClaim: true
            confidence: 5
            count: 1
            source: source
            title: title
            folderId: folderId
            size: 6
            ownsItem: true
            documentKey: documentKey
            projectId: projectId
            assignedUser: assignedUser
            status: status
          - extension: extension
            sliceId: sliceId
            canClaim: true
            confidence: 5
            count: 1
            source: source
            title: title
            folderId: folderId
            size: 6
            ownsItem: true
            documentKey: documentKey
            projectId: projectId
            assignedUser: assignedUser
            status: status
        sourceMap:
          key: sourceMap
        allDocs: 5
        completed: 2
        userMap:
          key: userMap
      properties:
        pagedResults:
          $ref: '#/components/schemas/CMPagedResultsCMSlicedDocument'
        allDocs:
          format: int64
          type: integer
        completed:
          format: int64
          type: integer
        sourceMap:
          additionalProperties:
            type: string
          type: object
        userMap:
          additionalProperties:
            type: string
          type: object
      required:
      - allDocs
      - completed
      - pagedResults
      - sourceMap
      - userMap
      type: object
    CMCompoundQuery:
      allOf:
      - $ref: '#/components/schemas/CMSliceQueryDefinition'
      - properties:
          type:
            type: string
          components:
            items:
              $ref: '#/components/schemas/CMSliceQueryDefinition'
            type: array
        type: object
      required:
      - components
      - type
      type: object
    CMQueryToken:
      example:
        type: type
        value: value
      properties:
        type:
          type: string
        value:
          type: string
      required:
      - type
      - value
      type: object
    CMSetSliceDefinitions:
      example:
        slices:
        - query: null
          name: name
          description: description
          action: action
        - query: null
          name: name
          description: description
          action: action
        organisationId: organisationId
        taskId: taskId
      properties:
        organisationId:
          type: string
        taskId:
          type: string
        slices:
          items:
            $ref: '#/components/schemas/CMSliceConfig'
          type: array
      required:
      - organisationId
      - slices
      - taskId
      type: object
    CMSimpleQuery:
      allOf:
      - $ref: '#/components/schemas/CMSliceQueryDefinition'
      - properties:
          type:
            type: string
          tokenList:
            items:
              $ref: '#/components/schemas/CMQueryToken'
            type: array
        type: object
      required:
      - tokenList
      - type
      type: object
    CMSliceConfig:
      example:
        query: null
        name: name
        description: description
        action: action
      properties:
        name:
          type: string
        description:
          type: string
        action:
          type: string
        query:
          $ref: '#/components/schemas/CMSliceConfig_query'
      required:
      - action
      - description
      - name
      - query
      type: object
    CMSliceQueryDefinition:
      discriminator:
        propertyName: type
      properties:
        type:
          type: string
      required:
      - type
      type: object
    CMFilter:
      example:
        knowledgeBase: knowledgeBase
        sources:
        - sources
        - sources
        filetypes:
        - filetypes
        - filetypes
      properties:
        knowledgeBase:
          type: string
        filetypes:
          items:
            type: string
          type: array
        sources:
          items:
            type: string
          type: array
      required:
      - knowledgeBase
      type: object
    CMKeyedSearchTerm:
      example:
        search: true
        rowRequired: true
        redact: true
        searchDisabled: true
        redactionDisabled: true
        value: value
        subTerms:
        - type: type
          value: value
          key: key
        - type: type
          value: value
          key: key
        key: key
      properties:
        key:
          type: string
        redact:
          type: boolean
        redactionDisabled:
          type: boolean
        rowRequired:
          type: boolean
        search:
          type: boolean
        searchDisabled:
          type: boolean
        value:
          type: string
        subTerms:
          items:
            $ref: '#/components/schemas/CMSearchSubTerm'
          type: array
      required:
      - key
      - redact
      - redactionDisabled
      - rowRequired
      - search
      - searchDisabled
      - subTerms
      - value
      type: object
    CMProjectDefinition:
      example:
        semanticTerms:
        - search: true
          redact: true
          caption: caption
          searchDisabled: true
          redactionDisabled: true
          key: key
        - search: true
          redact: true
          caption: caption
          searchDisabled: true
          redactionDisabled: true
          key: key
        organisationId: organisationId
        validationResult:
          key: true
        keyedSearchTerms:
        - search: true
          rowRequired: true
          redact: true
          searchDisabled: true
          redactionDisabled: true
          value: value
          subTerms:
          - type: type
            value: value
            key: key
          - type: type
            value: value
            key: key
          key: key
        - search: true
          rowRequired: true
          redact: true
          searchDisabled: true
          redactionDisabled: true
          value: value
          subTerms:
          - type: type
            value: value
            key: key
          - type: type
            value: value
            key: key
          key: key
        projectFrame:
          narrative: narrative
          projectType: projectType
          title: title
        filters:
          knowledgeBase: knowledgeBase
          sources:
          - sources
          - sources
          filetypes:
          - filetypes
          - filetypes
        projectId: projectId
        taskId: taskId
      properties:
        projectId:
          type: string
        taskId:
          type: string
        organisationId:
          type: string
        projectFrame:
          $ref: '#/components/schemas/CMProjectFrame'
        keyedSearchTerms:
          items:
            $ref: '#/components/schemas/CMKeyedSearchTerm'
          type: array
        semanticTerms:
          items:
            $ref: '#/components/schemas/CMSemanticTerm'
          type: array
        filters:
          $ref: '#/components/schemas/CMFilter'
        validationResult:
          additionalProperties:
            type: boolean
          type: object
      required:
      - filters
      - organisationId
      - projectFrame
      type: object
    CMProjectFrame:
      example:
        narrative: narrative
        projectType: projectType
        title: title
      properties:
        projectType:
          type: string
        title:
          type: string
        narrative:
          type: string
      required:
      - narrative
      - projectType
      - title
      type: object
    CMSearchSubTerm:
      example:
        type: type
        value: value
        key: key
      properties:
        key:
          type: string
        value:
          type: string
        type:
          type: string
      required:
      - key
      - type
      - value
      type: object
    CMSemanticTerm:
      example:
        search: true
        redact: true
        caption: caption
        searchDisabled: true
        redactionDisabled: true
        key: key
      properties:
        key:
          type: string
        redact:
          type: boolean
        redactionDisabled:
          type: boolean
        search:
          type: boolean
        searchDisabled:
          type: boolean
        caption:
          type: string
      required:
      - caption
      - key
      - redact
      - redactionDisabled
      - search
      - searchDisabled
      type: object
    CMCreatedProject:
      example:
        projectId: projectId
        defineProjectTaskId: defineProjectTaskId
      properties:
        defineProjectTaskId:
          type: string
        projectId:
          type: string
      required:
      - defineProjectTaskId
      - projectId
      type: object
    CMQueueFilter:
      example:
        sortDirection: 1
        sortColumn: sortColumn
        organisationId: organisationId
        showAll: true
        pageSize: 6
        page: 0
      properties:
        organisationId:
          type: string
        page:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
        sortDirection:
          format: int32
          type: integer
        sortColumn:
          type: string
        showAll:
          type: boolean
      required:
      - organisationId
      - page
      - pageSize
      - showAll
      - sortColumn
      - sortDirection
      type: object
    CMPagedQueueItems:
      example:
        total: 0
        results:
        - dateTaskCreated: 2000-01-23T04:56:07.000+00:00
          organisationId: organisationId
          potentialUsers:
          - potentialUsers
          - potentialUsers
          excludedUsers:
          - excludedUsers
          - excludedUsers
          potentialGroups:
          - potentialGroups
          - potentialGroups
          canClaim: true
          projectType: projectType
          lockType: lockType
          taskScreen: taskScreen
          taskType: taskType
          ownsItem: true
          processId: processId
          projectCreated: 2000-01-23T04:56:07.000+00:00
          canRelease: true
          taskName: taskName
          projectId: projectId
          assignedUser: assignedUser
          taskId: taskId
          projectTitle: projectTitle
        - dateTaskCreated: 2000-01-23T04:56:07.000+00:00
          organisationId: organisationId
          potentialUsers:
          - potentialUsers
          - potentialUsers
          excludedUsers:
          - excludedUsers
          - excludedUsers
          potentialGroups:
          - potentialGroups
          - potentialGroups
          canClaim: true
          projectType: projectType
          lockType: lockType
          taskScreen: taskScreen
          taskType: taskType
          ownsItem: true
          processId: processId
          projectCreated: 2000-01-23T04:56:07.000+00:00
          canRelease: true
          taskName: taskName
          projectId: projectId
          assignedUser: assignedUser
          taskId: taskId
          projectTitle: projectTitle
      properties:
        total:
          format: int64
          type: integer
        results:
          items:
            $ref: '#/components/schemas/CMQueueItem'
          type: array
      required:
      - results
      - total
      type: object
    CMQueueItem:
      example:
        dateTaskCreated: 2000-01-23T04:56:07.000+00:00
        organisationId: organisationId
        potentialUsers:
        - potentialUsers
        - potentialUsers
        excludedUsers:
        - excludedUsers
        - excludedUsers
        potentialGroups:
        - potentialGroups
        - potentialGroups
        canClaim: true
        projectType: projectType
        lockType: lockType
        taskScreen: taskScreen
        taskType: taskType
        ownsItem: true
        processId: processId
        projectCreated: 2000-01-23T04:56:07.000+00:00
        canRelease: true
        taskName: taskName
        projectId: projectId
        assignedUser: assignedUser
        taskId: taskId
        projectTitle: projectTitle
      properties:
        organisationId:
          type: string
        processId:
          type: string
        projectId:
          type: string
        taskId:
          type: string
        projectType:
          type: string
        taskType:
          type: string
        taskScreen:
          type: string
        projectCreated:
          format: date-time
          type: string
        dateTaskCreated:
          format: date-time
          type: string
        projectTitle:
          type: string
        taskName:
          type: string
        assignedUser:
          type: string
        potentialUsers:
          items:
            type: string
          type: array
        excludedUsers:
          items:
            type: string
          type: array
        potentialGroups:
          items:
            type: string
          type: array
        ownsItem:
          type: boolean
        canClaim:
          type: boolean
        canRelease:
          type: boolean
        lockType:
          type: string
      required:
      - assignedUser
      - canClaim
      - canRelease
      - dateTaskCreated
      - excludedUsers
      - lockType
      - organisationId
      - ownsItem
      - potentialGroups
      - potentialUsers
      - processId
      - projectCreated
      - projectId
      - projectTitle
      - projectType
      - taskId
      - taskName
      - taskScreen
      - taskType
      type: object
    CMRemoveSliceDocument:
      example:
        organisationId: organisationId
        documentKey: documentKey
        taskId: taskId
      properties:
        taskId:
          type: string
        organisationId:
          type: string
        documentKey:
          type: string
      required:
      - documentKey
      - organisationId
      - taskId
      type: object
    CMRedactionDetails:
      example:
        mode: mode
        organisationId: organisationId
        redactions:
        - sliceId: sliceId
          bottom: 5.962134
          redactionType: redactionType
          queryId: 0
          redactionKey: redactionKey
          left: 1.4658129
          documentKey: documentKey
          isRedacted: true
          width: 5.637377
          page: 6
          projectId: projectId
          word: word
          height: 2.302136
        - sliceId: sliceId
          bottom: 5.962134
          redactionType: redactionType
          queryId: 0
          redactionKey: redactionKey
          left: 1.4658129
          documentKey: documentKey
          isRedacted: true
          width: 5.637377
          page: 6
          projectId: projectId
          word: word
          height: 2.302136
        documentKey: documentKey
        projectId: projectId
      properties:
        organisationId:
          type: string
        projectId:
          type: string
        documentKey:
          type: string
        redactions:
          items:
            $ref: '#/components/schemas/CMLocatedRedaction'
          type: array
        mode:
          type: string
      required:
      - documentKey
      - mode
      - organisationId
      - projectId
      - redactions
      type: object
    ReturnedDocument:
      example:
        document: document
      properties:
        document:
          format: byte
          type: string
      required:
      - document
      type: object
    CMReassignSliceDocument:
      example:
        newUserId: newUserId
        organisationId: organisationId
        documentKey: documentKey
        newSliceId: newSliceId
        taskId: taskId
      properties:
        taskId:
          type: string
        organisationId:
          type: string
        documentKey:
          type: string
        newUserId:
          type: string
        newSliceId:
          type: string
      required:
      - documentKey
      - newSliceId
      - newUserId
      - organisationId
      - taskId
      type: object
    CMNextDocument:
      example:
        organisationId: organisationId
        sliceId: sliceId
        includedStatuses:
        - includedStatuses
        - includedStatuses
        taskId: taskId
      properties:
        organisationId:
          type: string
        taskId:
          type: string
        sliceId:
          type: string
        includedStatuses:
          items:
            type: string
          type: array
      required:
      - includedStatuses
      - organisationId
      - sliceId
      - taskId
      type: object
    CMCommentFilter:
      example:
        organisationId: organisationId
        sliceId: sliceId
        documentKey: documentKey
        commentLevel: commentLevel
        projectId: projectId
      properties:
        organisationId:
          type: string
        projectId:
          type: string
        sliceId:
          type: string
        documentKey:
          type: string
        commentLevel:
          type: string
      required:
      - commentLevel
      - documentKey
      - organisationId
      - projectId
      - sliceId
      type: object
    CMRecordedComment:
      example:
        sliceId: sliceId
        created: 2000-01-23T04:56:07.000+00:00
        documentKey: documentKey
        comment: comment
        commentLevel: commentLevel
        projectId: projectId
        user: user
      properties:
        created:
          format: date-time
          type: string
        projectId:
          type: string
        sliceId:
          type: string
        documentKey:
          type: string
        commentLevel:
          type: string
        comment:
          type: string
        user:
          type: string
      required:
      - comment
      - commentLevel
      - created
      - documentKey
      - projectId
      - sliceId
      - user
      type: object
    CMDocumentsByToken:
      example:
        queryTokens:
        - type: type
          value: value
        - type: type
          value: value
        organisationId: organisationId
        offset: 6
        pageSize: 0
        projectId: projectId
      properties:
        organisationId:
          type: string
        projectId:
          type: string
        queryTokens:
          items:
            $ref: '#/components/schemas/CMQueryToken'
          type: array
        pageSize:
          format: int32
          type: integer
        offset:
          format: int64
          type: integer
      required:
      - offset
      - organisationId
      - pageSize
      - projectId
      - queryTokens
      type: object
    CMPagedProjectDocuments:
      example:
        total: 0
        results:
        - extension: extension
          size: 6
          documentKey: documentKey
          confidence: 5
          count: 1
          source: source
          title: title
          projectId: projectId
          folderId: folderId
        - extension: extension
          size: 6
          documentKey: documentKey
          confidence: 5
          count: 1
          source: source
          title: title
          projectId: projectId
          folderId: folderId
      properties:
        total:
          format: int64
          type: integer
        results:
          items:
            $ref: '#/components/schemas/CMProjectDocument'
          type: array
      required:
      - results
      - total
      type: object
    CMProjectDocument:
      example:
        extension: extension
        size: 6
        documentKey: documentKey
        confidence: 5
        count: 1
        source: source
        title: title
        projectId: projectId
        folderId: folderId
      properties:
        projectId:
          type: string
        source:
          type: string
        extension:
          type: string
        documentKey:
          type: string
        title:
          type: string
        size:
          format: int64
          type: integer
        folderId:
          type: string
        count:
          format: int64
          type: integer
        confidence:
          format: int32
          type: integer
      required:
      - confidence
      - count
      - documentKey
      - extension
      - folderId
      - projectId
      - size
      - source
      - title
      type: object
    CMNewComment:
      example:
        organisationId: organisationId
        sliceId: sliceId
        documentKey: documentKey
        comment: comment
        commentLevel: commentLevel
        projectId: projectId
      properties:
        organisationId:
          type: string
        projectId:
          type: string
        sliceId:
          type: string
        documentKey:
          type: string
        commentLevel:
          type: string
        comment:
          type: string
      required:
      - comment
      - commentLevel
      - documentKey
      - organisationId
      - projectId
      - sliceId
      type: object
    CMClaimDocument:
      example:
        organisationId: organisationId
        sliceId: sliceId
        documentKey: documentKey
        lock: true
        force: true
        projectId: projectId
      properties:
        organisationId:
          type: string
        projectId:
          type: string
        sliceId:
          type: string
        documentKey:
          type: string
        lock:
          type: boolean
        force:
          type: boolean
      required:
      - documentKey
      - force
      - lock
      - organisationId
      - projectId
      - sliceId
      type: object
    CMChangeTaskPhase:
      example:
        result:
          key: "{}"
        organisationId: organisationId
        newPhase: newPhase
        taskId: taskId
      properties:
        organisationId:
          type: string
        taskId:
          type: string
        newPhase:
          type: string
        result:
          additionalProperties:
            type: object
          type: object
      required:
      - newPhase
      - organisationId
      - result
      - taskId
      type: object
    CMStartCrawler:
      description: the source id and org/kb to process.
      example:
        kbId: kbId
        sourceId: 1
        organisationId: organisationId
        urlList: urlList
      properties:
        organisationId:
          description: the organisation (its guid id)
          type: string
        kbId:
          description: the knowledge-base (its guid id)
          type: string
        sourceId:
          description: the source-id of this crawler (ie. the crawler's id)
          example: 1
          format: int32
          type: integer
        urlList:
          description: an optional list of URLs (comma separated)
          type: string
      required:
      - kbId
      - organisationId
      - sourceId
      - urlList
      type: object
    CMSource:
      description: "A SimSage source object used for updating and creating SimSage\
        \ crawlers/connections to external silos like Sharepoint, OneDrive, Exchange,\
        \ DropBox, Box, iManage, and others."
      example:
        sourceId: 1
        autoOptimize: false
        edgeDeviceId: edgeDeviceId
        numTotalDocuments: 0
        documentSimilarityThreshold: 0.9
        organisationId: organisationId
        numErrors: 5
        acls:
        - access: RW
          acl: e.g. "example@simsage.co.uk" or "domain users"
          isUser: true
          user: true
        - access: RW
          acl: e.g. "example@simsage.co.uk" or "domain users"
          isUser: true
          user: true
        crawlerType: "one of \"rss\",\"external\",\"web\",\"discourse\",\"file\",\"\
          database\",\"onedrive\",\"exchange365\",\"sharepoint365\",\"imanage\",\"\
          box\",\"dropbox\",\"wordpress\",\"gdrive\",\"nfs\",\"restfull\""
        useSTT: true
        enablePreview: true
        numResults: 6
        numParsedDocuments: 0
        processingLevel: "one of: CONVERT, PARSE, INDEX"
        versioned: true
        busy: true
        startTime: 2
        enableDocumentSimilarity: true
        filesPerSecond: 0.0
        specificJson: "{}"
        kbId: kbId
        maxItems: 0
        isBusy: true
        numIndexedDocuments: 0
        storeBinary: true
        isExternal: false
        errorThreshold: 5
        qaMatchStrength: 0.8008282
        sessionId: sessionId
        maxBotItems: 0
        useDefaultRelationships: true
        writeToCassandra: true
        numCrawledDocuments: 0
        numFinishedDocuments: 0
        schedule: "eg. If we want this crawler to be active every Monday from midnight\
          \ to 1am, and Tuesday from 5pm to 6pm (GMT), we'd use: \"mon-00,tue-17\""
        deleteFiles: true
        allowAnonymous: false
        external: true
        customRender: false
        numFragments: 1
        name: web crawler
        numConvertedDocuments: 0
        endTime: 7
        crawling: true
        processorConfig: "{}"
        nodeId: 0
        isCrawling: false
        useOCR: true
      properties:
        sourceId:
          description: "the source-id, primary key of the source"
          example: 1
          format: int32
          type: integer
        organisationId:
          description: the main organisation (its guid id) for this source/crawler
          type: string
        kbId:
          description: the knowledge-base id (its guid id) for this source/crawler
          type: string
        nodeId:
          description: "the system's node id of this source (what kubernetes-node\
            \ to run on, starting with zero, set NODE_ID in env to manipulate this\
            \ value).  Sources will only run on machines with a matching node-id"
          example: 0
          format: int32
          type: integer
        name:
          description: the display-name (descriptive name) of this source.  The source's
            name must be unique within a knowledge-base.
          example: web crawler
          type: string
        crawlerType:
          description: the type of this source
          example: "one of \"rss\",\"external\",\"web\",\"discourse\",\"file\",\"\
            database\",\"onedrive\",\"exchange365\",\"sharepoint365\",\"imanage\"\
            ,\"box\",\"dropbox\",\"wordpress\",\"gdrive\",\"nfs\",\"restfull\""
          type: string
        schedule:
          description: "the time-schedule of this crawler, when active and when not\
            \ repeating in a weekly-per hour cycle in GMT time.  Empty string means\
            \ not active at all"
          example: "eg. If we want this crawler to be active every Monday from midnight\
            \ to 1am, and Tuesday from 5pm to 6pm (GMT), we'd use: \"mon-00,tue-17\""
          type: string
        deleteFiles:
          description: Should this crawler remove files that are no longer visible
            after a crawl completes without errors?  Used for sources that cannot
            report on file/data removal.
          example: true
          type: boolean
        allowAnonymous:
          description: Is the content of this crawler accessible anonymously (ie.
            no permissions/ACLs required).  Some crawlers like the web crawler always
            have this value as true.  NB.  Setting this flag to "true" will bypass
            any security on the source's own ACLs and make all its content available
            to everyone.
          example: false
          type: boolean
        processingLevel:
          description: "How much processing should SimSage give each file of this\
            \ source.  As defined internally in ProcessingLevel.  level 1, CONVERT:\
            \ convert all document binaries to text (creates metadata text).  level\
            \ 2, PARSE: NLP process the files (creates sentences and tokens for all\
            \ text).  level 3, INDEX: create inverted indexes for files (creates indexes)."
          example: "one of: CONVERT, PARSE, INDEX"
          type: string
        enablePreview:
          description: Generate per-document image-preview information as well as
            full HTML previews if set to "true".
          example: true
          type: boolean
        filesPerSecond:
          description: Any value greater than 0.0 (can be fractional) indicates SimSage
            should limit how many requests it makes from the remote entity we're integrating
            with.
          example: 0.0
          format: float
          type: number
        specificJson:
          description: A json string with specific values for this type of source.  Generated
            by the SimSage administrative system.
          example: "{}"
          type: string
        sessionId:
          description: a valid session-guid id.
          type: string
        maxItems:
          description: Set a content limit for the maximum number of items to contain
            for this source.  A value of zero (0) indicates no limits.
          example: 0
          format: int64
          type: integer
        maxBotItems:
          description: Set a Question and Answer content limit for the maximum number
            of deep-learning Q&A items this source can contain.  A value of zero (0)
            indicates no limits.
          example: 0
          format: int64
          type: integer
        customRender:
          description: Does this source require custom render templates or use ordinary
            search-results?
          example: false
          type: boolean
        edgeDeviceId:
          description: The associated Edge device for this source (or empty string
            if not associated with one)
          type: string
        qaMatchStrength:
          description: the default threshold for matching deep-learning vector matching
            results (value should be between 0.7 and 0.99)
          format: float
          type: number
        numResults:
          description: the default number of search results to return from the semantic-search
            system
          format: int32
          type: integer
        numFragments:
          description: "the number of fragments to return per search-result from the\
            \ semantic-search system.  Affects accuracy, a value of \"1\" will only\
            \ look at the first match.  Higher values look for more matches inside\
            \ a single document.  Too high a value will affect performance.  Default\
            \ value \"3\"."
          format: int32
          type: integer
        numErrors:
          description: the number of errors from the last source-run
          format: int32
          type: integer
        errorThreshold:
          description: the number of errors allowed before failing the source and
            not force-removing any files at the end of a run through an external source.
          format: int32
          type: integer
        startTime:
          description: when the last run of this source started
          format: int64
          type: integer
        endTime:
          description: when the last run of this source finished
          format: int64
          type: integer
        acls:
          description: A list for overwriting security permission for a source.  Can
            be empty.  Use this to override security on external systems.
          items:
            $ref: '#/components/schemas/CMDocumentAcl'
          type: array
        isCrawling:
          description: '"true" if this source busy/active.'
          example: false
          type: boolean
        numCrawledDocuments:
          description: the number of documents seen by the crawler thus-far.
          example: 0
          format: int32
          type: integer
        numConvertedDocuments:
          description: the number of documents converted by SimSage thus-far.
          example: 0
          format: int32
          type: integer
        numParsedDocuments:
          description: the number of documents parsed by SimSage thus-far.
          example: 0
          format: int32
          type: integer
        numIndexedDocuments:
          description: the number of documents indexed by SimSage thus-far.
          example: 0
          format: int32
          type: integer
        numFinishedDocuments:
          description: the number of finished (fully processed) by SimSage thus-far.
          example: 0
          format: int32
          type: integer
        numTotalDocuments:
          description: the total number of documents for this source in SimSage.
          example: 0
          format: int32
          type: integer
        useDefaultRelationships:
          description: '"true" if this source is to use the default (built-in) SimSage
            relationships.  All user-defined relationships and language-entities will
            be used regardless of the value of this flag.'
          example: true
          type: boolean
        isBusy:
          description: '"true" if this source is currently being optimized / processed
            by the index-optimizer.'
          example: true
          type: boolean
        autoOptimize:
          description: Do we run the index-optimizer automatically after this source
            finishes crawling?
          example: false
          type: boolean
        storeBinary:
          description: '"true" if this source is to store all documents locally on
            the SimSage platform'
          example: true
          type: boolean
        versioned:
          description: '"true" if this source is to store all versions of documents
            locally on the SimSage platform'
          example: true
          type: boolean
        writeToCassandra:
          description: "\"true\" if this source is to write any changes direct to\
            \ Cassandra, otherwise this source will collect indexes on disk first\
            \ (for initial loading)"
          example: true
          type: boolean
        processorConfig:
          description: Json string defining any optional processors configured on
            the source
          example: "{}"
          type: string
        enableDocumentSimilarity:
          description: enable document similarity calculations.
          example: true
          type: boolean
        documentSimilarityThreshold:
          description: "the document similarity threshold for grouping documents,\
            \ a value between 0.75 and 1.0"
          example: 0.9
          format: float
          type: number
        isExternal:
          description: is this crawler to be connected as an external source using
            our external crawler software?
          example: false
          type: boolean
        useOCR:
          description: enable OCR processing for files in this source?
          example: true
          type: boolean
        useSTT:
          description: enable Speech-to-text processing for files in this source?
          example: true
          type: boolean
        external:
          type: boolean
          writeOnly: true
        crawling:
          type: boolean
          writeOnly: true
        busy:
          type: boolean
          writeOnly: true
      required:
      - acls
      - allowAnonymous
      - autoOptimize
      - crawlerType
      - customRender
      - deleteFiles
      - documentSimilarityThreshold
      - edgeDeviceId
      - enableDocumentSimilarity
      - enablePreview
      - endTime
      - errorThreshold
      - filesPerSecond
      - isBusy
      - isCrawling
      - isExternal
      - kbId
      - maxBotItems
      - maxItems
      - name
      - nodeId
      - numConvertedDocuments
      - numCrawledDocuments
      - numErrors
      - numFinishedDocuments
      - numFragments
      - numIndexedDocuments
      - numParsedDocuments
      - numResults
      - numTotalDocuments
      - organisationId
      - processingLevel
      - processorConfig
      - qaMatchStrength
      - schedule
      - sessionId
      - sourceId
      - specificJson
      - startTime
      - storeBinary
      - useDefaultRelationships
      - useOCR
      - useSTT
      - versioned
      - writeToCassandra
      type: object
    CMUploadDocument:
      description: An external document representation object.
      example:
        sourceId: 1
        template: <div classname="db-record">My little Pony.</div>
        metadata:
          file-extension: txt
        organisationId: organisationId
        acls: "users:RW,administrator:RWD"
        data: data
        seed: 0
        mimeType: text/plain
        title: My little pony.
        objectType: CMUploadDocument
        sid: sid
        puid: fmt/123
        text: text
        categories:
        - sortDefault: "one of: asc, desc"
          metadata: price
          sortAscText: Lowest to highest price
          sortDescText: Highest to lowest price
          display: The price of the item
          sort: false
          key: "one of: select if true,star rating,number range,monetary x 100 range,monetary\
            \ range,csv string,category,url-image,base64-image,binary-blob-image"
          stringValueList: "pants,shorts"
          numberValueList: "1.0"
          order: 0
        - sortDefault: "one of: asc, desc"
          metadata: price
          sortAscText: Lowest to highest price
          sortDescText: Highest to lowest price
          display: The price of the item
          sort: false
          key: "one of: select if true,star rating,number range,monetary x 100 range,monetary\
            \ range,csv string,category,url-image,base64-image,binary-blob-image"
          stringValueList: "pants,shorts"
          numberValueList: "1.0"
          order: 0
        kbId: kbId
        author: John Manyberries
        created: 6
        binarySize: 0
        url: document-1
        contentHash: 118f6bcd4621d373cade4e832627b4cc
        size: 41231
        encrypted: true
        changeHash: 098f6bcd4621d373cade4e832627b4f6
        lastModified: 1
        runId: runId
      properties:
        objectType:
          description: "the type of this class, just in case this object is encrypted"
          example: CMUploadDocument
          type: string
        organisationId:
          description: the organisation (its guid id) this document should go into.
          type: string
        kbId:
          description: the knowledge-base (its guid id) this document should go into.
          type: string
        sid:
          description: the security-id (a guid) of the knowledge-base.  This is effectively
            the shared secret between SimSage and the external-crawler system.
          type: string
        sourceId:
          description: the source-id of this crawler (ie. the crawler's id) this document
            came from.
          example: 1
          format: int32
          type: integer
        url:
          description: A unique URL for this document.
          example: document-1
          type: string
        mimeType:
          description: "The mime-type of this document, must be a known-datatype to\
            \ SimSage."
          example: text/plain
          type: string
        puid:
          description: The Pronom Unique ID for this document.
          example: fmt/123
          type: string
        acls:
          description: A list of security permission for this document.  Can be empty
            (ie. no security applied).
          example: "users:RW,administrator:RWD"
          type: string
        title:
          description: "The title of this document, can be empty."
          example: My little pony.
          type: string
        author:
          description: "The author of this document, can be empty."
          example: John Manyberries
          type: string
        changeHash:
          description: A unique hash-string identifying the change state of this document.  This
            can be any hash-function you choose.  SimSage uses the value to see if
            the content has changed since last.
          example: 098f6bcd4621d373cade4e832627b4f6
          type: string
        contentHash:
          description: A unique hash-string identifying the contents this document.  This
            can be any hash-function you choose.  SimSage uses this value for exact
            duplicate detection.
          example: 118f6bcd4621d373cade4e832627b4cc
          type: string
        data:
          description: "the base64 encoded content of this document.  Must be prefixed\
            \ with ';base64,', can be empty indicating the content wasn't valid."
          type: string
        binarySize:
          description: the binary-size of the document in bytes if data is not set.
          format: int32
          type: integer
        text:
          description: the text content of the asset (if set).
          type: string
        created:
          description: a unix-timestamp of the creation date-time of this document
          format: int64
          type: integer
        lastModified:
          description: a unix-timestamp of the last-modified date-time of this document
          format: int64
          type: integer
        metadata:
          additionalProperties:
            description: a series of name values for other metadata values found in
              the container of this document
            example: "{\"file-extension\":\"txt\"}"
            type: string
          description: a series of name values for other metadata values found in
            the container of this document
          example:
            file-extension: txt
          type: object
        categories:
          description: A list of special SimSage metadata categories for matching
            this document with.  Can be empty.
          items:
            $ref: '#/components/schemas/MDCategory'
          type: array
        size:
          description: The size of this document (the original) in bytes
          example: 41231
          format: int64
          type: integer
        template:
          description: A render template for this document.  This is only appropriate
            for Database and RESTful type sources.
          example: <div classname="db-record">My little Pony.</div>
          type: string
        encrypted:
          description: Do we need to add transport encryption
          example: true
          type: boolean
        seed:
          description: The seed used if encrypted
          example: 0
          format: int32
          type: integer
        runId:
          description: the id (a guid) of the current 'go through the source once'.  This
            is a unique per-run identifier.
          type: string
      required:
      - acls
      - author
      - binarySize
      - categories
      - changeHash
      - contentHash
      - created
      - data
      - encrypted
      - kbId
      - lastModified
      - metadata
      - mimeType
      - objectType
      - organisationId
      - puid
      - runId
      - seed
      - sid
      - size
      - sourceId
      - template
      - text
      - title
      - url
      type: object
    MDCategory:
      description: A SimSage category is a metadata description in SimSage.  This
        object represents a single piece of categorical data that is uploaded to SimSage
        from external sources as part of a CMDocumentUpload request.
      example:
        sortDefault: "one of: asc, desc"
        metadata: price
        sortAscText: Lowest to highest price
        sortDescText: Highest to lowest price
        display: The price of the item
        sort: false
        key: "one of: select if true,star rating,number range,monetary x 100 range,monetary\
          \ range,csv string,category,url-image,base64-image,binary-blob-image"
        stringValueList: "pants,shorts"
        numberValueList: "1.0"
        order: 0
      properties:
        key:
          description: The SimSage type of category
          example: "one of: select if true,star rating,number range,monetary x 100\
            \ range,monetary range,csv string,category,url-image,base64-image,binary-blob-image"
          type: string
        display:
          description: A friendly display name for any UI component rendering this
            component
          example: The price of the item
          type: string
        metadata:
          description: The metadata-name inside SimSage for this item.  Only a..z
            A..Z 0..9 and - are allowed as characters in this string.
          example: price
          type: string
        stringValueList:
          description: A list of string values (if string based) for this metadata
            category item.  These are the values this document "belongs to"
          example: "pants,shorts"
          type: string
        numberValueList:
          description: "Alternatively, a list of numeric values (if number based)\
            \ for this metadata category item.  These are the values this document\
            \ \"belongs to\""
          example: "1.0"
          type: string
        sort:
          description: Is this category to be sort-able in the UI?
          example: false
          type: boolean
        order:
          description: What order does this item have in the UI display?
          example: 0
          format: int32
          type: integer
        sortDefault:
          description: "Is this item THE default sort item in the UI, and if so, is\
            \ it ascending (asc) or descending (desc).  Not the default sort if empty."
          example: "one of: asc, desc"
          type: string
        sortAscText:
          description: "If sortable, what label should the UI display for ascending\
            \ sort?"
          example: Lowest to highest price
          type: string
        sortDescText:
          description: "If sortable, what label should the UI display for descending\
            \ sort?"
          example: Highest to lowest price
          type: string
      required:
      - display
      - key
      - metadata
      - numberValueList
      - order
      - sort
      - sortAscText
      - sortDefault
      - sortDescText
      - stringValueList
      type: object
    CMUploadImage:
      description: An external image representation object.
      example:
        kbId: kbId
        sourceId: 1
        organisationId: organisationId
        puid: fmt/123
        data: data
        encrypted: true
        seed: 0
        mimeType: image/jpeg
        url: document-1
        objectType: CMUploadImage
        sid: sid
      properties:
        objectType:
          description: "the type of this class, just in case this object is encrypted"
          example: CMUploadImage
          type: string
        organisationId:
          description: the organisation (its guid id) this image should go into.
          type: string
        kbId:
          description: the knowledge-base (its guid id) this image should go into.
          type: string
        sid:
          description: the security-id (a guid) of the knowledge-base.  This is effectively
            the shared secret between SimSage and the external-crawler system.
          type: string
        sourceId:
          description: the source-id of this crawler (ie. the crawler's id) this image
            came from.
          example: 1
          format: int32
          type: integer
        url:
          description: "A unique URL for this image, this should be the same as the\
            \ document's URL this image belongs to."
          example: document-1
          type: string
        mimeType:
          description: "The mime-type of this image, must be either image/jpeg or\
            \ image/png."
          example: image/jpeg
          type: string
        puid:
          description: The Pronom Unique ID for this image.
          example: fmt/123
          type: string
        data:
          description: "the base64 encoded content of this image.  Must be prefixed\
            \ with ';base64,'."
          type: string
        encrypted:
          description: Do we need to add transport encryption
          example: true
          type: boolean
        seed:
          description: The seed used if encrypted
          example: 0
          format: int32
          type: integer
      required:
      - data
      - encrypted
      - kbId
      - mimeType
      - objectType
      - organisationId
      - puid
      - seed
      - sid
      - sourceId
      - url
      type: object
    CMDocumentUnChanged:
      description: An external document representation object.
      example:
        kbId: kbId
        sourceId: 1
        organisationId: organisationId
        runId: runId
        url: document-1
        sid: sid
      properties:
        organisationId:
          description: the organisation (its guid id) this document should go into.
          type: string
        kbId:
          description: the knowledge-base (its guid id) this document should go into.
          type: string
        sid:
          description: the security-id (a guid) of the knowledge-base.  This is effectively
            the shared secret between SimSage and the external-crawler system.
          type: string
        sourceId:
          description: the source-id of this crawler (ie. the crawler's id) this document
            came from.
          example: 1
          format: int32
          type: integer
        url:
          description: A unique URL for this document.
          example: document-1
          type: string
        runId:
          description: the id (a guid) of the current 'go through the source once'.  This
            is a unique per-run identifier.
          type: string
      required:
      - kbId
      - organisationId
      - runId
      - sid
      - sourceId
      - url
      type: object
    CMExternalCrawler:
      description: request access to the given crawler by id.
      example:
        kbId: kbId
        sourceId: 1
        organisationId: organisationId
        encrypted: true
        seed: 0
        objectType: CMExternalCrawler
        sid: sid
      properties:
        objectType:
          description: "the type of this class, just in case this object is encrypted"
          example: CMExternalCrawler
          type: string
        organisationId:
          description: the main organisation (its guid id) for this source/crawler
          type: string
        kbId:
          description: "the knowledge-base id of this context item, a guid-string"
          type: string
        sid:
          description: the security id (a guid) for this request.  This is effectively
            the shared secret between SimSage and the external-crawler system.
          type: string
        sourceId:
          description: the source-id of this crawler (ie. the crawler's id)
          example: 1
          format: int32
          type: integer
        encrypted:
          description: Do we need to add transport encryption
          example: true
          type: boolean
        seed:
          description: The seed used if encrypted
          example: 0
          format: int32
          type: integer
      required:
      - encrypted
      - kbId
      - objectType
      - organisationId
      - seed
      - sid
      - sourceId
      type: object
    CMExternalCrawlerStart:
      description: Start parameters.
      example:
        kbId: kbId
        sourceId: 1
        organisationId: organisationId
        encrypted: true
        seed: 0
        runId: runId
        objectType: CMExternalCrawlerStartStop
        sid: sid
      properties:
        objectType:
          description: "the type of this class, just in case this object is encrypted"
          example: CMExternalCrawlerStartStop
          type: string
        organisationId:
          description: the main organisation (its guid id) for this source/crawler
          type: string
        kbId:
          description: "the knowledge-base id of this context item, a guid-string"
          type: string
        sid:
          description: the security id (a guid) for this request.  This is effectively
            the shared secret between SimSage and the external-crawler system.
          type: string
        sourceId:
          description: the source-id of this crawler (ie. the crawler's id)
          example: 1
          format: int32
          type: integer
        runId:
          description: the id (a guid) of the current 'go through the source once'.  This
            is a unique per-run identifier.
          type: string
        encrypted:
          description: Do we need to add transport encryption
          example: true
          type: boolean
        seed:
          description: The seed used if encrypted
          example: 0
          format: int32
          type: integer
      required:
      - encrypted
      - kbId
      - objectType
      - organisationId
      - runId
      - seed
      - sid
      - sourceId
      type: object
    CMExternalCrawlerStop:
      description: Stop parameters.
      example:
        kbId: kbId
        sourceId: 1
        organisationId: organisationId
        numErrors: 0
        encrypted: true
        seed: 0
        runId: runId
        objectType: CMExternalCrawlerStartStop
        sid: sid
      properties:
        objectType:
          description: "the type of this class, just in case this object is encrypted"
          example: CMExternalCrawlerStartStop
          type: string
        organisationId:
          description: the main organisation (its guid id) for this source/crawler
          type: string
        kbId:
          description: "the knowledge-base id of this context item, a guid-string"
          type: string
        sid:
          description: the security id (a guid) for this request.  This is effectively
            the shared secret between SimSage and the external-crawler system.
          type: string
        sourceId:
          description: the source-id of this crawler (ie. the crawler's id)
          example: 1
          format: int32
          type: integer
        numErrors:
          description: the number of errors encountered during the run of this crawler
          example: 0
          format: int32
          type: integer
        runId:
          description: the id (a guid) of the current 'go through the source once'.  This
            is a unique per-run identifier.
          type: string
        encrypted:
          description: Do we need to add transport encryption
          example: true
          type: boolean
        seed:
          description: The seed used if encrypted
          example: 0
          format: int32
          type: integer
      required:
      - encrypted
      - kbId
      - numErrors
      - objectType
      - organisationId
      - runId
      - seed
      - sid
      - sourceId
      type: object
    CMRestoreFromText:
      description: an object with the text to restore from
      example:
        organisationId: 00000000-0000-0000-0000-000000000001
        base64Text: base64Text
        fileType: text/plain
      properties:
        organisationId:
          description: the organisation (its guid id).
          example: 00000000-0000-0000-0000-000000000001
          type: string
        base64Text:
          description: the base64 text to restore from.
          type: string
        fileType:
          description: the file-type of the base64 text (must be text/plain)
          example: text/plain
          type: string
      required:
      - base64Text
      - fileType
      - organisationId
      type: object
    CMSignInParameters:
      description: sign-in parameter object
      example:
        password: password
        email: example@simsage.co.uk
      properties:
        email:
          description: email address of the user logging in
          example: example@simsage.co.uk
          type: string
        password:
          description: this user's password
          type: string
      required:
      - email
      - password
      type: object
    CMOperatorKnowledgeBase:
      description: An association between a user (with an operator role) and a knowledge-base
      example:
        kbId: kbId
        organisationId: 00000000-0000-0000-0000-000000000001
        userId: userId
      properties:
        userId:
          description: the user's id (its guid id) that is an operator
          type: string
        organisationId:
          description: the organisation (its guid id) this operator applies to
          example: 00000000-0000-0000-0000-000000000001
          type: string
        kbId:
          description: the knowledge-base (its guid id) this operator applies to
          type: string
      required:
      - kbId
      - organisationId
      - userId
      type: object
    CMSession:
      description: "A session object, A session's id is the \"session-id\" used throughout\
        \ the SimSage API."
      example:
        organisationId: 00000000-0000-0000-0000-000000000001
        role: role
        ipAddress: ipAddress
        sessionType: sessionType
        lastAccess: 0
        id: id
        userId: userId
        email: example@simsage.co.uk
      properties:
        id:
          description: "the session-id, a guid"
          type: string
        userId:
          description: "the user associated with this session, their id, a guid"
          type: string
        organisationId:
          description: the main organisation (its guid id) this session is associated
            with if applicable (administrators do not have such an association)
          example: 00000000-0000-0000-0000-000000000001
          type: string
        email:
          description: email address of this user
          example: example@simsage.co.uk
          type: string
        ipAddress:
          description: the ip-address of the user logging in if captured
          type: string
        lastAccess:
          description: a unix-timestamp of the last time this session was accessed/refreshed
          format: int64
          type: integer
        role:
          description: the main/highest role of the user signed-in
          type: string
        sessionType:
          description: the type of sign-in (Anonymous (i.e. valid but search only)
            or SimSage)
          type: string
      required:
      - email
      - id
      - ipAddress
      - lastAccess
      - organisationId
      - role
      - sessionType
      - userId
      type: object
    CMSessionVersion:
      description: A SimSage combined session / user and version object.  This is
        the object returned when you've signed-in successfully.
      example:
        session:
          organisationId: 00000000-0000-0000-0000-000000000001
          role: role
          ipAddress: ipAddress
          sessionType: sessionType
          lastAccess: 0
          id: id
          userId: userId
          email: example@simsage.co.uk
        user:
          firstName: John
          operatorKBList:
          - kbId: kbId
            organisationId: 00000000-0000-0000-0000-000000000001
            userId: userId
          - kbId: kbId
            organisationId: 00000000-0000-0000-0000-000000000001
            userId: userId
          surname: Smallberries
          roles:
          - organisationId: 00000000-0000-0000-0000-000000000001
            role: "one of admin,manager,operator,dms"
          - organisationId: 00000000-0000-0000-0000-000000000001
            role: "one of admin,manager,operator,dms"
          groupList:
          - organisationId: 00000000-0000-0000-0000-000000000001
            userIdList:
            - userIdList
            - userIdList
            name: Domain Users
          - organisationId: 00000000-0000-0000-0000-000000000001
            userIdList:
            - userIdList
            - userIdList
            name: Domain Users
          id: id
          email: example@simsage.co.uk
        version: 7.5.9
        organisationList:
        - autoCreateSSOUsers: true
          name: name
          autoCreateSSOACLList:
          - autoCreateSSOACLList
          - autoCreateSSOACLList
          autoCreateSSORoleList:
          - autoCreateSSORoleList
          - autoCreateSSORoleList
          id: id
          enabled: true
          autoCreateSSODomainList:
          - autoCreateSSODomainList
          - autoCreateSSODomainList
        - autoCreateSSOUsers: true
          name: name
          autoCreateSSOACLList:
          - autoCreateSSOACLList
          - autoCreateSSOACLList
          autoCreateSSORoleList:
          - autoCreateSSORoleList
          - autoCreateSSORoleList
          id: id
          enabled: true
          autoCreateSSODomainList:
          - autoCreateSSODomainList
          - autoCreateSSODomainList
      properties:
        session:
          $ref: '#/components/schemas/CMSession'
        user:
          $ref: '#/components/schemas/CMUser'
        organisationList:
          description: list of organisations for admin users
          items:
            $ref: '#/components/schemas/CMOrganisation'
          type: array
        version:
          description: version of this service
          example: 7.5.9
          type: string
      required:
      - organisationList
      - session
      - user
      - version
      type: object
    CMUser:
      description: A SimSage user object for editing and reviewing.
      example:
        firstName: John
        operatorKBList:
        - kbId: kbId
          organisationId: 00000000-0000-0000-0000-000000000001
          userId: userId
        - kbId: kbId
          organisationId: 00000000-0000-0000-0000-000000000001
          userId: userId
        surname: Smallberries
        roles:
        - organisationId: 00000000-0000-0000-0000-000000000001
          role: "one of admin,manager,operator,dms"
        - organisationId: 00000000-0000-0000-0000-000000000001
          role: "one of admin,manager,operator,dms"
        groupList:
        - organisationId: 00000000-0000-0000-0000-000000000001
          userIdList:
          - userIdList
          - userIdList
          name: Domain Users
        - organisationId: 00000000-0000-0000-0000-000000000001
          userIdList:
          - userIdList
          - userIdList
          name: Domain Users
        id: id
        email: example@simsage.co.uk
      properties:
        id:
          description: "the user's id, a guid"
          type: string
        email:
          description: email address of this user (their sign-in and primary identity)
          example: example@simsage.co.uk
          type: string
        firstName:
          description: the first-name of this user
          example: John
          type: string
        surname:
          description: the second-name (surname) of this user
          example: Smallberries
          type: string
        roles:
          description: a list of SimSage roles associated with this user
          items:
            $ref: '#/components/schemas/CMUserRole'
          type: array
        operatorKBList:
          description: a list of knowledge-bases this user is an operator for
          items:
            $ref: '#/components/schemas/CMOperatorKnowledgeBase'
          type: array
        groupList:
          description: a list of security-groups this user is part of (can be empty)
          items:
            $ref: '#/components/schemas/CMGroup'
          type: array
      required:
      - email
      - firstName
      - groupList
      - id
      - operatorKBList
      - roles
      - surname
      type: object
    CMUserRole:
      description: "A user's SimSage-role inside an organisation.  SimSage roles determine\
        \ what a user can do/access inside SimSage and are specific to SimSage.  Roles\
        \ include admin (a SimSage administrator, super-user), manager (a SimSage\
        \ manager, a user that has super-user access to one and one organisation only),\
        \ operator (a SimSage operator, a user that can access the SimSage operator\
        \ interface for a specific organisation), dms (a SimSage user that can sign-in\
        \ to our Document Management System interface, specific to an organisation)."
      example:
        organisationId: 00000000-0000-0000-0000-000000000001
        role: "one of admin,manager,operator,dms"
      properties:
        organisationId:
          description: the organisation (its guid id) this role applies to
          example: 00000000-0000-0000-0000-000000000001
          type: string
        role:
          description: the SimSage role inside this organisation
          example: "one of admin,manager,operator,dms"
          type: string
      required:
      - organisationId
      - role
      type: object
    CMUserPasswordReset:
      description: the password reset object
      example:
        password: password
        email: example@simsage.co.uk
        resetId: 0c296140-f791-4641-b0c6-04a8eaf78b01
      properties:
        email:
          description: email address of the user wishing to reset their password.
          example: example@simsage.co.uk
          type: string
        resetId:
          description: the reset-id/token sent to you by SimSage via email.
          example: 0c296140-f791-4641-b0c6-04a8eaf78b01
          type: string
        password:
          description: the new password for this user
          type: string
      required:
      - email
      - password
      - resetId
      type: object
    CMPasswordResetRequest:
      description: the password request object
      example:
        email: example@simsage.co.uk
      properties:
        email:
          description: email address of the user wishing to reset their password.
          example: example@simsage.co.uk
          type: string
      required:
      - email
      type: object
    CMVersion:
      description: "A generic version object.  Returns the version of whatever service\
        \ you're communicating with, part of the /version commands of each micro-service."
      example:
        version: 7.5.9
      properties:
        version:
          description: version of this service
          example: 7.5.9
          type: string
      required:
      - version
      type: object
    CMLoggerEntry:
      description: This object represents a single system-log entry.  A list of these
        is returned by the CMSystemLogs structure.
      example:
        service: service
        created: 0
        stackTrace: stackTrace
        message: message
        type: type
      properties:
        message:
          description: the main message of the log entry
          type: string
        type:
          description: "the type of log entry (eg. Debug, Info, Warn, Error)"
          type: string
        service:
          description: the name of the service that generated this log
          type: string
        stackTrace:
          description: the stack traces if applicable
          type: string
        created:
          description: unit date-time of this log
          format: int64
          type: integer
      required:
      - created
      - message
      - service
      - stackTrace
      - type
      type: object
    CMReturnStatistics:
      description: "This object is used to requests a set of specific and general\
        \ statistics.  The general statistics have no time associated with them (eg.\
        \ file-type frequencies).  The other statistics are month based and include\
        \ system-query-access by day of the month, and query-word frequencies."
      example:
        kbId: kbId
        accessFrequency: 125
        queryWordFrequency:
          what is SimSage: 12
        organisationId: organisationId
        month: 12
        generalStatistics:
          numDocuments: 3124
        year: 2021
        fileTypeStatistics:
          pdf: 50
          html: 100
      properties:
        organisationId:
          description: the organisation (its guid id)
          type: string
        kbId:
          description: the knowledge-base id (its guid id)
          type: string
        year:
          description: the year of the request
          example: 2021
          format: int32
          type: integer
        month:
          description: the month of the request
          example: 12
          format: int32
          type: integer
        accessFrequency:
          description: "A list of 31 values, one for each day of the month indicating\
            \ the number of unique access for each day of the month."
          example: 125
          format: int32
          type: integer
        queryWordFrequency:
          additionalProperties:
            description: The top list of queries (the strings) and their frequencies
            format: int32
            type: integer
          description: The top list of queries (the strings) and their frequencies
          example:
            what is SimSage: 12
          type: object
        generalStatistics:
          additionalProperties:
            description: Some more general statistics (eg. number of documents) and
              their frequencies
            format: int64
            type: integer
          description: Some more general statistics (eg. number of documents) and
            their frequencies
          example:
            numDocuments: 3124
          type: object
        fileTypeStatistics:
          additionalProperties:
            description: The breakdown of file-types (by file extension) and their
              frequencies
            format: int32
            type: integer
          description: The breakdown of file-types (by file extension) and their frequencies
          example:
            pdf: 50
            html: 100
          type: object
      required:
      - accessFrequency
      - fileTypeStatistics
      - generalStatistics
      - kbId
      - month
      - organisationId
      - queryWordFrequency
      - year
      type: object
    OptimizeIndexesGetReportsCmd:
      example:
        kbId: kbId
        jobId: jobId
        async: true
        organisationId: organisationId
        returnResult: true
        reportList:
        - 6
        - 6
        isReturnResult: true
        returnAddress: returnAddress
        errorStr: errorStr
        timeOut: 0
      properties:
        jobId:
          type: string
        returnAddress:
          type: string
        errorStr:
          type: string
        timeOut:
          format: int64
          type: integer
        async:
          type: boolean
        isReturnResult:
          type: boolean
        organisationId:
          type: string
        kbId:
          type: string
        reportList:
          items:
            format: int64
            type: integer
          type: array
        returnResult:
          type: boolean
          writeOnly: true
      required:
      - async
      - errorStr
      - isReturnResult
      - jobId
      - kbId
      - organisationId
      - reportList
      - returnAddress
      - timeOut
      type: object
    OptimizeIndexesGetReportCmd:
      example:
        kbId: kbId
        organisationId: organisationId
        metadataItemCount: 9
        indexSet: 5
        byteSize: 1
        numberOfShards: 1
        returnResult: true
        returnAddress: returnAddress
        timeOut: 0
        jobId: jobId
        async: true
        numIndexesUpToDate: 1
        numberOfTotalIndexes: 3
        numUrls: 5
        totalOffsets: 7
        numOptimizedIndexes: 2
        numOptimizedRemoved: 7
        numIndexesRemoved: 4
        id: 6
        isReturnResult: true
        numUrlsRemoved: 2
        errorStr: errorStr
      properties:
        jobId:
          type: string
        returnAddress:
          type: string
        errorStr:
          type: string
        timeOut:
          format: int64
          type: integer
        async:
          type: boolean
        isReturnResult:
          type: boolean
        organisationId:
          type: string
        kbId:
          type: string
        id:
          format: int64
          type: integer
        numberOfShards:
          format: int32
          type: integer
        numUrls:
          format: int32
          type: integer
        indexSet:
          format: int32
          type: integer
        numUrlsRemoved:
          format: int32
          type: integer
        totalOffsets:
          format: int64
          type: integer
        metadataItemCount:
          format: int32
          type: integer
        numberOfTotalIndexes:
          format: int32
          type: integer
        numOptimizedIndexes:
          format: int32
          type: integer
        numIndexesRemoved:
          format: int32
          type: integer
        numOptimizedRemoved:
          format: int32
          type: integer
        numIndexesUpToDate:
          format: int32
          type: integer
        byteSize:
          format: int64
          type: integer
        returnResult:
          type: boolean
          writeOnly: true
      required:
      - async
      - byteSize
      - errorStr
      - id
      - indexSet
      - isReturnResult
      - jobId
      - kbId
      - metadataItemCount
      - numIndexesRemoved
      - numIndexesUpToDate
      - numOptimizedIndexes
      - numOptimizedRemoved
      - numUrls
      - numUrlsRemoved
      - numberOfShards
      - numberOfTotalIndexes
      - organisationId
      - returnAddress
      - timeOut
      - totalOffsets
      type: object
    CMCategorizationPaginatedList:
      description: A categorization pagination list.
      example:
        kbId: kbId
        categorizationList:
        - kbId: kbId
          categorizationLabel: top security
          organisationId: organisationId
          rule: "(body: test))"
        - kbId: kbId
          categorizationLabel: top security
          organisationId: organisationId
          rule: "(body: test))"
        organisationId: organisationId
        totalCategorizationCount: 1000
      properties:
        organisationId:
          description: the organisation (its guid id)
          type: string
        kbId:
          description: the knowledge-base (its guid id)
          type: string
        categorizationList:
          description: "a list of categorizations, paginated"
          items:
            $ref: '#/components/schemas/CMCategorization'
          type: array
        totalCategorizationCount:
          description: the total number of categorizations in SimSage for this org/kb
          example: 1000
          format: int32
          type: integer
      required:
      - categorizationList
      - kbId
      - organisationId
      - totalCategorizationCount
      type: object
    CMInfo:
      description: An Info record contains information for external UI systems wishing
        to interact with SimSage.  This information is for a single-organisation and
        contains all the knowledge-bases and their information for this organisation.
      example:
        organisationId: organisationId
        kbList:
        - sourceList:
          - sourceId: 1
            clientId: clientId
            redirectUrl: redirectUrl
            sourceType: "one of: rss,external,web,discourse,file,database,onedrive,exchange365,sharepoint365,imanage,box,dropbox,wordpress,gdrive,nfs,restfull"
            customRender: false
            domainType: "one of: ad,aad,simsage"
            name: web source
          - sourceId: 1
            clientId: clientId
            redirectUrl: redirectUrl
            sourceType: "one of: rss,external,web,discourse,file,database,onedrive,exchange365,sharepoint365,imanage,box,dropbox,wordpress,gdrive,nfs,restfull"
            customRender: false
            domainType: "one of: ad,aad,simsage"
            name: web source
          name: My little Pony knowledge-base
          categoryList:
          - categoryType: categoryType
            sortDefault: sortDefault
            scType: SCT_PLAIN
            metadata: metadata
            minValue: 6
            sortAscText: sortAscText
            sortDescText: sortDescText
            displayName: displayName
            maxValue: 1
            sort: true
            items:
            - name: name
              count: 5
            - name: name
              count: 5
            order: 0
          - categoryType: categoryType
            sortDefault: sortDefault
            scType: SCT_PLAIN
            metadata: metadata
            minValue: 6
            sortAscText: sortAscText
            sortDescText: sortDescText
            displayName: displayName
            maxValue: 1
            sort: true
            items:
            - name: name
              count: 5
            - name: name
              count: 5
            order: 0
          id: id
        - sourceList:
          - sourceId: 1
            clientId: clientId
            redirectUrl: redirectUrl
            sourceType: "one of: rss,external,web,discourse,file,database,onedrive,exchange365,sharepoint365,imanage,box,dropbox,wordpress,gdrive,nfs,restfull"
            customRender: false
            domainType: "one of: ad,aad,simsage"
            name: web source
          - sourceId: 1
            clientId: clientId
            redirectUrl: redirectUrl
            sourceType: "one of: rss,external,web,discourse,file,database,onedrive,exchange365,sharepoint365,imanage,box,dropbox,wordpress,gdrive,nfs,restfull"
            customRender: false
            domainType: "one of: ad,aad,simsage"
            name: web source
          name: My little Pony knowledge-base
          categoryList:
          - categoryType: categoryType
            sortDefault: sortDefault
            scType: SCT_PLAIN
            metadata: metadata
            minValue: 6
            sortAscText: sortAscText
            sortDescText: sortDescText
            displayName: displayName
            maxValue: 1
            sort: true
            items:
            - name: name
              count: 5
            - name: name
              count: 5
            order: 0
          - categoryType: categoryType
            sortDefault: sortDefault
            scType: SCT_PLAIN
            metadata: metadata
            minValue: 6
            sortAscText: sortAscText
            sortDescText: sortDescText
            displayName: displayName
            maxValue: 1
            sort: true
            items:
            - name: name
              count: 5
            - name: name
              count: 5
            order: 0
          id: id
      properties:
        organisationId:
          description: the main organisation (its guid id)
          type: string
        kbList:
          description: the list of knowledge-base information items that belong to
            the given organisation.
          items:
            $ref: '#/components/schemas/CMKnowledgeBaseInfo'
          type: array
      required:
      - kbList
      - organisationId
      type: object
    CMKnowledgeBaseInfo:
      description: "Knowledge base-info represents information needed by external\
        \ UX systems interacting with SimSage.  This object contains information of\
        \ a SimSage knowledge-base.  The name, and id of, and sources inside this\
        \ knowledge-base."
      example:
        sourceList:
        - sourceId: 1
          clientId: clientId
          redirectUrl: redirectUrl
          sourceType: "one of: rss,external,web,discourse,file,database,onedrive,exchange365,sharepoint365,imanage,box,dropbox,wordpress,gdrive,nfs,restfull"
          customRender: false
          domainType: "one of: ad,aad,simsage"
          name: web source
        - sourceId: 1
          clientId: clientId
          redirectUrl: redirectUrl
          sourceType: "one of: rss,external,web,discourse,file,database,onedrive,exchange365,sharepoint365,imanage,box,dropbox,wordpress,gdrive,nfs,restfull"
          customRender: false
          domainType: "one of: ad,aad,simsage"
          name: web source
        name: My little Pony knowledge-base
        categoryList:
        - categoryType: categoryType
          sortDefault: sortDefault
          scType: SCT_PLAIN
          metadata: metadata
          minValue: 6
          sortAscText: sortAscText
          sortDescText: sortDescText
          displayName: displayName
          maxValue: 1
          sort: true
          items:
          - name: name
            count: 5
          - name: name
            count: 5
          order: 0
        - categoryType: categoryType
          sortDefault: sortDefault
          scType: SCT_PLAIN
          metadata: metadata
          minValue: 6
          sortAscText: sortAscText
          sortDescText: sortDescText
          displayName: displayName
          maxValue: 1
          sort: true
          items:
          - name: name
            count: 5
          - name: name
            count: 5
          order: 0
        id: id
      properties:
        name:
          description: the name of this knowledge-base
          example: My little Pony knowledge-base
          type: string
        id:
          description: the knowledge-base id (its guid id)
          type: string
        categoryList:
          description: "a list of metadata-categories present in this source, names\
            \ and values."
          items:
            $ref: '#/components/schemas/SearchCategory'
          type: array
        sourceList:
          description: the list of sources that are in this knowledge-base
          items:
            $ref: '#/components/schemas/CMSourceBaseInfo'
          type: array
      required:
      - categoryList
      - id
      - name
      - sourceList
      type: object
    CMSourceBaseInfo:
      description: "Source base-info represents information needed by external UI\
        \ systems interacting with SimSage.  This object has information pertaining\
        \ to a source in SimSage.  Its name, id, what sort of a source it is, and\
        \ what sort of security integration (if any) this source has.  This object\
        \ is contained inside a CMKnowledgeBaseInfo object."
      example:
        sourceId: 1
        clientId: clientId
        redirectUrl: redirectUrl
        sourceType: "one of: rss,external,web,discourse,file,database,onedrive,exchange365,sharepoint365,imanage,box,dropbox,wordpress,gdrive,nfs,restfull"
        customRender: false
        domainType: "one of: ad,aad,simsage"
        name: web source
      properties:
        name:
          description: the name of this source
          example: web source
          type: string
        sourceId:
          description: the id of this source
          example: 1
          format: int32
          type: integer
        sourceType:
          description: the type of this source
          example: "one of: rss,external,web,discourse,file,database,onedrive,exchange365,sharepoint365,imanage,box,dropbox,wordpress,gdrive,nfs,restfull"
          type: string
        customRender:
          description: Does this source require custom render templates or use ordinary
            search-results?
          example: false
          type: boolean
        domainType:
          description: "the domain security type (if applicable) of this source (can\
            \ be empty).  Types: 'ad' classical Microsoft Active Directory, 'aad'\
            \ Azure Active Directory, 'simsage' SimSage platform user accounts"
          example: "one of: ad,aad,simsage"
          type: string
        clientId:
          description: a Microsoft client-id for Azure Domain access
          type: string
        redirectUrl:
          description: a Microsoft redirect-url for Azure Domain access
          type: string
      required:
      - clientId
      - customRender
      - domainType
      - name
      - redirectUrl
      - sourceId
      - sourceType
      type: object
    CMDocumentTypeFrequency:
      description: An entity for holding document type and a count for that type.
      example:
        documentType: "many possible values, eg. doc,pdf,html"
        count: 312
      properties:
        documentType:
          description: "The file extension of a document, its type."
          example: "many possible values, eg. doc,pdf,html"
          type: string
        count:
          description: The count of this type in SimSage.
          example: 312
          format: int64
          type: integer
      required:
      - count
      - documentType
      type: object
    CMParquetItem:
      description: "A single parquet item, a name with a timestamp."
      example:
        name: name
        time: 0
      properties:
        name:
          description: the name / type of item
          type: string
        time:
          description: a unix-time for this parquet item
          format: int64
          type: integer
      required:
      - name
      - time
      type: object
    CMParquetTimeList:
      description: This object is used to return a set of time-stamps (unix date-time
        items) related to the catalogue of inventory items inside SimSage for a given
        organisation/knowledge-base.  Each time-stamp represents a snapshot taken
        of the knowledge-base at a time by the user.
      example:
        kbId: kbId
        timeList:
        - name: name
          time: 0
        - name: name
          time: 0
        organisationId: organisationId
        totalCount: 6
      properties:
        organisationId:
          description: the organisation (its guid id)
          type: string
        kbId:
          description: the knowledge-base id (its guid id)
          type: string
        timeList:
          description: a list of unix-times for parquet items in the system
          items:
            $ref: '#/components/schemas/CMParquetItem'
          type: array
        totalCount:
          description: the total (non paged) amount of items available
          format: int32
          type: integer
      required:
      - kbId
      - organisationId
      - timeList
      - totalCount
      type: object
    CMUserNotification:
      description: A notification to a user from a subscription.
      example:
        sourceId: 1
        isFolder: false
        folder: true
        whoId: whoId
        created: 0
        description: something happened
        notificationType: document
        userId: userId
        url: /folder-1
        email: joe@bloggs.com
      properties:
        url:
          description: The unique URL of a folder.
          example: /folder-1
          type: string
        sourceId:
          description: the source-id of the owner of this folder
          example: 1
          format: int32
          type: integer
        isFolder:
          description: is this a notification for a folder or a file?
          example: false
          type: boolean
        userId:
          description: "the user to be notified, a guid"
          type: string
        whoId:
          description: "the user that made the change, a guid"
          type: string
        email:
          description: the email address of the user that made the change
          example: joe@bloggs.com
          type: string
        notificationType:
          description: the type of the notification
          example: document
          type: string
        description:
          description: the contents of the notification
          example: something happened
          type: string
        created:
          description: a unix-timestamp of the creation date-time of this record
          format: int64
          type: integer
        folder:
          type: boolean
          writeOnly: true
      required:
      - created
      - description
      - email
      - isFolder
      - notificationType
      - sourceId
      - url
      - userId
      - whoId
      type: object
    DocumentDeleted:
      example:
        sourceId: 0
        deleted: 6
        userId: userId
        url: url
      properties:
        sourceId:
          format: int32
          type: integer
        url:
          type: string
        userId:
          type: string
        deleted:
          format: int64
          type: integer
      required:
      - deleted
      - sourceId
      - url
      - userId
      type: object
    CMDUserDashboard:
      description: A user's dashboard contents.
      example:
        subscriptions:
          documentList:
          - sourceId: 1
            metadata:
              file-extension: txt
            organisationId: organisationId
            parentUrl: parentUrl
            numSentences: 3
            acls:
            - access: RW
              acl: e.g. "example@simsage.co.uk" or "domain users"
              isUser: true
              user: true
            - access: RW
              acl: e.g. "example@simsage.co.uk" or "domain users"
              isUser: true
              user: true
            documentType: "many possible values, eg. doc,pdf,html"
            origin: uploaded
            noteList:
            - kbId: kbId
              noteText: example text
              organisationId: organisationId
              created: 1
              noteId: 1
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            - kbId: kbId
              noteText: example text
              organisationId: organisationId
              created: 1
              noteId: 1
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            urlId: 1
            title: My little pony.
            uploaded: 6
            versionList:
            - created: 1
              changeHash: 098f6bcd4621d373cade4e832627b4f6
              version: 1
              url: https://server.com/document-1
            - created: 1
              changeHash: 098f6bcd4621d373cade4e832627b4f6
              version: 1
              url: https://server.com/document-1
            activityList:
            - kbId: kbId
              organisationId: organisationId
              created: 6
              description: something happened
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            - kbId: kbId
              organisationId: organisationId
              created: 6
              description: something happened
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            kbId: kbId
            textSize: 1
            indexed: 7
            author: John Manyberries
            created: 0
            crawled: 5
            binarySize: 7
            typeDescription: Portable Network Graphics
            url: document-1
            folderId: (a guid)
            contentHash: 098f6bcd4621d373cade4e832627b4f6
            filename: index.html
            converted: 5
            previewed: 9
            numRelationships: 4
            changeHash: 118f6bcd4621d373cade4e832627b4cc
            parsed: 2
            lastModified: 1
            numWords: 2
          - sourceId: 1
            metadata:
              file-extension: txt
            organisationId: organisationId
            parentUrl: parentUrl
            numSentences: 3
            acls:
            - access: RW
              acl: e.g. "example@simsage.co.uk" or "domain users"
              isUser: true
              user: true
            - access: RW
              acl: e.g. "example@simsage.co.uk" or "domain users"
              isUser: true
              user: true
            documentType: "many possible values, eg. doc,pdf,html"
            origin: uploaded
            noteList:
            - kbId: kbId
              noteText: example text
              organisationId: organisationId
              created: 1
              noteId: 1
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            - kbId: kbId
              noteText: example text
              organisationId: organisationId
              created: 1
              noteId: 1
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            urlId: 1
            title: My little pony.
            uploaded: 6
            versionList:
            - created: 1
              changeHash: 098f6bcd4621d373cade4e832627b4f6
              version: 1
              url: https://server.com/document-1
            - created: 1
              changeHash: 098f6bcd4621d373cade4e832627b4f6
              version: 1
              url: https://server.com/document-1
            activityList:
            - kbId: kbId
              organisationId: organisationId
              created: 6
              description: something happened
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            - kbId: kbId
              organisationId: organisationId
              created: 6
              description: something happened
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            kbId: kbId
            textSize: 1
            indexed: 7
            author: John Manyberries
            created: 0
            crawled: 5
            binarySize: 7
            typeDescription: Portable Network Graphics
            url: document-1
            folderId: (a guid)
            contentHash: 098f6bcd4621d373cade4e832627b4f6
            filename: index.html
            converted: 5
            previewed: 9
            numRelationships: 4
            changeHash: 118f6bcd4621d373cade4e832627b4cc
            parsed: 2
            lastModified: 1
            numWords: 2
          folderList:
          - sourceId: 1
            itemType: dms
            acls:
            - access: RW
              acl: e.g. "example@simsage.co.uk" or "domain users"
              isUser: true
              user: true
            - access: RW
              acl: e.g. "example@simsage.co.uk" or "domain users"
              isUser: true
              user: true
            parentFolderId: parentFolderId
            folderName: folder-1
            urlId: 22
            folderList:
            - null
            - null
            url: /folder-1/document-1
            folderId: folderId
            fileList:
            - sourceId: 1
              metadata:
                file-extension: txt
              organisationId: organisationId
              parentUrl: parentUrl
              numSentences: 3
              acls:
              - access: RW
                acl: e.g. "example@simsage.co.uk" or "domain users"
                isUser: true
                user: true
              - access: RW
                acl: e.g. "example@simsage.co.uk" or "domain users"
                isUser: true
                user: true
              documentType: "many possible values, eg. doc,pdf,html"
              origin: uploaded
              noteList:
              - kbId: kbId
                noteText: example text
                organisationId: organisationId
                created: 1
                noteId: 1
                userId: "1234"
                url: document-1
                email: joe@bloggs.com
              - kbId: kbId
                noteText: example text
                organisationId: organisationId
                created: 1
                noteId: 1
                userId: "1234"
                url: document-1
                email: joe@bloggs.com
              urlId: 1
              title: My little pony.
              uploaded: 6
              versionList:
              - created: 1
                changeHash: 098f6bcd4621d373cade4e832627b4f6
                version: 1
                url: https://server.com/document-1
              - created: 1
                changeHash: 098f6bcd4621d373cade4e832627b4f6
                version: 1
                url: https://server.com/document-1
              activityList:
              - kbId: kbId
                organisationId: organisationId
                created: 6
                description: something happened
                userId: "1234"
                url: document-1
                email: joe@bloggs.com
              - kbId: kbId
                organisationId: organisationId
                created: 6
                description: something happened
                userId: "1234"
                url: document-1
                email: joe@bloggs.com
              kbId: kbId
              textSize: 1
              indexed: 7
              author: John Manyberries
              created: 0
              crawled: 5
              binarySize: 7
              typeDescription: Portable Network Graphics
              url: document-1
              folderId: (a guid)
              contentHash: 098f6bcd4621d373cade4e832627b4f6
              filename: index.html
              converted: 5
              previewed: 9
              numRelationships: 4
              changeHash: 118f6bcd4621d373cade4e832627b4cc
              parsed: 2
              lastModified: 1
              numWords: 2
            - sourceId: 1
              metadata:
                file-extension: txt
              organisationId: organisationId
              parentUrl: parentUrl
              numSentences: 3
              acls:
              - access: RW
                acl: e.g. "example@simsage.co.uk" or "domain users"
                isUser: true
                user: true
              - access: RW
                acl: e.g. "example@simsage.co.uk" or "domain users"
                isUser: true
                user: true
              documentType: "many possible values, eg. doc,pdf,html"
              origin: uploaded
              noteList:
              - kbId: kbId
                noteText: example text
                organisationId: organisationId
                created: 1
                noteId: 1
                userId: "1234"
                url: document-1
                email: joe@bloggs.com
              - kbId: kbId
                noteText: example text
                organisationId: organisationId
                created: 1
                noteId: 1
                userId: "1234"
                url: document-1
                email: joe@bloggs.com
              urlId: 1
              title: My little pony.
              uploaded: 6
              versionList:
              - created: 1
                changeHash: 098f6bcd4621d373cade4e832627b4f6
                version: 1
                url: https://server.com/document-1
              - created: 1
                changeHash: 098f6bcd4621d373cade4e832627b4f6
                version: 1
                url: https://server.com/document-1
              activityList:
              - kbId: kbId
                organisationId: organisationId
                created: 6
                description: something happened
                userId: "1234"
                url: document-1
                email: joe@bloggs.com
              - kbId: kbId
                organisationId: organisationId
                created: 6
                description: something happened
                userId: "1234"
                url: document-1
                email: joe@bloggs.com
              kbId: kbId
              textSize: 1
              indexed: 7
              author: John Manyberries
              created: 0
              crawled: 5
              binarySize: 7
              typeDescription: Portable Network Graphics
              url: document-1
              folderId: (a guid)
              contentHash: 098f6bcd4621d373cade4e832627b4f6
              filename: index.html
              converted: 5
              previewed: 9
              numRelationships: 4
              changeHash: 118f6bcd4621d373cade4e832627b4cc
              parsed: 2
              lastModified: 1
              numWords: 2
          - sourceId: 1
            itemType: dms
            acls:
            - access: RW
              acl: e.g. "example@simsage.co.uk" or "domain users"
              isUser: true
              user: true
            - access: RW
              acl: e.g. "example@simsage.co.uk" or "domain users"
              isUser: true
              user: true
            parentFolderId: parentFolderId
            folderName: folder-1
            urlId: 22
            folderList:
            - null
            - null
            url: /folder-1/document-1
            folderId: folderId
            fileList:
            - sourceId: 1
              metadata:
                file-extension: txt
              organisationId: organisationId
              parentUrl: parentUrl
              numSentences: 3
              acls:
              - access: RW
                acl: e.g. "example@simsage.co.uk" or "domain users"
                isUser: true
                user: true
              - access: RW
                acl: e.g. "example@simsage.co.uk" or "domain users"
                isUser: true
                user: true
              documentType: "many possible values, eg. doc,pdf,html"
              origin: uploaded
              noteList:
              - kbId: kbId
                noteText: example text
                organisationId: organisationId
                created: 1
                noteId: 1
                userId: "1234"
                url: document-1
                email: joe@bloggs.com
              - kbId: kbId
                noteText: example text
                organisationId: organisationId
                created: 1
                noteId: 1
                userId: "1234"
                url: document-1
                email: joe@bloggs.com
              urlId: 1
              title: My little pony.
              uploaded: 6
              versionList:
              - created: 1
                changeHash: 098f6bcd4621d373cade4e832627b4f6
                version: 1
                url: https://server.com/document-1
              - created: 1
                changeHash: 098f6bcd4621d373cade4e832627b4f6
                version: 1
                url: https://server.com/document-1
              activityList:
              - kbId: kbId
                organisationId: organisationId
                created: 6
                description: something happened
                userId: "1234"
                url: document-1
                email: joe@bloggs.com
              - kbId: kbId
                organisationId: organisationId
                created: 6
                description: something happened
                userId: "1234"
                url: document-1
                email: joe@bloggs.com
              kbId: kbId
              textSize: 1
              indexed: 7
              author: John Manyberries
              created: 0
              crawled: 5
              binarySize: 7
              typeDescription: Portable Network Graphics
              url: document-1
              folderId: (a guid)
              contentHash: 098f6bcd4621d373cade4e832627b4f6
              filename: index.html
              converted: 5
              previewed: 9
              numRelationships: 4
              changeHash: 118f6bcd4621d373cade4e832627b4cc
              parsed: 2
              lastModified: 1
              numWords: 2
            - sourceId: 1
              metadata:
                file-extension: txt
              organisationId: organisationId
              parentUrl: parentUrl
              numSentences: 3
              acls:
              - access: RW
                acl: e.g. "example@simsage.co.uk" or "domain users"
                isUser: true
                user: true
              - access: RW
                acl: e.g. "example@simsage.co.uk" or "domain users"
                isUser: true
                user: true
              documentType: "many possible values, eg. doc,pdf,html"
              origin: uploaded
              noteList:
              - kbId: kbId
                noteText: example text
                organisationId: organisationId
                created: 1
                noteId: 1
                userId: "1234"
                url: document-1
                email: joe@bloggs.com
              - kbId: kbId
                noteText: example text
                organisationId: organisationId
                created: 1
                noteId: 1
                userId: "1234"
                url: document-1
                email: joe@bloggs.com
              urlId: 1
              title: My little pony.
              uploaded: 6
              versionList:
              - created: 1
                changeHash: 098f6bcd4621d373cade4e832627b4f6
                version: 1
                url: https://server.com/document-1
              - created: 1
                changeHash: 098f6bcd4621d373cade4e832627b4f6
                version: 1
                url: https://server.com/document-1
              activityList:
              - kbId: kbId
                organisationId: organisationId
                created: 6
                description: something happened
                userId: "1234"
                url: document-1
                email: joe@bloggs.com
              - kbId: kbId
                organisationId: organisationId
                created: 6
                description: something happened
                userId: "1234"
                url: document-1
                email: joe@bloggs.com
              kbId: kbId
              textSize: 1
              indexed: 7
              author: John Manyberries
              created: 0
              crawled: 5
              binarySize: 7
              typeDescription: Portable Network Graphics
              url: document-1
              folderId: (a guid)
              contentHash: 098f6bcd4621d373cade4e832627b4f6
              filename: index.html
              converted: 5
              previewed: 9
              numRelationships: 4
              changeHash: 118f6bcd4621d373cade4e832627b4cc
              parsed: 2
              lastModified: 1
              numWords: 2
        lockList:
        - sourceId: 1
          metadata:
            file-extension: txt
          organisationId: organisationId
          parentUrl: parentUrl
          numSentences: 3
          acls:
          - access: RW
            acl: e.g. "example@simsage.co.uk" or "domain users"
            isUser: true
            user: true
          - access: RW
            acl: e.g. "example@simsage.co.uk" or "domain users"
            isUser: true
            user: true
          documentType: "many possible values, eg. doc,pdf,html"
          origin: uploaded
          noteList:
          - kbId: kbId
            noteText: example text
            organisationId: organisationId
            created: 1
            noteId: 1
            userId: "1234"
            url: document-1
            email: joe@bloggs.com
          - kbId: kbId
            noteText: example text
            organisationId: organisationId
            created: 1
            noteId: 1
            userId: "1234"
            url: document-1
            email: joe@bloggs.com
          urlId: 1
          title: My little pony.
          uploaded: 6
          versionList:
          - created: 1
            changeHash: 098f6bcd4621d373cade4e832627b4f6
            version: 1
            url: https://server.com/document-1
          - created: 1
            changeHash: 098f6bcd4621d373cade4e832627b4f6
            version: 1
            url: https://server.com/document-1
          activityList:
          - kbId: kbId
            organisationId: organisationId
            created: 6
            description: something happened
            userId: "1234"
            url: document-1
            email: joe@bloggs.com
          - kbId: kbId
            organisationId: organisationId
            created: 6
            description: something happened
            userId: "1234"
            url: document-1
            email: joe@bloggs.com
          kbId: kbId
          textSize: 1
          indexed: 7
          author: John Manyberries
          created: 0
          crawled: 5
          binarySize: 7
          typeDescription: Portable Network Graphics
          url: document-1
          folderId: (a guid)
          contentHash: 098f6bcd4621d373cade4e832627b4f6
          filename: index.html
          converted: 5
          previewed: 9
          numRelationships: 4
          changeHash: 118f6bcd4621d373cade4e832627b4cc
          parsed: 2
          lastModified: 1
          numWords: 2
        - sourceId: 1
          metadata:
            file-extension: txt
          organisationId: organisationId
          parentUrl: parentUrl
          numSentences: 3
          acls:
          - access: RW
            acl: e.g. "example@simsage.co.uk" or "domain users"
            isUser: true
            user: true
          - access: RW
            acl: e.g. "example@simsage.co.uk" or "domain users"
            isUser: true
            user: true
          documentType: "many possible values, eg. doc,pdf,html"
          origin: uploaded
          noteList:
          - kbId: kbId
            noteText: example text
            organisationId: organisationId
            created: 1
            noteId: 1
            userId: "1234"
            url: document-1
            email: joe@bloggs.com
          - kbId: kbId
            noteText: example text
            organisationId: organisationId
            created: 1
            noteId: 1
            userId: "1234"
            url: document-1
            email: joe@bloggs.com
          urlId: 1
          title: My little pony.
          uploaded: 6
          versionList:
          - created: 1
            changeHash: 098f6bcd4621d373cade4e832627b4f6
            version: 1
            url: https://server.com/document-1
          - created: 1
            changeHash: 098f6bcd4621d373cade4e832627b4f6
            version: 1
            url: https://server.com/document-1
          activityList:
          - kbId: kbId
            organisationId: organisationId
            created: 6
            description: something happened
            userId: "1234"
            url: document-1
            email: joe@bloggs.com
          - kbId: kbId
            organisationId: organisationId
            created: 6
            description: something happened
            userId: "1234"
            url: document-1
            email: joe@bloggs.com
          kbId: kbId
          textSize: 1
          indexed: 7
          author: John Manyberries
          created: 0
          crawled: 5
          binarySize: 7
          typeDescription: Portable Network Graphics
          url: document-1
          folderId: (a guid)
          contentHash: 098f6bcd4621d373cade4e832627b4f6
          filename: index.html
          converted: 5
          previewed: 9
          numRelationships: 4
          changeHash: 118f6bcd4621d373cade4e832627b4cc
          parsed: 2
          lastModified: 1
          numWords: 2
        notificationList:
        - sourceId: 1
          isFolder: false
          folder: true
          whoId: whoId
          created: 0
          description: something happened
          notificationType: document
          userId: userId
          url: /folder-1
          email: joe@bloggs.com
        - sourceId: 1
          isFolder: false
          folder: true
          whoId: whoId
          created: 0
          description: something happened
          notificationType: document
          userId: userId
          url: /folder-1
          email: joe@bloggs.com
        userList:
        - firstName: John
          operatorKBList:
          - kbId: kbId
            organisationId: 00000000-0000-0000-0000-000000000001
            userId: userId
          - kbId: kbId
            organisationId: 00000000-0000-0000-0000-000000000001
            userId: userId
          surname: Smallberries
          roles:
          - organisationId: 00000000-0000-0000-0000-000000000001
            role: "one of admin,manager,operator,dms"
          - organisationId: 00000000-0000-0000-0000-000000000001
            role: "one of admin,manager,operator,dms"
          groupList:
          - organisationId: 00000000-0000-0000-0000-000000000001
            userIdList:
            - userIdList
            - userIdList
            name: Domain Users
          - organisationId: 00000000-0000-0000-0000-000000000001
            userIdList:
            - userIdList
            - userIdList
            name: Domain Users
          id: id
          email: example@simsage.co.uk
        - firstName: John
          operatorKBList:
          - kbId: kbId
            organisationId: 00000000-0000-0000-0000-000000000001
            userId: userId
          - kbId: kbId
            organisationId: 00000000-0000-0000-0000-000000000001
            userId: userId
          surname: Smallberries
          roles:
          - organisationId: 00000000-0000-0000-0000-000000000001
            role: "one of admin,manager,operator,dms"
          - organisationId: 00000000-0000-0000-0000-000000000001
            role: "one of admin,manager,operator,dms"
          groupList:
          - organisationId: 00000000-0000-0000-0000-000000000001
            userIdList:
            - userIdList
            - userIdList
            name: Domain Users
          - organisationId: 00000000-0000-0000-0000-000000000001
            userIdList:
            - userIdList
            - userIdList
            name: Domain Users
          id: id
          email: example@simsage.co.uk
        folderRoot:
          sourceId: 1
          itemType: dms
          acls:
          - access: RW
            acl: e.g. "example@simsage.co.uk" or "domain users"
            isUser: true
            user: true
          - access: RW
            acl: e.g. "example@simsage.co.uk" or "domain users"
            isUser: true
            user: true
          parentFolderId: parentFolderId
          folderName: folder-1
          urlId: 22
          folderList:
          - null
          - null
          url: /folder-1/document-1
          folderId: folderId
          fileList:
          - sourceId: 1
            metadata:
              file-extension: txt
            organisationId: organisationId
            parentUrl: parentUrl
            numSentences: 3
            acls:
            - access: RW
              acl: e.g. "example@simsage.co.uk" or "domain users"
              isUser: true
              user: true
            - access: RW
              acl: e.g. "example@simsage.co.uk" or "domain users"
              isUser: true
              user: true
            documentType: "many possible values, eg. doc,pdf,html"
            origin: uploaded
            noteList:
            - kbId: kbId
              noteText: example text
              organisationId: organisationId
              created: 1
              noteId: 1
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            - kbId: kbId
              noteText: example text
              organisationId: organisationId
              created: 1
              noteId: 1
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            urlId: 1
            title: My little pony.
            uploaded: 6
            versionList:
            - created: 1
              changeHash: 098f6bcd4621d373cade4e832627b4f6
              version: 1
              url: https://server.com/document-1
            - created: 1
              changeHash: 098f6bcd4621d373cade4e832627b4f6
              version: 1
              url: https://server.com/document-1
            activityList:
            - kbId: kbId
              organisationId: organisationId
              created: 6
              description: something happened
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            - kbId: kbId
              organisationId: organisationId
              created: 6
              description: something happened
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            kbId: kbId
            textSize: 1
            indexed: 7
            author: John Manyberries
            created: 0
            crawled: 5
            binarySize: 7
            typeDescription: Portable Network Graphics
            url: document-1
            folderId: (a guid)
            contentHash: 098f6bcd4621d373cade4e832627b4f6
            filename: index.html
            converted: 5
            previewed: 9
            numRelationships: 4
            changeHash: 118f6bcd4621d373cade4e832627b4cc
            parsed: 2
            lastModified: 1
            numWords: 2
          - sourceId: 1
            metadata:
              file-extension: txt
            organisationId: organisationId
            parentUrl: parentUrl
            numSentences: 3
            acls:
            - access: RW
              acl: e.g. "example@simsage.co.uk" or "domain users"
              isUser: true
              user: true
            - access: RW
              acl: e.g. "example@simsage.co.uk" or "domain users"
              isUser: true
              user: true
            documentType: "many possible values, eg. doc,pdf,html"
            origin: uploaded
            noteList:
            - kbId: kbId
              noteText: example text
              organisationId: organisationId
              created: 1
              noteId: 1
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            - kbId: kbId
              noteText: example text
              organisationId: organisationId
              created: 1
              noteId: 1
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            urlId: 1
            title: My little pony.
            uploaded: 6
            versionList:
            - created: 1
              changeHash: 098f6bcd4621d373cade4e832627b4f6
              version: 1
              url: https://server.com/document-1
            - created: 1
              changeHash: 098f6bcd4621d373cade4e832627b4f6
              version: 1
              url: https://server.com/document-1
            activityList:
            - kbId: kbId
              organisationId: organisationId
              created: 6
              description: something happened
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            - kbId: kbId
              organisationId: organisationId
              created: 6
              description: something happened
              userId: "1234"
              url: document-1
              email: joe@bloggs.com
            kbId: kbId
            textSize: 1
            indexed: 7
            author: John Manyberries
            created: 0
            crawled: 5
            binarySize: 7
            typeDescription: Portable Network Graphics
            url: document-1
            folderId: (a guid)
            contentHash: 098f6bcd4621d373cade4e832627b4f6
            filename: index.html
            converted: 5
            previewed: 9
            numRelationships: 4
            changeHash: 118f6bcd4621d373cade4e832627b4cc
            parsed: 2
            lastModified: 1
            numWords: 2
        categoryList:
        - categoryType: categoryType
          sortDefault: sortDefault
          scType: SCT_PLAIN
          metadata: metadata
          minValue: 6
          sortAscText: sortAscText
          sortDescText: sortDescText
          displayName: displayName
          maxValue: 1
          sort: true
          items:
          - name: name
            count: 5
          - name: name
            count: 5
          order: 0
        - categoryType: categoryType
          sortDefault: sortDefault
          scType: SCT_PLAIN
          metadata: metadata
          minValue: 6
          sortAscText: sortAscText
          sortDescText: sortDescText
          displayName: displayName
          maxValue: 1
          sort: true
          items:
          - name: name
            count: 5
          - name: name
            count: 5
          order: 0
        groupList:
        - organisationId: 00000000-0000-0000-0000-000000000001
          userIdList:
          - userIdList
          - userIdList
          name: Domain Users
        - organisationId: 00000000-0000-0000-0000-000000000001
          userIdList:
          - userIdList
          - userIdList
          name: Domain Users
        userId: userId
        savedSearchList:
        - kbId: kbId
          organisationId: organisationId
          top: 5
          created: 5
          text: what is SimSage?
          userId: "1234"
        - kbId: kbId
          organisationId: organisationId
          top: 5
          created: 5
          text: what is SimSage?
          userId: "1234"
        bookmarkList:
        - kbId: kbId
          sourceId: 1
          isFolder: false
          organisationId: organisationId
          folder: true
          urlId: 22
          userId: userId
          url: document-1
        - kbId: kbId
          sourceId: 1
          isFolder: false
          organisationId: organisationId
          folder: true
          urlId: 22
          userId: userId
          url: document-1
      properties:
        userId:
          description: "the user's id, a guid"
          type: string
        lockList:
          description: list of locked documents for this user
          items:
            $ref: '#/components/schemas/CMDocument'
          type: array
        bookmarkList:
          description: list of bookmarks for this user
          items:
            $ref: '#/components/schemas/CMDocumentBookmark'
          type: array
        subscriptions:
          $ref: '#/components/schemas/CMSubscriptions'
        notificationList:
          description: list of DMS notifications for this user
          items:
            $ref: '#/components/schemas/CMUserNotification'
          type: array
        folderRoot:
          $ref: '#/components/schemas/CMDocumentFolder'
        savedSearchList:
          description: list of saved searches for this user
          items:
            $ref: '#/components/schemas/CMSavedSearch'
          type: array
        categoryList:
          description: Search categories / metadata searching
          items:
            $ref: '#/components/schemas/SearchCategory'
          type: array
        userList:
          description: list of users for ACLs
          items:
            $ref: '#/components/schemas/CMUser'
          type: array
        groupList:
          description: list of groups for ACLs
          items:
            $ref: '#/components/schemas/CMGroup'
          type: array
      required:
      - bookmarkList
      - categoryList
      - folderRoot
      - groupList
      - lockList
      - notificationList
      - savedSearchList
      - subscriptions
      - userId
      - userList
      type: object
    CMResultsSection:
      example:
        queryTokens:
        - type: type
          value: value
        - type: type
          value: value
        count: 6
        caption: caption
        hasSubTerms: true
      properties:
        queryTokens:
          items:
            $ref: '#/components/schemas/CMQueryToken'
          type: array
        caption:
          type: string
        hasSubTerms:
          type: boolean
        count:
          format: int32
          type: integer
      required:
      - caption
      - count
      - hasSubTerms
      - queryTokens
      type: object
    CMSearchResultSummary:
      example:
        kbId: kbId
        documentCount: 0
        projectType: projectType
        projectId: projectId
        results:
        - queryTokens:
          - type: type
            value: value
          - type: type
            value: value
          count: 6
          caption: caption
          hasSubTerms: true
        - queryTokens:
          - type: type
            value: value
          - type: type
            value: value
          count: 6
          caption: caption
          hasSubTerms: true
        projectTitle: projectTitle
      properties:
        projectId:
          type: string
        kbId:
          type: string
        projectType:
          type: string
        projectTitle:
          type: string
        documentCount:
          format: int32
          type: integer
        results:
          items:
            $ref: '#/components/schemas/CMResultsSection'
          type: array
      required:
      - documentCount
      - kbId
      - projectId
      - projectTitle
      - projectType
      - results
      type: object
    CMSearchResultSummaryTask:
      example:
        taskInfo:
          organisationId: organisationId
          sliceId: sliceId
          potentialUsers: potentialUsers
          excludedUsers: excludedUsers
          potentialGroups: potentialGroups
          crawlerKbId: crawlerKbId
          projectType: projectType
          sourceKbId: sourceKbId
          projectNarrative: projectNarrative
          taskType: taskType
          dateCreated: 2000-01-23T04:56:07.000+00:00
          processId: processId
          processName: processName
          dateCompleted: 2000-01-23T04:56:07.000+00:00
          taskName: taskName
          projectId: projectId
          assignedUser: assignedUser
          taskId: taskId
          projectTitle: projectTitle
        detail:
          kbId: kbId
          documentCount: 0
          projectType: projectType
          projectId: projectId
          results:
          - queryTokens:
            - type: type
              value: value
            - type: type
              value: value
            count: 6
            caption: caption
            hasSubTerms: true
          - queryTokens:
            - type: type
              value: value
            - type: type
              value: value
            count: 6
            caption: caption
            hasSubTerms: true
          projectTitle: projectTitle
      properties:
        taskInfo:
          $ref: '#/components/schemas/CMTaskInfo'
        detail:
          $ref: '#/components/schemas/CMSearchResultSummary'
      required:
      - detail
      - taskInfo
      type: object
    CMTaskInfo:
      example:
        organisationId: organisationId
        sliceId: sliceId
        potentialUsers: potentialUsers
        excludedUsers: excludedUsers
        potentialGroups: potentialGroups
        crawlerKbId: crawlerKbId
        projectType: projectType
        sourceKbId: sourceKbId
        projectNarrative: projectNarrative
        taskType: taskType
        dateCreated: 2000-01-23T04:56:07.000+00:00
        processId: processId
        processName: processName
        dateCompleted: 2000-01-23T04:56:07.000+00:00
        taskName: taskName
        projectId: projectId
        assignedUser: assignedUser
        taskId: taskId
        projectTitle: projectTitle
      properties:
        taskId:
          type: string
        projectId:
          type: string
        organisationId:
          type: string
        sourceKbId:
          type: string
        crawlerKbId:
          type: string
        projectType:
          type: string
        projectTitle:
          type: string
        projectNarrative:
          type: string
        sliceId:
          type: string
        processId:
          type: string
        processName:
          type: string
        taskType:
          type: string
        taskName:
          type: string
        dateCreated:
          format: date-time
          type: string
        dateCompleted:
          format: date-time
          type: string
        potentialUsers:
          type: string
        excludedUsers:
          type: string
        potentialGroups:
          type: string
        assignedUser:
          type: string
      required:
      - dateCreated
      - excludedUsers
      - organisationId
      - potentialGroups
      - potentialUsers
      - processId
      - processName
      - projectId
      - projectNarrative
      - projectTitle
      - projectType
      - sourceKbId
      - taskId
      - taskName
      - taskType
      type: object
    CMProjectSlice:
      example:
        reassignmentOptions:
        - sliceName: sliceName
          sliceId: sliceId
          users:
          - users
          - users
        - sliceName: sliceName
          sliceId: sliceId
          users:
          - users
          - users
        name: name
        description: description
        action: action
        id: id
        projectId: projectId
      properties:
        id:
          type: string
        projectId:
          type: string
        name:
          type: string
        description:
          type: string
        action:
          type: string
        reassignmentOptions:
          items:
            $ref: '#/components/schemas/CMSliceReassignment'
          type: array
      required:
      - action
      - description
      - id
      - name
      - projectId
      - reassignmentOptions
      type: object
    CMProjectSliceTask:
      example:
        taskInfo:
          organisationId: organisationId
          sliceId: sliceId
          potentialUsers: potentialUsers
          excludedUsers: excludedUsers
          potentialGroups: potentialGroups
          crawlerKbId: crawlerKbId
          projectType: projectType
          sourceKbId: sourceKbId
          projectNarrative: projectNarrative
          taskType: taskType
          dateCreated: 2000-01-23T04:56:07.000+00:00
          processId: processId
          processName: processName
          dateCompleted: 2000-01-23T04:56:07.000+00:00
          taskName: taskName
          projectId: projectId
          assignedUser: assignedUser
          taskId: taskId
          projectTitle: projectTitle
        detail:
          reassignmentOptions:
          - sliceName: sliceName
            sliceId: sliceId
            users:
            - users
            - users
          - sliceName: sliceName
            sliceId: sliceId
            users:
            - users
            - users
          name: name
          description: description
          action: action
          id: id
          projectId: projectId
      properties:
        taskInfo:
          $ref: '#/components/schemas/CMTaskInfo'
        detail:
          $ref: '#/components/schemas/CMProjectSlice'
      required:
      - detail
      - taskInfo
      type: object
    CMSliceReassignment:
      example:
        sliceName: sliceName
        sliceId: sliceId
        users:
        - users
        - users
      properties:
        sliceId:
          type: string
        sliceName:
          type: string
        users:
          items:
            type: string
          type: array
      required:
      - sliceId
      - sliceName
      - users
      type: object
    CMProjectInfo:
      example:
        search:
          keyedQueries:
          - defaultValue: defaultValue
            searchUsage: REQUIRED
            redactionUsage: REQUIRED
            caption: caption
            subTerms:
            - caption: caption
              type: type
              key: key
            - caption: caption
              type: type
              key: key
            key: key
          - defaultValue: defaultValue
            searchUsage: REQUIRED
            redactionUsage: REQUIRED
            caption: caption
            subTerms:
            - caption: caption
              type: type
              key: key
            - caption: caption
              type: type
              key: key
            key: key
          semanticTermQueries:
          - defaultValue: defaultValue
            searchUsage: REQUIRED
            redactionUsage: REQUIRED
            caption: caption
            subTerms:
            - caption: caption
              type: type
              key: key
            - caption: caption
              type: type
              key: key
            key: key
          - defaultValue: defaultValue
            searchUsage: REQUIRED
            redactionUsage: REQUIRED
            caption: caption
            subTerms:
            - caption: caption
              type: type
              key: key
            - caption: caption
              type: type
              key: key
            key: key
        sliceActions:
          key: sliceActions
        caption: caption
        description: description
        steps:
        - caption: caption
          config: "{}"
        - caption: caption
          config: "{}"
        key: key
        screenConfigs:
          key:
            key: "{}"
      properties:
        key:
          type: string
        caption:
          type: string
        description:
          type: string
        search:
          $ref: '#/components/schemas/CMSearchDefinition'
        steps:
          items:
            $ref: '#/components/schemas/CMStepConfig'
          type: array
        sliceActions:
          additionalProperties:
            type: string
          type: object
        screenConfigs:
          additionalProperties:
            additionalProperties:
              type: object
            type: object
          type: object
      required:
      - caption
      - description
      - key
      - screenConfigs
      - search
      - sliceActions
      - steps
      type: object
    CMSearchDefinition:
      example:
        keyedQueries:
        - defaultValue: defaultValue
          searchUsage: REQUIRED
          redactionUsage: REQUIRED
          caption: caption
          subTerms:
          - caption: caption
            type: type
            key: key
          - caption: caption
            type: type
            key: key
          key: key
        - defaultValue: defaultValue
          searchUsage: REQUIRED
          redactionUsage: REQUIRED
          caption: caption
          subTerms:
          - caption: caption
            type: type
            key: key
          - caption: caption
            type: type
            key: key
          key: key
        semanticTermQueries:
        - defaultValue: defaultValue
          searchUsage: REQUIRED
          redactionUsage: REQUIRED
          caption: caption
          subTerms:
          - caption: caption
            type: type
            key: key
          - caption: caption
            type: type
            key: key
          key: key
        - defaultValue: defaultValue
          searchUsage: REQUIRED
          redactionUsage: REQUIRED
          caption: caption
          subTerms:
          - caption: caption
            type: type
            key: key
          - caption: caption
            type: type
            key: key
          key: key
      properties:
        keyedQueries:
          items:
            $ref: '#/components/schemas/CMSearchTerm'
          type: array
        semanticTermQueries:
          items:
            $ref: '#/components/schemas/CMSearchTerm'
          type: array
      required:
      - keyedQueries
      - semanticTermQueries
      type: object
    CMSearchTerm:
      example:
        defaultValue: defaultValue
        searchUsage: REQUIRED
        redactionUsage: REQUIRED
        caption: caption
        subTerms:
        - caption: caption
          type: type
          key: key
        - caption: caption
          type: type
          key: key
        key: key
      properties:
        key:
          type: string
        caption:
          type: string
        searchUsage:
          enum:
          - REQUIRED
          - NOT_AVAILABLE
          - DEFAULT_ON
          - DEFAULT_OFF
          type: string
        redactionUsage:
          enum:
          - REQUIRED
          - NOT_AVAILABLE
          - DEFAULT_ON
          - DEFAULT_OFF
          type: string
        defaultValue:
          type: string
        subTerms:
          items:
            $ref: '#/components/schemas/CMSubTerm'
          type: array
      required:
      - caption
      - defaultValue
      - key
      - redactionUsage
      - searchUsage
      - subTerms
      type: object
    CMStepConfig:
      example:
        caption: caption
        config: "{}"
      properties:
        caption:
          type: string
        config:
          type: object
      required:
      - caption
      - config
      type: object
    CMSubTerm:
      example:
        caption: caption
        type: type
        key: key
      properties:
        key:
          type: string
        caption:
          type: string
        type:
          type: string
      required:
      - caption
      - key
      - type
      type: object
    CMProjectDefinitionTask:
      example:
        taskInfo:
          organisationId: organisationId
          sliceId: sliceId
          potentialUsers: potentialUsers
          excludedUsers: excludedUsers
          potentialGroups: potentialGroups
          crawlerKbId: crawlerKbId
          projectType: projectType
          sourceKbId: sourceKbId
          projectNarrative: projectNarrative
          taskType: taskType
          dateCreated: 2000-01-23T04:56:07.000+00:00
          processId: processId
          processName: processName
          dateCompleted: 2000-01-23T04:56:07.000+00:00
          taskName: taskName
          projectId: projectId
          assignedUser: assignedUser
          taskId: taskId
          projectTitle: projectTitle
        detail:
          semanticTerms:
          - search: true
            redact: true
            caption: caption
            searchDisabled: true
            redactionDisabled: true
            key: key
          - search: true
            redact: true
            caption: caption
            searchDisabled: true
            redactionDisabled: true
            key: key
          organisationId: organisationId
          validationResult:
            key: true
          keyedSearchTerms:
          - search: true
            rowRequired: true
            redact: true
            searchDisabled: true
            redactionDisabled: true
            value: value
            subTerms:
            - type: type
              value: value
              key: key
            - type: type
              value: value
              key: key
            key: key
          - search: true
            rowRequired: true
            redact: true
            searchDisabled: true
            redactionDisabled: true
            value: value
            subTerms:
            - type: type
              value: value
              key: key
            - type: type
              value: value
              key: key
            key: key
          projectFrame:
            narrative: narrative
            projectType: projectType
            title: title
          filters:
            knowledgeBase: knowledgeBase
            sources:
            - sources
            - sources
            filetypes:
            - filetypes
            - filetypes
          projectId: projectId
          taskId: taskId
      properties:
        taskInfo:
          $ref: '#/components/schemas/CMTaskInfo'
        detail:
          $ref: '#/components/schemas/CMProjectDefinition'
      required:
      - detail
      - taskInfo
      type: object
    LocatedRedaction:
      example:
        sliceId: sliceId
        bottom: 5.962134
        redactionType: redactionType
        queryId: 0
        redactionKey: redactionKey
        left: 1.4658129
        documentKey: documentKey
        isRedacted: true
        width: 5.637377
        page: 6
        projectId: projectId
        word: word
        height: 2.302136
      properties:
        projectId:
          type: string
        sliceId:
          type: string
        documentKey:
          type: string
        redactionType:
          type: string
        queryId:
          format: int32
          type: integer
        redactionKey:
          type: string
        word:
          type: string
        isRedacted:
          type: boolean
        page:
          format: int32
          type: integer
        left:
          format: float
          type: number
        bottom:
          format: float
          type: number
        width:
          format: float
          type: number
        height:
          format: float
          type: number
      required:
      - bottom
      - documentKey
      - height
      - isRedacted
      - left
      - page
      - projectId
      - redactionType
      - sliceId
      - width
      type: object
    CMCrawlerStatus:
      example:
        kbId: kbId
        organisationId: organisationId
        crawlerId: crawlerId
        isRunning: true
        projectType: projectType
        crawlerName: crawlerName
        startTime: 0
        endTime: 6
        specificJson: specificJson
        projectTitle: projectTitle
      properties:
        organisationId:
          type: string
        kbId:
          type: string
        projectTitle:
          type: string
        projectType:
          type: string
        crawlerId:
          type: string
        crawlerName:
          type: string
        startTime:
          format: int64
          type: integer
        endTime:
          format: int64
          type: integer
        isRunning:
          type: boolean
        specificJson:
          type: string
      required:
      - crawlerId
      - crawlerName
      - endTime
      - isRunning
      - kbId
      - organisationId
      - projectTitle
      - projectType
      - specificJson
      - startTime
      type: object
    CMCrawlerStatusTask:
      example:
        taskInfo:
          organisationId: organisationId
          sliceId: sliceId
          potentialUsers: potentialUsers
          excludedUsers: excludedUsers
          potentialGroups: potentialGroups
          crawlerKbId: crawlerKbId
          projectType: projectType
          sourceKbId: sourceKbId
          projectNarrative: projectNarrative
          taskType: taskType
          dateCreated: 2000-01-23T04:56:07.000+00:00
          processId: processId
          processName: processName
          dateCompleted: 2000-01-23T04:56:07.000+00:00
          taskName: taskName
          projectId: projectId
          assignedUser: assignedUser
          taskId: taskId
          projectTitle: projectTitle
        detail:
          kbId: kbId
          organisationId: organisationId
          crawlerId: crawlerId
          isRunning: true
          projectType: projectType
          crawlerName: crawlerName
          startTime: 0
          endTime: 6
          specificJson: specificJson
          projectTitle: projectTitle
      properties:
        taskInfo:
          $ref: '#/components/schemas/CMTaskInfo'
        detail:
          $ref: '#/components/schemas/CMCrawlerStatus'
      required:
      - detail
      - taskInfo
      type: object
    ContextItem:
      example:
        kbId: kbId
        nameValue:
          key: nameValue
        created: 1
        synSetLemma: synSetLemma
        synSetCloud:
        - synSetCloud
        - synSetCloud
      properties:
        kbId:
          type: string
        created:
          format: int64
          type: integer
        nameValue:
          additionalProperties:
            type: string
          type: object
        synSetLemma:
          type: string
        synSetCloud:
          items:
            type: string
          type: array
      required:
      - created
      - kbId
      - nameValue
      - synSetCloud
      - synSetLemma
      type: object
    Group:
      example:
        organisationId: organisationId
        userIdList:
        - userIdList
        - userIdList
        name: name
      properties:
        organisationId:
          type: string
        name:
          type: string
        userIdList:
          items:
            type: string
          type: array
      required:
      - name
      - organisationId
      - userIdList
      type: object
    OperatorKnowledgeBase:
      example:
        kbId: kbId
        organisationId: organisationId
        userId: userId
      properties:
        userId:
          type: string
        organisationId:
          type: string
        kbId:
          type: string
      required:
      - kbId
      - organisationId
      - userId
      type: object
    Organisation:
      example:
        autoCreateSSOUsers: true
        name: name
        autoCreateSSOACLList:
        - autoCreateSSOACLList
        - autoCreateSSOACLList
        autoCreateSSORoleList:
        - autoCreateSSORoleList
        - autoCreateSSORoleList
        id: id
        enabled: true
        autoCreateSSODomainList:
        - autoCreateSSODomainList
        - autoCreateSSODomainList
      properties:
        id:
          type: string
        name:
          type: string
        enabled:
          type: boolean
        autoCreateSSOUsers:
          type: boolean
        autoCreateSSODomainList:
          items:
            type: string
          type: array
        autoCreateSSOACLList:
          items:
            type: string
          type: array
        autoCreateSSORoleList:
          items:
            type: string
          type: array
      required:
      - autoCreateSSOACLList
      - autoCreateSSODomainList
      - autoCreateSSORoleList
      - autoCreateSSOUsers
      - enabled
      - id
      - name
      type: object
    Session:
      example:
        contextStack:
        - kbId: kbId
          nameValue:
            key: nameValue
          created: 1
          synSetLemma: synSetLemma
          synSetCloud:
          - synSetCloud
          - synSetCloud
        - kbId: kbId
          nameValue:
            key: nameValue
          created: 1
          synSetLemma: synSetLemma
          synSetCloud:
          - synSetCloud
          - synSetCloud
        organisationId: organisationId
        role: role
        ipAddress: ipAddress
        sessionType: sessionType
        lastAccess: 6
        id: id
        userId: userId
        email: email
      properties:
        id:
          type: string
        userId:
          type: string
        organisationId:
          type: string
        email:
          type: string
        ipAddress:
          type: string
        lastAccess:
          format: int64
          type: integer
        role:
          type: string
        sessionType:
          type: string
        contextStack:
          items:
            $ref: '#/components/schemas/ContextItem'
          type: array
      required:
      - contextStack
      - email
      - id
      - ipAddress
      - lastAccess
      - organisationId
      - role
      - sessionType
      - userId
      type: object
    SignInCmd:
      example:
        organisationId: organisationId
        session:
          contextStack:
          - kbId: kbId
            nameValue:
              key: nameValue
            created: 1
            synSetLemma: synSetLemma
            synSetCloud:
            - synSetCloud
            - synSetCloud
          - kbId: kbId
            nameValue:
              key: nameValue
            created: 1
            synSetLemma: synSetLemma
            synSetCloud:
            - synSetCloud
            - synSetCloud
          organisationId: organisationId
          role: role
          ipAddress: ipAddress
          sessionType: sessionType
          lastAccess: 6
          id: id
          userId: userId
          email: email
        roles:
        - roles
        - roles
        returnResult: true
        returnAddress: returnAddress
        timeOut: 0
        organisationList:
        - autoCreateSSOUsers: true
          name: name
          autoCreateSSOACLList:
          - autoCreateSSOACLList
          - autoCreateSSOACLList
          autoCreateSSORoleList:
          - autoCreateSSORoleList
          - autoCreateSSORoleList
          id: id
          enabled: true
          autoCreateSSODomainList:
          - autoCreateSSODomainList
          - autoCreateSSODomainList
        - autoCreateSSOUsers: true
          name: name
          autoCreateSSOACLList:
          - autoCreateSSOACLList
          - autoCreateSSOACLList
          autoCreateSSORoleList:
          - autoCreateSSORoleList
          - autoCreateSSORoleList
          id: id
          enabled: true
          autoCreateSSODomainList:
          - autoCreateSSODomainList
          - autoCreateSSODomainList
        jobId: jobId
        async: true
        password: password
        user:
          firstName: firstName
          operatorKBList:
          - kbId: kbId
            organisationId: organisationId
            userId: userId
          - kbId: kbId
            organisationId: organisationId
            userId: userId
          surname: surname
          roles:
          - organisationId: organisationId
            role: role
            userId: userId
          - organisationId: organisationId
            role: role
            userId: userId
          groupList:
          - organisationId: organisationId
            userIdList:
            - userIdList
            - userIdList
            name: name
          - organisationId: organisationId
            userIdList:
            - userIdList
            - userIdList
            name: name
          id: id
          confirmed: true
          email: email
          passwordHash: passwordHash
        isReturnResult: true
        email: email
        remoteAddress: remoteAddress
        errorStr: errorStr
      properties:
        jobId:
          type: string
        returnAddress:
          type: string
        errorStr:
          type: string
        timeOut:
          format: int64
          type: integer
        async:
          type: boolean
        isReturnResult:
          type: boolean
        email:
          type: string
        password:
          type: string
        roles:
          items:
            type: string
          type: array
        remoteAddress:
          type: string
        session:
          $ref: '#/components/schemas/Session'
        user:
          $ref: '#/components/schemas/User'
        organisationId:
          type: string
        organisationList:
          items:
            $ref: '#/components/schemas/Organisation'
          type: array
        returnResult:
          type: boolean
          writeOnly: true
      required:
      - async
      - email
      - errorStr
      - isReturnResult
      - jobId
      - organisationId
      - organisationList
      - password
      - remoteAddress
      - returnAddress
      - roles
      - session
      - timeOut
      - user
      type: object
    User:
      example:
        firstName: firstName
        operatorKBList:
        - kbId: kbId
          organisationId: organisationId
          userId: userId
        - kbId: kbId
          organisationId: organisationId
          userId: userId
        surname: surname
        roles:
        - organisationId: organisationId
          role: role
          userId: userId
        - organisationId: organisationId
          role: role
          userId: userId
        groupList:
        - organisationId: organisationId
          userIdList:
          - userIdList
          - userIdList
          name: name
        - organisationId: organisationId
          userIdList:
          - userIdList
          - userIdList
          name: name
        id: id
        confirmed: true
        email: email
        passwordHash: passwordHash
      properties:
        id:
          type: string
        email:
          type: string
        firstName:
          type: string
        surname:
          type: string
        passwordHash:
          type: string
        confirmed:
          type: boolean
        roles:
          items:
            $ref: '#/components/schemas/UserRole'
          type: array
        operatorKBList:
          items:
            $ref: '#/components/schemas/OperatorKnowledgeBase'
          type: array
        groupList:
          items:
            $ref: '#/components/schemas/Group'
          type: array
      required:
      - confirmed
      - email
      - firstName
      - groupList
      - id
      - operatorKBList
      - passwordHash
      - roles
      - surname
      type: object
    UserRole:
      example:
        organisationId: organisationId
        role: role
        userId: userId
      properties:
        userId:
          type: string
        organisationId:
          type: string
        role:
          type: string
      required:
      - organisationId
      - role
      - userId
      type: object
    Backup:
      example:
        organisationId: organisationId
        data: data
        backupId: 0
        name: name
      properties:
        backupId:
          format: int64
          type: integer
        organisationId:
          type: string
        name:
          type: string
        data:
          type: string
      required:
      - backupId
      - data
      - name
      - organisationId
      type: object
    CMUserList:
      description: A paginated/filtered list of users with a total user count.
      example:
        userList: []
        userCount: 1000
      properties:
        userList:
          description: the list of user objects.
          example: []
          items:
            $ref: '#/components/schemas/CMUser'
          type: array
        userCount:
          description: the total user count.
          example: 1000
          format: int32
          type: integer
      required:
      - userCount
      - userList
      type: object
    CMGroupList:
      description: A security-group list.  A list of groups for security purposes.
      example:
        userList:
        - firstName: John
          operatorKBList:
          - kbId: kbId
            organisationId: 00000000-0000-0000-0000-000000000001
            userId: userId
          - kbId: kbId
            organisationId: 00000000-0000-0000-0000-000000000001
            userId: userId
          surname: Smallberries
          roles:
          - organisationId: 00000000-0000-0000-0000-000000000001
            role: "one of admin,manager,operator,dms"
          - organisationId: 00000000-0000-0000-0000-000000000001
            role: "one of admin,manager,operator,dms"
          groupList:
          - organisationId: 00000000-0000-0000-0000-000000000001
            userIdList:
            - userIdList
            - userIdList
            name: Domain Users
          - organisationId: 00000000-0000-0000-0000-000000000001
            userIdList:
            - userIdList
            - userIdList
            name: Domain Users
          id: id
          email: example@simsage.co.uk
        - firstName: John
          operatorKBList:
          - kbId: kbId
            organisationId: 00000000-0000-0000-0000-000000000001
            userId: userId
          - kbId: kbId
            organisationId: 00000000-0000-0000-0000-000000000001
            userId: userId
          surname: Smallberries
          roles:
          - organisationId: 00000000-0000-0000-0000-000000000001
            role: "one of admin,manager,operator,dms"
          - organisationId: 00000000-0000-0000-0000-000000000001
            role: "one of admin,manager,operator,dms"
          groupList:
          - organisationId: 00000000-0000-0000-0000-000000000001
            userIdList:
            - userIdList
            - userIdList
            name: Domain Users
          - organisationId: 00000000-0000-0000-0000-000000000001
            userIdList:
            - userIdList
            - userIdList
            name: Domain Users
          id: id
          email: example@simsage.co.uk
        groupList:
        - organisationId: 00000000-0000-0000-0000-000000000001
          userIdList:
          - userIdList
          - userIdList
          name: Domain Users
        - organisationId: 00000000-0000-0000-0000-000000000001
          userIdList:
          - userIdList
          - userIdList
          name: Domain Users
      properties:
        groupList:
          description: the list of filtered/paginated groups
          items:
            $ref: '#/components/schemas/CMGroup'
          type: array
        userList:
          description: the list of users for all groups
          items:
            $ref: '#/components/schemas/CMUser'
          type: array
      required:
      - groupList
      - userList
      type: object
    SignInDmsCmd:
      example:
        organisationId: organisationId
        session:
          contextStack:
          - kbId: kbId
            nameValue:
              key: nameValue
            created: 1
            synSetLemma: synSetLemma
            synSetCloud:
            - synSetCloud
            - synSetCloud
          - kbId: kbId
            nameValue:
              key: nameValue
            created: 1
            synSetLemma: synSetLemma
            synSetCloud:
            - synSetCloud
            - synSetCloud
          organisationId: organisationId
          role: role
          ipAddress: ipAddress
          sessionType: sessionType
          lastAccess: 6
          id: id
          userId: userId
          email: email
        roles:
        - roles
        - roles
        returnResult: true
        returnAddress: returnAddress
        timeOut: 0
        jobId: jobId
        async: true
        password: password
        user:
          firstName: firstName
          operatorKBList:
          - kbId: kbId
            organisationId: organisationId
            userId: userId
          - kbId: kbId
            organisationId: organisationId
            userId: userId
          surname: surname
          roles:
          - organisationId: organisationId
            role: role
            userId: userId
          - organisationId: organisationId
            role: role
            userId: userId
          groupList:
          - organisationId: organisationId
            userIdList:
            - userIdList
            - userIdList
            name: name
          - organisationId: organisationId
            userIdList:
            - userIdList
            - userIdList
            name: name
          id: id
          confirmed: true
          email: email
          passwordHash: passwordHash
        isReturnResult: true
        email: email
        remoteAddress: remoteAddress
        errorStr: errorStr
      properties:
        jobId:
          type: string
        returnAddress:
          type: string
        errorStr:
          type: string
        timeOut:
          format: int64
          type: integer
        async:
          type: boolean
        isReturnResult:
          type: boolean
        email:
          type: string
        password:
          type: string
        roles:
          items:
            type: string
          type: array
        remoteAddress:
          type: string
        session:
          $ref: '#/components/schemas/Session'
        user:
          $ref: '#/components/schemas/User'
        organisationId:
          type: string
        returnResult:
          type: boolean
          writeOnly: true
      required:
      - async
      - email
      - errorStr
      - isReturnResult
      - jobId
      - organisationId
      - password
      - remoteAddress
      - returnAddress
      - roles
      - session
      - timeOut
      - user
      type: object
    SignInAdmin:
      example:
        organisationId: organisationId
        session:
          contextStack:
          - kbId: kbId
            nameValue:
              key: nameValue
            created: 1
            synSetLemma: synSetLemma
            synSetCloud:
            - synSetCloud
            - synSetCloud
          - kbId: kbId
            nameValue:
              key: nameValue
            created: 1
            synSetLemma: synSetLemma
            synSetCloud:
            - synSetCloud
            - synSetCloud
          organisationId: organisationId
          role: role
          ipAddress: ipAddress
          sessionType: sessionType
          lastAccess: 6
          id: id
          userId: userId
          email: email
        roles:
        - roles
        - roles
        returnResult: true
        returnAddress: returnAddress
        timeOut: 0
        organisationList:
        - autoCreateSSOUsers: true
          name: name
          autoCreateSSOACLList:
          - autoCreateSSOACLList
          - autoCreateSSOACLList
          autoCreateSSORoleList:
          - autoCreateSSORoleList
          - autoCreateSSORoleList
          id: id
          enabled: true
          autoCreateSSODomainList:
          - autoCreateSSODomainList
          - autoCreateSSODomainList
        - autoCreateSSOUsers: true
          name: name
          autoCreateSSOACLList:
          - autoCreateSSOACLList
          - autoCreateSSOACLList
          autoCreateSSORoleList:
          - autoCreateSSORoleList
          - autoCreateSSORoleList
          id: id
          enabled: true
          autoCreateSSODomainList:
          - autoCreateSSODomainList
          - autoCreateSSODomainList
        jobId: jobId
        async: true
        password: password
        user:
          firstName: firstName
          operatorKBList:
          - kbId: kbId
            organisationId: organisationId
            userId: userId
          - kbId: kbId
            organisationId: organisationId
            userId: userId
          surname: surname
          roles:
          - organisationId: organisationId
            role: role
            userId: userId
          - organisationId: organisationId
            role: role
            userId: userId
          groupList:
          - organisationId: organisationId
            userIdList:
            - userIdList
            - userIdList
            name: name
          - organisationId: organisationId
            userIdList:
            - userIdList
            - userIdList
            name: name
          id: id
          confirmed: true
          email: email
          passwordHash: passwordHash
        isReturnResult: true
        email: email
        remoteAddress: remoteAddress
        errorStr: errorStr
      properties:
        jobId:
          type: string
        returnAddress:
          type: string
        errorStr:
          type: string
        timeOut:
          format: int64
          type: integer
        async:
          type: boolean
        isReturnResult:
          type: boolean
        email:
          type: string
        password:
          type: string
        roles:
          items:
            type: string
          type: array
        remoteAddress:
          type: string
        session:
          $ref: '#/components/schemas/Session'
        user:
          $ref: '#/components/schemas/User'
        organisationId:
          type: string
        organisationList:
          items:
            $ref: '#/components/schemas/Organisation'
          type: array
        returnResult:
          type: boolean
          writeOnly: true
      required:
      - async
      - email
      - errorStr
      - isReturnResult
      - jobId
      - organisationId
      - organisationList
      - password
      - remoteAddress
      - returnAddress
      - roles
      - session
      - timeOut
      - user
      type: object
    CMDeleteProjectCmd:
      example:
        kbId: kbId
        jobId: jobId
        async: true
        organisationId: organisationId
        returnResult: true
        projectId: projectId
        isReturnResult: true
        returnAddress: returnAddress
        errorStr: errorStr
        timeOut: 0
      properties:
        organisationId:
          type: string
        kbId:
          type: string
        projectId:
          type: string
        jobId:
          type: string
        returnAddress:
          type: string
        errorStr:
          type: string
        timeOut:
          format: int64
          type: integer
        async:
          type: boolean
        isReturnResult:
          type: boolean
        returnResult:
          type: boolean
          writeOnly: true
      required:
      - async
      - errorStr
      - isReturnResult
      - jobId
      - kbId
      - organisationId
      - projectId
      - returnAddress
      - timeOut
      type: object
    uploadDocument_request:
      properties:
        file:
          description: the file to upload
          format: binary
          type: string
      required:
      - file
      type: object
    CMSliceConfig_query:
      oneOf:
      - $ref: '#/components/schemas/CMCompoundQuery'
      - $ref: '#/components/schemas/CMSimpleQuery'

