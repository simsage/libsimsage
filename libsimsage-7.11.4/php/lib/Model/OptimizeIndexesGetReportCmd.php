<?php
/**
 * OptimizeIndexesGetReportCmd
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SimSage REST API
 *
 * SimSage REST API
 *
 * The version of the OpenAPI document: 7.11.4
 * Contact: info@simsage.co.uk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OptimizeIndexesGetReportCmd Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OptimizeIndexesGetReportCmd implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OptimizeIndexesGetReportCmd';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'job_id' => 'string',
        'return_address' => 'string',
        'error_str' => 'string',
        'time_out' => 'int',
        'async' => 'bool',
        'is_return_result' => 'bool',
        'organisation_id' => 'string',
        'kb_id' => 'string',
        'id' => 'int',
        'number_of_shards' => 'int',
        'num_urls' => 'int',
        'index_set' => 'int',
        'num_urls_removed' => 'int',
        'total_offsets' => 'int',
        'metadata_item_count' => 'int',
        'number_of_total_indexes' => 'int',
        'num_optimized_indexes' => 'int',
        'num_indexes_removed' => 'int',
        'num_optimized_removed' => 'int',
        'num_indexes_up_to_date' => 'int',
        'byte_size' => 'int',
        'return_result' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'job_id' => null,
        'return_address' => null,
        'error_str' => null,
        'time_out' => 'int64',
        'async' => null,
        'is_return_result' => null,
        'organisation_id' => null,
        'kb_id' => null,
        'id' => 'int64',
        'number_of_shards' => 'int32',
        'num_urls' => 'int32',
        'index_set' => 'int32',
        'num_urls_removed' => 'int32',
        'total_offsets' => 'int64',
        'metadata_item_count' => 'int32',
        'number_of_total_indexes' => 'int32',
        'num_optimized_indexes' => 'int32',
        'num_indexes_removed' => 'int32',
        'num_optimized_removed' => 'int32',
        'num_indexes_up_to_date' => 'int32',
        'byte_size' => 'int64',
        'return_result' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'job_id' => false,
		'return_address' => false,
		'error_str' => false,
		'time_out' => false,
		'async' => false,
		'is_return_result' => false,
		'organisation_id' => false,
		'kb_id' => false,
		'id' => false,
		'number_of_shards' => false,
		'num_urls' => false,
		'index_set' => false,
		'num_urls_removed' => false,
		'total_offsets' => false,
		'metadata_item_count' => false,
		'number_of_total_indexes' => false,
		'num_optimized_indexes' => false,
		'num_indexes_removed' => false,
		'num_optimized_removed' => false,
		'num_indexes_up_to_date' => false,
		'byte_size' => false,
		'return_result' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'job_id' => 'jobId',
        'return_address' => 'returnAddress',
        'error_str' => 'errorStr',
        'time_out' => 'timeOut',
        'async' => 'async',
        'is_return_result' => 'isReturnResult',
        'organisation_id' => 'organisationId',
        'kb_id' => 'kbId',
        'id' => 'id',
        'number_of_shards' => 'numberOfShards',
        'num_urls' => 'numUrls',
        'index_set' => 'indexSet',
        'num_urls_removed' => 'numUrlsRemoved',
        'total_offsets' => 'totalOffsets',
        'metadata_item_count' => 'metadataItemCount',
        'number_of_total_indexes' => 'numberOfTotalIndexes',
        'num_optimized_indexes' => 'numOptimizedIndexes',
        'num_indexes_removed' => 'numIndexesRemoved',
        'num_optimized_removed' => 'numOptimizedRemoved',
        'num_indexes_up_to_date' => 'numIndexesUpToDate',
        'byte_size' => 'byteSize',
        'return_result' => 'returnResult'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'job_id' => 'setJobId',
        'return_address' => 'setReturnAddress',
        'error_str' => 'setErrorStr',
        'time_out' => 'setTimeOut',
        'async' => 'setAsync',
        'is_return_result' => 'setIsReturnResult',
        'organisation_id' => 'setOrganisationId',
        'kb_id' => 'setKbId',
        'id' => 'setId',
        'number_of_shards' => 'setNumberOfShards',
        'num_urls' => 'setNumUrls',
        'index_set' => 'setIndexSet',
        'num_urls_removed' => 'setNumUrlsRemoved',
        'total_offsets' => 'setTotalOffsets',
        'metadata_item_count' => 'setMetadataItemCount',
        'number_of_total_indexes' => 'setNumberOfTotalIndexes',
        'num_optimized_indexes' => 'setNumOptimizedIndexes',
        'num_indexes_removed' => 'setNumIndexesRemoved',
        'num_optimized_removed' => 'setNumOptimizedRemoved',
        'num_indexes_up_to_date' => 'setNumIndexesUpToDate',
        'byte_size' => 'setByteSize',
        'return_result' => 'setReturnResult'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'job_id' => 'getJobId',
        'return_address' => 'getReturnAddress',
        'error_str' => 'getErrorStr',
        'time_out' => 'getTimeOut',
        'async' => 'getAsync',
        'is_return_result' => 'getIsReturnResult',
        'organisation_id' => 'getOrganisationId',
        'kb_id' => 'getKbId',
        'id' => 'getId',
        'number_of_shards' => 'getNumberOfShards',
        'num_urls' => 'getNumUrls',
        'index_set' => 'getIndexSet',
        'num_urls_removed' => 'getNumUrlsRemoved',
        'total_offsets' => 'getTotalOffsets',
        'metadata_item_count' => 'getMetadataItemCount',
        'number_of_total_indexes' => 'getNumberOfTotalIndexes',
        'num_optimized_indexes' => 'getNumOptimizedIndexes',
        'num_indexes_removed' => 'getNumIndexesRemoved',
        'num_optimized_removed' => 'getNumOptimizedRemoved',
        'num_indexes_up_to_date' => 'getNumIndexesUpToDate',
        'byte_size' => 'getByteSize',
        'return_result' => 'getReturnResult'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('job_id', $data ?? [], null);
        $this->setIfExists('return_address', $data ?? [], null);
        $this->setIfExists('error_str', $data ?? [], null);
        $this->setIfExists('time_out', $data ?? [], null);
        $this->setIfExists('async', $data ?? [], null);
        $this->setIfExists('is_return_result', $data ?? [], null);
        $this->setIfExists('organisation_id', $data ?? [], null);
        $this->setIfExists('kb_id', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('number_of_shards', $data ?? [], null);
        $this->setIfExists('num_urls', $data ?? [], null);
        $this->setIfExists('index_set', $data ?? [], null);
        $this->setIfExists('num_urls_removed', $data ?? [], null);
        $this->setIfExists('total_offsets', $data ?? [], null);
        $this->setIfExists('metadata_item_count', $data ?? [], null);
        $this->setIfExists('number_of_total_indexes', $data ?? [], null);
        $this->setIfExists('num_optimized_indexes', $data ?? [], null);
        $this->setIfExists('num_indexes_removed', $data ?? [], null);
        $this->setIfExists('num_optimized_removed', $data ?? [], null);
        $this->setIfExists('num_indexes_up_to_date', $data ?? [], null);
        $this->setIfExists('byte_size', $data ?? [], null);
        $this->setIfExists('return_result', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['job_id'] === null) {
            $invalidProperties[] = "'job_id' can't be null";
        }
        if ($this->container['return_address'] === null) {
            $invalidProperties[] = "'return_address' can't be null";
        }
        if ($this->container['error_str'] === null) {
            $invalidProperties[] = "'error_str' can't be null";
        }
        if ($this->container['time_out'] === null) {
            $invalidProperties[] = "'time_out' can't be null";
        }
        if ($this->container['async'] === null) {
            $invalidProperties[] = "'async' can't be null";
        }
        if ($this->container['is_return_result'] === null) {
            $invalidProperties[] = "'is_return_result' can't be null";
        }
        if ($this->container['organisation_id'] === null) {
            $invalidProperties[] = "'organisation_id' can't be null";
        }
        if ($this->container['kb_id'] === null) {
            $invalidProperties[] = "'kb_id' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['number_of_shards'] === null) {
            $invalidProperties[] = "'number_of_shards' can't be null";
        }
        if ($this->container['num_urls'] === null) {
            $invalidProperties[] = "'num_urls' can't be null";
        }
        if ($this->container['index_set'] === null) {
            $invalidProperties[] = "'index_set' can't be null";
        }
        if ($this->container['num_urls_removed'] === null) {
            $invalidProperties[] = "'num_urls_removed' can't be null";
        }
        if ($this->container['total_offsets'] === null) {
            $invalidProperties[] = "'total_offsets' can't be null";
        }
        if ($this->container['metadata_item_count'] === null) {
            $invalidProperties[] = "'metadata_item_count' can't be null";
        }
        if ($this->container['number_of_total_indexes'] === null) {
            $invalidProperties[] = "'number_of_total_indexes' can't be null";
        }
        if ($this->container['num_optimized_indexes'] === null) {
            $invalidProperties[] = "'num_optimized_indexes' can't be null";
        }
        if ($this->container['num_indexes_removed'] === null) {
            $invalidProperties[] = "'num_indexes_removed' can't be null";
        }
        if ($this->container['num_optimized_removed'] === null) {
            $invalidProperties[] = "'num_optimized_removed' can't be null";
        }
        if ($this->container['num_indexes_up_to_date'] === null) {
            $invalidProperties[] = "'num_indexes_up_to_date' can't be null";
        }
        if ($this->container['byte_size'] === null) {
            $invalidProperties[] = "'byte_size' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets job_id
     *
     * @return string
     */
    public function getJobId()
    {
        return $this->container['job_id'];
    }

    /**
     * Sets job_id
     *
     * @param string $job_id job_id
     *
     * @return self
     */
    public function setJobId($job_id)
    {
        if (is_null($job_id)) {
            throw new \InvalidArgumentException('non-nullable job_id cannot be null');
        }
        $this->container['job_id'] = $job_id;

        return $this;
    }

    /**
     * Gets return_address
     *
     * @return string
     */
    public function getReturnAddress()
    {
        return $this->container['return_address'];
    }

    /**
     * Sets return_address
     *
     * @param string $return_address return_address
     *
     * @return self
     */
    public function setReturnAddress($return_address)
    {
        if (is_null($return_address)) {
            throw new \InvalidArgumentException('non-nullable return_address cannot be null');
        }
        $this->container['return_address'] = $return_address;

        return $this;
    }

    /**
     * Gets error_str
     *
     * @return string
     */
    public function getErrorStr()
    {
        return $this->container['error_str'];
    }

    /**
     * Sets error_str
     *
     * @param string $error_str error_str
     *
     * @return self
     */
    public function setErrorStr($error_str)
    {
        if (is_null($error_str)) {
            throw new \InvalidArgumentException('non-nullable error_str cannot be null');
        }
        $this->container['error_str'] = $error_str;

        return $this;
    }

    /**
     * Gets time_out
     *
     * @return int
     */
    public function getTimeOut()
    {
        return $this->container['time_out'];
    }

    /**
     * Sets time_out
     *
     * @param int $time_out time_out
     *
     * @return self
     */
    public function setTimeOut($time_out)
    {
        if (is_null($time_out)) {
            throw new \InvalidArgumentException('non-nullable time_out cannot be null');
        }
        $this->container['time_out'] = $time_out;

        return $this;
    }

    /**
     * Gets async
     *
     * @return bool
     */
    public function getAsync()
    {
        return $this->container['async'];
    }

    /**
     * Sets async
     *
     * @param bool $async async
     *
     * @return self
     */
    public function setAsync($async)
    {
        if (is_null($async)) {
            throw new \InvalidArgumentException('non-nullable async cannot be null');
        }
        $this->container['async'] = $async;

        return $this;
    }

    /**
     * Gets is_return_result
     *
     * @return bool
     */
    public function getIsReturnResult()
    {
        return $this->container['is_return_result'];
    }

    /**
     * Sets is_return_result
     *
     * @param bool $is_return_result is_return_result
     *
     * @return self
     */
    public function setIsReturnResult($is_return_result)
    {
        if (is_null($is_return_result)) {
            throw new \InvalidArgumentException('non-nullable is_return_result cannot be null');
        }
        $this->container['is_return_result'] = $is_return_result;

        return $this;
    }

    /**
     * Gets organisation_id
     *
     * @return string
     */
    public function getOrganisationId()
    {
        return $this->container['organisation_id'];
    }

    /**
     * Sets organisation_id
     *
     * @param string $organisation_id organisation_id
     *
     * @return self
     */
    public function setOrganisationId($organisation_id)
    {
        if (is_null($organisation_id)) {
            throw new \InvalidArgumentException('non-nullable organisation_id cannot be null');
        }
        $this->container['organisation_id'] = $organisation_id;

        return $this;
    }

    /**
     * Gets kb_id
     *
     * @return string
     */
    public function getKbId()
    {
        return $this->container['kb_id'];
    }

    /**
     * Sets kb_id
     *
     * @param string $kb_id kb_id
     *
     * @return self
     */
    public function setKbId($kb_id)
    {
        if (is_null($kb_id)) {
            throw new \InvalidArgumentException('non-nullable kb_id cannot be null');
        }
        $this->container['kb_id'] = $kb_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets number_of_shards
     *
     * @return int
     */
    public function getNumberOfShards()
    {
        return $this->container['number_of_shards'];
    }

    /**
     * Sets number_of_shards
     *
     * @param int $number_of_shards number_of_shards
     *
     * @return self
     */
    public function setNumberOfShards($number_of_shards)
    {
        if (is_null($number_of_shards)) {
            throw new \InvalidArgumentException('non-nullable number_of_shards cannot be null');
        }
        $this->container['number_of_shards'] = $number_of_shards;

        return $this;
    }

    /**
     * Gets num_urls
     *
     * @return int
     */
    public function getNumUrls()
    {
        return $this->container['num_urls'];
    }

    /**
     * Sets num_urls
     *
     * @param int $num_urls num_urls
     *
     * @return self
     */
    public function setNumUrls($num_urls)
    {
        if (is_null($num_urls)) {
            throw new \InvalidArgumentException('non-nullable num_urls cannot be null');
        }
        $this->container['num_urls'] = $num_urls;

        return $this;
    }

    /**
     * Gets index_set
     *
     * @return int
     */
    public function getIndexSet()
    {
        return $this->container['index_set'];
    }

    /**
     * Sets index_set
     *
     * @param int $index_set index_set
     *
     * @return self
     */
    public function setIndexSet($index_set)
    {
        if (is_null($index_set)) {
            throw new \InvalidArgumentException('non-nullable index_set cannot be null');
        }
        $this->container['index_set'] = $index_set;

        return $this;
    }

    /**
     * Gets num_urls_removed
     *
     * @return int
     */
    public function getNumUrlsRemoved()
    {
        return $this->container['num_urls_removed'];
    }

    /**
     * Sets num_urls_removed
     *
     * @param int $num_urls_removed num_urls_removed
     *
     * @return self
     */
    public function setNumUrlsRemoved($num_urls_removed)
    {
        if (is_null($num_urls_removed)) {
            throw new \InvalidArgumentException('non-nullable num_urls_removed cannot be null');
        }
        $this->container['num_urls_removed'] = $num_urls_removed;

        return $this;
    }

    /**
     * Gets total_offsets
     *
     * @return int
     */
    public function getTotalOffsets()
    {
        return $this->container['total_offsets'];
    }

    /**
     * Sets total_offsets
     *
     * @param int $total_offsets total_offsets
     *
     * @return self
     */
    public function setTotalOffsets($total_offsets)
    {
        if (is_null($total_offsets)) {
            throw new \InvalidArgumentException('non-nullable total_offsets cannot be null');
        }
        $this->container['total_offsets'] = $total_offsets;

        return $this;
    }

    /**
     * Gets metadata_item_count
     *
     * @return int
     */
    public function getMetadataItemCount()
    {
        return $this->container['metadata_item_count'];
    }

    /**
     * Sets metadata_item_count
     *
     * @param int $metadata_item_count metadata_item_count
     *
     * @return self
     */
    public function setMetadataItemCount($metadata_item_count)
    {
        if (is_null($metadata_item_count)) {
            throw new \InvalidArgumentException('non-nullable metadata_item_count cannot be null');
        }
        $this->container['metadata_item_count'] = $metadata_item_count;

        return $this;
    }

    /**
     * Gets number_of_total_indexes
     *
     * @return int
     */
    public function getNumberOfTotalIndexes()
    {
        return $this->container['number_of_total_indexes'];
    }

    /**
     * Sets number_of_total_indexes
     *
     * @param int $number_of_total_indexes number_of_total_indexes
     *
     * @return self
     */
    public function setNumberOfTotalIndexes($number_of_total_indexes)
    {
        if (is_null($number_of_total_indexes)) {
            throw new \InvalidArgumentException('non-nullable number_of_total_indexes cannot be null');
        }
        $this->container['number_of_total_indexes'] = $number_of_total_indexes;

        return $this;
    }

    /**
     * Gets num_optimized_indexes
     *
     * @return int
     */
    public function getNumOptimizedIndexes()
    {
        return $this->container['num_optimized_indexes'];
    }

    /**
     * Sets num_optimized_indexes
     *
     * @param int $num_optimized_indexes num_optimized_indexes
     *
     * @return self
     */
    public function setNumOptimizedIndexes($num_optimized_indexes)
    {
        if (is_null($num_optimized_indexes)) {
            throw new \InvalidArgumentException('non-nullable num_optimized_indexes cannot be null');
        }
        $this->container['num_optimized_indexes'] = $num_optimized_indexes;

        return $this;
    }

    /**
     * Gets num_indexes_removed
     *
     * @return int
     */
    public function getNumIndexesRemoved()
    {
        return $this->container['num_indexes_removed'];
    }

    /**
     * Sets num_indexes_removed
     *
     * @param int $num_indexes_removed num_indexes_removed
     *
     * @return self
     */
    public function setNumIndexesRemoved($num_indexes_removed)
    {
        if (is_null($num_indexes_removed)) {
            throw new \InvalidArgumentException('non-nullable num_indexes_removed cannot be null');
        }
        $this->container['num_indexes_removed'] = $num_indexes_removed;

        return $this;
    }

    /**
     * Gets num_optimized_removed
     *
     * @return int
     */
    public function getNumOptimizedRemoved()
    {
        return $this->container['num_optimized_removed'];
    }

    /**
     * Sets num_optimized_removed
     *
     * @param int $num_optimized_removed num_optimized_removed
     *
     * @return self
     */
    public function setNumOptimizedRemoved($num_optimized_removed)
    {
        if (is_null($num_optimized_removed)) {
            throw new \InvalidArgumentException('non-nullable num_optimized_removed cannot be null');
        }
        $this->container['num_optimized_removed'] = $num_optimized_removed;

        return $this;
    }

    /**
     * Gets num_indexes_up_to_date
     *
     * @return int
     */
    public function getNumIndexesUpToDate()
    {
        return $this->container['num_indexes_up_to_date'];
    }

    /**
     * Sets num_indexes_up_to_date
     *
     * @param int $num_indexes_up_to_date num_indexes_up_to_date
     *
     * @return self
     */
    public function setNumIndexesUpToDate($num_indexes_up_to_date)
    {
        if (is_null($num_indexes_up_to_date)) {
            throw new \InvalidArgumentException('non-nullable num_indexes_up_to_date cannot be null');
        }
        $this->container['num_indexes_up_to_date'] = $num_indexes_up_to_date;

        return $this;
    }

    /**
     * Gets byte_size
     *
     * @return int
     */
    public function getByteSize()
    {
        return $this->container['byte_size'];
    }

    /**
     * Sets byte_size
     *
     * @param int $byte_size byte_size
     *
     * @return self
     */
    public function setByteSize($byte_size)
    {
        if (is_null($byte_size)) {
            throw new \InvalidArgumentException('non-nullable byte_size cannot be null');
        }
        $this->container['byte_size'] = $byte_size;

        return $this;
    }

    /**
     * Gets return_result
     *
     * @return bool|null
     */
    public function getReturnResult()
    {
        return $this->container['return_result'];
    }

    /**
     * Sets return_result
     *
     * @param bool|null $return_result return_result
     *
     * @return self
     */
    public function setReturnResult($return_result)
    {
        if (is_null($return_result)) {
            throw new \InvalidArgumentException('non-nullable return_result cannot be null');
        }
        $this->container['return_result'] = $return_result;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


