# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.11.4
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, validator

class CMRedaction(BaseModel):
    """
    CMRedaction
    """
    redaction_type: StrictStr = Field(..., alias="redactionType")
    type_key: StrictStr = Field(..., alias="typeKey")
    value: StrictStr = Field(...)
    page: StrictInt = Field(...)
    height: Union[StrictFloat, StrictInt] = Field(...)
    left: Union[StrictFloat, StrictInt] = Field(...)
    top: Union[StrictFloat, StrictInt] = Field(...)
    width: Union[StrictFloat, StrictInt] = Field(...)
    __properties = ["redactionType", "typeKey", "value", "page", "height", "left", "top", "width"]

    @validator('redaction_type')
    def redaction_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('SEARCH', 'SEMANTIC', 'MANUAL'):
            raise ValueError("must be one of enum values ('SEARCH', 'SEMANTIC', 'MANUAL')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMRedaction:
        """Create an instance of CMRedaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMRedaction:
        """Create an instance of CMRedaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMRedaction.parse_obj(obj)

        _obj = CMRedaction.parse_obj({
            "redaction_type": obj.get("redactionType"),
            "type_key": obj.get("typeKey"),
            "value": obj.get("value"),
            "page": obj.get("page"),
            "height": obj.get("height"),
            "left": obj.get("left"),
            "top": obj.get("top"),
            "width": obj.get("width")
        })
        return _obj


