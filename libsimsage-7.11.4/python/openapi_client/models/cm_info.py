# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.11.4
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist
from openapi_client.models.cm_knowledge_base_info import CMKnowledgeBaseInfo

class CMInfo(BaseModel):
    """
    An Info record contains information for external UI systems wishing to interact with SimSage.  This information is for a single-organisation and contains all the knowledge-bases and their information for this organisation.  # noqa: E501
    """
    organisation_id: StrictStr = Field(..., alias="organisationId", description="the main organisation (its guid id)")
    kb_list: conlist(CMKnowledgeBaseInfo) = Field(..., alias="kbList", description="the list of knowledge-base information items that belong to the given organisation.")
    __properties = ["organisationId", "kbList"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMInfo:
        """Create an instance of CMInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in kb_list (list)
        _items = []
        if self.kb_list:
            for _item in self.kb_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['kbList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMInfo:
        """Create an instance of CMInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMInfo.parse_obj(obj)

        _obj = CMInfo.parse_obj({
            "organisation_id": obj.get("organisationId"),
            "kb_list": [CMKnowledgeBaseInfo.from_dict(_item) for _item in obj.get("kbList")] if obj.get("kbList") is not None else None
        })
        return _obj


