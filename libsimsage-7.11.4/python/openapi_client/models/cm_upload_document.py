# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.11.4
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from openapi_client.models.md_category import MDCategory

class CMUploadDocument(BaseModel):
    """
    An external document representation object.  # noqa: E501
    """
    object_type: StrictStr = Field(..., alias="objectType", description="the type of this class, just in case this object is encrypted")
    organisation_id: StrictStr = Field(..., alias="organisationId", description="the organisation (its guid id) this document should go into.")
    kb_id: StrictStr = Field(..., alias="kbId", description="the knowledge-base (its guid id) this document should go into.")
    sid: StrictStr = Field(..., description="the security-id (a guid) of the knowledge-base.  This is effectively the shared secret between SimSage and the external-crawler system.")
    source_id: StrictInt = Field(..., alias="sourceId", description="the source-id of this crawler (ie. the crawler's id) this document came from.")
    url: StrictStr = Field(..., description="A unique URL for this document.")
    mime_type: StrictStr = Field(..., alias="mimeType", description="The mime-type of this document, must be a known-datatype to SimSage.")
    puid: StrictStr = Field(..., description="The Pronom Unique ID for this document.")
    acls: StrictStr = Field(..., description="A list of security permission for this document.  Can be empty (ie. no security applied).")
    title: StrictStr = Field(..., description="The title of this document, can be empty.")
    author: StrictStr = Field(..., description="The author of this document, can be empty.")
    change_hash: StrictStr = Field(..., alias="changeHash", description="A unique hash-string identifying the change state of this document.  This can be any hash-function you choose.  SimSage uses the value to see if the content has changed since last.")
    content_hash: StrictStr = Field(..., alias="contentHash", description="A unique hash-string identifying the contents this document.  This can be any hash-function you choose.  SimSage uses this value for exact duplicate detection.")
    data: StrictStr = Field(..., description="the base64 encoded content of this document.  Must be prefixed with ';base64,', can be empty indicating the content wasn't valid.")
    binary_size: StrictInt = Field(..., alias="binarySize", description="the binary-size of the document in bytes if data is not set.")
    text: StrictStr = Field(..., description="the text content of the asset (if set).")
    created: StrictInt = Field(..., description="a unix-timestamp of the creation date-time of this document")
    last_modified: StrictInt = Field(..., alias="lastModified", description="a unix-timestamp of the last-modified date-time of this document")
    metadata: Dict[str, StrictStr] = Field(..., description="a series of name values for other metadata values found in the container of this document")
    categories: conlist(MDCategory) = Field(..., description="A list of special SimSage metadata categories for matching this document with.  Can be empty.")
    size: StrictInt = Field(..., description="The size of this document (the original) in bytes")
    template: StrictStr = Field(..., description="A render template for this document.  This is only appropriate for Database and RESTful type sources.")
    encrypted: StrictBool = Field(..., description="Do we need to add transport encryption")
    seed: StrictInt = Field(..., description="The seed used if encrypted")
    run_id: StrictStr = Field(..., alias="runId", description="the id (a guid) of the current 'go through the source once'.  This is a unique per-run identifier.")
    __properties = ["objectType", "organisationId", "kbId", "sid", "sourceId", "url", "mimeType", "puid", "acls", "title", "author", "changeHash", "contentHash", "data", "binarySize", "text", "created", "lastModified", "metadata", "categories", "size", "template", "encrypted", "seed", "runId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMUploadDocument:
        """Create an instance of CMUploadDocument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in categories (list)
        _items = []
        if self.categories:
            for _item in self.categories:
                if _item:
                    _items.append(_item.to_dict())
            _dict['categories'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMUploadDocument:
        """Create an instance of CMUploadDocument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMUploadDocument.parse_obj(obj)

        _obj = CMUploadDocument.parse_obj({
            "object_type": obj.get("objectType"),
            "organisation_id": obj.get("organisationId"),
            "kb_id": obj.get("kbId"),
            "sid": obj.get("sid"),
            "source_id": obj.get("sourceId"),
            "url": obj.get("url"),
            "mime_type": obj.get("mimeType"),
            "puid": obj.get("puid"),
            "acls": obj.get("acls"),
            "title": obj.get("title"),
            "author": obj.get("author"),
            "change_hash": obj.get("changeHash"),
            "content_hash": obj.get("contentHash"),
            "data": obj.get("data"),
            "binary_size": obj.get("binarySize"),
            "text": obj.get("text"),
            "created": obj.get("created"),
            "last_modified": obj.get("lastModified"),
            "metadata": obj.get("metadata"),
            "categories": [MDCategory.from_dict(_item) for _item in obj.get("categories")] if obj.get("categories") is not None else None,
            "size": obj.get("size"),
            "template": obj.get("template"),
            "encrypted": obj.get("encrypted"),
            "seed": obj.get("seed"),
            "run_id": obj.get("runId")
        })
        return _obj


