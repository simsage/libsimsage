# coding: utf-8

"""
    SimSage REST API

    SimSage REST API

    The version of the OpenAPI document: 7.11.4
    Contact: info@simsage.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist
from openapi_client.models.cm_document import CMDocument
from openapi_client.models.cm_document_bookmark import CMDocumentBookmark
from openapi_client.models.cm_document_folder import CMDocumentFolder
from openapi_client.models.cm_group import CMGroup
from openapi_client.models.cm_saved_search import CMSavedSearch
from openapi_client.models.cm_subscriptions import CMSubscriptions
from openapi_client.models.cm_user import CMUser
from openapi_client.models.cm_user_notification import CMUserNotification
from openapi_client.models.search_category import SearchCategory

class CMDUserDashboard(BaseModel):
    """
    A user's dashboard contents.  # noqa: E501
    """
    user_id: StrictStr = Field(..., alias="userId", description="the user's id, a guid")
    lock_list: conlist(CMDocument) = Field(..., alias="lockList", description="list of locked documents for this user")
    bookmark_list: conlist(CMDocumentBookmark) = Field(..., alias="bookmarkList", description="list of bookmarks for this user")
    subscriptions: CMSubscriptions = Field(...)
    notification_list: conlist(CMUserNotification) = Field(..., alias="notificationList", description="list of DMS notifications for this user")
    folder_root: CMDocumentFolder = Field(..., alias="folderRoot")
    saved_search_list: conlist(CMSavedSearch) = Field(..., alias="savedSearchList", description="list of saved searches for this user")
    category_list: conlist(SearchCategory) = Field(..., alias="categoryList", description="Search categories / metadata searching")
    user_list: conlist(CMUser) = Field(..., alias="userList", description="list of users for ACLs")
    group_list: conlist(CMGroup) = Field(..., alias="groupList", description="list of groups for ACLs")
    __properties = ["userId", "lockList", "bookmarkList", "subscriptions", "notificationList", "folderRoot", "savedSearchList", "categoryList", "userList", "groupList"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CMDUserDashboard:
        """Create an instance of CMDUserDashboard from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in lock_list (list)
        _items = []
        if self.lock_list:
            for _item in self.lock_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['lockList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in bookmark_list (list)
        _items = []
        if self.bookmark_list:
            for _item in self.bookmark_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['bookmarkList'] = _items
        # override the default output from pydantic by calling `to_dict()` of subscriptions
        if self.subscriptions:
            _dict['subscriptions'] = self.subscriptions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in notification_list (list)
        _items = []
        if self.notification_list:
            for _item in self.notification_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['notificationList'] = _items
        # override the default output from pydantic by calling `to_dict()` of folder_root
        if self.folder_root:
            _dict['folderRoot'] = self.folder_root.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in saved_search_list (list)
        _items = []
        if self.saved_search_list:
            for _item in self.saved_search_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['savedSearchList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in category_list (list)
        _items = []
        if self.category_list:
            for _item in self.category_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['categoryList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in user_list (list)
        _items = []
        if self.user_list:
            for _item in self.user_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['userList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in group_list (list)
        _items = []
        if self.group_list:
            for _item in self.group_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['groupList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CMDUserDashboard:
        """Create an instance of CMDUserDashboard from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CMDUserDashboard.parse_obj(obj)

        _obj = CMDUserDashboard.parse_obj({
            "user_id": obj.get("userId"),
            "lock_list": [CMDocument.from_dict(_item) for _item in obj.get("lockList")] if obj.get("lockList") is not None else None,
            "bookmark_list": [CMDocumentBookmark.from_dict(_item) for _item in obj.get("bookmarkList")] if obj.get("bookmarkList") is not None else None,
            "subscriptions": CMSubscriptions.from_dict(obj.get("subscriptions")) if obj.get("subscriptions") is not None else None,
            "notification_list": [CMUserNotification.from_dict(_item) for _item in obj.get("notificationList")] if obj.get("notificationList") is not None else None,
            "folder_root": CMDocumentFolder.from_dict(obj.get("folderRoot")) if obj.get("folderRoot") is not None else None,
            "saved_search_list": [CMSavedSearch.from_dict(_item) for _item in obj.get("savedSearchList")] if obj.get("savedSearchList") is not None else None,
            "category_list": [SearchCategory.from_dict(_item) for _item in obj.get("categoryList")] if obj.get("categoryList") is not None else None,
            "user_list": [CMUser.from_dict(_item) for _item in obj.get("userList")] if obj.get("userList") is not None else None,
            "group_list": [CMGroup.from_dict(_item) for _item in obj.get("groupList")] if obj.get("groupList") is not None else None
        })
        return _obj


